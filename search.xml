<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>日志框架 JUL</title>
    <url>/posts/626247823/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220316194438.603k442et1o0.webp" alt="微信图片_20220316194438"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h1><p>日志文件是用于记录系统操作事件的文件集合，可分为事件日志和消息日志。具有处理历史数据、诊断问题的追踪以及理解系统的活动等重要作用</p>
<p>在计算机中，日志文件是记录在操作系统或其他软件运行中发生的事件或在通信软件的不同用户之间的消息的文件。记录是保持日志的行为。在最简单的情况下，消息被写入单个日志文件</p>
<p><strong>日志的作用</strong></p>
<ul>
<li>调试</li>
</ul>
<p>在Java项目调试时，查看栈信息可以方便地知道当前程序的运行状态，输出的日志便于记录程序在之前的运行结果。如果你大量使用System.out或者System.err，这是一种最方便最有效的方法，但显得不够专业</p>
<ul>
<li>错误定位</li>
</ul>
<p>不要以为项目能正确跑起来就可以高枕无忧，项目在运行一段时候后，可能由于数据问题，网络问题，内存问题等出现异常。这时日志可以帮助开发或者运维人员快速定位错误位置，提出解决方案</p>
<ul>
<li>数据分析</li>
</ul>
<p>大数据的兴起，使得大量的日志分析成为可能，ELK也让日志分析门槛降低了很多。日志中蕴含了大量的用户数据，包括点击行为，兴趣偏好等，用户画像对于公司下一步的战略方向有一定指引作用</p>
<p><strong>最常见的普通日志</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.err.println();</span><br></pre></td></tr></table></figure>

<h3 id="主流的日志框架"><a href="#主流的日志框架" class="headerlink" title="主流的日志框架"></a>主流的日志框架</h3><p>日志实现（具体干活的）：JUL（java util logging）、logback、log4j、log4j2</p>
<p>日志门面（指定规则的）：JCL（Jakarta Commons Logging）、slf4j（ Simple Logging Facade for Java）</p>
<h2 id="JUL-日志框架"><a href="#JUL-日志框架" class="headerlink" title="JUL 日志框架"></a>JUL 日志框架</h2><p>JUL全称Java util Logging是java原生的日志框架，使用时不需要另外引用第三方类库，相对其他日志框 架使用方便，学习简单，能够在小型应用中灵活使用</p>
<p><code>Loggers</code> 被称为记录器，应用程序通过获取Logger对象，调用其API来发布日志信息。Logger 通常时应用程序访问日志系统的入口程序</p>
<p><code>Appenders</code> 也被称为Handlers，每个Logger都会关联一组Handlers，Logger会将日志交给关联 Handlers处理，由Handlers负责将日志做记录。Handlers在此是一个抽象，其具体的实现决定了 日志记录的位置可以是控制台、文件、网络上的其他日志服务或操作系统日志等</p>
<p><code>Layouts</code> 也被称为Formatters，它负责对日志事件中的数据进行转换和格式化。Layouts决定了 数据在一条日志记录中的最终形式</p>
<p><code>Level</code> 每条日志消息都有一个关联的日志级别。该级别粗略指导了日志消息的重要性和紧迫，我 可以将Level和Loggers，Appenders做关联以便于我们过滤消息</p>
<p><code>Filters</code> 过滤器，根据需要定制哪些信息会被记录，哪些信息会被放过</p>
<p><strong>总结</strong></p>
<p>用户使用Logger来进行日志记录，Logger持有若干个Handler，日志的输出操作是由Handler完成的。 在Handler在输出日志前，会经过Filter的过滤，判断哪些日志级别过滤放行哪些拦截，Handler会将日志内容输出到指定位置（日志文件、控制台等）。Handler在输出日志时会使用Layout，将输出内容进行排版</p>
<h3 id="日志的级别"><a href="#日志的级别" class="headerlink" title="日志的级别"></a>日志的级别</h3><p>jul中定义的日志级别，从上述例子中我们也看到使用info和warning打印出的日志有不同的前缀，通过给日志设置不同的级别可以清晰的从日志中区分出哪些是基本信息，哪些是调试信息，哪些是严重的异常</p>
<ul>
<li>java.util.logging.Level中定义了日志的级别</li>
</ul>
<p><code>server</code> 最高值</p>
<p><code>warning</code> </p>
<p><code>info</code> 默认级别</p>
<p><code>config</code></p>
<p><code>fine</code></p>
<p><code>finer</code></p>
<p><code>finest</code> 最低值</p>
<p><code>OFF</code> 可用来关闭日志记录</p>
<p><code>ALL</code> 启用所有消息的日志记录</p>
<h3 id="Logger之间的父子关系"><a href="#Logger之间的父子关系" class="headerlink" title="Logger之间的父子关系"></a>Logger之间的父子关系</h3><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/JUL%E7%9A%84Logger%E7%9A%84%E7%88%B6%E5%AD%90%E5%85%B3%E7%B3%BB.4j2xkheea9a0.webp" alt="JUL的Logger的父子关系"></p>
<p>JUL中Logger之间存在父子关系，这种父子关系通过树状结构存储，JUL在初始化时会创建一个顶层 RootLogger作为所有Logger父Logger，存储上作为树状结构的根节点。并父子关系通过名称来关联。默认子Logger会继承父Logger的属性</p>
<h3 id="常用的转换符"><a href="#常用的转换符" class="headerlink" title="常用的转换符"></a>常用的转换符</h3><table>
<thead>
<tr>
<th>转换符</th>
<th>详细说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>%s</strong></td>
<td><strong>字符串类型</strong></td>
</tr>
<tr>
<td>%c</td>
<td>字符类型</td>
</tr>
<tr>
<td>%b</td>
<td>布尔类型</td>
</tr>
<tr>
<td><strong>%d（十进制）</strong></td>
<td><strong>整数类型</strong></td>
</tr>
<tr>
<td>%x（十六进制）</td>
<td>整数类型（十六进制）</td>
</tr>
<tr>
<td>%o</td>
<td>整数类型（八进制）</td>
</tr>
<tr>
<td><strong>%f</strong></td>
<td><strong>浮点类型</strong></td>
</tr>
<tr>
<td>%a</td>
<td>十六进制浮点类型</td>
</tr>
<tr>
<td>%e</td>
<td>指数类型</td>
</tr>
<tr>
<td>%n</td>
<td>换行符</td>
</tr>
<tr>
<td>%tx</td>
<td>日期与时间类型（x代表不同的日期与时间转换符)</td>
</tr>
</tbody></table>
<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><table>
<thead>
<tr>
<th>标志</th>
<th>说明</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>为正数或者负数添加符号，因为一般整数不会主动加符号</td>
<td>(“%+d”,15)</td>
<td>+15</td>
</tr>
<tr>
<td>0</td>
<td>数字前面补0，用于对齐</td>
<td>(“%04d”, 99)</td>
<td>0099</td>
</tr>
<tr>
<td>空格</td>
<td>在整数之前添加指定数量的空格</td>
<td>(“%4d”, 99)</td>
<td>99</td>
</tr>
<tr>
<td>,</td>
<td>以“,”对数字分组(常用显示金额)</td>
<td>(“%,f”, 9999.99)</td>
<td>9,999.990000</td>
</tr>
<tr>
<td>(</td>
<td>使用括号包含负数</td>
<td>(“%(f”, -99.99)</td>
<td>(99.990000)</td>
</tr>
</tbody></table>
<h3 id="日期处理"><a href="#日期处理" class="headerlink" title="日期处理"></a>日期处理</h3><table>
<thead>
<tr>
<th>标志</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>c</td>
<td>包括全部日期和时间信息</td>
<td>周四 10月 21 14:52:10 GMT+08:00 2021</td>
</tr>
<tr>
<td>F</td>
<td>年-月-日”格式</td>
<td>2021-10-21</td>
</tr>
<tr>
<td>D</td>
<td>月/日/年”格式</td>
<td>10/21/21</td>
</tr>
<tr>
<td>r</td>
<td>HH:MM:SS PM”格式（12时制）</td>
<td>02:53:20 下午</td>
</tr>
<tr>
<td>T</td>
<td>HH:MM:SS”格式（24时制）</td>
<td>14:53:39</td>
</tr>
<tr>
<td>R</td>
<td>HH:MM”格式（24时制）</td>
<td>14:53</td>
</tr>
<tr>
<td>b</td>
<td>月份本地化</td>
<td>0月</td>
</tr>
<tr>
<td>y</td>
<td>两位的年</td>
<td>21</td>
</tr>
<tr>
<td>Y</td>
<td>四位的年</td>
<td>2021</td>
</tr>
<tr>
<td>m</td>
<td>月</td>
<td>10</td>
</tr>
<tr>
<td>d</td>
<td>日</td>
<td>21</td>
</tr>
<tr>
<td>H</td>
<td>24小时制的时</td>
<td>14</td>
</tr>
<tr>
<td>I</td>
<td>12小时制的时</td>
<td>2</td>
</tr>
<tr>
<td>M</td>
<td>分</td>
<td>57</td>
</tr>
<tr>
<td>S</td>
<td>秒</td>
<td>46</td>
</tr>
<tr>
<td>s</td>
<td>秒为单位的时间戳</td>
<td>1634799527</td>
</tr>
<tr>
<td>p</td>
<td>上午还是下午</td>
<td>下午</td>
</tr>
</tbody></table>
<h3 id="JUL配置"><a href="#JUL配置" class="headerlink" title="JUL配置"></a>JUL配置</h3><ul>
<li>JULTest</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JULTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//类加载时读取配置文件</span></span><br><span class="line">        LogManager logManager = LogManager.getLogManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//寻找配置文件</span></span><br><span class="line">        InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="string">&quot;logger.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            将配置文件流添加至logManager中</span></span><br><span class="line">            logManager.readConfiguration(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(JULTest.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJuc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭默认配置</span></span><br><span class="line">        LOGGER.setUseParentHandlers(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动添加自己的Handler   ConsoleHandler控制台处理器</span></span><br><span class="line">        ConsoleHandler consoleHandler = <span class="keyword">new</span> ConsoleHandler();</span><br><span class="line">        consoleHandler.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        <span class="comment">//将Handler的级别设置为全部显示</span></span><br><span class="line">        consoleHandler.setLevel(Level.ALL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动添加自己的Handler   FileHandler 文件处理器</span></span><br><span class="line">        FileHandler fileHandler = <span class="keyword">new</span> FileHandler(<span class="string">&quot;D:/logs/JULTest.log&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        fileHandler.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        fileHandler.setLevel(Level.ALL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将配置的Handler添加至LOGGER</span></span><br><span class="line">        LOGGER.addHandler(consoleHandler);</span><br><span class="line"></span><br><span class="line">        LOGGER.addHandler(fileHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置日志显示级别</span></span><br><span class="line">        LOGGER.setLevel(Level.ALL);</span><br><span class="line"></span><br><span class="line">        LOGGER.severe(<span class="string">&quot;server: 严重&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.warning(<span class="string">&quot;warning: 警告&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;info: 信息&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.fine(<span class="string">&quot;fine: JUL无显示 因为Leve 低于 info JDK默认级别配置的是info及info以上&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.finer(<span class="string">&quot;finer: JUL无显示 因为Leve 低于 info JDK默认级别配置的是info及info以上&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.finest(<span class="string">&quot;finest: JUL无显示 因为Leve 低于 info JDK默认级别配置的是info及info以上&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParent</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//任何一个Logger都是单例的 名字相同的只有一个</span></span><br><span class="line">        Logger logger = Logger.getLogger(JULTest.class.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(LOGGER.getName());</span></span><br><span class="line"><span class="comment">//        System.out.println(LOGGER == logger);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////        Logger parent = logger.getParent();</span></span><br><span class="line"><span class="comment">////</span></span><br><span class="line"><span class="comment">////        System.out.println(parent);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Logger对象</span></span><br><span class="line">        Logger logger1 = Logger.getLogger(<span class="string">&quot;com.dream&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭继承的配置</span></span><br><span class="line">        logger1.setUseParentHandlers(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//控制台配置</span></span><br><span class="line">        ConsoleHandler consoleHandler = <span class="keyword">new</span> ConsoleHandler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置格式</span></span><br><span class="line">        consoleHandler.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给控制台设置级别</span></span><br><span class="line">        consoleHandler.setLevel(Level.ALL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">///将处理器添加至logger对象</span></span><br><span class="line">        logger1.addHandler(consoleHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给logger对象设置级别</span></span><br><span class="line">        logger1.setLevel(Level.ALL);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;info&quot;</span>);</span><br><span class="line"></span><br><span class="line">        logger.fine(<span class="string">&quot;fine&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        parent = logger.getParent();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(parent);</span></span><br><span class="line"><span class="comment">//        System.out.println(logger1.getParent());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readConfig</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Logger logger = Logger.getLogger(JULTest.class.getName());</span><br><span class="line"></span><br><span class="line">        logger.warning(<span class="string">&quot;warning&quot;</span>);</span><br><span class="line">        logger.finer(<span class="string">&quot;finer&quot;</span>);</span><br><span class="line">        logger.fine(<span class="string">&quot;fine&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Integer result = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.throwing(JULTest.class.getName(),<span class="string">&quot;readConfig&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Logger.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根配置</span></span><br><span class="line"><span class="attr">handlers</span>= <span class="string">java.util.logging.ConsoleHandler</span></span><br><span class="line"><span class="meta">.level</span>= <span class="string">FINE</span></span><br><span class="line"><span class="comment"># 自定义配置</span></span><br><span class="line"><span class="meta">com.dream.xiaobo.handlers</span> = <span class="string">java.util.logging.ConsoleHandler,java.util.logging.FileHandler</span></span><br><span class="line"><span class="meta">com.dream.xiaobo.level</span> = <span class="string">FINER</span></span><br><span class="line"><span class="comment"># 不继承根的配置</span></span><br><span class="line"><span class="meta">com.dream.xiaobo.useParentHandlers</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件日志配置</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.pattern</span> = <span class="string">D:/logs/java%u.log</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.limit</span> = <span class="string">50000</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.count</span> = <span class="string">1</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.maxLocks</span> = <span class="string">100</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.formatter</span> = <span class="string">java.util.logging.SimpleFormatter</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.level</span> = <span class="string">FINER</span></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.level</span> = <span class="string">FINER</span></span><br><span class="line"></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.formatter</span> = <span class="string">java.util.logging.SimpleFormatter</span></span><br></pre></td></tr></table></figure>

<h2 id="Log4j-日志框架"><a href="#Log4j-日志框架" class="headerlink" title="Log4j 日志框架"></a>Log4j 日志框架</h2><p>Log4j是Apache下的一款开源的日志框架</p>
<h3 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h3><ul>
<li>pom</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.13&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(Log4jTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog4j</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化默认配置</span></span><br><span class="line">        BasicConfigurator.configure();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 日志记录输出</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;hello log4j&quot;</span>);</span><br><span class="line">        <span class="comment">// 日志级别</span></span><br><span class="line">        LOGGER.fatal(<span class="string">&quot;fatal&quot;</span>); <span class="comment">// 严重错误，一般会造成系统崩溃和终止运行</span></span><br><span class="line">        LOGGER.error(<span class="string">&quot;error&quot;</span>); <span class="comment">// 错误信息，但不会影响系统运行</span></span><br><span class="line">        LOGGER.warn(<span class="string">&quot;warn&quot;</span>); <span class="comment">// 警告信息，可能会发生问题</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;info&quot;</span>); <span class="comment">// 程序运行信息，数据库的连接、网络、IO操作等</span></span><br><span class="line">        LOGGER.debug(<span class="string">&quot;debug&quot;</span>); <span class="comment">// 调试信息，一般在开发阶段使用，记录程序的变量、参数等</span></span><br><span class="line">        LOGGER.trace(<span class="string">&quot;trace&quot;</span>); <span class="comment">// 追踪信息，记录程序的所有流程信息</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>fatal</code> 指出每个严重的错误事件将会导致应用程序的退出。</p>
<p><code>error</code> 指出虽然发生错误事件，但仍然不影响系统的继续运行。</p>
<p><code>warn</code> 表明会出现潜在的错误情形。</p>
<p><code>info</code> 一般和在粗粒度级别上，强调应用程序的运行全程。</p>
<p><code>debug</code> 一般用于细粒度级别上，对调试应用程序非常有帮助。</p>
<p><code>trace</code> 是程序追踪，可以用于输出程序运行中的变量，显示执行的流程。</p>
<p>两个特殊的级别：OFF，可用来关闭日志记录。 ALL，启用所有消息的日志记录</p>
<p>一般情况下，我们只使用4个级别，优先级从高到低为 ERROR &gt; WARN &gt; INFO &gt; DEBUG</p>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>Log4J 主要由 Loggers (日志记录器)、Appenders（输出端）和 Layout（日志格式化器）组成。其中 Loggers 控制日志的输出级别与日志是否输出；Appenders 指定日志的输出方式（输出到控制台、文件 等）；Layout 控制日志信息的输出格式</p>
<p> Log4J 主要由 Loggers (日志记录器)、Appenders（输出端）和 Layout（日志格式化器）组成。其中 Loggers 控制日志的输出级别与日志是否输出；Appenders 指定日志的输出方式（输出到控制台、文件 等）；Layout 控制日志信息的输出格式</p>
<h4 id="Loggers"><a href="#Loggers" class="headerlink" title="Loggers"></a>Loggers</h4><p>日志记录器：负责收集处理日志记录，Logger的名字大小写敏感，其命名有继承机制：例如：name为com.dream.xiaobo.Log4j的logger会继承 name为com.dream.xiaobo的logger，和JUL一致。</p>
<p>Log4J中有一个特殊的logger叫做“root”，他是所有logger的根，也就意味着其他所有的logger都会直接 或者间接地继承自root。root logger可以用Logger.getRootLogger()方法获取。 JUL也有一个名为.的根</p>
<h3 id="Appenders"><a href="#Appenders" class="headerlink" title="Appenders"></a>Appenders</h3><p>Appender和JUL的Handler很像，用来指定日志输出到哪个地方，可以同时指定日志的输出目的地。Log4j 常用的输出目的地 有以下几种：</p>
<table>
<thead>
<tr>
<th>输出端类型</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ConsoleAppender</td>
<td>将日志输出到控制台</td>
</tr>
<tr>
<td>FileAppender</td>
<td>将日志输出到文件中</td>
</tr>
<tr>
<td>DailyRollingFileAppender</td>
<td>将日志输出到一个日志文件，并且每天输出到一个新的文件</td>
</tr>
<tr>
<td>RollingFileAppender</td>
<td>将日志输出到一个日志文件，并且每天输出到一个新的文件</td>
</tr>
<tr>
<td>RollingFileAppender</td>
<td>把日志信息保存到数据库中</td>
</tr>
</tbody></table>
<h4 id="log4j占位符"><a href="#log4j占位符" class="headerlink" title="log4j占位符"></a>log4j占位符</h4><p>%m 输出代码中指定的日志信息</p>
<p>%p 输出日志级别，及 DEBUG、INFO 等</p>
<p>%n 换行符（Windows平台的换行符为 “\n”，Unix 平台为 “\n”）</p>
<p>%r 输出自应用启动到输出该 log 信息耗费的毫秒数</p>
<p>%c 输出打印语句所属的类的全名</p>
<p>%t 输出产生该日志的线程全名</p>
<p>%d 输出服务器当前时间，默认为 ISO8601，也可以指定格式，如：%d{yyyy年MM月dd日HH:mm:ss}</p>
<p>%l 输出日志时间发生的位置，包括类名、线程、及在代码中的行数。如：Test.main(Test.java:10)</p>
<p>%F 输出日志消息产生时所在的文件名称</p>
<p>%L 输出代码中的行号</p>
<blockquote>
<p>%% 输出一个 “%” 字符 可以在 % 与字符之间加上修饰符来控制最小宽度、最大宽度和文本的对其方式。如：</p>
</blockquote>
<p>%5c 输出category名称，最小宽度是5，category&lt;5，默认的情况下右对齐</p>
<p>%-5c 输出category名称，最小宽度是5，category&lt;5，”-“号指定左对齐,会有空格</p>
<p>%.5c 输出category名称，最大宽度是5，category&gt;5，就会将左边多出的字符截掉，&lt;5不会有空格</p>
<p>%20.30c category名称&lt;20补空格，并且右对齐，&gt;30字符，就从左边交远销出的字符截掉</p>
<p><strong>例</strong></p>
<p>%-d{yyyy-MM-dd HH:mm:ss} [%t:%r] -[%p] %m%n</p>
<p>打印：日期 [线程:毫秒数] - [日志级别] - 日志信息 换行</p>
<h3 id="log4j代码整理"><a href="#log4j代码整理" class="headerlink" title="log4j代码整理"></a>log4j代码整理</h3><ul>
<li>log4jTest</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4jTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(Log4jTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog4j</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化默认配置</span></span><br><span class="line"><span class="comment">//        BasicConfigurator.configure();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加源码自带配置</span></span><br><span class="line"><span class="comment">//        LOGGER.addAppender(new ConsoleAppender(new PatternLayout(&quot;%r [%t] %p %c %x - %m%n&quot;)));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //模拟源码手动添加配置</span></span><br><span class="line"><span class="comment">//        Logger rootLogger = Logger.getRootLogger();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //构建ConsoleAppender</span></span><br><span class="line"><span class="comment">//        ConsoleAppender consoleAppender = new ConsoleAppender();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //ConsoleAppender 需要一个输出流 System.out输出字节流 PrintWriter输出字符流</span></span><br><span class="line"><span class="comment">//        consoleAppender.setWriter(new PrintWriter(System.out));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //需要一个layout</span></span><br><span class="line"><span class="comment">//        Layout layout = new PatternLayout(&quot;%-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t:%r] -[%p] %m%n&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //将layout组件添加至consoleAppender</span></span><br><span class="line"><span class="comment">//        consoleAppender.setLayout(layout);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //将consoleAppender组件添加至rootLogger</span></span><br><span class="line"><span class="comment">//        rootLogger.addAppender(consoleAppender);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        JDBCAppender jdbcAppender = new JDBCAppender();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        jdbcAppender.setDriver(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="comment">//        jdbcAppender.setURL(&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&quot;);</span></span><br><span class="line"><span class="comment">//        jdbcAppender.setUser(&quot;root&quot;);</span></span><br><span class="line"><span class="comment">//        jdbcAppender.setPassword(&quot;xiaobo&quot;);</span></span><br><span class="line"><span class="comment">//        jdbcAppender.setSql(&quot;INSERT INTO log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message) values(&#x27;xiaobo&#x27;,&#x27;%d&#123;yyyy-MM-ddHH:mm:ss&#125;&#x27;,&#x27;%p&#x27;,&#x27;%c&#x27;,&#x27;%F&#x27;,&#x27;%t&#x27;,&#x27;%L&#x27;,&#x27;%l&#x27;,&#x27;%m&#x27;)&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        rootLogger.addAppender(jdbcAppender);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 日志记录输出</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;hello log4j&quot;</span>);</span><br><span class="line">        <span class="comment">// 日志级别</span></span><br><span class="line">        LOGGER.fatal(<span class="string">&quot;fatal&quot;</span>); <span class="comment">// 严重错误，一般会造成系统崩溃和终止运行</span></span><br><span class="line">        LOGGER.error(<span class="string">&quot;error&quot;</span>); <span class="comment">// 错误信息，但不会影响系统运行</span></span><br><span class="line">        LOGGER.warn(<span class="string">&quot;warn&quot;</span>); <span class="comment">// 警告信息，可能会发生问题</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;info&quot;</span>); <span class="comment">// 程序运行信息，数据库的连接、网络、IO操作等</span></span><br><span class="line">        LOGGER.debug(<span class="string">&quot;debug&quot;</span>); <span class="comment">// 调试信息，一般在开发阶段使用，记录程序的变量、参数等</span></span><br><span class="line">        LOGGER.trace(<span class="string">&quot;trace&quot;</span>); <span class="comment">// 追踪信息，记录程序的所有流程信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;hello log4j&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log4jConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 日志记录输出</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;hello log4j&quot;</span>);</span><br><span class="line">        <span class="comment">// 日志级别</span></span><br><span class="line">        LOGGER.fatal(<span class="string">&quot;fatal&quot;</span>); <span class="comment">// 严重错误，一般会造成系统崩溃和终止运行</span></span><br><span class="line">        LOGGER.error(<span class="string">&quot;error&quot;</span>); <span class="comment">// 错误信息，但不会影响系统运行</span></span><br><span class="line">        LOGGER.warn(<span class="string">&quot;warn&quot;</span>); <span class="comment">// 警告信息，可能会发生问题</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;info&quot;</span>); <span class="comment">// 程序运行信息，数据库的连接、网络、IO操作等</span></span><br><span class="line">        LOGGER.debug(<span class="string">&quot;debug&quot;</span>); <span class="comment">// 调试信息，一般在开发阶段使用，记录程序的变量、参数等</span></span><br><span class="line">        LOGGER.trace(<span class="string">&quot;trace&quot;</span>); <span class="comment">// 追踪信息，记录程序的所有流程信息</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>log4j.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set root logger level to DEBUG and its only appender to A1.</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">ALL, A1, DailyRolling</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 控制台 Appender</span></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 自定义配置</span></span><br><span class="line"><span class="meta">log4j.logger.com.dream.xiaobo</span> =<span class="string">DEBUG, A1, DailyRolling</span></span><br><span class="line"><span class="comment"># 关闭继承根结点的配置</span></span><br><span class="line"><span class="meta">log4j.additivity.com.dream.xiaobo</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># PatternLayout  布局</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">%-4r [%t] %-5p %c %x - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 文件 Appender</span></span><br><span class="line"><span class="meta">log4j.appender.FILE</span> = <span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.FILE.File</span> = <span class="string">D:/logs/log4j.log</span></span><br><span class="line"><span class="meta">log4j.appender.FILE.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.FILE.append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.FILE.layout.ConversionPattern</span>=<span class="string">%-4r [%t] %-5p %c %x - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># JDBC Appender</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC</span> = <span class="string">org.apache.log4j.jdbc.JDBCAppender</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.Driver</span> = <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.URL</span> = <span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.User</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.Password</span> = <span class="string">xiaobo</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.Sql</span> = <span class="string">INSERT INTO log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message) values(&#x27;xiaobo&#x27;,&#x27;%d&#123;yyyy-MM-ddHH:mm:ss&#125;&#x27;,&#x27;%p&#x27;,&#x27;%c&#x27;,&#x27;%F&#x27;,&#x27;%t&#x27;,&#x27;%L&#x27;,&#x27;%l&#x27;,&#x27;%m&#x27;)</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.layout.ConversionPattern</span>=<span class="string">%-4r [%t] %-5p %c %x - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 滚动生成文件日志 Appender RollingFileAppender 通过文件大小来控制的</span></span><br><span class="line"><span class="meta">log4j.appender.RollingFile</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.RollingFile.File</span> = <span class="string">D:/logs/log4j.log</span></span><br><span class="line"><span class="meta">log4j.appender.RollingFile.append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.RollingFile.maximumFileSize</span> = <span class="string">1</span></span><br><span class="line"><span class="meta">log4j.appender.RollingFile.maxBackupIndex</span> = <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.RollingFile.layout</span> =<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.RollingFile.layout.ConversionPattern</span>=<span class="string">%-4r [%t] %-5p %c %x - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 滚动生成文件日志 Appender DailyRollingFileAppender 通过日期来控制的</span></span><br><span class="line"><span class="meta">log4j.appender.DailyRolling</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.DailyRolling.File</span> = <span class="string">D:/logs/log4j.log</span></span><br><span class="line"><span class="meta">log4j.appender.DailyRolling.append</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.DailyRolling.layout</span> =<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.DailyRolling.layout.ConversionPattern</span>=<span class="string">%-4r [%t] %-5p %c %x - %m%n</span></span><br></pre></td></tr></table></figure>


<p><strong>本篇文章 仅供自己学习整理 方便阅读 参考b站某UP主 如有侵权 通知即删</strong></p>
<p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>日志框架</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构 树</title>
    <url>/posts/1720144195/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220310235141.2oe31pjh01m0.webp" alt="微信图片_20220310235141"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="《大话数据结构》-阅读整理"><a href="#《大话数据结构》-阅读整理" class="headerlink" title="《大话数据结构》 阅读整理"></a>《大话数据结构》 阅读整理</h1><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><p>n(n&gt;=0)个结点的有限集</p>
<p>有且仅有一个特定的称为根的结点</p>
<p>当n &gt; 1时 其余结点可分为m(m&gt;0)个互不相交的有限集T1,T2,T3…Tm<br>其中每一个集合本身又是一棵树 并且称为根的子树</p>
<h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>n&gt;0时根结点是唯一的 不可能存在多个根结点</p>
<p>m&gt;0时 子树的个数没有限制 但一定是互不相交的</p>
<h4 id="结点的分类"><a href="#结点的分类" class="headerlink" title="结点的分类"></a>结点的分类</h4><ul>
<li>结点的度</li>
</ul>
<p>结点拥有的子树数</p>
<ul>
<li>叶结点/终端结点</li>
</ul>
<p>度为0的结点</p>
<ul>
<li>分支结点/非终端结点/内部结点(除根结点外)</li>
</ul>
<p>度不为0的结点</p>
<ul>
<li>树的度</li>
</ul>
<p>树内各结点的度的最大值</p>
<h4 id="结点的关系"><a href="#结点的关系" class="headerlink" title="结点的关系"></a>结点的关系</h4><ul>
<li>结点的孩子/孩子的双亲</li>
</ul>
<p>结点的子树的根</p>
<ul>
<li>兄弟结点</li>
</ul>
<p>同一双亲的孩子之间</p>
<ul>
<li>结点的祖先</li>
</ul>
<p>从根到该结点所经分支上的所有结点</p>
<ul>
<li>结点的子孙</li>
</ul>
<p>以某一结点为根的子树中的任一结点</p>
<ul>
<li>结点的层次</li>
</ul>
<p>从根开始定义起 根为第一层 根的孩子为第二层</p>
<ul>
<li>堂兄弟</li>
</ul>
<p>双亲在同一层的结点</p>
<ul>
<li>树的深度/高度</li>
</ul>
<p>树中结点的最大层次</p>
<ul>
<li>有序树</li>
</ul>
<p>将树中结点的各子树看成从左至右是有次序的 不能互换的</p>
<ul>
<li>无序树</li>
</ul>
<p>将树中结点的各子树看成从左至右是有次序的 能互换的</p>
<ul>
<li>森林</li>
</ul>
<p>m(m&gt;=0)棵树互不相交的树的集合</p>
<p>对树中每个结点而言 子树的集合</p>
<h4 id="线性结构与树结构的对比"><a href="#线性结构与树结构的对比" class="headerlink" title="线性结构与树结构的对比"></a>线性结构与树结构的对比</h4><blockquote>
<p>线性结构</p>
</blockquote>
<ul>
<li>第一个数据元素</li>
</ul>
<p>无前驱</p>
<ul>
<li>最后一个数据元素</li>
</ul>
<p>无后继</p>
<ul>
<li>中间元素</li>
</ul>
<p>一个前驱一个后继</p>
<blockquote>
<p>树结构</p>
</blockquote>
<ul>
<li><p>根结点<br>无双亲 唯一</p>
</li>
<li><p>叶结点</p>
</li>
</ul>
<p>无孩子 可以多个</p>
<ul>
<li>中间结点</li>
</ul>
<p>一个双亲 多个孩子</p>
<h3 id="数的存储结构"><a href="#数的存储结构" class="headerlink" title="数的存储结构"></a>数的存储结构</h3><h4 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h4><p>每个结点中 附设一个指示器指示其双亲结点在数组中的位置</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//树结构数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> TElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双亲表示法 </span></span><br><span class="line"><span class="comment">//结点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PTNode</span> &#123;</span></span><br><span class="line">	<span class="comment">//结点数据</span></span><br><span class="line">	TElemType data;</span><br><span class="line">	<span class="comment">//双亲位置</span></span><br><span class="line">	<span class="keyword">int</span> parent;</span><br><span class="line">&#125;PTNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//树结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="comment">//结点数组</span></span><br><span class="line">	PTNode nodes[MAX_TREE_SIZE];</span><br><span class="line">	<span class="comment">//根的位置和结点数</span></span><br><span class="line">	<span class="keyword">int</span> r, n;</span><br><span class="line">&#125;PTree;</span><br></pre></td></tr></table></figure>

<h4 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a>孩子表示法</h4><p>把每个孩子结点排列起来 以单链表做存储结构 则n个结点有n个孩子链表 如果是叶子结点则此链表为空 然后n个头指针又组成一个线性表 采用顺序存储结构 存放进一个一维数组</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//孩子结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//孩子结点数据</span></span><br><span class="line">	<span class="keyword">int</span> child;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针域</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span>* <span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;*ChildPtr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表头结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//表头数据域</span></span><br><span class="line">	TElemType data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//孩子指针域</span></span><br><span class="line">	ChildPtr firstchild;</span><br><span class="line"></span><br><span class="line">&#125;CTBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//结点数组</span></span><br><span class="line">	CTBox nodes[MAX_TREE_SIZE];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根的位置和结点数</span></span><br><span class="line">	<span class="keyword">int</span> r, n;</span><br><span class="line"></span><br><span class="line">&#125;CTree;</span><br></pre></td></tr></table></figure>

<ul>
<li>多重链表表示法</li>
</ul>
<p>每个结点有多个指针域 其中每个指针指向一课子树的根结点</p>
<h4 id="孩子兄弟表示法"><a href="#孩子兄弟表示法" class="headerlink" title="孩子兄弟表示法"></a>孩子兄弟表示法</h4><p>任意一棵树 他的结点的第一个孩子如果存在就是唯一的 他的右兄弟如果存在也是唯一的 因此设置两个指针 分别指向该结点的第一个孩子和此结点的右兄弟</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//孩子兄弟表示法</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//数据域</span></span><br><span class="line">	TElemType data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//孩子结点指针域 和 兄弟结点指针域</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span>* <span class="title">firstchild</span>, * <span class="title">rightsib</span>;</span></span><br><span class="line">&#125;CSNode, *CSTree;</span><br></pre></td></tr></table></figure>

<h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><p>n(n&gt;=0)个结点的有限集合 该集合或者为空集(称为空二叉树) 或者由一个根结点和两课互不相交的 分别称为根结点的左子树和右子树的二叉树组成</p>
<h4 id="二叉树的特点"><a href="#二叉树的特点" class="headerlink" title="二叉树的特点"></a>二叉树的特点</h4><p>每个结点最多有两棵子树 所以二叉树中不存在度大于2的结点</p>
<p>左子树和右子树是有顺序的 次序不能任意颠倒</p>
<p>即使树中某结点只有一棵子树 也要区分它是左子树还是右子树</p>
<h4 id="二叉树的五种基本形态"><a href="#二叉树的五种基本形态" class="headerlink" title="二叉树的五种基本形态"></a>二叉树的五种基本形态</h4><p>空二叉树</p>
<p>只有一个根结点</p>
<p>根结点只有左子树</p>
<p>根结点只有右子树</p>
<p>根结点即有左子树又有右子树</p>
<h4 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h4><blockquote>
<p>斜树</p>
</blockquote>
<ul>
<li>左斜树</li>
</ul>
<p>所有结点都只有左子树的二叉树</p>
<ul>
<li>右斜树</li>
</ul>
<p>所有结点都只有右子树的二叉树</p>
<blockquote>
<p>满二叉树</p>
</blockquote>
<p>有一棵二叉树 如果所有分支结点都存在左子树和右子树 并且所有叶子都在同一层上</p>
<ul>
<li>满二叉树的特点</li>
</ul>
<p>叶子只能出现在最下一层</p>
<p>非叶子结点的度一定是2</p>
<p>在同样深度的二叉树中 满二叉树的结点个数最多 叶子树最多</p>
<blockquote>
<p>完全二叉树</p>
</blockquote>
<p>对一棵具有n个结点的二叉树按层序编号 如果编号为i(1 &lt;= i &lt;= n) 的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同</p>
<ul>
<li>二叉树的特点</li>
</ul>
<p>叶子结点只能出现在最下两层</p>
<p>最下层的叶子一定集中在左部连续位置</p>
<p>倒数第二层 若有叶子结点 一定都在右部连续位置</p>
<p>如果节点度为1 则该结点只有左孩子 既不存在只有右子树的情况</p>
<p>同样结点数的二叉树 完全二叉树深度最小</p>
<h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ul>
<li>性质1</li>
</ul>
<p>在二叉树的第i层至多有 2 ^ (i - 1)个结点(i &gt;= 1)</p>
<ul>
<li>性质2</li>
</ul>
<p>深度为k的二叉树至多有2^k - 1个结点(k &gt;= 1)</p>
<ul>
<li>性质3</li>
</ul>
<p>对任何一棵二叉树T 如果其终端结点数为N0 度为2的结点数为N2 则N0 = N2 + 1</p>
<ul>
<li>性质4</li>
</ul>
<p>具有n个结点的完全二叉树的深度为(log2 n)  + 1</p>
<ul>
<li>性质5</li>
</ul>
<p>如果一棵树有n个结点的完全二叉树的结点按层序编号 对任一结点j(1 &lt;= i &lt;= n)</p>
<h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><h4 id="二叉树的顺序存储结构"><a href="#二叉树的顺序存储结构" class="headerlink" title="二叉树的顺序存储结构"></a>二叉树的顺序存储结构</h4><p>就是将树的结点按照根结点层次的向下 然后层次按照从左至右依次存入到数组当中</p>
<h4 id="二叉链表"><a href="#二叉链表" class="headerlink" title="二叉链表"></a>二叉链表</h4><p>每个结点最多有两个孩子 所以设计一个数据域和两个指针域</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> TElemType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//树的链式存储</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//结点数据</span></span><br><span class="line">	TElemType data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//左孩子 和 右孩子指针</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>* <span class="title">lchild</span>, * <span class="title">rchild</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;BiTNode,*BiTree; </span><br></pre></td></tr></table></figure>

<h3 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h3><h4 id="二叉树遍历原理"><a href="#二叉树遍历原理" class="headerlink" title="二叉树遍历原理"></a>二叉树遍历原理</h4><p>从根结点出发 按照某种次序依次访问二叉树中的所有结点 使得每个结点被访问一次且仅被访问一次</p>
<h4 id="二叉树遍历方法"><a href="#二叉树遍历方法" class="headerlink" title="二叉树遍历方法"></a>二叉树遍历方法</h4><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86.2clsx0tdb78k.webp" alt="二叉树遍历"></p>
<ul>
<li>前序遍历</li>
</ul>
<p>若二叉树为空 则空操作返回 否则先访问根结点 然后前序遍历左子树 在前序遍历右子树</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验树是否为空</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == T) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//显示当前结点</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;data);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//递归 遍历左子树</span></span><br><span class="line">	PreOrderTraverse(T-&gt;lchild);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//递归 遍历右子树</span></span><br><span class="line">	PreOrderTraverse(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A-&gt;B-&gt;D-&gt;G-&gt;H-&gt;C-&gt;E-&gt;I-&gt;F</p>
<ul>
<li>中序遍历</li>
</ul>
<p>若二叉树为空 则空操作返回 否则从根结点开始(注意并不是先访问根结点)中序遍历根结点的左子树 然后是访问根结点 最后中序遍历右子树</p>
<p>G-&gt;D-&gt;H-&gt;B-&gt;A-&gt;E-&gt;I-&gt;C-&gt;F</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验树是否为空</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == T) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//递归 遍历左子树</span></span><br><span class="line">	InOrderTraverse(T-&gt;lchild);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//显示结点数据</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;data);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//递归 遍历右子树</span></span><br><span class="line">	InOrderTraverse(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>后序遍历</li>
</ul>
<p>若二叉树为空 则空操作返回 否则从左到右先叶子后结点的方式遍历访问左右子树 最后是访问根结点</p>
<p>G-&gt;H-&gt;D-&gt;B-&gt;I-&gt;E-&gt;F-&gt;C-&gt;A</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验树是否为空</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == T) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//递归 遍历左子树</span></span><br><span class="line">	PostOrderTraverse(T-&gt;lchild);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//递归 遍历右子树</span></span><br><span class="line">	PostOrderTraverse(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//显示结点数据</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;data);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>层次遍历<br>若二叉树为空 则空操作返回 否则从树的第一层 也就是根结点开始访问 从上而下逐层遍历 在同一层中 按从左到右的顺序对结点逐个访问</li>
</ul>
<p>A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F-&gt;G-&gt;H-&gt;I</p>
<h4 id="推导遍历结果"><a href="#推导遍历结果" class="headerlink" title="推导遍历结果"></a>推导遍历结果</h4><p>根据前序遍历 中序遍历 后序遍历原则推导即可</p>
<p>已知前序遍历和后序遍历 是不能确定一棵二叉树的</p>
<h3 id="二叉树的建立"><a href="#二叉树的建立" class="headerlink" title="二叉树的建立"></a>二叉树的建立</h3><p>先将二叉树的每个结点的空指针引入一个虚结点 其值为一个特定的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree* T)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//假设字符</span></span><br><span class="line">	TElemType ch;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//输入的数据</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, ch);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符数组</span></span><br><span class="line">	ch = str[index++];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//假设输入为#时为空结点</span></span><br><span class="line">	<span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">		*T = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//为结点开辟内存空间</span></span><br><span class="line">		*T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(T));</span><br><span class="line"></span><br><span class="line">		<span class="comment">//终止程序</span></span><br><span class="line">		<span class="keyword">if</span> (!*T) &#123;</span><br><span class="line">			<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//将字符数据存入结点数据域</span></span><br><span class="line">		(*T)-&gt;data = ch;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//递归 创建左孩子</span></span><br><span class="line">		CreateBiTree(&amp;(*T)-&gt;lchild);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//递归 创建右孩子</span></span><br><span class="line">		CreateBiTree(&amp;(*T)-&gt;rchild);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><h4 id="线索二叉树的原理"><a href="#线索二叉树的原理" class="headerlink" title="线索二叉树的原理"></a>线索二叉树的原理</h4><p>指向前驱和后继的指针称为线索</p>
<h4 id="线索表"><a href="#线索表" class="headerlink" title="线索表"></a>线索表</h4><p>加上线索的二叉链表</p>
<h4 id="线索二叉树-1"><a href="#线索二叉树-1" class="headerlink" title="线索二叉树"></a>线索二叉树</h4><p>与之对应的数即是线索二叉树</p>
<h4 id="线索化"><a href="#线索化" class="headerlink" title="线索化"></a>线索化</h4><p>对二叉树以某种次序遍历使其变为线索二叉树的过程</p>
<p>线索化的过程就是在遍历的过程中修改空指针的过程</p>
<h4 id="给结点添加两个标识"><a href="#给结点添加两个标识" class="headerlink" title="给结点添加两个标识"></a>给结点添加两个标识</h4><ul>
<li>ltag</li>
</ul>
<p>为0时指向该结点的左孩子</p>
<p>为1时指向该结点的前驱</p>
<ul>
<li>rtag</li>
</ul>
<p>为0时指向该结点的右孩子</p>
<p>为1时指向该结点的后继</p>
<h4 id="线索二叉树的实现"><a href="#线索二叉树的实现" class="headerlink" title="线索二叉树的实现"></a>线索二叉树的实现</h4><p>线索二叉树结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="comment">//变量转换</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Link = 0 表示指向左右孩子指针 Thread = 1表示指向前驱或后继线索</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span>Link,Thread&#125; PointerTag;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉线索存储结点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//数据域</span></span><br><span class="line">	TElemType data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结点数据 左右孩子指针</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span>* <span class="title">lchild</span>, * <span class="title">rchild</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//左标志</span></span><br><span class="line">	PointerTag LTag;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//右标志</span></span><br><span class="line">	PointerTag RTag;</span><br><span class="line"></span><br><span class="line">&#125;BiThrNode,*BiThrTree;</span><br></pre></td></tr></table></figure>

<p>从头结点开始遍历</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量 始终指向刚刚访问过的结点</span></span><br><span class="line">BiThrTree pre;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历进行中序线索化 从头结点开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//p结点不为空</span></span><br><span class="line">	<span class="keyword">if</span> (p) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//递归遍历左子结点</span></span><br><span class="line">		InThreading(p-&gt;lchild);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//p的左下一结点不为空 就是 没有左孩子</span></span><br><span class="line">		<span class="keyword">if</span> (!p-&gt;lchild) &#123;</span><br><span class="line">			<span class="comment">//将标识设置为 Thread</span></span><br><span class="line">			p-&gt;LTag = Thread;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//将p的左孩子指向前驱</span></span><br><span class="line">			p-&gt;lchild = pre;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//p的右下一结点不为空 就是 没有右孩子</span></span><br><span class="line">		<span class="keyword">if</span> (!pre-&gt;rchild) &#123;</span><br><span class="line">			<span class="comment">//将标识设置为Thread</span></span><br><span class="line">			pre-&gt;RTag = Thread;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//将p的右孩子指向后继</span></span><br><span class="line">			pre-&gt;rchild = p;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//让全局变量pre 始终指向p</span></span><br><span class="line">		pre = p;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//递归遍历右孩子</span></span><br><span class="line">		InThreading(p-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从最后一个结点开始遍历</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中序线索二叉树遍历 从最后结点开始</span></span><br><span class="line"><span class="function">Status <span class="title">InOrderTraverse_Thr</span><span class="params">(BiThrTree T)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义结点p</span></span><br><span class="line">	BiThrTree p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将结点p指向头结点的左孩子</span></span><br><span class="line">	p = T-&gt;lchild;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//左孩子不是头结点即可</span></span><br><span class="line">	<span class="keyword">while</span> (p != T) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//左孩子的有前驱</span></span><br><span class="line">		<span class="keyword">while</span>(p-&gt;LTag == Link)&#123;</span><br><span class="line">		</span><br><span class="line">			<span class="comment">//继续寻找下一个左孩子</span></span><br><span class="line">			p = p-&gt;lchild;</span><br><span class="line">		</span><br><span class="line">			<span class="comment">//显示结点</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;data);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//p有子孩子 并且 p的右孩子后继不是头结点 </span></span><br><span class="line">			<span class="keyword">while</span> (p-&gt;RTag == Thread &amp;&amp; p-&gt;rchild != T) &#123;</span><br><span class="line"></span><br><span class="line">				<span class="comment">//继续寻找下一个子孩子</span></span><br><span class="line">				p = p-&gt;rchild;</span><br><span class="line"></span><br><span class="line">				<span class="comment">//显示数据</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;data);</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//将p指回头结点</span></span><br><span class="line">			p = p-&gt;rchild;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确状态码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="树-森林-二叉树-的关系"><a href="#树-森林-二叉树-的关系" class="headerlink" title="树 森林 二叉树 的关系"></a>树 森林 二叉树 的关系</h3><h4 id="树转换为二叉树"><a href="#树转换为二叉树" class="headerlink" title="树转换为二叉树"></a>树转换为二叉树</h4><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%881%EF%BC%89.2zcfl5jim080.webp" alt="树转二叉树（1）"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%882%EF%BC%89.1oqeqmcgm9c0.webp" alt="树转二叉树（2）"></p>
<h4 id="森林转换为二叉树"><a href="#森林转换为二叉树" class="headerlink" title="森林转换为二叉树"></a>森林转换为二叉树</h4><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A3%AE%E6%9E%97%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%881%EF%BC%89.e2bgahcr65k.webp" alt="森林转二叉树（1）"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A3%AE%E6%9E%97%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%882%EF%BC%89.5g3vvddeep00.webp" alt="森林转二叉树（2）"></p>
<h4 id="二叉树转换为树"><a href="#二叉树转换为树" class="headerlink" title="二叉树转换为树"></a>二叉树转换为树</h4><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%A0%91%EF%BC%881%EF%BC%89.729fdcxooto0.webp" alt="二叉树转树（1）"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%A0%91%EF%BC%882%EF%BC%89.6g6ffgzlpo80.webp" alt="二叉树转树（2）"></p>
<h4 id="二叉树转换为森林"><a href="#二叉树转换为森林" class="headerlink" title="二叉树转换为森林"></a>二叉树转换为森林</h4><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%A3%AE%E6%9E%97%EF%BC%881%EF%BC%89.2gsy1dgsmsw0.webp" alt="二叉树转森林（1）"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%A3%AE%E6%9E%97%EF%BC%882%EF%BC%89.3kfhpmmxvv20.webp" alt="二叉树转森林（2）"></p>
<h4 id="树与森林的遍历"><a href="#树与森林的遍历" class="headerlink" title="树与森林的遍历"></a>树与森林的遍历</h4><blockquote>
<p>树的遍历</p>
</blockquote>
<ul>
<li>后根遍历</li>
</ul>
<p>先依次后根遍历每棵子树 然后在访问根结点</p>
<ul>
<li>先根遍历树</li>
</ul>
<p>先访问树的根结点 然后依次先根遍历根的每棵子树</p>
<p>数的先根遍历和后根遍历完全可以借用二叉树的前序遍历和中序遍历的算法来实现</p>
<blockquote>
<p>森林的遍历</p>
</blockquote>
<ul>
<li>前序遍历</li>
</ul>
<p>先访问森林中第一棵树的根结点 然后再依次先根遍历每棵子树 在依次用同样方式遍历除去第一棵树的剩余树构成的森林</p>
<ul>
<li>后序遍历</li>
</ul>
<p>先访问森林中第一棵树 后根遍历的方式遍历每棵子树 然后在访问根结点 再依次用同样方式遍历除去第一棵树的剩余树构成的森林</p>
<h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><h4 id="哈夫曼树的定义"><a href="#哈夫曼树的定义" class="headerlink" title="哈夫曼树的定义"></a>哈夫曼树的定义</h4><ul>
<li>路径长度</li>
</ul>
<p>从树中一个结点到另一个结点之间的分支构成两个结点之间的路径 路径上的分支目</p>
<ul>
<li>树的路径长度</li>
</ul>
<p>从树根到每一结点的路径长度之和</p>
<ul>
<li>哈夫曼树</li>
</ul>
<p>带权路径长度WPL最小的二叉树</p>
<p>结点带权 * 结点的路径长度<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%B8%A6%E6%9D%83.441obvsdwoo0.webp" alt="哈夫曼树带权"></p>
<ul>
<li>求哈夫曼树</li>
</ul>
<p>简单点说： 权值最小的依次向大的权值拼接</p>
<ul>
<li>哈夫曼编码</li>
</ul>
<p>设需要编码的字符集为{d1,d2,…dn} 各个字符在电文中出现的次数或频率集合为{w1,w2,…wn} 以d1,d2,…dn作为叶子结点 以w1,w2…wn作为相应叶子结点的权值来构造一棵哈夫曼树 规定哈夫曼树的左分支代表0 右分支代表1 则从根节点到叶子结点所经过的路径分支组成的0和1的序列便为该结点对应符的编码 </p>
<p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构 栈和队列</title>
    <url>/posts/2240375813/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E8%88%B9.p0v2y8gtuz4.webp" alt="船"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="《大话数据结构》-阅读整理"><a href="#《大话数据结构》-阅读整理" class="headerlink" title="《大话数据结构》 阅读整理"></a>《大话数据结构》 阅读整理</h1><h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><h3 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>栈是限定仅在表尾进行插入和删除操作的线性表</p>
<h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>允许插入和删除的一端称为栈顶 另一端称为栈底</p>
<p>不含任何数据元素的栈称为空栈</p>
<p>后进先出 LIFO结构</p>
<p>栈的插入操作叫做进栈 压栈 入栈</p>
<p>栈的删除操作叫做 出栈 弹栈</p>
<h3 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h3><h4 id="顺序栈的定义"><a href="#顺序栈的定义" class="headerlink" title="顺序栈的定义"></a>顺序栈的定义</h4><p>定义一个top变量用来存放栈顶元素的位置</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="comment">//存放的数据</span></span><br><span class="line">	SElemType data[MAXSIZE];</span><br><span class="line">	<span class="comment">//栈顶指针</span></span><br><span class="line">	<span class="keyword">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure>

<h4 id="顺序栈的入栈"><a href="#顺序栈的入栈" class="headerlink" title="顺序栈的入栈"></a>顺序栈的入栈</h4><p>从栈顶添加元素 头指针上移</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//压栈</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack *s, SElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//栈满 因为栈顶指针等于了最大空间</span></span><br><span class="line">	<span class="keyword">if</span> (s-&gt;top == MAXSIZE - <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//返回错误状态码</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//栈顶指针后移</span></span><br><span class="line">	s-&gt;top++;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将元素插入到栈顶</span></span><br><span class="line">	s-&gt;data[s-&gt;top] = e;</span><br><span class="line">	<span class="comment">//返回正确状态码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="顺序栈的出栈"><a href="#顺序栈的出栈" class="headerlink" title="顺序栈的出栈"></a>顺序栈的出栈</h4><p>从栈顶元素移除元素 头指针下移</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack* s, SElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//栈空</span></span><br><span class="line">	<span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="comment">//返回错误状态码</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将删除的元素赋值给e</span></span><br><span class="line">	e = s-&gt;data[s-&gt;top];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//栈顶指针下移</span></span><br><span class="line">	s-&gt;top--;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确状态码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="两栈共享空间"><a href="#两栈共享空间" class="headerlink" title="两栈共享空间"></a>两栈共享空间</h3><h4 id="出发点"><a href="#出发点" class="headerlink" title="出发点"></a>出发点</h4><p>让一个栈的栈底为数组的始端 下标为0出 另一个栈为数组的末端 下标的数组长度为n-1 增加元素 两端向中间延伸</p>
<ul>
<li>栈满</li>
</ul>
<p>栈二为空 栈一 top1 == n-1 栈一满</p>
<p>栈一为空 栈二 top2 == 0 栈二满</p>
<p>两栈见面 top1 + 1 = top2</p>
<h4 id="共享栈的定义"><a href="#共享栈的定义" class="headerlink" title="共享栈的定义"></a>共享栈的定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//空间栈结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="comment">//栈数据</span></span><br><span class="line">	SElemType data[MAXSIZE];</span><br><span class="line">	<span class="comment">//栈一的栈顶指针</span></span><br><span class="line">	<span class="keyword">int</span> top1;</span><br><span class="line">	<span class="comment">//栈二的栈顶指针</span></span><br><span class="line">	<span class="keyword">int</span> top2;</span><br><span class="line">&#125;SqDoubleStack;</span><br></pre></td></tr></table></figure>

<h4 id="共享栈的入栈"><a href="#共享栈的入栈" class="headerlink" title="共享栈的入栈"></a>共享栈的入栈</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//s链表 e操作元素 stackNumber 哪个栈 压栈</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqDoubleStack* s, SElemType e, <span class="keyword">int</span> stackNumber)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//栈满</span></span><br><span class="line">	<span class="keyword">if</span> (s-&gt;top1 + <span class="number">1</span> == s-&gt;top2) &#123;</span><br><span class="line">		<span class="comment">//返回错误状态码</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//第一个栈插入</span></span><br><span class="line">	<span class="keyword">if</span> (stackNumber == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//先将栈顶指针上移后存入数据元素</span></span><br><span class="line">		s-&gt;data[++s-&gt;top1] = e;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//第二个栈插入</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (stackNumber == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="comment">//先将栈顶指针下移后存入数据元素</span></span><br><span class="line">		s-&gt;data[--s-&gt;top2] = e;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确状态码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="共享栈的出栈"><a href="#共享栈的出栈" class="headerlink" title="共享栈的出栈"></a>共享栈的出栈</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqDoubleStack* s, SElemType e, <span class="keyword">int</span> stackNumber)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//第一个栈</span></span><br><span class="line">	<span class="keyword">if</span> (stackNumber == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//栈空</span></span><br><span class="line">		<span class="keyword">if</span> (s-&gt;top1 == <span class="number">-1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> ERROR;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//现将栈顶元素赋值给e后下移</span></span><br><span class="line">		e = s-&gt;data[s-&gt;top1--];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//第二个栈</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (stackNumber == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="comment">//栈空</span></span><br><span class="line">		<span class="keyword">if</span> (s-&gt;top2 == MAXSIZE) &#123;</span><br><span class="line">			<span class="keyword">return</span> ERROR;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//现将栈顶元素赋值给e后下移</span></span><br><span class="line">		e = s-&gt;data[s-&gt;top2++];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>栈顶放在单链表的头部</p>
<p>通常情况下不存在栈满情况 除非内存已经没有可使用的空间了</p>
<p>top == null 说明空栈</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个单链表结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>&#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//链表数据域</span></span><br><span class="line">	SElemType data;</span><br><span class="line">	<span class="comment">//链表指针域</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>* <span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;StackNode,*LinkStackPtr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个栈顶指针指向单链表头结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//栈顶指针</span></span><br><span class="line">	LinkStackPtr top;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//栈元素数</span></span><br><span class="line">	<span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">&#125;LinkStack;</span><br></pre></td></tr></table></figure>

<h4 id="链栈的入栈"><a href="#链栈的入栈" class="headerlink" title="链栈的入栈"></a>链栈的入栈</h4><p>开辟一块内存空间给一个新结点 将数据赋值给新节点以及头指针指向新结点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//压栈 进栈</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(LinkStack* S, SElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//开辟一块内存空间赋值给s结点</span></span><br><span class="line">	LinkStackPtr s = (LinkStackPtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackNode));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将插入的数据存入s的数据域</span></span><br><span class="line">	s-&gt;data = e;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//s的指针域指向栈的栈顶指针</span></span><br><span class="line">	s-&gt;next = S-&gt;top;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将栈顶指针移动将s结点设置为栈顶指针</span></span><br><span class="line">	S-&gt;top = s;</span><br><span class="line">	<span class="comment">//栈内元素++</span></span><br><span class="line">	S-&gt;count++;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确状态码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链栈的出栈"><a href="#链栈的出栈" class="headerlink" title="链栈的出栈"></a>链栈的出栈</h4><p>将头指针指向下一结点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹栈 出栈</span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(LinkStack* S, SElemType* e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义结点p</span></span><br><span class="line">	LinkStackPtr p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断栈是否为空</span></span><br><span class="line">	<span class="keyword">if</span> (StackEmpty(*S)) &#123;</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将栈顶元素赋值给e</span></span><br><span class="line">	*e = S-&gt;top-&gt;data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将栈顶指针指向的结点存放到p结点中</span></span><br><span class="line">	p = S-&gt;top;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将栈顶指针 指向栈顶指针的下一个结点</span></span><br><span class="line">	S-&gt;top = S-&gt;top-&gt;next;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//释放之前栈顶指针向的结点</span></span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//栈内元素 - 1</span></span><br><span class="line">	S-&gt;count--;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确状态码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果栈的使用过程中元素变化不可预料最好使用链栈 反之顺序栈</p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h4 id="递归定义"><a href="#递归定义" class="headerlink" title="递归定义"></a>递归定义</h4><p>把一个直接调用自己或通过一系列的调用语句间接地调用自己的函数</p>
<p>每个递归定义必须至少有一个条件 满足时递归不再进行 不再引用自身而是返回值退出</p>
<h4 id="经典的菲波那切数列"><a href="#经典的菲波那切数列" class="headerlink" title="经典的菲波那切数列"></a>经典的菲波那切数列</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fbi</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> i == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> fbi(i - <span class="number">1</span>) + fbi(i - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;递归现实菲波那切数列\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, fbi(i));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="栈的应用（四则运算表达式求值）"><a href="#栈的应用（四则运算表达式求值）" class="headerlink" title="栈的应用（四则运算表达式求值）"></a>栈的应用（四则运算表达式求值）</h3><h4 id="后缀（逆波兰）表示法"><a href="#后缀（逆波兰）表示法" class="headerlink" title="后缀（逆波兰）表示法"></a>后缀（逆波兰）表示法</h4><p>原式(中缀表达式)：9+(3 - 1) * 3 + 10 / 2</p>
<p>后缀表达式：9 3 1 - 3 * + 10 2 / +</p>
<p>所有的符号都在要运算数字的后面</p>
<h4 id="后缀表达式计算结果"><a href="#后缀表达式计算结果" class="headerlink" title="后缀表达式计算结果"></a>后缀表达式计算结果</h4><p>从左到右遍历表达式的每个数字和符号 遇到是数字就进栈 遇到符号就将处于站定两个数字出栈 进行计算 运算结果进栈 一直到最终获得结果</p>
<h4 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h4><p>从左到右遍历中缀表达式的每个数字和符号 若是数字就输出 即成为后缀表达式的一部分 若是符号 则判断其与栈顶符号的优先级 是右括号或优先级不高于栈顶符号(乘除优先加减) 则栈顶元素依次出栈并输出 并将当前符号进栈 一直到最终输出后缀表达式为止</p>
<h3 id="队列的定义"><a href="#队列的定义" class="headerlink" title="队列的定义"></a>队列的定义</h3><p>只允许在一端进行插入操作 而在另一端进行删除操作的线性表</p>
<h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><p>先进先出的线性表 FIFO</p>
<p>允许插入的一端称为队尾 允许删除的一端称为队头</p>
<h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><h4 id="队列顺序存储的不足"><a href="#队列顺序存储的不足" class="headerlink" title="队列顺序存储的不足"></a>队列顺序存储的不足</h4><p>就是当出队是后面的都要动 时间复杂度为O(n)</p>
<p>当前面有空位置时后面却已经满了 无法入队<br>这种现象称作 假溢出</p>
<h4 id="循环队列的定义"><a href="#循环队列的定义" class="headerlink" title="循环队列的定义"></a>循环队列的定义</h4><p>头尾相接的顺序存储结构称为循环队列</p>
<h4 id="循环队列的判断条件"><a href="#循环队列的判断条件" class="headerlink" title="循环队列的判断条件"></a>循环队列的判断条件</h4><p>设置一个标志量flag 当front == rear 且flag = 0时为空队列<br>当front == rear  且 flag = 1时为队列满</p>
<p>当队列为空 条件是front == rear 队列满时 保留一个元素空间<br>队列满的条件是 (rear + 1) % QueueSize == front</p>
<ul>
<li>队列长度通用公式</li>
</ul>
<p>(rear - front + QueueSize) % QueueSize</p>
<h4 id="循环队列顺序结构定义"><a href="#循环队列顺序结构定义" class="headerlink" title="循环队列顺序结构定义"></a>循环队列顺序结构定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	QElemType data[MAXSIZE];<span class="comment">//队列数据</span></span><br><span class="line">	<span class="keyword">int</span> front;<span class="comment">//头指针</span></span><br><span class="line">	<span class="keyword">int</span> rear;<span class="comment">//尾指针</span></span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure>

<h4 id="循环队列初始化"><a href="#循环队列初始化" class="headerlink" title="循环队列初始化"></a>循环队列初始化</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//队列初始化</span></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue* Q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//头指针指向0位置</span></span><br><span class="line">	Q-&gt;front = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//尾指针指向0位置</span></span><br><span class="line">	Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="循环队列长度"><a href="#循环队列长度" class="headerlink" title="循环队列长度"></a>循环队列长度</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回队列的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(SqQueue *Q)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//队列长度算法</span></span><br><span class="line">	<span class="keyword">return</span> (Q-&gt;rear - Q-&gt;front + MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="循环队列入队"><a href="#循环队列入队" class="headerlink" title="循环队列入队"></a>循环队列入队</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(SqQueue *Q,QElemType e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//队列满</span></span><br><span class="line">	<span class="keyword">if</span> ((Q-&gt;rear + <span class="number">1</span>) % MAXSIZE == Q-&gt;front) &#123;</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//入队数据赋值</span></span><br><span class="line">	Q-&gt;data[Q-&gt;rear] = e;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//尾指针后移一位</span></span><br><span class="line">	Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确代码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="循环队列出队"><a href="#循环队列出队" class="headerlink" title="循环队列出队"></a>循环队列出队</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(SqQueue* Q, QElemType *e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//栈为空</span></span><br><span class="line">	<span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear) &#123;</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将出队队列赋值给e</span></span><br><span class="line">	*e = Q-&gt;data[Q-&gt;front];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//头指针前移</span></span><br><span class="line">	Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确状态吗</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h3><h4 id="链式队列定义"><a href="#链式队列定义" class="headerlink" title="链式队列定义"></a>链式队列定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义结点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">	QElemType data;<span class="comment">//数据域</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;QNode,*QueuePtr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列头尾指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	QueuePtr front, rear;<span class="comment">//头尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure>

<h4 id="链式队列入队"><a href="#链式队列入队" class="headerlink" title="链式队列入队"></a>链式队列入队</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(LinkQueue* Q, QElemType e)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//开辟内存空间</span></span><br><span class="line">	QueuePtr s = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//分配内存空间失败</span></span><br><span class="line">	<span class="keyword">if</span> (!s) &#123;</span><br><span class="line">		<span class="built_in">exit</span>(_CRT_GUARDOVERFLOW);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//s结点的数据</span></span><br><span class="line">	s-&gt;data = e;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//s的下一结点为空</span></span><br><span class="line">	s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//头指针指向s结点</span></span><br><span class="line">	Q-&gt;rear-&gt;next = s;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将s结点设置为头指针</span></span><br><span class="line">	Q-&gt;rear = s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链式队列出队"><a href="#链式队列出队" class="headerlink" title="链式队列出队"></a>链式队列出队</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(LinkQueue* Q, QElemType* e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//声明结点p</span></span><br><span class="line">	QueuePtr p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//队列为空</span></span><br><span class="line">	<span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear) &#123;</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将要删除的结点赋值给结点p</span></span><br><span class="line">	p = Q-&gt;front-&gt;next;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将删除的数据赋值给e</span></span><br><span class="line">	*e = p-&gt;data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将头结点指向出队结点的下一结点</span></span><br><span class="line">	Q-&gt;front-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果出队的是最后一个元素</span></span><br><span class="line">	<span class="keyword">if</span> (Q-&gt;rear == p) &#123;</span><br><span class="line">		<span class="comment">//将头指针指向尾指针</span></span><br><span class="line">		Q-&gt;rear = Q-&gt;front;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//释放结点p 出队成功</span></span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确状态码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构 线性表</title>
    <url>/posts/227292080/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/22.6ni0lp1aar40.webp" alt="22"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="《大话数据结构》-阅读整理"><a href="#《大话数据结构》-阅读整理" class="headerlink" title="《大话数据结构》 阅读整理"></a>《大话数据结构》 阅读整理</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><p>零个或多个数据元素的有限序列</p>
<h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>一个数据元素可以由若干个数据项组成</p>
<p><strong>举例</strong></p>
<p>白羊-&gt;金牛-&gt;双子-&gt;巨蟹-&gt;狮子-&gt;处女-&gt;天秤-&gt;天蝎-&gt;射手-&gt;摩羯-&gt;水瓶-&gt;双鱼</p>
<p>前一个称为后一个的直接前驱</p>
<p>后一个称为前一个的直接后继</p>
<h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3><p>用一段地址连续的存储单元依次存储线性表的数据元素</p>
<p>存储器中每个存储单元都有自己的编号 这个编号称为地址</p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E7%BA%BF%E6%80%A7%E8%A1%A8%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.6pfq944sf800.webp" alt="线性表顺序存储结构"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将int 用 ElemType替代了</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; </span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="comment">//存储数据元素</span></span><br><span class="line">	ElemType data[MAXSIZE];</span><br><span class="line">	<span class="comment">//线性表的当前长度</span></span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure>

<h3 id="线性表的操作"><a href="#线性表的操作" class="headerlink" title="线性表的操作"></a>线性表的操作</h3><h4 id="获取元素操作"><a href="#获取元素操作" class="headerlink" title="获取元素操作"></a>获取元素操作</h4><ul>
<li>思路</li>
</ul>
<p>检验要查找的元素位置是否符合</p>
<p>直接找到返回即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取元素操作 e返回L中第i个数据元素的值 i指的是位置 所以下标得 - 1</span></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(SqList L, <span class="keyword">int</span> i, ElemType* e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验特殊情况</span></span><br><span class="line">	<span class="keyword">if</span> (L.data == <span class="number">0</span> || i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//返回错误状态</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将查找到的元素赋值给e</span></span><br><span class="line">	*e = L.data[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确状态</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><ul>
<li>思路</li>
</ul>
<p>插入位置不合理 抛出异常</p>
<p>线性表长度大于等于数组长度 抛出异常或动态加容量</p>
<p>从最后一个元素开始向前遍历到第i个位置 分别向后移动一个位置</p>
<p>插入元素到指定位置</p>
<p>表长 + 1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入元素操作 在L中第i个位置之前插入新的元素e L长度 + 1</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义变量k</span></span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//当线性表长度等于最大空间时 说明线性表已经满了 不能再添加了</span></span><br><span class="line">	<span class="keyword">if</span> (L.length == MAXSIZE) &#123;</span><br><span class="line">		<span class="comment">//返回错误状态码</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//当插入元素比第一位还小时或比最后一位后一位还大时 不允许插入</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//返回错误状态码</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//当插入的元素不是在末尾插入时</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt; L.length) &#123;</span><br><span class="line">		<span class="comment">//将插入之后的所有元素向后移动一位</span></span><br><span class="line">		<span class="keyword">for</span> (k = L.length - <span class="number">1</span>; k &gt;= i - <span class="number">1</span>; k--) &#123;</span><br><span class="line">			<span class="comment">//向后移动</span></span><br><span class="line">			L.data[k + <span class="number">1</span>] = L.data[k];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将新元素插入到指定位置</span></span><br><span class="line">	L.data[i - <span class="number">1</span>] = e;</span><br><span class="line">	<span class="comment">//线性表长度+1</span></span><br><span class="line">	L.length++;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确状态码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><ul>
<li>思路</li>
</ul>
<p>删除位置不合理 抛出异常</p>
<p>取出删除元素</p>
<p>删除元素位置开始遍历到最后一个元素位置 分别将他们向前移动一个位置</p>
<p>表长 - 1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除元素操作 删除L的第i个元素 用e返回值 线性表长度 - 1</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(SqList L, <span class="keyword">int</span> i, ElemType *e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义变量</span></span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验线性表是否为空 </span></span><br><span class="line">	<span class="keyword">if</span> (L.length == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">//返回错误状态码</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验删除元素的位置是否正确</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">		<span class="comment">//返回错误状态码</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//删除的元素赋值给e</span></span><br><span class="line">	*e = L.data[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验删除的元素不是最后一个</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt; L.length) &#123;</span><br><span class="line">		<span class="comment">//删除一个元素 将其后面的所有元素向前移动一位</span></span><br><span class="line">		<span class="keyword">for</span> (k = i; k &lt; L.length; k++) &#123;</span><br><span class="line">			<span class="comment">//向前移动</span></span><br><span class="line">			L.data[k - <span class="number">1</span>] = L.data[k];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//线性表长度 - 1</span></span><br><span class="line">	L.length--;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确状态码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="线性表顺序存储结构的优缺点"><a href="#线性表顺序存储结构的优缺点" class="headerlink" title="线性表顺序存储结构的优缺点"></a>线性表顺序存储结构的优缺点</h4><ul>
<li>优点</li>
</ul>
<p>无需为表示表中元素之间的逻辑关系而增加额外的存储空间</p>
<p>可以快速地存取表中任一位置的元素</p>
<ul>
<li>缺点</li>
</ul>
<p>插入和删除操作需要移动大量元素</p>
<p>当线性表长度变化较大时 难以确定存储空间的容量</p>
<p>造成存储空间的碎片</p>
<h3 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h3><h4 id="线性表链式存储结构定义"><a href="#线性表链式存储结构定义" class="headerlink" title="线性表链式存储结构定义"></a>线性表链式存储结构定义</h4><p><code>数据域</code>存储数据元素信息</p>
<p><code>指针域</code>存储直接后继位置</p>
<p><code>指针/链</code>指针域中存储的信息</p>
<p><code>结点</code>数据源 + 指针域</p>
<p><code>单链表</code>每个结点中只包含一个指针域</p>
<p><code>头指针</code>链表中第一个结点的存储位置</p>
<p><code>头结点</code>单链表的第一个结点前附设一个结点</p>
<p>n个结点链接成一个链表 即为线性表的链式存储结构</p>
<h4 id="头指针与头结点的异同"><a href="#头指针与头结点的异同" class="headerlink" title="头指针与头结点的异同"></a>头指针与头结点的异同</h4><ul>
<li>头指针<br>链表指向第一个结点的指针 若链表有头结点 则是指向头结点的指针</li>
</ul>
<p>头指针具有标志作用 所以常用头指针冠以链表的名字</p>
<p>无论链表是否为空 头指针均不为空 头指针是链表的必要元素</p>
<ul>
<li>头结点<br>为了操作的统一和方便而设立的 放在第一元素的结点之前 其数据域一般无意义</li>
</ul>
<p>对在第一元素结点前插入节点和删除第一结点 其操作与其他结点的操作就统一了</p>
<p>不一定是链表的必需要素</p>
<h3 id="线性表链式存储结构"><a href="#线性表链式存储结构" class="headerlink" title="线性表链式存储结构"></a>线性表链式存储结构</h3><p>结点由存放数据元素的数据域和存放后地址的指针域组成</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类型替换</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//存放数据的数据域</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="comment">//存放后继结点地址的指针域</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义LinkList</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">LinkList</span>;</span></span><br></pre></td></tr></table></figure>

<h3 id="单链表的操作"><a href="#单链表的操作" class="headerlink" title="单链表的操作"></a>单链表的操作</h3><h4 id="单链表的读取"><a href="#单链表的读取" class="headerlink" title="单链表的读取"></a>单链表的读取</h4><ul>
<li>思路</li>
</ul>
<p>声明一个指针p指向链表第一个结点 初始化j从1开始</p>
<p>当j&lt;i 时 遍历链表 让p指针后移 j累加</p>
<p>若到链表末尾p为空 说明第i个结点不存在</p>
<p>查找成功 返回结点p的数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单链表的读取</span></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType* e)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//定义计数器</span></span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//定义结点p</span></span><br><span class="line">	LinkList p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将p指向链表L的下一结点</span></span><br><span class="line">	p = L-&gt;next;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//遍历 如果结点p不为空 并且 计数器 j(计数器) &lt; i(要查找的位置)</span></span><br><span class="line">	<span class="keyword">while</span> (p &amp;&amp; j &lt; i)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//将p指向下一结点</span></span><br><span class="line">		p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//计数器++</span></span><br><span class="line">		++j;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果p为空了 或者 j(计数器) &gt; i(要查找的位置)</span></span><br><span class="line">	<span class="keyword">if</span> (!p || j &gt; i) &#123;</span><br><span class="line">		<span class="comment">//返回错误状态码</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将查找的数据赋值给e</span></span><br><span class="line">	*e = p-&gt;data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确状态码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h4><ul>
<li>思路</li>
</ul>
<p>声明一指针p指向链表的头结点 初始化j从1开始</p>
<p>当j&lt;i 时 遍历链表 让p指针后移 j累加</p>
<p>若到链表末尾p为空 则说明i个结点不存在</p>
<p>查找成功 在系统中生成一个空结点s</p>
<p>将数据e赋值给s-&gt;data</p>
<p>单链表的插入标准语句 s-&gt;next = p-&gt;next; p-&gt;next = s;</p>
<p>返回成功</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单链表的插入</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType* e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//计数器</span></span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//定义结点p,s</span></span><br><span class="line">	LinkList p, s;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将p指向L结点</span></span><br><span class="line">	p = L;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//遍历寻找</span></span><br><span class="line">	<span class="keyword">while</span> (p &amp;&amp; j &lt; i) &#123;</span><br><span class="line">		<span class="comment">//p指针移动</span></span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		<span class="comment">//计数器++</span></span><br><span class="line">		++j;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//校验</span></span><br><span class="line">	<span class="keyword">if</span> (!p || j &gt; i) &#123;</span><br><span class="line">		<span class="comment">//返回错误状态码</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//自动分配内存空间生成新结点</span></span><br><span class="line">	s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将插入的数据放入新结点的数据域中</span></span><br><span class="line">	s-&gt;data = e;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将新结点的指针域指向p的下一结点</span></span><br><span class="line">	s-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将p的指针域指向新结点</span></span><br><span class="line">	p-&gt;next = s;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回正确状态码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h4><ul>
<li>思路<br>声明一指针p指向链表头结点 初始化j从1开始</li>
</ul>
<p>当j&lt;i 时 遍历链表 让p指针后移 j累加</p>
<p>若到链表末尾p为空 则说明i个结点不存在</p>
<p>查找成功 将要删除的结点p-&gt;next赋值给q</p>
<p>单链表的删除标准语句p-&gt;next = q-&gt;next</p>
<p>将q结点中的数据赋值给e 作为返回</p>
<p>释放q结点</p>
<p>返回成功</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单链表的删除</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType* e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义变量</span></span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//定义新结点 p, q</span></span><br><span class="line">	LinkList p, q;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将结点p指向头结点</span></span><br><span class="line">	p = L;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//遍历检验</span></span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i) &#123;</span><br><span class="line">		<span class="comment">//将p指向p的指针域</span></span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		<span class="comment">//计数器++</span></span><br><span class="line">		++j;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验</span></span><br><span class="line">	<span class="keyword">if</span> (!p-&gt;next || j &gt; i) &#123;</span><br><span class="line">		<span class="comment">//返回错误状态码</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将q指向p的指针域</span></span><br><span class="line">	q = p-&gt;next;</span><br><span class="line">	<span class="comment">//将p的指针域指向q的指针域</span></span><br><span class="line">	p-&gt;next = q-&gt;next;</span><br><span class="line">	<span class="comment">//将q的数据域赋值给e</span></span><br><span class="line">	*e = q-&gt;data;</span><br><span class="line">	<span class="comment">//释放q</span></span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//返回正确状态码</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单链表结构与顺序存储结构的优缺点"><a href="#单链表结构与顺序存储结构的优缺点" class="headerlink" title="单链表结构与顺序存储结构的优缺点"></a>单链表结构与顺序存储结构的优缺点</h3><h4 id="存储分配方式"><a href="#存储分配方式" class="headerlink" title="存储分配方式"></a>存储分配方式</h4><p>顺序存储结构用一段连续的存储单元依次存储线性表的数据元素</p>
<p>单链表采用链式存储结构 用一组任意的存储单元存放线性表的元素</p>
<h4 id="时间性能"><a href="#时间性能" class="headerlink" title="时间性能"></a>时间性能</h4><ul>
<li>查找</li>
</ul>
<p>顺序存储结构O(1)</p>
<p>单链表O(n)</p>
<ul>
<li>查找和删除</li>
</ul>
<p>顺序存储结构需要平均移动表长一半的元素 时间复杂度O(n)</p>
<p>单链表在找出位置的指针后 插入和删除时间复杂度仅为O(1)</p>
<h4 id="空间性能"><a href="#空间性能" class="headerlink" title="空间性能"></a>空间性能</h4><p>顺序存储结构需要预分配存储空间 分大了浪费 分小了 易发生上溢</p>
<p>单链表不需要分配存储空间 只要有就可以分配 元素个数也不受限制</p>
<p><strong>注意</strong></p>
<p>线性表需要频繁查找 很少进行插入和删除操作 宜采用顺序存储结构</p>
<p>当线性表中的元素个数变化较大或者根本不知道有多大时 采用单链表结构</p>
<h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><p>用数组描述的链表叫做静态链表</p>
<p>静态链表和单链表其实很相像</p>
<h4 id="静态链表结构的定义"><a href="#静态链表结构的定义" class="headerlink" title="静态链表结构的定义"></a>静态链表结构的定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线性表的静态链表存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="comment">//游标 为0时表示无指向</span></span><br><span class="line">	<span class="keyword">int</span> cur;</span><br><span class="line">&#125;Component,StaticLinkList[MAXSIZE];</span><br></pre></td></tr></table></figure>

<h4 id="静态链表的初始化"><a href="#静态链表的初始化" class="headerlink" title="静态链表的初始化"></a>静态链表的初始化</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化静态数组链表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(StaticLinkList space)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义静态变量</span></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置循环</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXSIZE - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="comment">//space[0].cur头指针 0表示空指针</span></span><br><span class="line">		space[i].cur = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//静态链表为空 最后一个元素的cur为0</span></span><br><span class="line">	space[MAXSIZE - <span class="number">1</span>].cur = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="静态链表的优缺点"><a href="#静态链表的优缺点" class="headerlink" title="静态链表的优缺点"></a>静态链表的优缺点</h4><ul>
<li>优点</li>
</ul>
<p>在插入和删除时 只需要修改游标 不需要移动元素 从而改进了顺序存储结构中插入和删除操作需要移动大量元素的缺点</p>
<ul>
<li>缺点</li>
</ul>
<p>没有解决连续存储分配带来的表长难以确定的问题</p>
<p>失去了顺序存储结构随机存取的特性</p>
<h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>将单链表的终端结点的指针端有空指针改为指向头结点 就使整个单链表形成一个环 这种头尾相连的单链表称为循环链表</p>
<h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><p>在终端结点设置尾指针 方便查找终端结点以及头结点</p>
<p>查找上一结点时耗时较大 时间复杂度为O(n)</p>
<h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>在单链表的每个结点中 在设置一个指向其前驱结点的指针域</p>
<h4 id="双向链表结构的定义"><a href="#双向链表结构的定义" class="headerlink" title="双向链表结构的定义"></a>双向链表结构的定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	ElemType data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//直接前驱指针</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span>* <span class="title">prior</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//直接后继指针</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span>* <span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;DulNode,*DuLinkList;</span><br></pre></td></tr></table></figure>

<p>插入和删除和单链表相同 只不过多了个前驱指针域 </p>
<p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构 绪论 算法</title>
    <url>/posts/1863985833/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E7%8B%97%E7%8B%97.cat496pgk1s.webp" alt="狗狗"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="《大话数据结构》-阅读整理"><a href="#《大话数据结构》-阅读整理" class="headerlink" title="《大话数据结构》 阅读整理"></a>《大话数据结构》 阅读整理</h1><h1 id="数据结构绪论"><a href="#数据结构绪论" class="headerlink" title="数据结构绪论"></a>数据结构绪论</h1><h2 id="数据结构的起源"><a href="#数据结构的起源" class="headerlink" title="数据结构的起源"></a>数据结构的起源</h2><p>数据结构是相互之间存在一种或多种特定关系的数据元素的集合</p>
<h2 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>描述客观事物的符号 是计算机中可以操作的对象 是能被计算机识别 并输入给计算机处理的符号集合</p>
<h3 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h3><p>组成数据的 有一定意义的基本单位 通常被作为整体处理</p>
<h3 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h3><p>一个数据元素可以由若干个数据项组成</p>
<p>数据不可分割的最小单元</p>
<h3 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h3><p>性质相同的数据元素的集合 数据的子集</p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>不同数据元素之间不是独立的 存在特定的关系 这些关系称为结构</p>
<h2 id="逻辑结构与物理结构"><a href="#逻辑结构与物理结构" class="headerlink" title="逻辑结构与物理结构"></a>逻辑结构与物理结构</h2><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>数据对象中数据元素之间的相互关系</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul>
<li>集合结构</li>
</ul>
<p>数据元素除了同属于一个集合外 之间没有其他关系</p>
<ul>
<li>线性结构</li>
</ul>
<p>数据元素之间是一对一的关系</p>
<ul>
<li>树形结构</li>
</ul>
<p>数据元素之间存在一种 一对多的关系</p>
<ul>
<li>图形结构</li>
</ul>
<p>数据元素是多对多的关系</p>
<h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><p>数据的逻辑结构在计算机中的存储形式</p>
<h4 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h4><ul>
<li>顺序存储结构 数据元素存放在地址连续的存储单元里 数据间的逻辑关系和物理关系是一致的</li>
<li>链式存储结构 数据元素存放在任意的存储单元里 这组存储单元可以是连续的 也可以是不连续的</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型定义"><a href="#数据类型定义" class="headerlink" title="数据类型定义"></a>数据类型定义</h3><h4 id="原子类型"><a href="#原子类型" class="headerlink" title="原子类型"></a>原子类型</h4><p>不可以再分解的基本类型</p>
<p>整型 实型 字符型 ……</p>
<h4 id="结构类型"><a href="#结构类型" class="headerlink" title="结构类型"></a>结构类型</h4><p>由若干个类型组合而成 可以再分解</p>
<p>整形数组由若干整型数据组成……</p>
<h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>抽取出事物具有的普遍性的本质</p>
<h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><p>一个数学模型及定义在该模型上的一组操作</p>
<p>体现了程序设计中问题分解 抽象和信息隐藏的特性</p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA.4afe4hlb69m0.webp" alt="数据结构绪论"></p>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h2><p>解决特定问题求解步骤的描述 在计算机中表现为指令的有限序列 并且每条指令表示一个或多个操作</p>
<h2 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>算法具有零个或多个输入</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>算法至少有一个或多个输出</p>
<h3 id="有穷性"><a href="#有穷性" class="headerlink" title="有穷性"></a>有穷性</h3><p>算法在执行有限步骤后 自动结束而不会出现无限循环 并且每一个步骤在可接受的时间内完成</p>
<h3 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h3><p>算法的每一步骤都具有确定的含义 不会出现二义性</p>
<h3 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h3><p>算法的每一步都必须是可行的 每一步都能够通过执行有限次数完成</p>
<h2 id="算法设计要求"><a href="#算法设计要求" class="headerlink" title="算法设计要求"></a>算法设计要求</h2><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><p>算法至少应该具有输入 输出和加工处理无歧义性 能正确反映问题的需求 能够得到问题的正确答案</p>
<h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><p>算法设计的另一目的是为了便于阅读 理解和交流</p>
<h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><p>输入数据不合法时 算法也能做出相关处理 不是产生异常或莫名其妙的结果</p>
<h3 id="时间效率高和存储量低"><a href="#时间效率高和存储量低" class="headerlink" title="时间效率高和存储量低"></a>时间效率高和存储量低</h3><p>尽量满足时间效率高和存储量低的需求</p>
<h2 id="算法效率的度量方法"><a href="#算法效率的度量方法" class="headerlink" title="算法效率的度量方法"></a>算法效率的度量方法</h2><h3 id="事后统计方法"><a href="#事后统计方法" class="headerlink" title="事后统计方法"></a>事后统计方法</h3><p>通过设计好的测试程序和数据 利用计算机计时器对不同算法编制的程序的运行时间进行比较 从而确定算法效率的高低</p>
<h3 id="事前分析估算方法"><a href="#事前分析估算方法" class="headerlink" title="事前分析估算方法"></a>事前分析估算方法</h3><p>在计算机编制前 依据统计方法对计算机进行估算</p>
<h3 id="高级语言所消耗的时间取决于"><a href="#高级语言所消耗的时间取决于" class="headerlink" title="高级语言所消耗的时间取决于"></a>高级语言所消耗的时间取决于</h3><ul>
<li>算法采用的策略 方法</li>
</ul>
<p>算法好坏的根本</p>
<ul>
<li>编译产生的代码质量</li>
</ul>
<p>软件问题</p>
<ul>
<li>问题的输入规模（输入量）</li>
</ul>
<p>程序运行时间的关键</p>
<ul>
<li>机器执行指令的速度</li>
</ul>
<p>硬件问题</p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="T-n-O-f-n"><a href="#T-n-O-f-n" class="headerlink" title="T(n) = O(f(n))"></a>T(n) = O(f(n))</h3><p>随问题规模n的增大 算法执行时间的增长率和f(n)的增长率相同</p>
<p>n表示数据规模 ； O( f(n) )表示运行算法所需要执行的指令数，和f(n)成正比</p>
<p>f(n) 问题规模n的某个函数</p>
<h3 id="推导大O阶方法"><a href="#推导大O阶方法" class="headerlink" title="推导大O阶方法"></a>推导大O阶方法</h3><p>用常数1取代运行时间中的所有加法常数</p>
<p>在修改后的运行次数函数中 只保留最高阶项</p>
<p>如果最高阶项存在且其系数不是1 则去除与这个项相乘的系数 得到结果就是大O阶</p>
<h3 id="常见时间复杂度"><a href="#常见时间复杂度" class="headerlink" title="常见时间复杂度"></a>常见时间复杂度</h3><ul>
<li>O(1)</li>
</ul>
<p>常数阶</p>
<ul>
<li>O(n)</li>
</ul>
<p>线性阶</p>
<ul>
<li>O(n^2)</li>
</ul>
<p>平方阶</p>
<ul>
<li>O(log n)</li>
</ul>
<p>对数阶</p>
<ul>
<li>O(n * log n)</li>
</ul>
<p>n log n阶</p>
<ul>
<li>O(n ^ 3)</li>
</ul>
<p>立方阶</p>
<ul>
<li>O(2 ^ n)</li>
</ul>
<p>指数阶</p>
<h3 id="所耗费的时间"><a href="#所耗费的时间" class="headerlink" title="所耗费的时间"></a>所耗费的时间</h3><p>O(1)&lt;O(log n)&lt;O(n)&lt;O(nlog n)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</p>
<h2 id="最坏情况与平均情况"><a href="#最坏情况与平均情况" class="headerlink" title="最坏情况与平均情况"></a>最坏情况与平均情况</h2><p>平均运行时间是期望的运行时间</p>
<p>没有特殊情况下默认是平均运行时间</p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E7%AE%97%E6%B3%95.61mp5c2yjdw0.webp" alt="算法"></p>
<p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>算法很美 java版 二</title>
    <url>/posts/2702675562/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E7%B4%AB%E9%9C%9E.2k4oec24kws0.webp" alt="紫霞"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="蓝桥杯-java"><a href="#蓝桥杯-java" class="headerlink" title="蓝桥杯 java"></a>蓝桥杯 java</h1><h2 id="算法练习题"><a href="#算法练习题" class="headerlink" title="算法练习题"></a>算法练习题</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法</p>
<p>递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。</p>
<h4 id="递归一般用法"><a href="#递归一般用法" class="headerlink" title="递归一般用法"></a>递归一般用法</h4><ul>
<li>找重复</li>
<li>找变化</li>
<li>找边界</li>
</ul>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><strong>求n的阶乘</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结束条件</span></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="keyword">return</span> n * f1(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>显示i到j的数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; j)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        f2(i + <span class="number">1</span>,j);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>数组求和</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f3</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i == arr.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i &gt; arr.length - <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr[i] + f3(arr,i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>字符串反转</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">f4</span><span class="params">(String s,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(end == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s.charAt(end) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s.charAt(end) + f4(s,end - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>斐波那契数列</strong></p>
<p>1、1、2、3、5、8、13、21、34、……</p>
<p>前两个相加等于第三个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f5</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f5(n - <span class="number">1</span>) + f5(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>最大公约数</strong></p>
<p>两个或多个整数共有约数中最大的一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f6</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f6(n,m % n);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>小白上楼梯（递归设计）</strong></p>
<p>楼梯有n阶台阶 小白一次可以上一阶 2阶 3阶 计算小白有多少种走完楼梯的方式</p>
<p><code>思路：</code> 一个台阶1种方法 二个台阶2种方法 3个台阶4中该方法 4个台阶7种方法 依此类推</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f7</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f7(n - <span class="number">1</span>) + f7(n - <span class="number">2</span>) + f7(n - <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>旋转数组的最小数字（改造二分法）</strong></p>
<p>把一个数组最开始的若干个元素搬到数组的末尾 我们称之为数组的旋转 输入一个递增排序的数组的一个旋转 输出旋转数组的最小元素 例 数组{3,4,5,1,2} 为 {1,2,3,4,5}的一个旋转 该数组的最小值为1</p>
<p><code>思路</code>：取中间值 检测左侧有序还是右侧有序 因为要旋转的部分一定在无序的那一部分当中 一直找，直到找到为止</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//最左边下标</span></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//最右边下标</span></span><br><span class="line">        <span class="keyword">int</span> end = arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有旋转的情况下 直接返回最侧</span></span><br><span class="line">        <span class="keyword">if</span>(arr[begin] &lt; arr[end])&#123;</span><br><span class="line">            <span class="keyword">return</span> arr[begin];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (begin + <span class="number">1</span> &lt; end)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//中间下标</span></span><br><span class="line">            <span class="keyword">int</span> middle = (begin + end ) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//要么左侧有序 要么右侧有序</span></span><br><span class="line">            <span class="keyword">if</span>(arr[middle] &gt;= arr[begin])&#123;</span><br><span class="line">                <span class="comment">//数组中间左侧有序</span></span><br><span class="line">                begin = middle;</span><br><span class="line">                <span class="comment">//右侧有序</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                end = middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//返回最小值</span></span><br><span class="line">        <span class="keyword">return</span> arr[end];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试数组</span></span><br><span class="line">        <span class="keyword">int</span> [] arr = &#123;<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="keyword">int</span> res = min(arr);</span><br><span class="line">        <span class="comment">//打印输入</span></span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> [] arr2 = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> res2 = min(arr);</span><br><span class="line">        System.out.println(res2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>若中间的值和左边的值和右边的值相等比如1，0，1，1，1那么应该放弃这个算法，采用扫描法</p>
<p><strong>在有空字符串的有序字符串数组中查找</strong></p>
<p>有个排序后的字符串数组 其中散布着一些空字符串 找出给定字符串（肯定不是空字符串）的索引</p>
<p><code>思路：</code> 找出中间量 依次进行比较 因为有序 所以只需多次使用二分法查找即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 字符串数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 要查找的串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">index</span><span class="params">(String[] string,String s)</span></span>&#123;</span><br><span class="line">    <span class="comment">//起始下标</span></span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//末尾下标</span></span><br><span class="line">    <span class="keyword">int</span> end = string.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检索条件</span></span><br><span class="line">        <span class="keyword">while</span>(begin &lt; end)&#123;</span><br><span class="line">            <span class="comment">//取中间下标方法</span></span><br><span class="line">            <span class="keyword">int</span> middle = begin + ((end - begin) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果是空串 中间下标右移</span></span><br><span class="line">            <span class="keyword">if</span>(string[middle].equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                middle++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//校验 防止死循环</span></span><br><span class="line">            <span class="keyword">if</span>(middle &gt; end)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果中间值比要查找的值大则在左侧继续</span></span><br><span class="line">            <span class="keyword">if</span>(string[middle].compareTo(s) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                end = middle - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//如果中间值比要查找的值小则在右侧继续</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (string[middle].compareTo(s) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                begin = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//返回相等的串</span></span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不符合则返回-1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试数组</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;ac&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;ad&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;ba&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="keyword">int</span> res = index(arr, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="comment">//打印输出</span></span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>String.compareTo(参数) 返回值</p>
</blockquote>
<p>如果指定的数与参数相等返回0。</p>
<p>如果指定的数小于参数返回 -1。</p>
<p>如果指定的数大于参数返回 1。</p>
<p><strong>最长连续递增子序列（部分有序）</strong></p>
<p>（1,9,2,5,6,3,4,6,8,0）中最长的递增子序列为（3,4,6,8）</p>
<p><code>思路：</code> 记录一个起始下标，在记录一个从起始下标开始的下标 依次移动 直到移动的下标的下一个元素比它小 则终止当前的移动 记录下从起始下标到这个移动下标的长度 然后从移动的下标的下一下标开始作为起始下标 在重复此操作 最多即可得出最长序列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印信息</span></span><br><span class="line">        System.out.println(max(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找出最长序列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//其实下标</span></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//移动的下标</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//最长序列值</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//只要其实下标小于数组长度 - 1即可循环查找</span></span><br><span class="line">        <span class="keyword">while</span> (begin &lt; arr.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//校验 找出递增序列 前一个比后一个值小即可继续移动下标</span></span><br><span class="line">            <span class="keyword">if</span>(arr[index] &lt;= arr[index + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">//向右移动下标</span></span><br><span class="line">                index++;</span><br><span class="line">                <span class="comment">//递增序列结束 </span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//下标继续移动</span></span><br><span class="line">                index++;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//找到最大序列长度</span></span><br><span class="line">                <span class="keyword">if</span>(max &lt; (index - begin))&#123;</span><br><span class="line">                    <span class="comment">//记录下当前递增序列的长度</span></span><br><span class="line">                    max = index - begin;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//重新定义新的递增序列的起始下标</span></span><br><span class="line">                begin = index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回最大序列长度</span></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>设计一个高效的求a的n次幂的算法</strong></p>
<ul>
<li>普通算法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间复杂度为O（n）型的算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 底数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 指数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            result *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度为 O(n)</p>
<ul>
<li>优化过的算法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间复杂度 O(lg n ) 算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 底数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 指数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pow2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存放底数</span></span><br><span class="line">        <span class="keyword">int</span> result = a;</span><br><span class="line">        <span class="comment">//中间量倍数</span></span><br><span class="line">        <span class="keyword">int</span> exec = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//特殊情况 n == 0时</span></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//倍数翻倍与指数进行比较</span></span><br><span class="line">        <span class="keyword">while</span> ((exec&lt;&lt;<span class="number">1</span>) &lt; n)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//求次幂</span></span><br><span class="line">            result *= result;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//翻倍</span></span><br><span class="line">            exec &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归 因为翻了相对应的倍数 所以还差  n（总指数） - exec(翻的倍数) 次幂</span></span><br><span class="line">        <span class="keyword">return</span> result * pow2(a,n - exec);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度为O（lg n）</p>
<p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>算法很美</tag>
      </tags>
  </entry>
  <entry>
    <title>算法很美 java版 一</title>
    <url>/posts/2593628355/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%81%87%E8%B1%A1.396pfl0zdqe0.webp" alt="假象"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="蓝桥杯-java"><a href="#蓝桥杯-java" class="headerlink" title="蓝桥杯 java"></a>蓝桥杯 java</h1><h2 id="算法练习题"><a href="#算法练习题" class="headerlink" title="算法练习题"></a>算法练习题</h2><h3 id="位运算的运用"><a href="#位运算的运用" class="headerlink" title="位运算的运用"></a>位运算的运用</h3><h4 id="1-1000这1000个数存放在一个1001个元素的数组中-其中只有一个数值是重复的-找出其中重复的元素-不用辅助存储空间"><a href="#1-1000这1000个数存放在一个1001个元素的数组中-其中只有一个数值是重复的-找出其中重复的元素-不用辅助存储空间" class="headerlink" title="1~1000这1000个数存放在一个1001个元素的数组中 其中只有一个数值是重复的 找出其中重复的元素 不用辅助存储空间"></a>1~1000这1000个数存放在一个1001个元素的数组中 其中只有一个数值是重复的 找出其中重复的元素 不用辅助存储空间</h4><p><strong>解题思路</strong></p>
<p>将每个数组的每个元素与数组的每个元素做异或 因为相同元素做异或为0 所以重复的元素会多出来 这样就可以找到重复的元素了</p>
<p><strong>不用辅助存储空间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">1001</span>;</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[N];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            arr[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成一个数放到最后一个位置</span></span><br><span class="line">        arr[arr.length - <span class="number">1</span>] = <span class="keyword">new</span> Random().nextInt(N - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成一个数组下标</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(N);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将最后一个位置上的随机数与随机生成的下标数进行交换</span></span><br><span class="line">        ArrOperate.swap(arr,index,arr.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示数组</span></span><br><span class="line">        ArrOperate.printArr(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x1 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//x1为1一直异或到1000</span></span><br><span class="line">            x1 = (x1 ^ i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="comment">// 上面的x1再同时与随机生成的数组异或得出重复的那个数</span></span><br><span class="line">            x1 = x1 ^ arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(x1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用辅助存储空间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[N];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            arr[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成一个数放到最后一个位置</span></span><br><span class="line">        arr[arr.length - <span class="number">1</span>] = <span class="keyword">new</span> Random().nextInt(N - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成一个数组下标</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(N);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将最后一个位置上的随机数与随机生成的下标数进行交换</span></span><br><span class="line">        ArrOperate.swap(arr,index,arr.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示数组</span></span><br><span class="line">        ArrOperate.printArr(arr);</span><br><span class="line">        <span class="comment">//开辟了一块新数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr2.length; i++)&#123;</span><br><span class="line">            <span class="comment">//放入到新数组中并对应相对应的位置以及数量</span></span><br><span class="line">            arr2[arr[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr2.length; i++)&#123;</span><br><span class="line">            <span class="comment">//数量如果为2则便是该数重复</span></span><br><span class="line">            <span class="keyword">if</span>(arr2[i] == <span class="number">2</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="一个数组除了某一个数字之外-其他的数字都出现了两次-找出落单的那个数"><a href="#一个数组除了某一个数字之外-其他的数字都出现了两次-找出落单的那个数" class="headerlink" title="一个数组除了某一个数字之外 其他的数字都出现了两次 找出落单的那个数"></a>一个数组除了某一个数字之外 其他的数字都出现了两次 找出落单的那个数</h4><p><strong>解题思路</strong></p>
<p>因为其他数字都出现两次 所以可连续做异或 因为相同异或为0 任何数与0异或是其本身</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            result ^= arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="一个整数-求出该二进制中1的个数"><a href="#一个整数-求出该二进制中1的个数" class="headerlink" title="一个整数 求出该二进制中1的个数"></a>一个整数 求出该二进制中1的个数</h4><p><strong>解题思路</strong></p>
<p>先将整数转换成二进制数 依次判断每个位上的数是否为1</p>
<p><strong>位运算方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">int</span> qjNumber = number;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (number != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((number &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">            number = number &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Integer.toString(qjNumber,<span class="number">2</span>));</span><br><span class="line">        System.out.println(qjNumber + <span class="string">&quot;中1的位数为&quot;</span> + result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>普通方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> number = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">int</span> qjNumber = number;</span><br><span class="line">        String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> yuShu = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (number != <span class="number">0</span>)&#123;</span><br><span class="line">            yuShu = number % <span class="number">2</span>;</span><br><span class="line">            number = number / <span class="number">2</span>;</span><br><span class="line">            result += yuShu;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] ejz = result.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ejz.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ejz[i] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Integer.toString可直接将十进制转换为相对应的进制</span></span><br><span class="line">        System.out.println(Integer.toString(qjNumber,<span class="number">2</span>));</span><br><span class="line">        System.out.println(qjNumber + <span class="string">&quot;的二进制中有&quot;</span> + sum + <span class="string">&quot;位是1&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="用一条语句判断一个整数是不是2的整数次方"><a href="#用一条语句判断一个整数是不是2的整数次方" class="headerlink" title="用一条语句判断一个整数是不是2的整数次方"></a>用一条语句判断一个整数是不是2的整数次方</h4><p><strong>解题思路</strong></p>
<p>因为2的整数次方有个规律 就是当前数减1 与 当前数做与运算总是为0 所以按照这个解题即可</p>
<p>2 -&gt; 0000 0010     2-1= 1 -&gt; 0001 </p>
<p>4 -&gt; 0000 0100     4-1=3 -&gt; 0011 </p>
<p>8 -&gt; 0000 1000     8-1=7 -&gt; 0111</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> number = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(((number - <span class="number">1</span>) &amp; number) == <span class="number">0</span></span><br><span class="line">                ?<span class="string">&quot;是2的整数次方&quot;</span> : <span class="string">&quot;不是2的整数次方&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="将整数二进制位的奇偶位互换"><a href="#将整数二进制位的奇偶位互换" class="headerlink" title="将整数二进制位的奇偶位互换"></a>将整数二进制位的奇偶位互换</h4><p><strong>解题思路</strong></p>
<p>首先将原二进制数用1010 1010 1010 …进行与运算 这时会得到 原二进制数0原二进制数0 原二进制数0原二进制数0 原二进制数0原二进制数0 … 这时再重新将原二进制与 0101 0101 0101 … 进行与运算 这时会得到 0原二进制数0原二进制数 0原二进制数0原二进制数 0原二进制数0原二进制数 … 这时将一个二进制进行左移一位 一个二进制进行右移一位 然后异或即可得到二进制的奇偶位交换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(Integer.toString(a,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里实际是 1010 1010 1010 ... 转换成十六进制方便阅读 一共32位 所以就是8个a</span></span><br><span class="line">        <span class="keyword">int</span> ou = a &amp; <span class="number">0xaaaaaaaa</span>;</span><br><span class="line">        <span class="comment">//这里实际是 0101 0101 0101 ... 转换成十六进制方便阅读 一共32位 所以就是8个5</span></span><br><span class="line">        <span class="keyword">int</span> ji = a &amp; <span class="number">0x55555555</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//偶数右移一位 奇数左移一位 然后进行异或即可完成奇偶交换位置</span></span><br><span class="line">        <span class="keyword">int</span> b = (ou &gt;&gt; <span class="number">1</span>) ^ (ji &lt;&lt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(Integer.toString(b,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="零到一之间浮点实数的二进制表示"><a href="#零到一之间浮点实数的二进制表示" class="headerlink" title="零到一之间浮点实数的二进制表示"></a>零到一之间浮点实数的二进制表示</h4><p><strong>解题思路</strong></p>
<p>就是正常的计算小数转换成二进制的计算方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> number = scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;0.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (number &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">double</span> r = number * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(r &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">                stringBuilder.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                number = r - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                stringBuilder.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                number = r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stringBuilder.length() &gt; <span class="number">34</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(stringBuilder);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>









<p><strong>你知道的越多，你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>算法很美</tag>
      </tags>
  </entry>
  <entry>
    <title>javaSE 面向对象复习 二</title>
    <url>/posts/2971595095/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%87%A0%E4%BA%BA%E6%B8%85%E9%86%92.1i3tx4v59rsw.webp" alt="几人清醒"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="javaSE复习整理（仗剑走天涯）"><a href="#javaSE复习整理（仗剑走天涯）" class="headerlink" title="javaSE复习整理（仗剑走天涯）"></a>javaSE复习整理（仗剑走天涯）</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="查看字节码指令"><a href="#查看字节码指令" class="headerlink" title="查看字节码指令"></a>查看字节码指令</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javap -verbose 名称.class</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">javap -v 名称.class</span><br></pre></td></tr></table></figure>

<h4 id="main字节码"><a href="#main字节码" class="headerlink" title="main字节码"></a>main字节码</h4><p><code>mian方法</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i+j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DuoTai duoTai = <span class="keyword">new</span> DuoTai();</span><br><span class="line"></span><br><span class="line">        System.out.println(duoTai.plus(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>main字节码</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">4</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">      	 <span class="comment">// 创建一个对象，并将其引用值压入栈顶</span></span><br><span class="line">         <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">// class com/ydlclass/Computer</span></span><br><span class="line">         <span class="comment">// 复制栈顶数值并将复制值压入栈顶</span></span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         <span class="comment">// 很明显这是在调用构造器，编译之后还是符号引用，就是方法的字符串形式的名字，</span></span><br><span class="line">         <span class="comment">// 加载之后，我们就可以解析成对应的方法的调用地址了</span></span><br><span class="line">         <span class="comment">// 因为一旦类加载到内存的方法区，这个方法就有了真实的调用地址了</span></span><br><span class="line">         <span class="number">4</span>: invokespecial #<span class="number">3</span>                  <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="comment">// 将栈顶引用型数值存入第二个本地变量</span></span><br><span class="line">         <span class="number">7</span>: astore_1</span><br><span class="line">         <span class="comment">// 获取指定类的静态域，并将其值压入栈顶</span></span><br><span class="line">         <span class="number">8</span>: getstatic     #<span class="number">4</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="comment">// 将第二个引用类型本地变量推送至栈顶</span></span><br><span class="line">        <span class="number">11</span>: aload_1</span><br><span class="line">        <span class="comment">// 将 int 型 2 推送至栈顶</span></span><br><span class="line">        <span class="number">12</span>: iconst_2</span><br><span class="line">        <span class="comment">// 将 int 型 4 推送至栈顶</span></span><br><span class="line">        <span class="number">13</span>: iconst_4</span><br><span class="line">        <span class="comment">// 调用实例方法，调用的过程是在内存进行的，只有当字节码被加载进入内存才有具体的地址</span></span><br><span class="line">        <span class="number">14</span>: invokevirtual #<span class="number">5</span>                  <span class="comment">// Method plus:(II)I</span></span><br><span class="line">                 </span><br><span class="line">                  <span class="comment">// 以下部分是粘贴过来的plus方法的，此时会创建新的栈帧</span></span><br><span class="line">                  <span class="comment">// 单独这个方法的指令入口在编译的时候是不可知的，但是加载到内存就可知了</span></span><br><span class="line">                  <span class="comment">// 其实，这个调用的不一定是这个方法，只是为了演示</span></span><br><span class="line">                 -------------------------</span><br><span class="line">                 <span class="comment">// 将第二个 int 型本地变量推送至栈顶</span></span><br><span class="line">                 <span class="number">0</span>: iload_1</span><br><span class="line">                 <span class="comment">// 将第三个 int 型本地变量推送至栈顶</span></span><br><span class="line">                 <span class="number">1</span>: iload_2</span><br><span class="line">                 <span class="comment">// 将栈顶两 int 型数值相加并将结果压入栈顶</span></span><br><span class="line">                 <span class="number">2</span>: iadd</span><br><span class="line">                 <span class="number">3</span>: ireturn </span><br><span class="line">             	 -------------------------   </span><br><span class="line">        <span class="number">17</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        <span class="number">20</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">10</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">20</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        <span class="comment">// 这里的Signature就是一个引用的静态类型，这里早有记录</span></span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">21</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">8</span>      <span class="number">13</span>     <span class="number">1</span> computer   Lcom/ydlclass/Computer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>flags</code>：访问权限</p>
<p><code>code</code>： 代码区域</p>
<p><code>stack</code> 操作数栈的深度</p>
<p><code>locals</code> 局部变量的个数</p>
<p><code>args_size</code> 参数的个数</p>
<p><code>LocalVariableTable</code>：本地变量表</p>
<p>invokespecial用来调用构造方法，invokestatic用来调用静态方法，invokeinterface用来调用接口方法，invokespecial用来调用实例方法（虚方法）</p>
<p>被invokestatic、invokeinterface 和 invokespecial指令调用的方法，一定能在解析阶段（加载完成后或第一次使用）确定唯一的调用版本，比如静态方法，私有方法，和实例构造器、被final修饰的方法。调用会在类加载的时候就能顺序解析成直接引用，这类方法叫非虚方法，反之都是虚方法，这里边有个特例，就是final修饰的方法也是被invokevirtual 调用</p>
<h3 id="重载方法的调用过程"><a href="#重载方法的调用过程" class="headerlink" title="重载方法的调用过程"></a>重载方法的调用过程</h3><p>我们在调用一个虚方法的时候，jvm会在适当的时候帮我们选择合适的方法版本，有的时候在编译期、有时是在运行时，这个方法版本的选择过程我们可以称之为【方法分派】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyFriend</span> <span class="keyword">extends</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlFriend</span> <span class="keyword">extends</span> <span class="title">Friend</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Overload</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relation</span><span class="params">(Friend friend)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;朋友身份&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relation</span><span class="params">(BoyFriend boyFriend)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男朋友身份&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relation</span><span class="params">(GirlFriend girlFriend)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;女朋友身份&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Overload overload = <span class="keyword">new</span> Overload();</span><br><span class="line">        Friend friend = <span class="keyword">new</span> Friend();</span><br><span class="line">        overload.relation(friend);</span><br><span class="line">        Friend boyFriend = <span class="keyword">new</span> BoyFriend();</span><br><span class="line">        overload.relation(boyFriend);</span><br><span class="line">        Friend girlFriend = <span class="keyword">new</span> GirlFriend();</span><br><span class="line">        overload.relation(girlFriend);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>运行结果</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">朋友身份</span><br><span class="line">朋友身份</span><br><span class="line">朋友身份</span><br></pre></td></tr></table></figure>

<p>虚拟机在选择重载方式时，是通过【静态类型】决定的而不是动态类型。由于静态类型编译时就可知，事实上虚拟在编译期就已经知道选择哪一个重载方法，并且把这个方法的符号引用写在了invokevirtual的指令中，所有依赖【静态类型】决定方法执行版本的的分派动作称之为静态分派</p>
<p>第一步是静态分派的过程，jvm从Friend类的多个重载方法中选择了 Friend::relation(Friend friend) 这个方法，并且生成指令 invokevirtual Friend::relation(Friend friend)</p>
<p>第二步是动态分派的过程，是根据运行时类型确定具体调用谁的 relation(Friend friend) 方法，因为运行时类型是Friend，所以最终的方法选择是 Friend::relation(Friend friend)</p>
<h3 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h3><p>重载只是选择了调用方法的版本。</p>
<p>重写是具体明确了调用谁的方法。</p>
<p><strong>多态 可以理解为调用不同接口 出现不同状态</strong></p>
<h3 id="对象转型"><a href="#对象转型" class="headerlink" title="对象转型"></a>对象转型</h3><p>向上转型：子类对象转为父类，向上转型不需要显示的转化<br>向上转型会丢失子类独有的特性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Friend friend = <span class="keyword">new</span> BoyFriend();</span><br></pre></td></tr></table></figure>

<p>向下转型：父类对象转为子类，向下转型需要强制转化<br>向下转型可能会出现错误，需要谨慎。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GirlFriend girlFriend = (GirlFriend) friend2;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Friend friend = <span class="keyword">new</span> BoyFriend();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(friend <span class="keyword">instanceof</span> BoyFriend)&#123;</span><br><span class="line">    BoyFriend boyFriend = (BoyFriend) friend;</span><br><span class="line">    boyFriend.fatherMethod();</span><br><span class="line">    boyFriend.pet();</span><br><span class="line">&#125;</span><br><span class="line">Friend friend2 = <span class="keyword">new</span> GirlFriend();</span><br><span class="line"><span class="keyword">if</span>(friend2 <span class="keyword">instanceof</span> GirlFriend)&#123;</span><br><span class="line">    GirlFriend girlFriend = (GirlFriend) friend2;</span><br><span class="line">    girlFriend.fatherMethod();</span><br><span class="line">    girlFriend.flighty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h3><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>去掉方法体，加一个abstract关键字就是一个抽象方法，如果一个类里有抽象方法，在类的申明上必须也要加上abstract，变成一个抽象类。抽象方法没有方法体，所以不能直接调用，也正是因为抽象方法没有方法体，所以我们不能直接构造一个抽象类</p>
<p>抽象类中除了拥有抽象方法，也可以拥有普通方法</p>
<p>创建子类时，父类依然会被创建，抽象类只有在构建子类的时候才会被构建出实例</p>
<p>如果一个类被final修饰则失去这种能力</p>
<p>抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public</p>
<p>抽象类不能直接实例化，需要依靠子类采用向上转型的方式处理</p>
<p>抽象类必须有子类，使用extends继承，一个子类只能继承一个抽象类</p>
<p>子类（如果不是抽象类）则必须覆写抽象类之中的全部抽象方法（如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。）</p>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>关键字：interface</p>
<p>接口是多实现的，一个类可以实现多个接口，但是只能继承一个类。接口之间也可以相互继承</p>
<p>接口是设计 实现是搬砖</p>
<p>抽象类是模板式的设计，而接口是契约式设计</p>
<h3 id="继承和实现"><a href="#继承和实现" class="headerlink" title="继承和实现"></a>继承和实现</h3><p>继承其实有一种 我是什么什么的意思 就像 小狗是动物 女朋友是朋友 男朋友是朋友 男人是人 女人是人</p>
<p>实现有一种就是我可以干什么 像人可以吃 喝 玩 乐 飞机可以滑行 飞 </p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>设计模式是人们为软件开发中相同表征的问题，抽象出的可重复利用的解决方案</p>
<h3 id="面向对象设计模式"><a href="#面向对象设计模式" class="headerlink" title="面向对象设计模式"></a>面向对象设计模式</h3><h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><p>对扩展开发、对修改关闭</p>
<p>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了</p>
<h4 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h4><p>继承必须确保超类所拥有的性质在子类中仍然成立</p>
<p>子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法</p>
<h4 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h4><p>要面向接口编程，不要面向实现编程</p>
<p>每个类尽量提供接口或抽象类，或者两者都具备</p>
<p>变量的声明类型尽量是接口或者是抽象类</p>
<p>任何类都不应该从具体类派生</p>
<p>使用继承时尽量遵循里氏替换原则</p>
<h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><p>将庞大的接口拆分成更小的和更具体的接口</p>
<p>使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合</p>
<h4 id="迪米特法则（最少知道原则）"><a href="#迪米特法则（最少知道原则）" class="headerlink" title="迪米特法则（最少知道原则）"></a>迪米特法则（最少知道原则）</h4><p>只与你的直接朋友交谈，不跟“陌生人”说话 其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性</p>
<h4 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h4><p>原则是尽量使用合成/聚合的方式，而不是使用继承。如果要使用继承关系，则必须严格遵循里氏替换原则。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范</p>
<h4 id="单一原则"><a href="#单一原则" class="headerlink" title="单一原则"></a>单一原则</h4><p>一个类只做一件事</p>
<h3 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h3><p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类【行为型模式】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MoBan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">rest</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">life</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        start();</span><br><span class="line">        work();</span><br><span class="line">        rest();</span><br><span class="line">        work();</span><br><span class="line">        close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">MoBan</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始上班&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始休息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始下班&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MoBan teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line">        teacher.life();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">开始上班</span><br><span class="line">开始工作</span><br><span class="line">开始休息</span><br><span class="line">开始工作</span><br><span class="line">开始下班</span><br></pre></td></tr></table></figure>

<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>它封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展</p>
<p>它在父类中提取了公共的部分代码，便于【代码复用】</p>
<p>部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象，间接地增加了系统实现的复杂度</p>
<p>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度</p>
<p>由于继承关系自身的缺点，如果父类添加新的抽象方法，则所有子类都要改一遍</p>
<p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>javaSE 面向对象 复习</title>
    <url>/posts/399676132/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%93%91%E5%89%A7.5q1pbp7pdzs0.webp" alt="哑剧"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="java-SE-复习整理-（仗剑走天涯）"><a href="#java-SE-复习整理-（仗剑走天涯）" class="headerlink" title="java SE 复习整理 （仗剑走天涯）"></a>java SE 复习整理 （仗剑走天涯）</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>在java中万物皆对象</p>
<h3 id="面向对象-amp-面向过程"><a href="#面向对象-amp-面向过程" class="headerlink" title="面向对象&amp;面向过程"></a>面向对象&amp;面向过程</h3><h4 id="面向过程-–步骤化"><a href="#面向过程-–步骤化" class="headerlink" title="面向过程 –步骤化"></a>面向过程 –步骤化</h4><p>面向过程就是分析出实现需求所需要的步骤，通过函数（方法）一步一步实现这些步骤，接着依次调用即可</p>
<h4 id="面向对象-–行为化"><a href="#面向对象-–行为化" class="headerlink" title="面向对象 –行为化"></a>面向对象 –行为化</h4><p>面向对象是把整个需求按照特点、功能划分，将这些存在共性的部分封装成类（类实例化后才是对象），让对象去解决对应的问题</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>将类的属性隐藏在内部、外部不能直接访问和修改</p>
<p><strong>核心思想</strong></p>
<p>尽可能的把属性都隐藏在内部、对外提供方法访问、在这些方法中添加逻辑处理来实现过滤以及屏蔽错误数据</p>
<p><strong>一般步骤</strong></p>
<p>修改属性的访问权限为私有、使外部无法直接访问</p>
<p>提供外部可以直接调用的方法</p>
<p>在该方法中加入逻辑控制、避免出现错误</p>
<h3 id="成员变量-amp-成员方法"><a href="#成员变量-amp-成员方法" class="headerlink" title="成员变量&amp;成员方法"></a>成员变量&amp;成员方法</h3><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>类的一些属性特征</p>
<h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><p>类的一些行为、动作</p>
<h3 id="return关键字"><a href="#return关键字" class="headerlink" title="return关键字"></a>return关键字</h3><p>终止当前方法继续执行</p>
<p>返回方法的返回值</p>
<p><strong>在void中，即使没有返回值的方法中也能 用return</strong></p>
<h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>方法名必须一致</p>
<p>参数不一致，有两层含义第一是参数的数量不一致，第二层含义是：参数的类型不一致，【参数的名字一样不一样都行】</p>
<p>返回值无要求。</p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p><code>语法</code>：访问修饰符 返回类型 方法名(数据类型… 形参名) {}</p>
<p>这种参数可以随心所欲去传递参数</p>
<p><strong>一个方法的形参列表最多只能出现一个可变参数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... nums,<span class="keyword">int</span>... nums2)</span></span>;  <span class="comment">// 不可以</span></span><br></pre></td></tr></table></figure>

<p><strong>可变参数可以和普通参数放在一起，但是可变参数必须放在最后</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> first,<span class="keyword">int</span>... nums2)</span></span>;   <span class="comment">// 可以</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... nums2,<span class="keyword">int</span> last)</span></span>;    <span class="comment">// 不可以</span></span><br></pre></td></tr></table></figure>

<h3 id="局部变量和作用域"><a href="#局部变量和作用域" class="headerlink" title="局部变量和作用域"></a>局部变量和作用域</h3><p>成员变量会有默认值：基础数据都是零，char中的零是代表空字符，boolean是false，引用数据类型都是null</p>
<p>局部变量没有默认值：必须初始化才能使用</p>
<h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><pre><code>√    √    √    √
√    √    √    ×
√    √    ×    ×
√    ×    ×    ×
</code></pre>
<table>
<thead>
<tr>
<th>作用域</th>
<th>当前类</th>
<th>同package</th>
<th>子孙类</th>
<th>其他package</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>friendly( default )</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p><strong>class只能被public修饰，但是内部类可以被以上几种修饰</strong></p>
<p><strong>局部变量不能使用权限修饰符</strong></p>
<h3 id="构造方法（构造器）"><a href="#构造方法（构造器）" class="headerlink" title="构造方法（构造器）"></a>构造方法（构造器）</h3><p>方法名与类名相同</p>
<p>java的类默认带一个无参构造的构造方法</p>
<p>在new对象的时候主动被调用</p>
<p>如果自己手写了一个带参数的构造方法 那么这个带参数的构造方法会自动覆盖默认的那个构造方法 所以要手写一个不带参数的 要不然new的时候不能new不带参的</p>
<h4 id="new一个对象干啥了"><a href="#new一个对象干啥了" class="headerlink" title="new一个对象干啥了"></a>new一个对象干啥了</h4><p>java在new一个对象的时候，会先查看对象所属的类有没有被加载到内存，如果没有的话，就会先通过类的权限定名来加载</p>
<p>加载并初始化类完成后，再进行对象的创建工作。</p>
<h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p><strong>每一个方法都会默认传入一个变量叫this，它永远指向调用它的【当前实例】</strong></p>
<p>一个方法只有在调用的时候，才能明确方法中的【this】具体指向哪个实例对象。</p>
<p>我们可以使用this访问当前对象的方法和属性</p>
<p><strong>如果我们使用无参构造会传入一个默认值，这就是典型的案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">xiaobo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>引用数据类型</p>
<p>常用 new不new都行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = <span class="keyword">new</span> String(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">String name = <span class="string">&quot;xiaobo&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>使用string一定要注意，必须用一个新的String接受</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String substring = name.substring(<span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h4 id="符串查找-indexOf"><a href="#符串查找-indexOf" class="headerlink" title="符串查找 indexOf()"></a>符串查找 indexOf()</h4><p>String 类的 indexOf() 方法在字符串中查找子字符串出现的位置，如过存在返回字符串出现的位置（第一位为0），如果不存在返回 -1</p>
<h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><p>java String 类的 replace 方法可以替换字符串中的字符</p>
<p><code>replace()</code> 替换全部</p>
<p><code>replaceFirst()</code> 替换第一个遇到的</p>
<p><code>replaceAll()</code> 替换全部</p>
<h4 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h4><p>split(string) 方法通过指定分隔符将字符串分割为数组</p>
<h4 id="字符串截串"><a href="#字符串截串" class="headerlink" title="字符串截串"></a>字符串截串</h4><p>substring(string) 方法可以截取从第几个下标（0开始，包含第一个开始）到第几个下标（不包含）的字符串</p>
<h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><p><code>equals()</code> 区分大小写比较字符串</p>
<p><code>equalsIgnoreCase()</code> 不区分大小写比较字符串</p>
<h4 id="字符串小写转大写"><a href="#字符串小写转大写" class="headerlink" title="字符串小写转大写"></a>字符串小写转大写</h4><p>String toUpperCase() 方法将字符串从小写转为大写</p>
<h3 id="包装类和自动拆装箱"><a href="#包装类和自动拆装箱" class="headerlink" title="包装类和自动拆装箱"></a>包装类和自动拆装箱</h3><table>
<thead>
<tr>
<th>基本数据类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
</tbody></table>
<p><code>自动装箱</code>：将基础数据类型自动装换为包装类</p>
<p><code>自动拆箱</code>：将包装类自动转换为基础数据类型</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>先这样讲 现在有人 但是人有男的 有女的 但是不管是男的还是女的都是人 所以男的和女的可以继承人该有的最基本的东西</p>
<p>继承可以解决代码复用的问题，一个类可以继承一个类，被继承的类我们称之为【父类】或者【超类】，另一个类称之为【子类】也叫【派生类】，子类可以通过extends关键字获取父类的成员变量和成员方法的能力，除了被private修饰的。在java中是单继承的，这样可以规范代码的实现</p>
<p><strong>构造一个子类一定会先构造一个父类</strong></p>
<h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>在子类的成员方法中，访问父类的成员变量</p>
<p>在子类的成员方法中，访问父类的成员方法</p>
<p>在子类的构造方法中，访问父类的构造方法</p>
<h4 id="super调用父类的方法和属性"><a href="#super调用父类的方法和属性" class="headerlink" title="super调用父类的方法和属性"></a>super调用父类的方法和属性</h4><p>先在当前类中寻找</p>
<p>当前类没有，继续向父类中寻找</p>
<p>如果还是没有，就向父类的父类继续寻找</p>
<p>直到到达一个所有类的共同父类，他叫Object</p>
<p><strong>super构造器只能放在第一行</strong></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>子类继承了父类所有的非私有的属性和方法，可以直接调用。<br>子类在构造的时候，一定会构造一个父类，默认调用父类的无参构造器</p>
<p>子类如果希望指定去调用父类的某个构造器， 则显式的调用一下 : super(参数列表)</p>
<p>super和this当做构造器使用时， 必须放在构造器第一行，所以只能二选一</p>
<p>java 所有类都是 Object 类的子类, Object 是所有类的基类</p>
<p>子类最多只能继承一个父类(指直接继承)， java 中是单继承机制，我们可以使用连续继承来实现</p>
<h4 id="this-amp-super"><a href="#this-amp-super" class="headerlink" title="this&amp;super"></a>this&amp;super</h4><table>
<thead>
<tr>
<th></th>
<th>this</th>
<th>super</th>
</tr>
</thead>
<tbody><tr>
<td>访问方法</td>
<td>访问本实例的属性，没有会继续向父类检索</td>
<td>访问父类实例的属性，没有会继续向父类检索</td>
</tr>
<tr>
<td>访问属性</td>
<td>访问本实例的方法，没有会继续向父类检索</td>
<td>访问父类实例的方法，没有会继续向父类检索</td>
</tr>
<tr>
<td>访问构造方法</td>
<td>调用本类的构造器，必须放在第一行，不会向上检索</td>
<td>调用父类的构造器，必须放在第一行，不会向上检索</td>
</tr>
</tbody></table>
<h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>重写一定要保证参数、名字全部一样</p>
<p>返回值要一样，或者返回父类的子类型</p>
<h3 id="重载-amp-重写"><a href="#重载-amp-重写" class="headerlink" title="重载&amp;重写"></a>重载&amp;重写</h3><table>
<thead>
<tr>
<th>名称</th>
<th>范围</th>
<th>方法名</th>
<th>形参列表</th>
<th>返回类型</th>
<th>权限修饰</th>
</tr>
</thead>
<tbody><tr>
<td>重载（overload）</td>
<td>本类</td>
<td>必须相同</td>
<td>类型，个数或者顺序不同，名字无所谓</td>
<td>没有要求</td>
<td>无要求</td>
</tr>
<tr>
<td>重写（override）</td>
<td>父子类</td>
<td>必须相同</td>
<td>必须相同</td>
<td>一样，或者子类的返回值是父类的返回值的子类</td>
<td>子类不能缩小父类的访问权限</td>
</tr>
</tbody></table>
<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>可以修饰变量，方法，以及类</p>
<h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>被final修饰的变量不能被修改，这里有两层含义，如果final修饰的是基础数据类型是只不能被修改，如果是引用数据类型就是引用指向不能被修改</p>
<p>被final修饰的方法不能被重写</p>
<p>被final修饰的类不能被继承</p>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean equals(Object obj)</td>
<td>指示某个其他对象是否与此对象“相等”</td>
</tr>
<tr>
<td>public native int hashCode();</td>
<td>返回该对象的哈希码值</td>
</tr>
<tr>
<td>String toString()</td>
<td>返回该对象的字符串表示</td>
</tr>
<tr>
<td>Class&lt;? extendsObject&gt; getClass()</td>
<td>返回一个对象的运行时类</td>
</tr>
<tr>
<td>void notify()</td>
<td>唤醒在此对象监视器上等待的单个线程</td>
</tr>
<tr>
<td>void notifyAll()</td>
<td>唤醒在此对象监视器上等待的所有线程</td>
</tr>
<tr>
<td>void wait()</td>
<td>导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法</td>
</tr>
<tr>
<td>void wait(long timeout)</td>
<td>导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量</td>
</tr>
<tr>
<td>void wait(long timeout, int nanos)</td>
<td>导致当前的线程等待，直到其他线程调用此对象的 notify()</td>
</tr>
<tr>
<td>protected native Object clone()</td>
<td>克隆对象，浅拷贝</td>
</tr>
<tr>
<td>protected void finalize()</td>
<td>垃圾回收器准备释放内存的时候，会先调用finalize()</td>
</tr>
</tbody></table>
<h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h4><p>一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值</p>
<h4 id="hashCode特点"><a href="#hashCode特点" class="headerlink" title="hashCode特点"></a>hashCode特点</h4><p>只能通过原文计算出hash值，而且每次计算都一样，不能通过hash值计算原文</p>
<p>原文的微小变化就能是hash值发生巨大变化</p>
<p>一个好的hash算法还能尽量避免发生hash值重复的情况，也叫hash碰撞</p>
<h4 id="hashCode用途"><a href="#hashCode用途" class="headerlink" title="hashCode用途"></a>hashCode用途</h4><p><strong>保存密码</strong></p>
<p><strong>文件的校验，检查数据的一致性</strong></p>
<h4 id="常见的Hash摘要算法"><a href="#常见的Hash摘要算法" class="headerlink" title="常见的Hash摘要算法"></a>常见的Hash摘要算法</h4><p><code>Md5</code> 英语：MD5 Message-Digest Algorithm,一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致</p>
<p><code>SHA1</code> 英语：Secure Hash Algorithm 1，中文名：安全散列算法1,一种密码散列函数,SHA-1可以生成一个被称为消息摘要的160位（20字节）散列值，散列值通常的呈现形式为40个十六进制数</p>
<p><code>SHA256</code> SHA256算法使用的哈希值长度是256位</p>
<p><code>SHA512</code> 算法使用的哈希值长度是512位</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    MessageDigest sha512 = MessageDigest.getInstance(<span class="string">&quot;SHA-512&quot;</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] digest = sha512.digest(<span class="string">&quot;123&quot;</span>.getBytes());</span><br><span class="line">    System.out.println(digest.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用相对应的算法只需要MessageDigest.getInstance(“SHA-512”);方法中改成相应的算法名即可</strong></p>
<h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><p><strong>源码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="equals-amp-的区别"><a href="#equals-amp-的区别" class="headerlink" title="equals &amp; == 的区别"></a>equals &amp; == 的区别</h4><p>==可以比基础数据类型也可以比较引用数据类型，比较基础数据类型时比较的是具体的值，比较引用数据类型实际上比较的是内存地址</p>
<p>equals是Object的一个方法，默认的实现就是 ==</p>
<p>我们可以重写equals方法，是我们的特性需求，比如String就重写了equals方法，所以字符串调用equals比较的是每一个字符</p>
<p><strong>jdk 8 String重写的equals</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>对象名 + @ + hashCode</p>
<h4 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h4><p>java提供finalize()方法，垃圾回收器准备释放内存的时候，会先调用finalize()</p>
<p><strong>jdk9开始声明已经过时</strong></p>
<p><strong>不推荐使用</strong></p>
<h4 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h4><p>克隆就是在内存里边赋值一个实例对象。但是Object的克隆方法只能浅拷贝。同时必须实现Cloneable接口</p>
<p><strong>Object中默认的clone方法，是浅拷贝的</strong></p>
<h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象</p>
<p><strong>实现对象拷贝的类，必须实现Cloneable接口，并覆写clone()方法。</strong></p>
<p><code>student</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span>  <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,Integer age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>main</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student(<span class="string">&quot;xiaobo&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        Student clone = (Student) student.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line"></span><br><span class="line">        System.out.println(student.getName().hashCode());</span><br><span class="line">        System.out.println(clone.getName().hashCode());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>运行结果</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.dream.xiaobo.objects.Student@6d6f6e28</span><br><span class="line">com.dream.xiaobo.objects.Student@135fbaa4</span><br><span class="line">-<span class="number">759499924</span>  </span><br><span class="line">-<span class="number">759499924</span></span><br></pre></td></tr></table></figure>

<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>深拷贝会拷贝所有的属性,并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大</p>
<p>如果在拷贝一个对象时，要想让这个拷贝的对象和源对象完全彼此独立，那么在引用链上的每一级对象都要被显式的拷贝。所以创建彻底的深拷贝是非常麻烦的，尤其是在引用关系非常复杂的情况下， 或者在引用链的某一级上引用了一个第三方的对象， 而这个对象没有实现clone方法， 那么在它之后的所有引用的对象都是被共享的</p>
<p><code>person</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.student = student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.student = student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Person person = (Person) <span class="keyword">super</span>.clone();</span><br><span class="line"></span><br><span class="line">        person.student = (Student) student.clone();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>student</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span>  <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Man man;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Giri giri;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Man <span class="title">getMan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> man;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMan</span><span class="params">(Man man)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.man = man;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Giri <span class="title">getGiri</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> giri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGiri</span><span class="params">(Giri giri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.giri = giri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,Integer age)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Man man, Giri giri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.man = man;</span><br><span class="line">        <span class="keyword">this</span>.giri = giri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) <span class="keyword">super</span>.clone();</span><br><span class="line"></span><br><span class="line">        student.man = (Man) man.clone();</span><br><span class="line"></span><br><span class="line">        student.giri = (Giri) giri.clone();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>giri</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Giri</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>man</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>main</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="keyword">new</span> Student(<span class="keyword">new</span> Man(),<span class="keyword">new</span> Giri()));</span><br><span class="line"></span><br><span class="line">        Person clone = (Person) person.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(person == clone);</span><br><span class="line">        System.out.println(person.getStudent() == clone.getStudent());</span><br><span class="line">        System.out.println(person.getStudent().getMan() == clone.getStudent().getMan());</span><br><span class="line">        System.out.println(person.getStudent().getGiri() == clone.getStudent().getGiri());</span><br></pre></td></tr></table></figure>

<p><code>运行结果</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<p><strong>简单图示剖析</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/clone().oq15vhhsfmo.webp" alt="clone()"></p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="宏观意义上理解的多态"><a href="#宏观意义上理解的多态" class="headerlink" title="宏观意义上理解的多态"></a>宏观意义上理解的多态</h4><p>有继承</p>
<p>有重写</p>
<p>有父类引用指向子类对象</p>
<h4 id="多态的底层原理"><a href="#多态的底层原理" class="headerlink" title="多态的底层原理"></a>多态的底层原理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person = Math.random() &gt; <span class="number">0.5</span> ? <span class="keyword">new</span> Student() : <span class="keyword">new</span> Teacher();</span><br></pre></td></tr></table></figure>

<p>等于号左侧是确定的，永远不能变，而右侧则不一样了，在代码未执行，其实我们也无法知道</p>
<p>等于号左边 叫做 【静态类型】，或者叫【编译类型】或者叫【申明类型】，或者叫【外观类型】</p>
<p>等于号右侧的我们叫【动态类型】，也叫【运行时类型】或者叫【实际类型】</p>
<p>对于静态类型，jvm在编译的时候就能确定具体调用哪个版本的方法，字节码指令执行时直接调用即可，而动态类型必须等待运行时才能确定类型，与此同时才能同步开展选择方法版本的工作，这个运行时才选择方法调用版本的行为称之为【虚方法分派】</p>
<h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>常量池是我们的资源仓库，里边保存了大量的符号引用（就是的你给类、方法、变量的名字），这些符号引用有一部分会在类加载阶段或者第一次使用的时候就被转化为【直接引用】，这种转化叫做【静态解析】，另一部分会在运行期间转化为【直接引用】，这一部分称之为【动态链接】</p>
<p><strong>例</strong></p>
<p>假如说你和你的女朋友或者男朋友是异地恋 今天放假 你高兴的要去找你对象，那么你对象就是符号引用 你就是运行时 这个时候你在北京 它在大连 这个时候就可以将你找对象转换为你去大连 这个过程就是【静态解析】</p>
<p>假如说你的另一半是已经注定好的了，如果你不去寻找，那么最后可能就是注定的那个人，但是在成长的路上可能会遇见你喜欢的人，可能在初中遇见一个，高中遇见一个，大学遇见一个，社会上遇见一个，所以就是不到最后你都不知道那个人会是谁，不知道具体的位置，这个过程就是【动态链接】</p>
<p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯 大学B组 java基础篇 下</title>
    <url>/posts/2931258348/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%83%8F%E4%BB%80%E4%B9%88.y3kep1c7yxs.webp" alt="像什么"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="算法很美-java基础篇"><a href="#算法很美-java基础篇" class="headerlink" title="算法很美 java基础篇"></a>算法很美 java基础篇</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">元素类型[] 数组引用变量;</span><br></pre></td></tr></table></figure>

<h3 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">元素类型[] 数组引用变量 = <span class="keyword">new</span> 元素类型[数组大小]</span><br></pre></td></tr></table></figure>

<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>数组的默认值为创建数组类型的默认值<br>数值型 0/0.0<br>布尔类型 false<br>引用型 null</p>
<h3 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h3><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.23hmeza6nsrk.webp" alt="数组内存模型"></p>
<p>数组变量实际存储的是指向数组的引用<br>数组变量是存放在栈中的 而数组是存储在堆中的 变量引用指向堆内存中的数组</p>
<h3 id="数组的简单案例"><a href="#数组的简单案例" class="headerlink" title="数组的简单案例"></a>数组的简单案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成一个指定长度指定范围的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 数组长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 数组最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 数组最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] initArr(<span class="keyword">int</span> length, <span class="keyword">int</span> min, <span class="keyword">int</span> max)&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            arr[i] = (<span class="keyword">int</span>)(min + Math.random() * (max - min + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArr</span><span class="params">(Integer[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找出数组中最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">arrMax</span><span class="params">(Integer[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer max = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找出数组中最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最小值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">arrMin</span><span class="params">(Integer[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer min = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; min)&#123;</span><br><span class="line">                min = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求数组元素的总和</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">arrSum</span><span class="params">(Integer[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组的平均值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">arrAvg</span><span class="params">(Integer[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer arrSum = arrSum(arr);</span><br><span class="line"></span><br><span class="line">        Double avg = Double.valueOf((arrSum / arr.length));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> avg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组随机交换位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">randomArr</span><span class="params">(Integer[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = (<span class="keyword">int</span>)(Math.random() * <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组前移</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">frontArr</span><span class="params">(Integer[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i - <span class="number">1</span>] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[arr.length - <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] initArr = initArr(<span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        printArr(initArr);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;最大值 &quot;</span> +  arrMax(initArr));</span><br><span class="line">        System.out.println(<span class="string">&quot;最小值 &quot;</span> + arrMin(initArr));</span><br><span class="line">        System.out.println(<span class="string">&quot;总和 &quot;</span> + arrSum(initArr));</span><br><span class="line">        System.out.println(<span class="string">&quot;平均值 &quot;</span> + arrAvg(initArr));</span><br><span class="line">        System.out.println(<span class="string">&quot;前移后数组为&quot;</span>);</span><br><span class="line">        frontArr(initArr);</span><br><span class="line">        System.out.println(<span class="string">&quot;交换位置后的数组为&quot;</span>);</span><br><span class="line">        randomArr(initArr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="foreach-jdk1-5开始引用出来的"><a href="#foreach-jdk1-5开始引用出来的" class="headerlink" title="foreach(jdk1.5开始引用出来的)"></a>foreach(jdk1.5开始引用出来的)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> e:myList)&#123;</span><br><span class="line">  System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>理解：对myList中每个元素e进行以下操作</p>
<h2 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基本数据类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本数据类型演示&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        i = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;j = &quot;</span> + j);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;引用数据类型演示&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        arr2 = arr1;</span><br><span class="line">        arr1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> e : arr2)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.4dj8wmvom760.webp" alt="基本数据类型和引用数据类型"></p>
<h2 id="System-arraycopy"><a href="#System-arraycopy" class="headerlink" title="System.arraycopy"></a>System.arraycopy</h2><p>复制数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    Object dest, <span class="keyword">int</span> destPos,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure>

<p><code>src</code>原数组  </p>
<p><code>srcPos</code>原数组下标</p>
<p><code>dest</code>目的地数组</p>
<p><code>destPos</code>目的地下标  </p>
<p><code>length</code>copy长度  </p>
<p>arraycopy方法不会给目标分配内存空间 复制前必须创建目标数组以及分配内存空间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">System.arraycopy(arr1,<span class="number">1</span>,arr2,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> e : arr2)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] y = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        m(x,y);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;x = &quot;</span> + x);<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;y[0] = &quot;</span> + y[<span class="number">0</span>]);<span class="comment">// 1314</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        number = <span class="number">521</span>;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1314</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个就是栈和堆的问题 基本数据类型和引用数据类型的区别 因为基本数据类型是存放在栈内存中的 传递回去的时候不受影响 而引用数据类型是指向堆内存的 而上面这个例子操作的是同一块堆内存 所以引用数据类型改变 基本数据类型不变</p>
<h2 id="检测数组中每个字母出现的数量"><a href="#检测数组中每个字母出现的数量" class="headerlink" title="检测数组中每个字母出现的数量"></a>检测数组中每个字母出现的数量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成一个长度为100的小写字母字符串</span></span><br><span class="line">        String s = RandomUtil.randomLowercaseString(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字符串拆分成字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] c = s.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将每个字母存放到数组中</span></span><br><span class="line">        <span class="keyword">int</span>[] letter = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历字符数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cc : c)&#123;</span><br><span class="line">            <span class="comment">//与字符a进行处理一下 并记录每次出现的字母+1 </span></span><br><span class="line">            letter[cc - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历输出</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)(i + <span class="string">&#x27;a&#x27;</span>) + <span class="string">&quot;=&quot;</span> + letter[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E4%BE%8B%E5%9B%BE.kaf738p52ps.webp" alt="冒泡排序例图"></p>
<p>可以看成向右看齐 一次次的筛选高个子 首先将高个子放在前面 然后在从剩下的里面继续找高个子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubble</span><span class="params">(Integer[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(Integer[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="comment">//定义最小值</span></span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="comment">//定义中间值</span></span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="comment">//遍历最小值的其他值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断最小值和其他值的关系、并进行排序交换</span></span><br><span class="line">                <span class="keyword">if</span>(arr[min] &gt; arr[j])&#123;</span><br><span class="line">                    temp = arr[min];</span><br><span class="line">                    arr[min] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断后一个是否比前一个数据小</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; arr[i - <span class="number">1</span>])&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//定义一个中间变量来存放小的那个数据</span></span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                <span class="comment">//定义一个变量j</span></span><br><span class="line">                <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//遍历当前数字的所有前面的数字</span></span><br><span class="line">                <span class="keyword">for</span>(j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>&amp;&amp;temp&lt;arr[j]; j--)&#123;</span><br><span class="line">                    <span class="comment">//将前一个赋值给后一个</span></span><br><span class="line">                    arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将中间变量temp赋值给不满足条件的那个值</span></span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="普通查找"><a href="#普通查找" class="headerlink" title="普通查找"></a>普通查找</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通查找方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 寻找的目标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">commonFind</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == target)&#123;</span><br><span class="line">                result = arr[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二分法查找 前提 数组必须是有序排序的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 查找的目标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化起始下标</span></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//初始化末尾下标</span></span><br><span class="line">        <span class="keyword">int</span> end = arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环遍历 只要起始下标不大于末尾下标</span></span><br><span class="line">        <span class="keyword">while</span> (begin &lt;= end)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到中间下标</span></span><br><span class="line">            <span class="keyword">int</span> indexMiddle = (begin + (end - begin) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开始进行二分查找 大于中间值 向后寻找 小于 向前寻找 找到相应值返回 没找到返回-1</span></span><br><span class="line">            <span class="keyword">if</span>(target &gt; indexMiddle)&#123;</span><br><span class="line">                begin = indexMiddle + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; indexMiddle)&#123;</span><br><span class="line">                end = indexMiddle - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> indexMiddle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>java.util.Arrays包下 </p>
<p>数组相关的工具类</p>
<p><code>sort()</code> 排序 （快速排序）</p>
<p><code>parallelSort()</code> 部分数组进行排序</p>
<p><code>binarySearch()</code> 二分法查找</p>
<p><code>equals()</code> 检测两个数组是否相等</p>
<p><code>fill()</code> 填充整个数组或部分数组</p>
<p><code>toString</code> 返回一个字符串</p>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="数组的声明-1"><a href="#数组的声明-1" class="headerlink" title="数组的声明"></a>数组的声明</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[][] arr;</span><br></pre></td></tr></table></figure>

<h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[][] arr = <span class="keyword">new</span> 数据类型[数组行大小][数组列大小];</span><br></pre></td></tr></table></figure>

<p>数组列大小可以不写 但是数组行大小必须写</p>
<h3 id="在坐标轴上找到两点间距离最小的两个点的坐标"><a href="#在坐标轴上找到两点间距离最小的两个点的坐标" class="headerlink" title="在坐标轴上找到两点间距离最小的两个点的坐标"></a>在坐标轴上找到两点间距离最小的两个点的坐标</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">double</span>[][] arr = &#123;</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">            &#123;<span class="number">13</span>,<span class="number">12</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">            &#123;<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">3</span>,<span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">11</span>,<span class="number">11</span>&#125;,</span><br><span class="line">            &#123;<span class="number">13</span>,<span class="number">13</span>&#125;,</span><br><span class="line">            &#123;<span class="number">15</span>,<span class="number">12</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0.5</span>,<span class="number">1</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//设置个最小的距离 等于 一个Double的最大值 假设两个点的距离不可能比这个大</span></span><br><span class="line">        <span class="keyword">double</span> min = Double.MAX_VALUE;</span><br><span class="line">        <span class="comment">//第一个点的下标</span></span><br><span class="line">        <span class="keyword">int</span> mini = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//第二个点的下标</span></span><br><span class="line">        <span class="keyword">int</span> minj = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//依次把每个点作为起点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="comment">//与每个点进行距离计算</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++)&#123;</span><br><span class="line">                <span class="keyword">double</span> x1 = arr[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">double</span> x2 = arr[j][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">double</span> y1 = arr[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">double</span> y2 = arr[j][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">double</span> dis = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//找到最小的距离</span></span><br><span class="line">                <span class="keyword">if</span>(dis &lt; min)&#123;</span><br><span class="line">                    min = dis;</span><br><span class="line">                    mini = i;</span><br><span class="line">                    minj = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最小距离&quot;</span> + min + <span class="string">&quot; mini：&quot;</span> + mini + <span class="string">&quot; minj：&quot;</span> + minj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>你懂得越多 你不懂的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯 大学B组 java基础篇 上</title>
    <url>/posts/3652207482/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/1%E5%8F%B7%E7%BA%BF.2ekzqhzkga4g.webp" alt="1号线"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="算法很美-java基础篇"><a href="#算法很美-java基础篇" class="headerlink" title="算法很美 java基础篇"></a>算法很美 java基础篇</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><blockquote>
<p>byte 一个字节 -128 ~ 127<br>short 二个字节 -2^15 ~ 2^15 - 1<br>int 四个字节 -2^31 ~ 2^31 - 1 32位处理器<br>long 八个字节 -2^63 ~ 2^63 - 1  </p>
</blockquote>
<h4 id="浮点数据类型"><a href="#浮点数据类型" class="headerlink" title="浮点数据类型"></a>浮点数据类型</h4><blockquote>
<p>float 四个字节 -3.403E38 ~ 3.403E38<br>double 八个字节 -1.798E308 ~ 1.798E308</p>
</blockquote>
<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><blockquote>
<p>char Unicode编码 0 ~ 65535 0x0000 ~ 0xffff </p>
</blockquote>
<h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><blockquote>
<p>boolean 值 true false</p>
</blockquote>
<h2 id="常量-字面量"><a href="#常量-字面量" class="headerlink" title="常量(字面量)"></a>常量(字面量)</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><h4 id="十进制数"><a href="#十进制数" class="headerlink" title="十进制数"></a>十进制数</h4><p>正常人们所用的数字 5 21 13 14</p>
<h4 id="八进制数"><a href="#八进制数" class="headerlink" title="八进制数"></a>八进制数</h4><p>用0开头表示 05 021 013 014</p>
<h4 id="十六进制数"><a href="#十六进制数" class="headerlink" title="十六进制数"></a>十六进制数</h4><p>用0x或0X开头表示 0x5 0x21 0x13 0x14</p>
<h4 id="二进制数-java7开始"><a href="#二进制数-java7开始" class="headerlink" title="二进制数(java7开始)"></a>二进制数(java7开始)</h4><p>用0b开头表示 0b5 0b21 0b13 0b14</p>
<h4 id="字面量加下划线-java7开始"><a href="#字面量加下划线-java7开始" class="headerlink" title="字面量加下划线(java7开始)"></a>字面量加下划线(java7开始)</h4><p>用下划线表示便于阅读 1_000_000 一百万</p>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><h4 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h4><blockquote>
<p>float 521.1314f 或 5211314.0F<br>double 521.1314 5211314.0</p>
</blockquote>
<h4 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h4><blockquote>
<p>52113.14e2 52113.14E2 52113.14E-2</p>
</blockquote>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>&#39;</td>
<td>单引号字符</td>
</tr>
<tr>
<td>&quot;</td>
<td>双引号字符</td>
</tr>
<tr>
<td>\</td>
<td>反斜杠字符</td>
</tr>
<tr>
<td>\t</td>
<td>垂直制表符</td>
</tr>
<tr>
<td>\b</td>
<td>退格</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\f</td>
<td>换页</td>
</tr>
</tbody></table>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>数字字母下划线美元符 中文可以 但是不推荐基本可以省略  关键字不能使用</p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%8F%98%E9%87%8F.a1oa2l509zc.png" alt="变量"></p>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><code>+</code> 加<br><code>-</code> 减<br><code>*</code> 乘<br><code>/</code> 除<br><code>%</code> 求模/取余<br><code>++</code> 自增<br><code>--</code> 自减<br>整数被除0会产生一个异常 浮点数被除0会产生一个无穷大或NaN</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><code>&amp;&amp;</code> 逻辑与 都真为真</p>
<p><code>||</code> 逻辑或 有真为真</p>
<p><code>!</code> 逻辑非 真为假 假为真</p>
<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>Love ? lucky : regretful </p>
<p>love 为 true lucky</p>
<p>love 为 false regretful</p>
<p>如果 爱 为真 是 幸运的 否则 遗憾的</p>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p><code>&amp;</code> 与运算符 都为1 结果为 1</p>
<p><code>|</code> 或运算符 有一个为1 结果为 1</p>
<p><code>^</code> 异或运算符 二者不同时结果为 1 任何数同自己异或为0 同0异或为自己 连续和同一个因子做异或运算<br>最终结果为自己</p>
<p><code>~</code> 非/取反运算符 1 结果为 0 0结果为 1</p>
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
<th>~a</th>
<th>a&amp;b</th>
<th>a或b</th>
<th>a^b</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody></table>
<p><code>&gt;&gt;</code> 右移运算符 用符号位填充高位</p>
<p><code>&lt;&lt;</code> 左移运算符</p>
<p><code>&gt;&gt;&gt;</code> 用0填充高位</p>
<h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><p>int类型 1 &lt;&lt; 35 和 1 &lt;&lt; 3 相同 因为int类型时32为 所以对32求模相同</p>
<p>long类型对64求模</p>
<h4 id="简单的求奇偶数"><a href="#简单的求奇偶数" class="headerlink" title="简单的求奇偶数"></a>简单的求奇偶数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">        num = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(num + <span class="string">&quot;是&quot;</span> + ((num &amp; <span class="number">1</span>) == <span class="number">1</span> ? <span class="string">&quot;奇数&quot;</span> : <span class="string">&quot;偶数&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>思路： 奇数的二进制最后一位一定是1 偶数的二进制最后一位一定是0 所以与1进行与运算即可</p>
<h4 id="获取二进制某一位是0还是1"><a href="#获取二进制某一位是0还是1" class="headerlink" title="获取二进制某一位是0还是1"></a>获取二进制某一位是0还是1</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> num = <span class="number">86</span>;</span><br><span class="line"></span><br><span class="line">       System.out.println(num + <span class="string">&quot;的二进制第五位是&quot;</span> </span><br><span class="line">               + (((num &gt;&gt; <span class="number">4</span>) &amp;<span class="number">1</span>) == <span class="number">1</span> ? <span class="string">&quot;1&quot;</span>: <span class="string">&quot;0&quot;</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">int</span> b;</span><br><span class="line">        a = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">        b = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;交换后&quot;</span>);</span><br><span class="line"></span><br><span class="line">        a = a ^ b;</span><br><span class="line">        b = a ^ b;</span><br><span class="line">        a = a ^ b;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="不用判断语句-求整数绝对值"><a href="#不用判断语句-求整数绝对值" class="headerlink" title="不用判断语句 求整数绝对值"></a>不用判断语句 求整数绝对值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = -<span class="number">521</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;num的绝对值为&quot;</span> + ((num ^ (num &gt;&gt; <span class="number">31</span>)) + (num &gt;&gt;&gt; <span class="number">31</span>)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table>
<thead>
<tr>
<th>操作符</th>
<th>用法案例</th>
<th>等价表达式</th>
</tr>
</thead>
<tbody><tr>
<td>+=</td>
<td>a+=b</td>
<td>a = a + b</td>
</tr>
<tr>
<td>-+</td>
<td>a-=b</td>
<td>a = a - b</td>
</tr>
<tr>
<td>*=</td>
<td>a*=b</td>
<td>a = a * b</td>
</tr>
<tr>
<td>/=</td>
<td>a/=b</td>
<td>a = a / b</td>
</tr>
<tr>
<td>%=</td>
<td>a%=b</td>
<td>a = a % b</td>
</tr>
</tbody></table>
<h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>小类型转换成大类型</p>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>大类型转换成小类型</p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.53nktx39kfk0.png" alt="类型转换"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.4yt3m5gyr700.png" alt="运算符优先级"></p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="不调用系统的Date和Calendar-API-输出当前系统时间"><a href="#不调用系统的Date和Calendar-API-输出当前系统时间" class="headerlink" title="不调用系统的Date和Calendar API 输出当前系统时间"></a>不调用系统的Date和Calendar API 输出当前系统时间</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回1970年1月1日零点至今的毫秒数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        currentTimeMillis用的是零区 我们用的是8区时间</span></span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> miao = time / <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> locationMiao = miao % <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> fen = miao / <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> locationFen = fen % <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> shi = fen / <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> locationShi = shi % <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小时加8</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前系统时间为：&quot;</span> + (locationShi + <span class="number">8</span>) + <span class="string">&quot;时&quot;</span> + locationFen + <span class="string">&quot;分&quot;</span> + locationMiao + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line"><span class="comment">//        Date date = new Date();</span></span><br><span class="line"><span class="comment">//        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span></span><br><span class="line"><span class="comment">//        String format = simpleDateFormat.format(date);</span></span><br><span class="line"><span class="comment">//        System.out.println(format);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Math.random() 随机返回[<span class="number">0</span>,<span class="number">1</span>) 之间的一个<span class="keyword">double</span>行浮点数 Math在lang包下 不用导包</span><br></pre></td></tr></table></figure>

<h2 id="字符进制转换问题"><a href="#字符进制转换问题" class="headerlink" title="字符进制转换问题"></a>字符进制转换问题</h2><h3 id="整数转换成16进制0至15以内"><a href="#整数转换成16进制0至15以内" class="headerlink" title="整数转换成16进制0至15以内"></a>整数转换成16进制0至15以内</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入0~15的整数&quot;</span>);</span><br><span class="line">        x = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(x + <span class="string">&quot;的十六进制为&quot;</span> + (x &gt; <span class="number">9</span> ? (<span class="keyword">char</span>)(<span class="string">&#x27;A&#x27;</span> + (x - <span class="number">10</span>)) : (<span class="keyword">char</span>)(<span class="string">&#x27;0&#x27;</span> + x)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串-String-引用数据类型"><a href="#字符串-String-引用数据类型" class="headerlink" title="字符串 String 引用数据类型"></a>字符串 String 引用数据类型</h2><p>字符串 和 整数相加 就是拼接</p>
<h3 id="String的常用方法"><a href="#String的常用方法" class="headerlink" title="String的常用方法"></a>String的常用方法</h3><p>自行查阅API 常用的方法必须会</p>
<h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><h3 id="闰年问题"><a href="#闰年问题" class="headerlink" title="闰年问题"></a>闰年问题</h3><p>能被4整除且不能被100整除 或者能被400整除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个年份&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> x = scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">1582</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的是错误信息 在1582年之前公里还未被采用&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((x % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; x % <span class="number">100</span> != <span class="number">0</span> ) || (x % <span class="number">400</span> == <span class="number">0</span>))&#123;</span><br><span class="line">            System.out.println(x + <span class="string">&quot;是润年&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(x + <span class="string">&quot;不是闰年&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="十六进制转换成十进制问题"><a href="#十六进制转换成十进制问题" class="headerlink" title="十六进制转换成十进制问题"></a>十六进制转换成十进制问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个0~9 A~F a~f 我们来给您转换成十进制数&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String x = scanner.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> result = x.charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x.length() &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您输入的有误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(result &gt;= <span class="number">48</span> &amp;&amp; result &lt;= <span class="number">57</span>)&#123;</span><br><span class="line">            System.out.println(result + <span class="string">&quot;的十进制数为&quot;</span> + result);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(result &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; result &lt;= <span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line">            System.out.println(result + <span class="string">&quot;的十进制数为&quot;</span> + (result - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(result &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; result &lt;= <span class="string">&#x27;f&#x27;</span>)&#123;</span><br><span class="line">            System.out.println(result + <span class="string">&quot;的十进制数为&quot;</span> + (result - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="十六进制转十进制-任意十六进制"><a href="#十六进制转十进制-任意十六进制" class="headerlink" title="十六进制转十进制(任意十六进制)"></a>十六进制转十进制(任意十六进制)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个十六进制数&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String x = scanner.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] arr = x.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> x1 = arr[i];</span><br><span class="line">            <span class="keyword">int</span> x11 = x1 - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(x1 &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; x1 &lt;= <span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line">                x11 = x1 - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x1 &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; x1 &lt;= <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">                x11 = x1 - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result += x11 * (<span class="keyword">int</span>)(Math.pow(<span class="number">16</span>,arr.length - i - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="十进制转十六进制-任意十进制数"><a href="#十进制转十六进制-任意十进制数" class="headerlink" title="十进制转十六进制(任意十进制数)"></a>十进制转十六进制(任意十进制数)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个十进制数&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> x = scanner.nextInt();</span><br><span class="line">        <span class="keyword">int</span> yushu = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> weizhi = <span class="number">0</span>;</span><br><span class="line">        String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String newResult = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span> (x != <span class="number">0</span>)&#123;</span><br><span class="line">         yushu = x % <span class="number">16</span>;</span><br><span class="line">         x = x / <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(yushu &gt; <span class="number">9</span>)&#123;</span><br><span class="line">             weizhi = (<span class="keyword">char</span>)(<span class="string">&#x27;A&#x27;</span> + yushu - <span class="number">10</span>);</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             weizhi = (<span class="keyword">char</span>)(<span class="string">&#x27;0&#x27;</span> + yushu);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         result += weizhi;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = result.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">         newResult += result.charAt(i);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;0x&quot;</span> + newResult);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> yushu = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入一个十进制数&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//非法字符 或 越界程序终止</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                x = scanner.nextInt();</span><br><span class="line">                y = x;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入有误 程序运行终止&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//存值变量</span></span><br><span class="line">            String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">//逆序输出变量</span></span><br><span class="line">            String newResult = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">//计数器</span></span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输入负数相当于2的31次幂 + 本身</span></span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                x = (<span class="keyword">int</span>) (Math.pow(<span class="number">2</span>,<span class="number">31</span>) + x);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//0还是0</span></span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</span><br><span class="line">                newResult += <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开始进行转换计算</span></span><br><span class="line">            <span class="keyword">while</span> (x != <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                yushu = x % <span class="number">2</span>;</span><br><span class="line">                x = x / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                count++;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(count % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    result += yushu;</span><br><span class="line">                    result += <span class="string">&quot;_&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result += yushu;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//补齐位数</span></span><br><span class="line">            <span class="keyword">while</span>(count &lt; <span class="number">31</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span>(count % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    result += <span class="number">0</span>;</span><br><span class="line">                    result += <span class="string">&quot;_&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result += <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//补全符号位</span></span><br><span class="line">            <span class="keyword">if</span>(y &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                result += <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(y &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                result += <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//逆序输出</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = result.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">                newResult += result.charAt(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">            System.out.println(newResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="随机数和循环的应用"><a href="#随机数和循环的应用" class="headerlink" title="随机数和循环的应用"></a>随机数和循环的应用</h2><h3 id="随机生成字符串"><a href="#随机生成字符串" class="headerlink" title="随机生成字符串"></a>随机生成字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入您要生成的字符串长度&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; x)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//随机生成 0 ~ 0xffff 的字符</span></span><br><span class="line">            <span class="keyword">char</span> c = (<span class="keyword">char</span>) (Math.random() *(<span class="number">0xffff</span> + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//生成数字字母随机数</span></span><br><span class="line">            <span class="keyword">if</span>((c &gt; <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt; <span class="string">&#x27;9&#x27;</span>) || (c &gt; <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt; <span class="string">&#x27;z&#x27;</span>) || (c &gt; <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt; <span class="string">&#x27;Z&#x27;</span>))&#123;</span><br><span class="line">                <span class="comment">//字符串拼接</span></span><br><span class="line">                result += c;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;生成的随机字符串为:&quot;</span> + result );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="PI的近似值"><a href="#PI的近似值" class="headerlink" title="PI的近似值"></a>PI的近似值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//数学家说的公式</span></span><br><span class="line">            result += Math.pow(-<span class="number">1</span>,i+<span class="number">1</span>) / (<span class="keyword">double</span>)(<span class="number">2</span> * i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//结果乘4</span></span><br><span class="line">        System.out.println(<span class="number">4</span> * result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="回文串"><a href="#回文串" class="headerlink" title="回文串"></a>回文串</h3><p>回文串就是正序和反序一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String result;</span><br><span class="line">        result = scanner.next();</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = result.length() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(begin &lt; end &amp;&amp; result.charAt(begin) == result.charAt(end))&#123;</span><br><span class="line">            begin++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(result + ((begin &gt;= end) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;不&quot;</span>) + <span class="string">&quot;是一个回文串&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="最大公约数问题"><a href="#最大公约数问题" class="headerlink" title="最大公约数问题"></a>最大公约数问题</h3><p>最大公约数：指两个或多个整数共有约数中最大的一个</p>
<p>两个整数 4 和 2 的最大公约数是 2</p>
<p>两个整数 16 和 24 的最大公约数是 8</p>
<h4 id="普通算法"><a href="#普通算法" class="headerlink" title="普通算法"></a>普通算法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入两个正整数&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> y = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//交换位置 找到较小值</span></span><br><span class="line">        <span class="keyword">if</span>(x &gt; y)&#123;</span><br><span class="line">            x = x ^ y;</span><br><span class="line">            y = x ^ y;</span><br><span class="line">            x = x ^ y;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x == y)&#123;</span><br><span class="line">            <span class="comment">//两个数相等最大公约数是其本身</span></span><br><span class="line">            System.out.println(x + <span class="string">&quot;和&quot;</span> + y + <span class="string">&quot;的最大公约数是&quot;</span> + x);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当两个数成倍数时 最大公约数为较小的</span></span><br><span class="line">        <span class="keyword">if</span>(y % x == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(x + <span class="string">&quot;和&quot;</span> + y + <span class="string">&quot;的最大公约数是&quot;</span> + x);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> gcd = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//找到最大公约数 因为最大公约数不可能大于较小数的一半 所以从一半开始</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x % i == <span class="number">0</span>)&#123;</span><br><span class="line">                gcd = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(x + <span class="string">&quot;和&quot;</span> + y + <span class="string">&quot;的最大公约数是&quot;</span> + gcd);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="欧几里德算法"><a href="#欧几里德算法" class="headerlink" title="欧几里德算法"></a>欧几里德算法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入两个正整数&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> y = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//交换位置 找到较小值</span></span><br><span class="line">        <span class="keyword">if</span>(x &gt; y)&#123;</span><br><span class="line">            x = x ^ y;</span><br><span class="line">            y = x ^ y;</span><br><span class="line">            x = x ^ y;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x == y)&#123;</span><br><span class="line">            <span class="comment">//两个数相等最大公约数是其本身</span></span><br><span class="line">            System.out.println(x + <span class="string">&quot;和&quot;</span> + y + <span class="string">&quot;的最大公约数是&quot;</span> + x);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当两个数成倍数时 最大公约数为较小的</span></span><br><span class="line">        <span class="keyword">if</span>(y % x == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(x + <span class="string">&quot;和&quot;</span> + y + <span class="string">&quot;的最大公约数是&quot;</span> + x);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//欧几里德法</span></span><br><span class="line">        <span class="keyword">while</span> (y % x != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = x;</span><br><span class="line">            x = y % x;</span><br><span class="line">            y = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(x + <span class="string">&quot;和&quot;</span> + y + <span class="string">&quot;的最大公约数是&quot;</span> + x);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="简单的随机生成数封装"><a href="#简单的随机生成数封装" class="headerlink" title="简单的随机生成数封装"></a>简单的随机生成数封装</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成两个字符间的一个字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 一个字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 一个字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a ~ b 之间的任意一个字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">randomChar</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">char</span>) (a + (<span class="keyword">int</span>)(Math.random() * (b - a +<span class="number">1</span>)));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">char</span>) (a + (<span class="keyword">int</span>)(Math.random() * (a - b + <span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成一个小写字母</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">randomLowercase</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        return (char) (&#x27;a&#x27; + Math.random() * (&#x27;z&#x27; - &#x27;a&#x27; + 1));</span></span><br><span class="line">        <span class="keyword">return</span> randomChar(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成一个大写字母</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">randomCapital</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        return (char) (&#x27;A&#x27; + Math.random() * (&#x27;Z&#x27; - &#x27;A&#x27; + 1));</span></span><br><span class="line">        <span class="keyword">return</span> randomChar(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成一个数字字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">randomNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        return (char)((int)(Math.random() * 10) + &#x27;0&#x27;);</span></span><br><span class="line">        <span class="keyword">return</span> randomChar(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成一个数字串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 生成的字符串长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">randomnumberString</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            stringBuilder.append(randomNumber());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成一个小写字母串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 生成的字符串长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">randomLowercaseString</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            stringBuilder.append(randomLowercase());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成一个大写字母串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 生成的字符串长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">randomCapitalString</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            stringBuilder.append(randomCapital());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成一个数字字母的串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 生成的字符串长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">randomLetterAndNumber</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> random = (<span class="keyword">int</span>)(Math.random() * <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">char</span> x = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="keyword">switch</span> (random)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    x = randomNumber();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    x = randomLowercase();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    x = randomCapital();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stringBuilder.append(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(randomChar(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;z&#x27;</span>));</span><br><span class="line">        System.out.println(randomLowercase());</span><br><span class="line">        System.out.println(randomCapital());</span><br><span class="line">        System.out.println(randomNumber());</span><br><span class="line">        System.out.println(randomnumberString(<span class="number">10</span>));</span><br><span class="line">        System.out.println(randomLowercaseString(<span class="number">10</span>));</span><br><span class="line">        System.out.println(randomCapitalString(<span class="number">10</span>));</span><br><span class="line">        System.out.println(randomLetterAndNumber(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<p><strong>你懂得越多 你不懂的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构 C语言前篇</title>
    <url>/posts/3764329825/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%9B%BE%E4%B9%A6%E9%A6%86.13eahyy3l6rk.jpg" alt="图书馆"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="初始数据结构"><a href="#初始数据结构" class="headerlink" title="初始数据结构"></a>初始数据结构</h2><h3 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h3><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%80%83%E7%A0%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%B8%80%E7%AB%A0.7lhc0556ays0.jpg" alt="数据结构-第一章"></p>
<p><a href="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%80%83%E7%A0%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%B8%80%E7%AB%A0.7lhc0556ays0.jpg">图片地址</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%80%83%E7%A0%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%B8%80%E7%AB%A0.7lhc0556ays0.jpg">https://cdn.jsdelivr.net/gh/codexiaobo/image@main/数据结构/考研数据结构-第一章.7lhc0556ays0.jpg</a></p>
<p><a href="https://urlify.cn/uyEZnq">PDF文档地址</a></p>
<p><a href="https://urlify.cn/uyEZnq">https://urlify.cn/uyEZnq</a></p>
<h2 id="线性表-和-链表"><a href="#线性表-和-链表" class="headerlink" title="线性表 和 链表"></a>线性表 和 链表</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线性表的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	ElemType data[MAXSIZE];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;sqList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个元素并赋值给别的</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getElem</span><span class="params">(sqList L, <span class="keyword">int</span> i, ElemType* e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//校验</span></span><br><span class="line">	<span class="keyword">if</span> (L.length == <span class="number">0</span> || i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	*e = L.data[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listInsert</span><span class="params">(sqList L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (L.length == MAXSIZE) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (i &lt;= L.length) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = L.length; k &gt;= i - <span class="number">1</span>; k--) &#123;</span><br><span class="line">			L.data[k + <span class="number">1</span>] = L.data[k];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	L.data[i - <span class="number">1</span>] = e;</span><br><span class="line"></span><br><span class="line">	L.length++;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	sqList sqList;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,listInsert(sqList, <span class="number">3</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带头结点的按照位插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert1</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验、判断 i 插入的位置是否符合题意</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	LNode* p;<span class="comment">// 当前的结点</span></span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">// 当前指向的结点</span></span><br><span class="line">	p = L;<span class="comment">// L指向头节点</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 循环遍历找到位置数据和下标</span></span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//下一结点</span></span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		<span class="comment">//下标+1</span></span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//校验</span></span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//动态生成结点</span></span><br><span class="line">	LNode* s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将数据存到动态生成的结点中</span></span><br><span class="line">	s-&gt;data = e;</span><br><span class="line">	<span class="comment">//将要插入节点的前一节点的下一节点连接到新节点的下一节点</span></span><br><span class="line">	s-&gt;next = p-&gt;next;</span><br><span class="line">	<span class="comment">//将动态生成的节点连接到要插入节点的前一节点的下一节</span></span><br><span class="line">	p-&gt;next = s;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不带头结点的</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert2</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验、判断 i 插入的位置是否符合题意</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">		LNode* s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		s-&gt;data = e;</span><br><span class="line">		s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		L = s;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	LNode* p;<span class="comment">// 当前的结点</span></span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">1</span>;<span class="comment">// 当前指向的结点</span></span><br><span class="line">	p = L;<span class="comment">// L指向头节点</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 循环遍历找到位置数据和下标</span></span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//下一结点</span></span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		<span class="comment">//下标+1</span></span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//校验</span></span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//动态生成结点</span></span><br><span class="line">	LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将数据存到动态生成的结点中</span></span><br><span class="line">	s-&gt;data = e;</span><br><span class="line">	<span class="comment">//将要插入节点的前一节点的下一节点连接到新节点的下一节点</span></span><br><span class="line">	s-&gt;next = p-&gt;next;</span><br><span class="line">	<span class="comment">//将动态生成的节点连接到要插入节点的前一节点的下一节</span></span><br><span class="line">	p-&gt;next = s;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//后插操作</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListlaterInsert</span><span class="params">(LNode* p, ElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//校验链表</span></span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//动态分配一个结点</span></span><br><span class="line">	LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//检验</span></span><br><span class="line">	<span class="keyword">if</span> (s == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将数据存到动态生成的结点中</span></span><br><span class="line">	s-&gt;data = e;</span><br><span class="line">	<span class="comment">//将要插入节点的前一节点的下一节点连接到新节点的下一节点</span></span><br><span class="line">	s-&gt;next = p-&gt;next;</span><br><span class="line">	<span class="comment">//将动态生成的节点连接到要插入节点的前一节点的下一节</span></span><br><span class="line">	p-&gt;next = s;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前插操作</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListBeforeInsert</span><span class="params">(LNode* p, ElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//动态分配内存空间</span></span><br><span class="line">	LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验</span></span><br><span class="line">	<span class="keyword">if</span> (s == <span class="literal">NULL</span> || p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将新节点连上</span></span><br><span class="line">	s-&gt;next = p-&gt;next;</span><br><span class="line">	p-&gt;next = s;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将插入的节点利用中间量与前一节点交换数据、这就相当于是在前面差点了一个结点</span></span><br><span class="line">	ElemType temp = p-&gt;data;</span><br><span class="line"></span><br><span class="line">	p-&gt;data = s-&gt;data;</span><br><span class="line">	s-&gt;data = temp;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的删除</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//检验</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义循环到的节点</span></span><br><span class="line">	LNode* p;</span><br><span class="line">	<span class="comment">//定义指向的下标</span></span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//将L指向头节点</span></span><br><span class="line">	p = L;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//循环遍历、找到要操作节点的上一结点</span></span><br><span class="line">	<span class="keyword">while</span> (p == <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验</span></span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span> || p-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义要做操作的节点</span></span><br><span class="line">	LNode* q = p-&gt;next;</span><br><span class="line">	<span class="comment">//将要操作的结点的数据给e</span></span><br><span class="line">	e = q-&gt;data;</span><br><span class="line">	<span class="comment">//删除结点</span></span><br><span class="line">	p-&gt;next = q-&gt;next;</span><br><span class="line">	<span class="comment">//释放内存空间</span></span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定结点删除</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">LinkListDelete</span><span class="params">(LNode* p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义p的下一节点</span></span><br><span class="line">	LNode* q = p-&gt;next;</span><br><span class="line">	<span class="comment">//将p的下一节点的数据给p</span></span><br><span class="line">	p-&gt;data = q-&gt;data;</span><br><span class="line">	<span class="comment">//将p节点指向q的下一结点、进行删除q</span></span><br><span class="line">	p-&gt;next = q-&gt;next;</span><br><span class="line">	<span class="comment">//释放内存空间</span></span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//按位查找</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetElem</span><span class="params">(LinkList L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义循环到的节点</span></span><br><span class="line">	LNode* p;</span><br><span class="line">	<span class="comment">//定义指向的下标</span></span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//将L指向头节点</span></span><br><span class="line">	p = L;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验</span></span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i) &#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按值查找</span></span><br><span class="line"><span class="function">LNode* <span class="title">LocateElem</span><span class="params">(LinkList L, ElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	LNode* p = L-&gt;next;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e) &#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//设置初始值</span></span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//初始</span></span><br><span class="line">	LNode* p = L;</span><br><span class="line">	<span class="comment">//循环遍历</span></span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		len++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建单链表</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initList</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//动态分配内存空间</span></span><br><span class="line">	L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	<span class="comment">//检验</span></span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//头节点下一节点为空</span></span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_TailInsert</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//定义变量、插入的值</span></span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//动态生成结点</span></span><br><span class="line">	L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkList));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//记录一个r结点和s结点</span></span><br><span class="line">	LNode* s,* r = L;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//输入</span></span><br><span class="line">	scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//输入9999结束</span></span><br><span class="line">	<span class="keyword">while</span> (x != <span class="number">9999</span>) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//动态生成内存空间</span></span><br><span class="line">		s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将输入的值赋值给插入结点的数据</span></span><br><span class="line">		s-&gt;data = x;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将插入的节点连到r结点</span></span><br><span class="line">		r-&gt;next = s;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//将r结点指向s结点、使r结点为最后一个结点</span></span><br><span class="line">		r = s;</span><br><span class="line">		<span class="comment">//输入插入的值</span></span><br><span class="line">		scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//因为是尾部、所以r的下一结点为空	</span></span><br><span class="line">	r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//头插发创建链表  链表顺序是和插入数据相反</span></span><br><span class="line"><span class="function">LinkList <span class="title">list_HeadInsert</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//定义一个指针</span></span><br><span class="line">	LNode* s;</span><br><span class="line">	<span class="comment">//定义输入值</span></span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	<span class="comment">//动态生成链表</span></span><br><span class="line">	L = (LinkList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkList));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//输入数据</span></span><br><span class="line">	scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (x != <span class="number">9999</span>) &#123;</span><br><span class="line"></span><br><span class="line">		s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"></span><br><span class="line">		<span class="comment">//数据赋值</span></span><br><span class="line">		s-&gt;data = x;</span><br><span class="line">		<span class="comment">//将下一结点接到插入节点的下一结点</span></span><br><span class="line">		s-&gt;next = L-&gt;next;</span><br><span class="line">		<span class="comment">//将插入节点接到L结点</span></span><br><span class="line">		L-&gt;next = s;</span><br><span class="line">		<span class="comment">//输入值</span></span><br><span class="line">		scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个双链表的结构体、数据  前结点和后结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> &#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>* <span class="title">prior</span>, * <span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DLinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initDLinkList</span><span class="params">(DLinkList L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//动态获取内存</span></span><br><span class="line">	L = (DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//校验</span></span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//头结点的前结点为空</span></span><br><span class="line">	L-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//头结点的后结点为空</span></span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(DLinkList L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果为空true 反之 false</span></span><br><span class="line">	<span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双链表带头结点的插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextDNode</span><span class="params">(DNode* p, DNode* s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验</span></span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span> || s == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//s的下一结点指向p一开始的下一结点</span></span><br><span class="line">	s-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断p是不是最后一个结点</span></span><br><span class="line">	<span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="comment">//将p一开始的节点的前结点指向s结点</span></span><br><span class="line">		p-&gt;next-&gt;prior = s;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将s的前一结点指向p</span></span><br><span class="line">	s-&gt;prior = p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//p的下一结点指向s</span></span><br><span class="line">	p-&gt;next = s;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除一个结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteNextDNode</span><span class="params">(DNode* p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验</span></span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//找到要删除的结点</span></span><br><span class="line">	DNode* q = p-&gt;next;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//检验</span></span><br><span class="line">	<span class="keyword">if</span> (q == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//将p的结点指向要删除的下一结点</span></span><br><span class="line">	p-&gt;next = q-&gt;next;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检验</span></span><br><span class="line">	<span class="keyword">if</span> (q-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="comment">//将要删除的结点的下一结点的前结点指向p</span></span><br><span class="line">		q-&gt;next-&gt;prior = p;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//释放q要删除结点的内存空间</span></span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryList</span><span class="params">(DLinkList L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (L-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		DeleteNextDNode(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(L);</span><br><span class="line"></span><br><span class="line">	L = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DNode* <span class="title">selectLinkList</span><span class="params">(DNode *p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//向后遍历跳过头结点</span></span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//向前遍历跳过头结点</span></span><br><span class="line">	<span class="keyword">while</span> (p-&gt;prior != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		p = p-&gt;prior;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后结点遍历</span></span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//前结点遍历</span></span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		p = p-&gt;prior;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> &#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	DNode* prior;</span><br><span class="line">	DNode* next;</span><br><span class="line">&#125;DNode,* LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化循环双链表	</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initList</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	L = (DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	L-&gt;next = L;</span><br><span class="line">	L-&gt;prior = L;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%80%83%E7%A0%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%BA%8C%E7%AB%A0.1oz2o4mj1deo.jpg" alt="数据结构-第二章"></p>
<p><a href="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%80%83%E7%A0%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%BA%8C%E7%AB%A0.1oz2o4mj1deo.jpg">图片地址</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%80%83%E7%A0%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%BA%8C%E7%AB%A0.1oz2o4mj1deo.jpg">https://cdn.jsdelivr.net/gh/codexiaobo/image@main/数据结构/考研数据结构-第二章.1oz2o4mj1deo.jpg</a></p>
<p><a href="https://urlify.cn/uyEZnq">PDF文档地址</a></p>
<p><a href="https://urlify.cn/uyEZnq">https://urlify.cn/uyEZnq</a></p>
<h2 id="栈-和-队列"><a href="#栈-和-队列" class="headerlink" title="栈 和 队列"></a>栈 和 队列</h2><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxSize 10 <span class="comment">// 定义最大元素个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">// 声明类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	ElemType data[maxSize];<span class="comment">// 静态数组存放元素内容</span></span><br><span class="line">	<span class="keyword">int</span> top; <span class="comment">// 栈顶指针</span></span><br><span class="line">&#125;sqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initStack</span><span class="params">(sqStack *s)</span> </span>&#123;</span><br><span class="line">	s-&gt;top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为空栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(sqStack* s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(sqStack *s,ElemType x)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//栈满情况</span></span><br><span class="line">	<span class="keyword">if</span> (s-&gt;top == maxSize - <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针上移</span></span><br><span class="line">	s-&gt;top = s-&gt;top + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//新元素入栈</span></span><br><span class="line">	s-&gt;data[s-&gt;top] = x;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//等价于上边两步</span></span><br><span class="line">	<span class="comment">//s-&gt;data[++s-&gt;top] = x;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(sqStack* s, ElemType x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断是否为空栈</span></span><br><span class="line">	<span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//出栈</span></span><br><span class="line">	x = s-&gt;data[s-&gt;top];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//栈顶下移</span></span><br><span class="line">	s-&gt;top = s-&gt;top - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//等同于上两步</span></span><br><span class="line">	<span class="comment">//x = s-&gt;data[s-&gt;top--];</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getTop</span><span class="params">(sqStack* s, ElemType x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断是否为空栈</span></span><br><span class="line">	<span class="keyword">if</span> (s-&gt;top == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//读取栈顶</span></span><br><span class="line">	x = s-&gt;data[s-&gt;top];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//IDE括号原理</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">kuohao</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//声明一个链表</span></span><br><span class="line">	sqStack *s;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//链表初始化</span></span><br><span class="line">	initStack(s);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//遍历</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//如果是左括号、入栈</span></span><br><span class="line">		<span class="keyword">if</span> (str[i] == <span class="string">&#x27;(&#x27;</span> || str[i] == <span class="string">&#x27;[&#x27;</span> || str[i] == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">			push(s,str[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//如果栈为空</span></span><br><span class="line">			<span class="keyword">if</span> (StackEmpty(s))&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//接出栈的值</span></span><br><span class="line">			<span class="keyword">int</span> temp;</span><br><span class="line">			<span class="comment">//出栈</span></span><br><span class="line">			pop(s,temp);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//不匹配失败</span></span><br><span class="line">			<span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; temp != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (str[i] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; temp != <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (str[i] == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; temp != <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//最后如果栈为空、匹配成功</span></span><br><span class="line">	<span class="keyword">return</span> StackEmpty(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	ElemType data[maxSize];</span><br><span class="line">	ElemType front, rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef struct &#123;</span></span><br><span class="line"><span class="comment">//	ElemType data[maxSize];</span></span><br><span class="line"><span class="comment">//	ElemType front, rear;</span></span><br><span class="line"><span class="comment">//	ElemType size; //队列长度   每次入队size++ 每次出队size-- 并且判断队满是 size == maxSize 队空时为 size == 0</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef struct &#123;</span></span><br><span class="line"><span class="comment">//	ElemType data[maxSize];</span></span><br><span class="line"><span class="comment">//	ElemType front, rear;</span></span><br><span class="line"><span class="comment">//	ElemType tag; // 标记 最近的插入或删除操作 插入为tag = 1 删除为 tag = 0 那么只需要记录tag = 1时即为对满 tag = 0 时为对空</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitQueue</span><span class="params">(SqQueue* q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue* q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (q-&gt;front == q-&gt;rear) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue* q, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断循环队列是否已经满了 这里是通过牺牲一个内存空间来做到的预先留出来一个存放rear指针</span></span><br><span class="line">	<span class="keyword">if</span> ((q-&gt;rear + <span class="number">1</span>) % maxSize == q-&gt;front) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//插入新元素</span></span><br><span class="line">	q-&gt;data[q-&gt;rear] = x;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//队尾指针 + 1 后 取模</span></span><br><span class="line">	q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % maxSize;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue* q,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断队列是否已经空了</span></span><br><span class="line">	<span class="keyword">if</span> (q-&gt;front == q-&gt;rear) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将出队数据给x</span></span><br><span class="line">	x = q-&gt;data[q-&gt;front];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//队头指针向后移动</span></span><br><span class="line">	q-&gt;front = (q-&gt;front + <span class="number">1</span>) % maxSize;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式队列的结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链式队列的头指针和尾指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	LinkNode * front, * rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化带头结点的队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue* q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//分配内存空间</span></span><br><span class="line">	q-&gt;front = q-&gt;rear = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将头结点设置为空</span></span><br><span class="line">	q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EmptyQueue</span><span class="params">(LinkQueue* q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (q-&gt;front == q-&gt;rear) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不带头结点的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue2</span><span class="params">(LinkQueue* q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	q-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line">	q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队 带头结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(LinkQueue* q, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//动态生成要插入的结点</span></span><br><span class="line">	LinkNode* s = (LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将x数据存入结点</span></span><br><span class="line">	s-&gt;data = x;</span><br><span class="line">	<span class="comment">//新结点的下一结点为空、因为是在最后插入的</span></span><br><span class="line">	s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将新节点连在rear后面</span></span><br><span class="line">	q-&gt;rear-&gt;next = s;</span><br><span class="line"></span><br><span class="line">	q-&gt;rear = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不带头结点的入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue2</span><span class="params">(LinkQueue *q,ElemType x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//动态生成结点</span></span><br><span class="line">	LinkNode *s = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将x放入到data中 </span></span><br><span class="line">	s-&gt;data = x;</span><br><span class="line">	<span class="comment">//将下一结点设置为空</span></span><br><span class="line">	s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//因为没有头结点、所以要特殊处理一下</span></span><br><span class="line">	<span class="keyword">if</span> (q-&gt;front == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="comment">//头指针指向s</span></span><br><span class="line">		q-&gt;front = s;</span><br><span class="line">		<span class="comment">//尾指针指向s</span></span><br><span class="line">		q-&gt;rear = s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//s连在尾指针指向的下一结点</span></span><br><span class="line">		q-&gt;rear-&gt;next = s;</span><br><span class="line">		<span class="comment">//移动尾指针</span></span><br><span class="line">		q-&gt;rear = s;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的出队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue* q, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断是否为空队</span></span><br><span class="line">	<span class="keyword">if</span> (q-&gt;front == q-&gt;rear) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获得q结点尾指针的下一结点</span></span><br><span class="line">	LinkNode* p = q-&gt;front-&gt;next;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将删除的数据给返回的x</span></span><br><span class="line">	x = p-&gt;data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将p的下一结点连到头结点</span></span><br><span class="line">	q-&gt;front-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断最后出队的是最后结点</span></span><br><span class="line">	<span class="keyword">if</span> (q-&gt;rear == p) &#123;</span><br><span class="line">		<span class="comment">//头指针指向尾指针</span></span><br><span class="line">		q-&gt;rear = q-&gt;front;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//释放内存空间</span></span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不带头结点的出队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue2</span><span class="params">(LinkQueue* q, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义头指针 指向p 出队</span></span><br><span class="line">	LinkNode* p = q-&gt;front;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 出队数据</span></span><br><span class="line">	x = p-&gt;data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将头指针指向p的下一节点</span></span><br><span class="line">	q-&gt;front = p-&gt;next;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果出队的是最后一个结点</span></span><br><span class="line">	<span class="keyword">if</span> (q-&gt;rear == p) &#123;</span><br><span class="line">		<span class="comment">//头指针和尾指针都设置为NULL</span></span><br><span class="line">		q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">		q-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//释放内存空间</span></span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%80%83%E7%A0%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%B8%89%E7%AB%A0.650lhlnzy9s0.jpg" alt="数据结构-第三章"></p>
<p><a href="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%80%83%E7%A0%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%B8%89%E7%AB%A0.650lhlnzy9s0.jpg">图片地址</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%80%83%E7%A0%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%B8%89%E7%AB%A0.650lhlnzy9s0.jpg">https://cdn.jsdelivr.net/gh/codexiaobo/image@main/数据结构/考研数据结构-第三章.650lhlnzy9s0.jpg</a></p>
<p><a href="https://urlify.cn/uyEZnq">PDF文档地址</a></p>
<p><a href="https://urlify.cn/uyEZnq">https://urlify.cn/uyEZnq</a></p>
<p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-事务</title>
    <url>/posts/3114355381/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211117000525.19f7hcui5t0g.png" alt="微信截图_20211117000525"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="事务-Transaction"><a href="#事务-Transaction" class="headerlink" title="事务 Transaction"></a>事务 Transaction</h2><p>要么都成功、要么都失败</p>
<p>将一组SQL放进一个批次执行</p>
<h2 id="事务原则-ACID原则"><a href="#事务原则-ACID原则" class="headerlink" title="事务原则 ACID原则"></a>事务原则 ACID原则</h2><h3 id="原子性-Atomicity"><a href="#原子性-Atomicity" class="headerlink" title="原子性 Atomicity"></a>原子性 Atomicity</h3><p>原子性是指事务是一个不可分割的工作单位、事务中的操作要么都发生、要么都不发生</p>
<h3 id="一致性-Consistency"><a href="#一致性-Consistency" class="headerlink" title="一致性 Consistency"></a>一致性 Consistency</h3><p>事务前后数据的完整性必须保持一直</p>
<h3 id="隔离性-Isolation"><a href="#隔离性-Isolation" class="headerlink" title="隔离性 Isolation"></a>隔离性 Isolation</h3><p>事务的隔离性是多个用户并发访问数据库时、数据库为每一个用户开启的事务、不能被其他事务的操作数据所干扰、多个并发事务之间要相互隔离</p>
<h3 id="持久性-Durability"><a href="#持久性-Durability" class="headerlink" title="持久性 Durability"></a>持久性 Durability</h3><p>持久性是指一个事务一旦被提交、对数据库中数据的改变是永久性的、接下来使数据库发生故障也不应该对其有任何影响</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 事务</span></span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT <span class="operator">=</span> <span class="number">0</span>; <span class="comment">-- 关闭自动提交事务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> TRANSACTION <span class="comment">-- 开启一个事务(一组事务)</span></span><br><span class="line"></span><br><span class="line">UPDATE account <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line">UPDATE account <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span> <span class="comment">-- 提交事务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>  <span class="comment">-- 回滚</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 打开自动提交事务  恢复默认值</span></span><br></pre></td></tr></table></figure>

<h2 id="可能发生的一些问题"><a href="#可能发生的一些问题" class="headerlink" title="可能发生的一些问题"></a>可能发生的一些问题</h2><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>指一个事务读取了另一个事务未提交的数据</p>
<h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>在一个事务内读取表中的某一行数据、多次读取结果不同</p>
<h3 id="续读-幻读"><a href="#续读-幻读" class="headerlink" title="续读(幻读)"></a>续读(幻读)</h3><p>在一个事务内读取到了别的事务插入的数据、导致前后读取不一致</p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助MySQL高效获取数据的数据结构</p>
<h2 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h2><h3 id="主键索引-PRIMARY-KEY"><a href="#主键索引-PRIMARY-KEY" class="headerlink" title="主键索引(PRIMARY KEY)"></a>主键索引(PRIMARY KEY)</h3><p>唯一的标识、主键不可重复、只能有一个列作为主键</p>
<h3 id="唯一索引-UNIQUE-KEY"><a href="#唯一索引-UNIQUE-KEY" class="headerlink" title="唯一索引(UNIQUE KEY)"></a>唯一索引(UNIQUE KEY)</h3><p>避免重复的列出现、唯一索引可以重复、多个列都可以标识位、唯一索引</p>
<h3 id="常规索引-KEY-INDEX"><a href="#常规索引-KEY-INDEX" class="headerlink" title="常规索引(KEY / INDEX)"></a>常规索引(KEY / INDEX)</h3><p>默认 </p>
<h3 id="全文索引-FULLTEXT"><a href="#全文索引-FULLTEXT" class="headerlink" title="全文索引(FULLTEXT)"></a>全文索引(FULLTEXT)</h3><p>快速定位</p>
<h2 id="索引的原则"><a href="#索引的原则" class="headerlink" title="索引的原则"></a>索引的原则</h2><ul>
<li><p>索引不是越多越好</p>
</li>
<li><p>不要对进程变动数据加索引</p>
</li>
<li><p>小数据量的表不需要加索引</p>
</li>
</ul>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>可视化工具可直接点击操作</p>
<h3 id="命令行形式"><a href="#命令行形式" class="headerlink" title="命令行形式"></a>命令行形式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- CREATE USER 用户名 IDENTIFIED BY &#x27;密码&#x27;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> xiaobo IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;xiaobo&#x27;</span> <span class="comment">-- 创建用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER USER &#x27;用户名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;密码&#x27;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;xiaobo&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>; <span class="comment">-- 修改用户名密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- GRANT ALL PRIVILEGES ON 库.表(*.*  代表所有的库所有的表) TO 用户名</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> xiaobo <span class="comment">-- 授予用户所有权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- RENAME USER 用户名 TO 新名字</span></span><br><span class="line">RENAME <span class="keyword">USER</span> xiaobo <span class="keyword">TO</span> wangyibo <span class="comment">-- 重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> wangyibo <span class="comment">-- 查看指定用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- REVOKE ALL PRIVILEGES ON *.* FROM 用户名 </span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> wangyibo <span class="comment">-- 撤销权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- DROP USER 用户名</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> wangyibo <span class="comment">-- 删除用户</span></span><br></pre></td></tr></table></figure>

<h2 id="备份和导入"><a href="#备份和导入" class="headerlink" title="备份和导入"></a>备份和导入</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>可视化工具可直接点击操作</p>
<p><strong>命令行</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysqldump -h主机名 -u用户名 -p密码 数据库名 &gt; 物理路径</span></span><br><span class="line">mysqldump <span class="operator">-</span>hlocalhost <span class="operator">-</span>uroot <span class="operator">-</span>pxiaobo test <span class="operator">&gt;</span> D:<span class="operator">/</span><span class="operator">/</span>a.sql <span class="comment">-- 备份数据库</span></span><br></pre></td></tr></table></figure>

<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>可视化工具可直接点击操作</p>
<p><strong>命令行</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 登录前提下</span></span><br><span class="line"><span class="comment">-- source 物理sql路径</span></span><br><span class="line">source D:<span class="operator">/</span><span class="operator">/</span>a.sql <span class="comment">-- 导入sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 未登录时</span></span><br><span class="line">mysql <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 <span class="operator">&lt;</span> 要导入的路径文件</span><br></pre></td></tr></table></figure>

<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="不理想的数据库"><a href="#不理想的数据库" class="headerlink" title="不理想的数据库"></a>不理想的数据库</h3><ul>
<li><p>数据冗余、浪费时间</p>
</li>
<li><p>数据库插入和删除都麻烦</p>
</li>
<li><p>程序的性能差</p>
</li>
</ul>
<h3 id="良好的数据库设计"><a href="#良好的数据库设计" class="headerlink" title="良好的数据库设计"></a>良好的数据库设计</h3><ul>
<li><p>节省内存空间</p>
</li>
<li><p>保证数据库的完整性</p>
</li>
<li><p>方便开发系统</p>
</li>
</ul>
<h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p>保证每一列不可再分</p>
<p>分量不可再分</p>
<h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><p>满足第一范式</p>
<p>每张表只描述一类事情</p>
<p>不存在非主属性对候选键的部分函数依赖</p>
<h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p>满足第一范式 和 第二范式</p>
<p>确保数据表中每一列数据都和主键直接有关、不能间接相关</p>
<p>不存在非主属性对候选键的传递函数依赖</p>
<h2 id="规范性-和-性能的问题"><a href="#规范性-和-性能的问题" class="headerlink" title="规范性 和 性能的问题"></a>规范性 和 性能的问题</h2><p>关联查询的表不得超过三张表</p>
<ul>
<li><p>商业化需求和目标中、数据库性能更重要</p>
</li>
<li><p>应适当考虑规范性</p>
</li>
<li><p>给某些表增加冗余字段(从多表查询变为单表查询)</p>
</li>
<li><p>增加计算列(从大数据量降低为小数据量的查询)</p>
</li>
</ul>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>SUN 公司简化开发人员的对数据库的统一操作、提供一个java操作数据库的规范</p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/mysql/JDBC.4heo7ffrezy0.png" alt="JDBC"></p>
<h3 id="java-jdbc-连接-mysql"><a href="#java-jdbc-连接-mysql" class="headerlink" title="java jdbc 连接 mysql"></a>java jdbc 连接 mysql</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDBC连接数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ResultSet query = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//连接信息</span></span><br><span class="line">            <span class="comment">//url useUnicode=true 支持Unicode编码  characterEncoding=utf8  支持utf8字符编码  useSSL=true  支持安全协议</span></span><br><span class="line">            String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false&quot;</span>;</span><br><span class="line">            <span class="comment">//用户名</span></span><br><span class="line">            String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="comment">//密码</span></span><br><span class="line">            String password = <span class="string">&quot;xiaobo&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//连接成功的数据库对象  connection</span></span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建执行sql的对象</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//SQL语句</span></span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM student&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行sql、返回结果集</span></span><br><span class="line">            query = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历结果</span></span><br><span class="line">            <span class="keyword">while</span> (query.next())&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;id =&quot;</span> + query.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;username =&quot;</span> + query.getObject(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;password =&quot;</span> + query.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;birthday = &quot;</span> + query.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;address = &quot;</span> + query.getObject(<span class="string">&quot;address&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;clazzid = &quot;</span> + query.getObject(<span class="string">&quot;clazzid&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;====================================================&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//释放连接   先开后关</span></span><br><span class="line">                query.close();</span><br><span class="line">                statement.close();</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;)</code> 加载驱动</p>
<p><code>DriverManager.getConnection(url, username, password)</code> DriverManager 连接数据库对象</p>
<p><code>connection.createStatement()</code> Statement 获取sql对象 connection就是数据库对象、数据库能做的事它都能做</p>
<p><code>statement.executeQuery(sql)</code> 执行sql statement是sql对象、它能做sql能做的事、crud都可以  executeUpdate(sql)更新 返回受影响的行数 executeQuery(sql) 查询 返回查询到的结果集</p>
<p><code>ResultSet</code> ResultSet 结果集对象</p>
<p><code>对象.close()</code> 释放资源、关闭连接</p>
<h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><ul>
<li>db.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span> = <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">xiaobo</span></span><br></pre></td></tr></table></figure>

<ul>
<li>JDBCUtils.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            InputStream inputStream = JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">            username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得连接方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,username,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 获得数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement 操作sql对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet 获得结果集对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releae</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验不为空则关闭资源</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != resultSet)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验不为空则关闭资源</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != statement)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验不为空则关闭资源</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != connection)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>更新</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;DELETE FROM student WHERE id = 1&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = statement.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JDBCUtils.releae(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestQuery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ResultSet query = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            statement =  connection.createStatement();</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM student&quot;</span>;</span><br><span class="line"></span><br><span class="line">            query = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历结果</span></span><br><span class="line">            <span class="keyword">while</span> (query.next())&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;id =&quot;</span> + query.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;username =&quot;</span> + query.getObject(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;password =&quot;</span> + query.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;birthday = &quot;</span> + query.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;address = &quot;</span> + query.getObject(<span class="string">&quot;address&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;clazzid = &quot;</span> + query.getObject(<span class="string">&quot;clazzid&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;====================================================&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>sql存在漏洞、会被攻击导致数据泄露</p>
<p>写sql往sql语句中拼接、写一些条件拼接在sql里面来逃避校验</p>
<h2 id="PreparedStatement对象"><a href="#PreparedStatement对象" class="headerlink" title="PreparedStatement对象"></a>PreparedStatement对象</h2><p>可防止SQL注入问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        PreparedStatement statement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//SQL用?代替</span></span><br><span class="line">            String sql = <span class="string">&quot;DELETE FROM student WHERE id = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译、先写SQL</span></span><br><span class="line">            statement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//为? 赋值</span></span><br><span class="line">            statement.setInt(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = statement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JDBCUtils.releae(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestQuery2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        PreparedStatement statement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ResultSet query = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM student WHERE id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">            statement =  connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            statement.setInt(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            query = statement.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历结果</span></span><br><span class="line">            <span class="keyword">while</span> (query.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id =&quot;</span> + query.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;username =&quot;</span> + query.getObject(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;password =&quot;</span> + query.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;birthday = &quot;</span> + query.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;address = &quot;</span> + query.getObject(<span class="string">&quot;address&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;clazzid = &quot;</span> + query.getObject(<span class="string">&quot;clazzid&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;====================================================&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JDBC事务处理"><a href="#JDBC事务处理" class="headerlink" title="JDBC事务处理"></a>JDBC事务处理</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">public class TestAccount &#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> void main(String[] args) &#123;</span><br><span class="line">        Connection connection <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        PreparedStatement statement <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ResultSet resultSet <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">            connection <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>关闭数据库自动提交、自动会开启事务</span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span><span class="keyword">SQL</span>用?代替</span><br><span class="line">            String sql1 <span class="operator">=</span> &quot;UPDATE account SET money = money  - 1000 WHERE name = &#x27;A&#x27;&quot;;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>预编译、先写<span class="keyword">SQL</span></span><br><span class="line">            statement <span class="operator">=</span> connection.prepareStatement(sql1);</span><br><span class="line"></span><br><span class="line">            statement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>异常</span><br><span class="line">            <span class="type">int</span> i <span class="operator">=</span> <span class="number">1</span> <span class="operator">/</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            String sql2 <span class="operator">=</span> &quot;UPDATE account SET money = money  + 1000 WHERE name = &#x27;B&#x27;&quot;;</span><br><span class="line"></span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>预编译、先写<span class="keyword">SQL</span></span><br><span class="line">            statement <span class="operator">=</span> connection.prepareStatement(sql1);</span><br><span class="line"></span><br><span class="line">            statement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span>业务结束、提交事务</span><br><span class="line">            connection.commit();</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;更新成功&quot;);</span><br><span class="line">        &#125; catch (<span class="keyword">SQLException</span> e) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                <span class="operator">/</span><span class="operator">/</span>事务回滚</span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125; catch (<span class="keyword">SQLException</span> ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            JDBCUtils.releae(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-查询</title>
    <url>/posts/3297214921/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211114174611.24qf96q5z97k.jpg" alt="微信图片_20211114174611"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="DQL数据查询语言"><a href="#DQL数据查询语言" class="headerlink" title="DQL数据查询语言"></a>DQL数据查询语言</h2><p>使用频率最高的、系统大部分操作都是在查询<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/mysql/SELECT%E8%AF%AD%E6%B3%95.7gj437g6k340.png" alt="SELECT语法"></p>
<p>顺序有严格的要求、例如如果将limit写在order by前不允许</p>
<h3 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SELECT * FROM 表名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`  <span class="comment">-- 查询全部信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SELECT 字段名,字段名 ... FROM 表名</span></span><br><span class="line"><span class="keyword">SELECT</span> `id`,`username`,`password` <span class="keyword">FROM</span> `student`  <span class="comment">-- 查询指定字段信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SELECT 字段名 AS 别名,... FROM 表名 AS 别名</span></span><br><span class="line"><span class="keyword">SELECT</span> `id` <span class="keyword">AS</span> 学号,`username` <span class="keyword">AS</span> 用户名, `password` <span class="keyword">AS</span> 密码 <span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s <span class="comment">-- 查询指定字段并设置别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- CONCAT()  拼接函数</span></span><br><span class="line"><span class="comment">-- SELEC 函数 FROM 表名</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;用户名：&#x27;</span>,`username`) <span class="keyword">AS</span> 用户名 <span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment">-- VERSION() 查看当前数据库的版本</span></span><br><span class="line"><span class="keyword">SELECT</span> VERSION()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SELECT DISTINCT 字段名 FROM 表名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `clazzid` <span class="keyword">FROM</span> `student` <span class="comment">-- 去重查询 重复的数据只显示一条</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SELECT 表达式</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTO</span>_INCREMENT_INCREMENT <span class="comment">-- 自增步长</span></span><br></pre></td></tr></table></figure>

<h3 id="where条件查询"><a href="#where条件查询" class="headerlink" title="where条件查询"></a>where条件查询</h3><p>检索数据中符合条件的值</p>
<p>搜索条件就是一个表达式或多个表达式组合而成</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- WHERE 条件查询</span></span><br><span class="line"><span class="comment">-- SELECT 字段名 FROM WHERE 条件1 逻辑运算法 条件2  ...  </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> `username` <span class="operator">=</span> <span class="string">&#x27;小博&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- BETWEEN 区间范围   &amp;&amp;   AND  都可以</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> id <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span> <span class="comment">-- 查询id为5 到 10的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- NOT 不等于  != 不能与</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> <span class="keyword">NOT</span> id <span class="operator">=</span> <span class="number">3</span> <span class="comment">-- 查询id 不为 3 的数据</span></span><br></pre></td></tr></table></figure>

<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IS NULL</td>
<td>a IS NULL</td>
<td>a 如果是空 则为真</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>a IS NOT NULL</td>
<td>a如果不是空 则为真</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>a BETWEEN b AND c</td>
<td>a如果在b和c之间 则为真</td>
</tr>
<tr>
<td>LIKE</td>
<td>a LIKE b</td>
<td>如果a匹配b 则为真</td>
</tr>
<tr>
<td>IN</td>
<td>a IN(b,c,d)</td>
<td>a 如果和b、c、d其中一个匹配则为真</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 模糊查询</span></span><br><span class="line"><span class="comment">-- _ 代表一个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> `username` <span class="keyword">LIKE</span> <span class="string">&#x27;_博&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- % 代表多个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> `username` <span class="keyword">LIKE</span> <span class="string">&#x27;%博&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- IN() 返回一个或多个、只要是匹配</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> `id` <span class="keyword">IN</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询为空字符串或为空的数据</span></span><br><span class="line"><span class="comment">-- OR 或</span></span><br><span class="line"><span class="comment">-- IS NULL 为空</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> `address` <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> `address` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- IS NOT NULL 不为空</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> `address` <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- AND 和 且</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> `address` <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> `id` <span class="operator">&lt;</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="联表查询"><a href="#联表查询" class="headerlink" title="联表查询"></a>联表查询</h3><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/mysql/join7%E7%A7%8D%E6%A8%A1%E5%9E%8B.242sixxzada8.png" alt="join7种模型"></p>
<h4 id="内连接（INNER-JOIN）"><a href="#内连接（INNER-JOIN）" class="headerlink" title="内连接（INNER JOIN）"></a>内连接（INNER JOIN）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 内连接</span></span><br><span class="line"><span class="comment">-- SELECT 字段名(字段名在两个表中重复时必须指定是哪个表中的) FROM 表 别名 INNER JOIN 表 别名 ON 连接表达式</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span>,`clazzname`,`version` <span class="keyword">FROM</span> `student` s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> `clazz` c <span class="keyword">ON</span> s.clazzid <span class="operator">=</span> c.clazzid</span><br></pre></td></tr></table></figure>

<p><code>INNER JOIN</code> 表中只要有一个匹配、就返回行</p>
<h4 id="左外连接-LEFT-JOIN"><a href="#左外连接-LEFT-JOIN" class="headerlink" title="左外连接(LEFT JOIN)"></a>左外连接(LEFT JOIN)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="comment">-- SELECT 字段名(字段名在两个表中重复时必须指定是哪个表中的) FROM 表 别名 LEFT JOIN 表 别名 ON 连接表达式</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span>,`clazzname`,`version` <span class="keyword">FROM</span> `student` s <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `clazz` c <span class="keyword">ON</span> s.clazzid <span class="operator">=</span> c.clazzid </span><br></pre></td></tr></table></figure>

<p><code>LEFT JOIN</code> 会从左表中返回所行值、无论右表中是否匹配</p>
<h4 id="右外连接-RIGHT-JOIN"><a href="#右外连接-RIGHT-JOIN" class="headerlink" title="右外连接(RIGHT JOIN)"></a>右外连接(RIGHT JOIN)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 右外连接</span></span><br><span class="line"><span class="comment">-- SELECT 字段名(字段名在两个表中重复时必须指定是哪个表中的) FROM 表 别名 RIGHT JOIN 表 别名 ON 连接表达式</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span>,`clazzname`,`version` <span class="keyword">FROM</span> `student` s <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `clazz` c <span class="keyword">ON</span> s.clazzid <span class="operator">=</span> c.clazzid </span><br></pre></td></tr></table></figure>

<p><code>RIGHT JOIN</code> 会从右表中返回所有行值、无论左表中是否匹配</p>
<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>就是写在一个表中的关系、实质上可以写成两张表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 自连接</span></span><br><span class="line"><span class="keyword">SELECT</span> y.typename <span class="keyword">AS</span> 父类,t.typename <span class="keyword">As</span> 子类 <span class="keyword">FROM</span> type <span class="keyword">AS</span> t,type <span class="keyword">AS</span> y <span class="keyword">WHERE</span> t.pid <span class="operator">=</span> y.typeid </span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/mysql/%E8%87%AA%E8%BF%9E%E6%8E%A5%E8%A1%A8.31vwm4018vs0.png" alt="自连接表"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/mysql/%E8%87%AA%E8%BF%9E%E6%8E%A5.7kx8vtlhj4s0.png" alt="自连接"></p>
<h3 id="分页和排序"><a href="#分页和排序" class="headerlink" title="分页和排序"></a>分页和排序</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ORDER BY 排序 desc 降序 asc 升序(默认)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `id` <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ORDER BY 排序 desc 降序 asc 升序(默认)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `id` <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure>

<h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- LIMIT 起始位置(从0开始计算),每页显示的数量    </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `id` <span class="keyword">DESC</span> LIMIT <span class="number">0</span>,<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第一页 0,5</span></span><br><span class="line"><span class="comment">-- 第二页 5,5</span></span><br><span class="line"><span class="comment">-- 第三页 10,5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- pageSize 页面大小   (n - 1) * pageSize 起始大小    n  当前页</span></span><br><span class="line"><span class="comment">-- 第n页 (n - 1) * pageSize, pageSize</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 总页数 = 数据总数 / 页面大小 </span></span><br><span class="line"><span class="comment">-- 数据总数 = SELECT COUNT(*) FROM 表</span></span><br></pre></td></tr></table></figure>

<p><code>pageSize</code> 页面大小   </p>
<p><code>(n - 1) * pageSize</code> 起始大小    </p>
<p><code>n</code>  当前页</p>
<p><code>第n页</code> (n - 1) * pageSize, pageSize</p>
<p><code>总页数</code> = 数据总数 / 页面大小 </p>
<p><code>数据总数</code> = SELECT COUNT(*) FROM 表</p>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>在WHERE 中 嵌套 一个子查询语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 子查询   一个查询语句中嵌套另一个查询语句</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> `clazzid` <span class="keyword">IN</span> (<span class="keyword">SELECT</span> clazzid <span class="keyword">FROM</span> clazz <span class="keyword">WHERE</span> clazzid <span class="operator">=</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数学函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-10</span>) <span class="comment">-- 绝对值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.3</span>) <span class="comment">-- 向上取证</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.3</span>) <span class="comment">-- 向下取整</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> RAND() <span class="comment">-- 随机数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">0</span>) <span class="number">0</span> <span class="comment">-- 0</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">-10</span>) 负数 <span class="comment">-- -1</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">10</span>) 整数 <span class="comment">-- 1</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 字符函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;xiaobo&#x27;</span>) <span class="comment">-- 字符串的长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;小&#x27;</span>,<span class="string">&#x27;博&#x27;</span>) <span class="comment">-- 字符串拼接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;XIAOBO&#x27;</span>) <span class="comment">-- 字符串转成小写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;xiaobo&#x27;</span>) <span class="comment">-- 字符串转成大写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;xiaobo&#x27;</span>,<span class="string">&#x27;xiao&#x27;</span>,<span class="string">&#x27;XIAO&#x27;</span>) <span class="comment">-- 字符替换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;xiaobo&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">-- 字符串截取</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;xiaobo&#x27;</span>) <span class="comment">-- 反转</span></span><br></pre></td></tr></table></figure>

<h4 id="时间日期函数"><a href="#时间日期函数" class="headerlink" title="时间日期函数"></a>时间日期函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 时间日期函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>() <span class="comment">-- 获取当前的日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE() <span class="comment">-- 获取当前的日期</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> NOW() <span class="comment">-- 获取当前的日期和时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>() <span class="comment">-- 获取本地时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE() <span class="comment">-- 系统时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW()) <span class="comment">-- 获取年</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW()) <span class="comment">-- 获取月</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW()) <span class="comment">-- 获取日</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(NOW()) <span class="comment">-- 获取时</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(NOW()) <span class="comment">-- 获取分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW()) <span class="comment">-- 获取秒</span></span><br></pre></td></tr></table></figure>

<h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p><code>COUNT()</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`pid`) <span class="keyword">FROM</span> type <span class="comment">-- 会忽略所有的NULL值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> type <span class="comment">-- 不会忽略NULL值 本质计算行数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> type <span class="comment">-- 不会忽略NULL值 本质计算行数</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你的数据表没有主键，那么count(1)比count(*)快  </p>
</blockquote>
<blockquote>
<p>如果有主键的话，那主键（联合主键）作为count的条件也比count(<em>)要快<br>如果你的表只有一个字段的话那count(</em>)就是最快的啦  </p>
</blockquote>
<blockquote>
<p>count(*) count(1) 两者比较。主要还是要count(1)所相对应的数据字段。<br>如果count(1)是聚索引,id,那肯定是count(1)快。但是差的很小的。  </p>
</blockquote>
<blockquote>
<p>因为count(<em>),自动会优化指定到那一个字段。所以没必要去count(?)，用count(</em>),sql会帮你完成优化的</p>
</blockquote>
<h3 id="分组和过滤"><a href="#分组和过滤" class="headerlink" title="分组和过滤"></a>分组和过滤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分组</span></span><br><span class="line"><span class="comment">-- GROUP BY 分组字段</span></span><br><span class="line"><span class="comment">-- HAVING 过滤条件</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`username`, <span class="built_in">SUM</span>(`id`) <span class="keyword">AS</span> <span class="string">&#x27;编号和&#x27;</span>,<span class="built_in">AVG</span>(`id`) <span class="keyword">AS</span> <span class="string">&#x27;平均编号&#x27;</span>,<span class="built_in">MAX</span>(`id`) <span class="keyword">AS</span> <span class="string">&#x27;最大编号&#x27;</span>, <span class="built_in">MIN</span>(`id`) <span class="keyword">AS</span> <span class="string">&#x27;最小编号&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> `student` s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> `clazz` c</span><br><span class="line"><span class="keyword">WHERE</span> s.clazzid <span class="operator">=</span> c.clazzid</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.`username`</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(`id`) <span class="operator">&gt;</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="数据库MD5加密"><a href="#数据库MD5加密" class="headerlink" title="数据库MD5加密"></a>数据库MD5加密</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入时将密码设置MD5形式</span></span><br><span class="line"><span class="comment">-- MD5() 加密函数</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(username,password,birthday,address,clazzid) <span class="keyword">VALUES</span>(<span class="string">&#x27;xiaobo&#x27;</span>,MD5(<span class="string">&#x27;xiaobo&#x27;</span>),<span class="string">&#x27;2001-04-06&#x27;</span>,<span class="string">&#x27;辽宁省铁岭市昌图县&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;xiaobo&#x27;</span>,MD5(<span class="string">&#x27;xiaobo&#x27;</span>),<span class="string">&#x27;2001-04-06&#x27;</span>,<span class="string">&#x27;辽宁省铁岭市昌图县&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新时进行加密</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `password` <span class="operator">=</span> MD5(`password`)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询MD5加密后的密码</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> password <span class="operator">=</span> MD5(<span class="string">&#x27;xiaobo&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-基础</title>
    <url>/posts/181837817/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211113202817.3l81o7lh84i0.jpg" alt="微信图片_20211113202817"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><p>数据库 DB DataBase</p>
<p>数据仓库、存储数据、管理数据</p>
<h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><h3 id="关系型数据库-SQL"><a href="#关系型数据库-SQL" class="headerlink" title="关系型数据库(SQL)"></a>关系型数据库(SQL)</h3><p>表和表之间、行和列之间的关系进行存储数据</p>
<h3 id="非关系型数据库-NOSQL"><a href="#非关系型数据库-NOSQL" class="headerlink" title="非关系型数据库(NOSQL)"></a>非关系型数据库(NOSQL)</h3><p>{key,value}形式<br>对象存储</p>
<h2 id="DBMS-数据库管理系统"><a href="#DBMS-数据库管理系统" class="headerlink" title="DBMS(数据库管理系统)"></a>DBMS(数据库管理系统)</h2><p>数据库的管理软件</p>
<h2 id="MYSQL介绍"><a href="#MYSQL介绍" class="headerlink" title="MYSQL介绍"></a>MYSQL介绍</h2><p>MYSQL是一个关系型数据库管理系统</p>
<h3 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h3><ul>
<li>官网选择版本下载压缩包、解压</li>
</ul>
<p><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p>
<ul>
<li>创建一个ini文件、放到bin目录的上一级填写相关配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port=3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=D:\Mysql\mysql-8.0.11-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=D:\Mysql\mysql-8.0.11-winx64\Data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors=10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[client]</span><br><span class="line"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

<ul>
<li><p>设置环境变量设置为mysql的bin目录</p>
</li>
<li><p>进入dos命令界面</p>
</li>
</ul>
<p><code>mysqld -install 服务名</code> 初始化服务</p>
<p><code>mysqld  --initialize --console</code> 初始化mysql、记住打印出来的root@localhost后面的字符串、这个是mysql第一次的密码</p>
<p><code>net start 服务名</code> 启动服务</p>
<p><code>mysql -u root -p</code> 登录、这个时候输入刚才的那个初始密码</p>
<p><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code> 更改密码、这个时候就更该成了你想要的的密码了</p>
<p><code>net stop 服务名</code> 关闭服务(在你想关闭的时候关闭、这个不在安装步骤中)</p>
<h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><p>数据定义语言</p>
<ul>
<li><p>CREATE</p>
</li>
<li><p>ALERT</p>
</li>
<li><p>DROP</p>
</li>
</ul>
<h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><p>数据操作语言</p>
<ul>
<li><p>INSERT</p>
</li>
<li><p>UPDATE</p>
</li>
<li><p>DELETE</p>
</li>
</ul>
<h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><p>数据查询语言</p>
<ul>
<li>SELECT</li>
</ul>
<h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><p>数据控制语言</p>
<ul>
<li><p>GRANT</p>
</li>
<li><p>REVOKE</p>
</li>
</ul>
<h2 id="MYSQL-基本命令"><a href="#MYSQL-基本命令" class="headerlink" title="MYSQL 基本命令"></a>MYSQL 基本命令</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES; <span class="comment">-- 显示所有的数据库</span></span><br><span class="line"></span><br><span class="line">use 数据库名 <span class="comment">-- 切换数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables; <span class="comment">--  显示数据库中的所有表</span></span><br><span class="line"></span><br><span class="line">desccribe(简写成<span class="keyword">desc</span>也可以) 表名; <span class="comment">-- 显示表信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database 数据库名; <span class="comment">-- 快速创建一个数据库</span></span><br><span class="line"></span><br><span class="line">exit <span class="comment">-- 退出连接</span></span><br></pre></td></tr></table></figure>

<h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE test; <span class="comment">-- 创建数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test; <span class="comment">-- 如果不存在则创建数据库</span></span><br></pre></td></tr></table></figure>

<h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 数据库名 <span class="comment">-- 切换数据库</span></span><br></pre></td></tr></table></figure>

<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE test; <span class="comment">-- 删除数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> test <span class="comment">-- 如果存在则删除</span></span><br></pre></td></tr></table></figure>

<h2 id="数据库列的类型"><a href="#数据库列的类型" class="headerlink" title="数据库列的类型"></a>数据库列的类型</h2><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p><code>tinyint</code> 1个字节  十分小的数据</p>
<p><code>smallint</code> 2个字节  较小的数据</p>
<p><code>mediumint</code> 3个字节  中等大小的数据</p>
<p><code>int</code> 4个字节  标准的整数  常用</p>
<p><code>bigint</code> 8个字节 较大的数据</p>
<p><code>float</code> 4个字节  浮点数</p>
<p><code>double</code> 8个字节  浮点数</p>
<p><code>decimal</code> 字符串形式的浮点数  用在金融上</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>char</code> 字符串固定大小的0 ~ 255</p>
<p><code>varchar</code> 可变字符串 0 ~ 65535 常用的变量</p>
<p><code>tinytext</code> 微型文本 2^8 - 1</p>
<p><code>text</code> 文本串 2^16-1 保存大文本</p>
<h3 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h3><p><code>data</code> YYYY-MM-DD  日期格式</p>
<p><code>time</code> HH:mm:ss  时间格式</p>
<p><code>datetime</code> YY-MM-DD HH:mm:ss 最常用的时间格式</p>
<p><code>timestamp</code> 时间戳、从1970年1月1日到现在的毫秒数 </p>
<p><code>year</code> 年份表示</p>
<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p><code>null</code> 没有值</p>
<h2 id="数据库的字段属性"><a href="#数据库的字段属性" class="headerlink" title="数据库的字段属性"></a>数据库的字段属性</h2><h3 id="unsigned"><a href="#unsigned" class="headerlink" title="unsigned"></a>unsigned</h3><p><code>unsigned</code> 无符号整数  如果声明、该列不能为负数</p>
<h3 id="zerofill"><a href="#zerofill" class="headerlink" title="zerofill"></a>zerofill</h3><p><code>zerofill</code> 0填充的  不足的位数、使用0来填充</p>
<p>int(6)  6  000006</p>
<h3 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h3><p><code>自增</code> 自动在一条记录基础上 + 1  通常设计唯一的主键 index必须是整数类型</p>
<h3 id="非空"><a href="#非空" class="headerlink" title="非空"></a>非空</h3><p><code>not null</code> 如果设置not null、如果不给它赋值、就会报错  null不给予值、默认就是null</p>
<h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p><code>默认</code> 设置默认值、如果不指定其别的值、就是默认值不变</p>
<h2 id="创建数据库的表"><a href="#创建数据库的表" class="headerlink" title="创建数据库的表"></a>创建数据库的表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表名称 和 字段 尽量使用 `` 飘号括起来</span></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT 自增</span></span><br><span class="line"><span class="comment">-- 字符串必须使用单引号&#x27;&#x27;括起来</span></span><br><span class="line"><span class="comment">-- COMMENT 字段描述</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY 主键</span></span><br><span class="line"><span class="comment">-- NOT NULL 不为空</span></span><br><span class="line"><span class="comment">-- DEFAULT 默认</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line"> `id` <span class="type">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line"> `username` <span class="type">varchar</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;小博&#x27;</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line"> `password` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;xiaobo&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line"> `birthday` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULl</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line"> `address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE <span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>

<p><strong>每个表必须要有的五个字段</strong></p>
<p><code>id</code> 主键</p>
<p><code>version</code> 乐观锁</p>
<p><code>is_delete</code> 伪删除</p>
<p><code>gmt_create</code> 创建时间</p>
<p><code>gmt_update</code> 更新修改时间</p>
<h2 id="查看创建数据库的语句"><a href="#查看创建数据库的语句" class="headerlink" title="查看创建数据库的语句"></a>查看创建数据库的语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student <span class="comment">-- 查看创建表的语句</span></span><br></pre></td></tr></table></figure>

<h2 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a>数据表的类型</h2><p><code>INNODB</code> 默认使用</p>
<p><code>MYISAM</code> 早期使用的</p>
<h3 id="INNDB-和-MYISAM-的区别"><a href="#INNDB-和-MYISAM-的区别" class="headerlink" title="INNDB 和 MYISAM 的区别"></a>INNDB 和 MYISAM 的区别</h3><table>
<thead>
<tr>
<th></th>
<th>MYISAM</th>
<th>INNODB</th>
</tr>
</thead>
<tbody><tr>
<td>事务支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据行锁定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>外键约束</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>表空间大小</td>
<td>较小</td>
<td>较大 约MYISAM的2倍</td>
</tr>
</tbody></table>
<h3 id="物理空间"><a href="#物理空间" class="headerlink" title="物理空间"></a>物理空间</h3><p>所有的数据库文件都存在data目录下、一个文件就对应一个数据库</p>
<p>本质是文件的存储</p>
<p><strong>Innodb物理文件</strong></p>
<p>Innodb 在数据库表中有一个*.frm文件、和上级目录中的ibdata1文件</p>
<p><strong>MYISAM物理文件</strong><br>*.frm  表结构的定义文件</p>
<p>*.MYD  数据文件(data)</p>
<p>*.MYI  索引文件(index)</p>
<h3 id="数据库表的字符集"><a href="#数据库表的字符集" class="headerlink" title="数据库表的字符集"></a>数据库表的字符集</h3><p><code>CHARSET=UTF8</code></p>
<p>mysql数据库表要设置字符集编码、否则默认的Latin1字符集编码不支持中文、所以要设置utf8</p>
<p>my.inn配置文件也可已配置、但是这个是物理层面上设计的、不通用、所以为了增强、表层面上也要设置</p>
<h2 id="修改和删除表"><a href="#修改和删除表" class="headerlink" title="修改和删除表"></a>修改和删除表</h2><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ALTER TABLE 原表名 RENAME 新表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` RENAME `student1` <span class="comment">-- 重命名表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student1` RENAME `student`</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 ADD 列属性 列属性类型</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> `age` <span class="type">INT</span>(<span class="number">2</span>) <span class="comment">-- 添加表字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 MODIFY 列属性 新列属性类型</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` MODIFY `age` <span class="type">VARCHAR</span>(<span class="number">5</span>)  <span class="comment">-- 修改列属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 CHANGE 原列属性名 新列属性名 新列属性类型</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` CHANGE `age` `age1` <span class="type">INT</span>(<span class="number">2</span>) <span class="comment">--重命名列属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- CHANGE 用来字段重命名、不能修改字段类型和约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- MODIFY 用来修改字段类型和约束、不能用来字段重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 DROP 列属性名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">DROP</span> age1 <span class="comment">-- 删除列属性</span></span><br></pre></td></tr></table></figure>

<p><code>CHANGE</code> 用来字段重命名、不能修改字段类型和约束</p>
<p><code>MODIFY</code> 用来修改字段类型和约束、不能用来字段重命名</p>
<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- DROP TABLE 表名</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> `student` <span class="comment">-- 删除一个表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `student` <span class="comment">-- 如果存在这个表则删除</span></span><br></pre></td></tr></table></figure>

<p><strong>所有创建和删除操作尽量加上判断</strong></p>
<h2 id="mysql数据管理"><a href="#mysql数据管理" class="headerlink" title="mysql数据管理"></a>mysql数据管理</h2><h3 id="DML-1"><a href="#DML-1" class="headerlink" title="DML"></a>DML</h3><p><strong>插入数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- INSERT INTO 表名(字段名) VALUES(与字段名一一对应的要插入的数据)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(username,password,birthday,address,clazzid) <span class="keyword">VALUES</span>(<span class="string">&#x27;xiaobo&#x27;</span>,<span class="string">&#x27;xiaobo&#x27;</span>,<span class="string">&#x27;2001-04-06&#x27;</span>,<span class="string">&#x27;辽宁省铁岭市昌图县&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;xiaobo&#x27;</span>,<span class="string">&#x27;xiaobo&#x27;</span>,<span class="string">&#x27;2001-04-06&#x27;</span>,<span class="string">&#x27;辽宁省铁岭市昌图县&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p><strong>更新数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- UPDATE 表名 SET 要修改的字段 = 要修改的值 WHEERE 根据哪个字段修改的名字 = 值</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> username <span class="operator">=</span> <span class="string">&#x27;小博&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>BETWEEN AND</td>
<td>区间范围</td>
</tr>
<tr>
<td>AND</td>
<td>我和你的意思</td>
</tr>
<tr>
<td>OR</td>
<td>我或你的意思</td>
</tr>
</tbody></table>
<p><strong>删除数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- DELETE FROM 表名 WHERE 根据哪个字段删除的名字 = 值</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> `student` <span class="comment">-- 清空数据</span></span><br><span class="line"><span class="comment">-- DELETE 和 TRUNCATE 区别</span></span><br><span class="line"><span class="comment">-- DELETE 自增记录保留 </span></span><br><span class="line"><span class="comment">-- 如果使用的是INNODB引擎、重启数据库时会从1自增开始（存在内存中、断电即使）</span></span><br><span class="line"><span class="comment">-- 如果使用的是MYISAM引擎、重启数据库时会继续从上一个自增量开始自增（存在文件中、不会丢失）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- TRUNCATE 自增记录清空、从一开始</span></span><br></pre></td></tr></table></figure>

<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p><strong>创建时添加外键</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表名称 和 字段 尽量使用 `` 飘号括起来</span></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT 自增</span></span><br><span class="line"><span class="comment">-- 字符串必须使用单引号&#x27;&#x27;括起来</span></span><br><span class="line"><span class="comment">-- COMMENT 字段描述</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY 主键</span></span><br><span class="line"><span class="comment">-- NOT NULL 不为空</span></span><br><span class="line"><span class="comment">-- DEFAULT 默认</span></span><br><span class="line"><span class="comment">-- CONSTRAINT 约束</span></span><br><span class="line"><span class="comment">-- FOREIGN KEY 外键</span></span><br><span class="line"><span class="comment">-- REFERENCES 参照</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line"> `id` <span class="type">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line"> `username` <span class="type">varchar</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;张三&#x27;</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line"> `password` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;xiaobo&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line"> `birthday` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULl</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line"> `address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line"> `clazzid` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;班级编号&#x27;</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(`id`),</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> `FK_clazzid` <span class="keyword">FOREIGN</span> KEY (`clazzid`) <span class="keyword">REFERENCES</span> `clazz` (`clazzid`)</span><br><span class="line"> </span><br><span class="line">)ENGINE <span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `clazz`(</span><br><span class="line"></span><br><span class="line">	`clazzid` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;班级编号&#x27;</span>,</span><br><span class="line">	`clazzname`	<span class="type">varchar</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;班级名&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(`clazzid`)</span><br><span class="line">	</span><br><span class="line">)ENGINE <span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>

<p><strong>修改时创建外键</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改时添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_clazzid` <span class="keyword">FOREIGN</span> KEY(`clazzid`) <span class="keyword">REFERENCES</span> `clazz`(`clazzid`)</span><br></pre></td></tr></table></figure>

<p><strong>删除外键时、要先删除引用被人的表(从表)、再删除被引用的表(主表)</strong></p>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-javaScript</title>
    <url>/posts/2118119182/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211111222958.43wcwuhkwoa0.png" alt="微信截图_20211111222958"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h1><p>一门世界上最流行的脚本语言</p>
<h2 id="js简单使用"><a href="#js简单使用" class="headerlink" title="js简单使用"></a>js简单使用</h2><blockquote>
<p>内部标签</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">			alert(<span class="string">&quot;Hello javaScript&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>外部引入</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/index.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="浏览器调试"><a href="#浏览器调试" class="headerlink" title="浏览器调试"></a>浏览器调试</h2><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8F12%E7%AE%80%E4%BB%8B.4h2gnuvenj00.png" alt="浏览器F12简介"></p>
<p><code>Elements</code> 页面元素</p>
<p><code>Console</code> 控制台、调js的</p>
<p><code>Sources</code> 代码结构、调试Debug用的</p>
<p><code>Network</code> 抓包用的、一些请求</p>
<p><code>Application</code> 里面存有Cookie</p>
<h2 id="js基本语法"><a href="#js基本语法" class="headerlink" title="js基本语法"></a>js基本语法</h2><h3 id="数值类型（Number）"><a href="#数值类型（Number）" class="headerlink" title="数值类型（Number）"></a>数值类型（Number）</h3><p><code>整数</code> 123</p>
<p><code>浮点数</code> 123.1</p>
<p><code>科学计数法</code> 1.23e3</p>
<p><code>not a Number 不是个数</code> NaN</p>
<p><code>无限大</code> Infinity</p>
<p><code>布尔值</code> true flase</p>
<p><code>逻辑与</code> &amp;&amp;</p>
<p><code>逻辑或</code> ||</p>
<p><code>逻辑非</code> !</p>
<p><code>赋值符号</code> =</p>
<p><code>等于符号</code> == 类型不一样 值一样 也会判断为true</p>
<p><code>绝对等于符号</code> === </p>
<p><code>判断NaN的方法</code> isNaN(NaN)</p>
<p><code>空类型</code> null</p>
<p><code>未定义</code> undefined</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">new Array(1,2,3,4,&#x27;wangyibo&#x27;,&quot;xiaobo&quot;,true,null);</span><br></pre></td></tr></table></figure>

<p><code>全局变量</code> i = 1</p>
<p><code>局部变量</code> let i = 1</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>双引号字符串</code> var name = “小博”;</p>
<p><code>单引号字符串</code> var sex = ‘男’;</p>
<p><code>漂浮（``）定义字符串</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;xiaobo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">21</span>;</span><br><span class="line"><span class="comment">// 模板字符串</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">`<span class="subst">$&#123;name&#125;</span>今年<span class="subst">$&#123;age&#125;</span>了`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(msg);</span><br></pre></td></tr></table></figure>

<p><code>字符串大写转换</code> console.log(name.toUpperCase());</p>
<p><code>字符串小写转换</code> console.log(name.toLocaleLowerCase());</p>
<p><code>字符串长度</code> console.log(name.length);</p>
<p><code>字符串索引</code> console.log(name.indexOf(‘o’));</p>
<p><code>字符串截取</code> console.log(name.substring(1,3));</p>
<blockquote>
<p>注意</p>
</blockquote>
<p>NaN与所有数值都不相等、包括它自己本身</p>
<p>只能通过isNaN(Nan)来判断这个数值是否是NaN</p>
<p>尽量避免浮点数进行运算、容易精度损失</p>
<p>NaN数据类型为 number</p>
<p>null 的数据类型为 object</p>
<p>检查是否是此类型的对象、constructor获取到构造函数,toString() 将类型转换为字符串 indexOf检索参数中的字符串,如果有信息 大于 -1 返回true 反之 flase</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr.constructor.toString().indexOf(<span class="string">&quot;Array&quot;</span>) &gt; -<span class="number">1</span>) ;</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><code>数组</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&#x27;wangyibo&#x27;</span>,<span class="string">&quot;xiaobo&quot;</span>,<span class="literal">true</span>,<span class="literal">null</span>];</span><br></pre></td></tr></table></figure>

<p><code>length</code> 数组的长度</p>
<p><code>indexOf</code> 通过元素获得索引</p>
<p><code>slice()</code> 截取Array的一部分 返回一个新数组</p>
<p><code>push()</code> 添加一个元素、放入数组尾部</p>
<p><code>pop()</code> 从尾部弹出一个元素</p>
<p><code>unshift()</code> 添加一个元素、放在数组头部</p>
<p><code>shift()</code> 弹出头部的一个元素</p>
<p><code>sort()</code> 排序</p>
<p><code>reverse()</code> 元素反转</p>
<p><code>concat()</code> 添加元素、返回一个新的数组、原数组并没有改变</p>
<p><code>join()</code> 使用特点的符号将字符串拼接</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><code>对象</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">	<span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&quot;xiaobo&quot;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">	<span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">	<span class="attr">student</span>: [<span class="number">2</span>,<span class="string">&quot;wangyibo&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>属性赋值</code> person.name = “wangyibo”;</p>
<p><code>动态的直接删除属性</code> delete person.name;</p>
<p><code>动态的直接添加属性</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.sex = <span class="string">&quot;男&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>判断属性值是否在这个对象中</code> ‘属性’ in person</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name <span class="keyword">in</span> person</span><br></pre></td></tr></table></figure>

<p><code>判断一个属性是否是这个对象自身拥有的</code> person.hasOwnProperty(“属性”)</p>
<h3 id="数据类型总结"><a href="#数据类型总结" class="headerlink" title="数据类型总结"></a>数据类型总结</h3><p><strong>基本数据类型</strong></p>
<ul>
<li><p>string </p>
</li>
<li><p>number</p>
</li>
<li><p>boolean</p>
</li>
<li><p>object</p>
</li>
<li><p>function</p>
</li>
<li><p>symbol</p>
</li>
</ul>
<p><strong>对象类型</strong></p>
<ul>
<li><p>Object</p>
</li>
<li><p>Data</p>
</li>
<li><p>Array</p>
</li>
</ul>
<p><strong>两种特殊类型</strong></p>
<ul>
<li>undefined</li>
<li>null</li>
</ul>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="map集合"><a href="#map集合" class="headerlink" title="map集合"></a>map集合</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="string">&quot;xiaobo&quot;</span>],[<span class="number">2</span>,<span class="string">&quot;wangyibo&quot;</span>],[<span class="number">3</span>,<span class="string">&quot;wangyangnan&quot;</span>]]);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//查看全部</span></span><br><span class="line">			<span class="built_in">console</span>.log(map);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//查看map中一个元素</span></span><br><span class="line">			<span class="built_in">console</span>.log(map.get(<span class="number">1</span>));</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 删除map中一个元素</span></span><br><span class="line">			<span class="built_in">console</span>.log(map.delete(<span class="number">2</span>));</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 添加或修改一个元素</span></span><br><span class="line">			<span class="built_in">console</span>.log(map.set(<span class="number">3</span>,<span class="string">&quot;xiaobo&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个set集合 set集合无序且不重复</span></span><br><span class="line">			<span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 向set集合中添加一个元素</span></span><br><span class="line">			set.add(<span class="number">6</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 删除set集合中的一个元素</span></span><br><span class="line">			set.delete(<span class="number">6</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 查看set集合中是否包含当前元素</span></span><br><span class="line">			set.has(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="for-of-循环遍历"><a href="#for-of-循环遍历" class="headerlink" title="for of 循环遍历"></a>for of 循环遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义数组</span></span><br><span class="line">			<span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// for of循环遍历打印数组信息</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> arrays <span class="keyword">of</span> arr)&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(arrays);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 定义一个map集合</span></span><br><span class="line">			<span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="string">&quot;xiaobo&quot;</span>],[<span class="number">2</span>,<span class="string">&quot;wangyibo&quot;</span>],[<span class="number">3</span>,<span class="string">&quot;wangyangnan&quot;</span>]]);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// for of循环遍历打印数组信息</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> maps <span class="keyword">of</span> map)&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(maps);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 定义一个set集合</span></span><br><span class="line">			<span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// for of循环遍历打印数组信息 </span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> sets <span class="keyword">of</span> set)&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(sets);</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数定义形式"><a href="#函数定义形式" class="headerlink" title="函数定义形式"></a>函数定义形式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> -x;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> -x;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<p>函数参数随便传、但只根据实际参数个数进行自动校验</p>
<p>一旦执行到return 函数结束</p>
<p>如果没有return 结果 返回undefined</p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异常</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> x !== <span class="string">&quot;number&quot;</span> )&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="string">&quot;not a number&quot;</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>代表传进来的所有参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="rest"><a href="#rest" class="headerlink" title="rest"></a>rest</h3><p>除了参数之外的可变形参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rest可变形参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rests</span>(<span class="params">a,b,...rest</span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;a&gt;&gt;&quot;</span> + a);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;b&gt;&gt;&quot;</span> + b);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(rest);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>函数体中声明、则函数体外不可以使用 （闭包可以使用）</p>
<p>不同函数中、变量不冲突</p>
<p>内部函数可以访问外部函数的成员、反之外部函数不能访问内部函数的成员</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内部函数和内部函数变量范围问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xiaobo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">wangyibo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> y = x + <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">console</span>.log(y);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	wangyibo();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> z = y + <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(z);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>变量自动提前定义、但不会赋值、所以书写规范最好在函数初把用到的所有变量都定义咯</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> x = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> z = x + y;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(z);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> y = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">w</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 唯一全局变量</span></span><br><span class="line">	<span class="keyword">var</span> xiaobo = &#123;&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//全局变量定义</span></span><br><span class="line">	xiaobo.name = <span class="string">&quot;wangyibo&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	xiaobo.birth = <span class="string">&quot;2001&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	xiaobo.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(xiaobo.name + xiaobo.birth +xiaobo.sex);</span><br><span class="line">	</span><br><span class="line">	xiaobo.add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a + b;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(xiaobo.add());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>let ES6 新特性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">console</span>.log(i);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(i + <span class="number">1</span>); <span class="comment">//101</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>console.log(i + 1);</code> 101</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ee</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(i);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(i + <span class="number">1</span>);<span class="comment">// i is not defined</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>console.log(i + 1);</code> i is not defined</p>
<h3 id="常量-const"><a href="#常量-const" class="headerlink" title="常量 const"></a>常量 const</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="string">&quot;3.1415926&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>js中控制this的指向对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getAge().apply(xiaobo,[]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rr</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">		<span class="keyword">return</span> now - <span class="built_in">this</span>.birth;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> xiaobo = &#123;</span><br><span class="line">		<span class="attr">name</span>: <span class="string">&quot;wangyibo&quot;</span>,</span><br><span class="line">		<span class="attr">birth</span>: <span class="number">2001</span>,</span><br><span class="line">		<span class="attr">age</span>: getAge</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">console</span>.log(xiaobo.age());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 年</span></span><br><span class="line">	<span class="built_in">console</span>.log(now.getFullYear() + <span class="string">&quot;年&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 月</span></span><br><span class="line">	<span class="built_in">console</span>.log(now.getMonth() + <span class="string">&quot;月&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 日</span></span><br><span class="line">	<span class="built_in">console</span>.log(now.getDate() + <span class="string">&quot;日&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 星期几</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;星期&quot;</span> + now.getDay());</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 时</span></span><br><span class="line">	<span class="built_in">console</span>.log(now.getHours() + <span class="string">&quot;时&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 分</span></span><br><span class="line">	<span class="built_in">console</span>.log(now.getMinutes() + <span class="string">&quot;分&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 秒</span></span><br><span class="line">	<span class="built_in">console</span>.log(now.getSeconds() + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 时间戳 全世界统一</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;时间戳&quot;</span> + now.getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js的JSON</span></span><br><span class="line">	<span class="keyword">var</span> person = &#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaobo&quot;</span>,</span><br><span class="line">		<span class="string">&quot;birth&quot;</span>:<span class="number">2001</span>,</span><br><span class="line">		<span class="string">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsons</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// js的对象</span></span><br><span class="line">	<span class="keyword">var</span> user = &#123;</span><br><span class="line">		<span class="attr">name</span>: <span class="string">&quot;xiaobo&quot;</span>,</span><br><span class="line">		<span class="attr">birth</span>: <span class="number">2001</span>,</span><br><span class="line">		<span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// js的JSON</span></span><br><span class="line">	<span class="keyword">var</span> person = &#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaobo&quot;</span>,</span><br><span class="line">		<span class="string">&quot;birth&quot;</span>:<span class="number">2001</span>,</span><br><span class="line">		<span class="string">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 对象转成JSON</span></span><br><span class="line">	<span class="keyword">var</span> jsonUser = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(jsonUser);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// JSON 转成对象</span></span><br><span class="line">	<span class="keyword">var</span> USER = <span class="built_in">JSON</span>.parse(jsonUser);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">console</span>.log(USER);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>JSON.stringify</code>  对象转成JSON</p>
<p><code>JSON.parse</code> JSON 转成对象</p>
<h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h3><p>指定一个原型指向、类似java中的继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">		<span class="attr">name</span>: <span class="string">&quot;wangyibo&quot;</span>,</span><br><span class="line">		<span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">		<span class="attr">play</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="built_in">this</span>.sex + <span class="string">&quot;玩&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> xiaobo = &#123;</span><br><span class="line">		<span class="attr">name</span>: <span class="string">&quot;xiaobo&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 设置原型、指定一个原型</span></span><br><span class="line">	xiaobo.__proto__ = student;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> person = &#123;</span><br><span class="line">		<span class="attr">name</span>: <span class="string">&quot;xiaobo&quot;</span>,</span><br><span class="line">		<span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">		<span class="attr">e</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;这个人怕不是有什么大病&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 设置原型、指定一个原型</span></span><br><span class="line">	xiaobo.__proto__ = person;</span><br></pre></td></tr></table></figure>

<h3 id="class-原型链"><a href="#class-原型链" class="headerlink" title="class 原型链"></a>class 原型链</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">	    <span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;hello  &quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> wang = <span class="keyword">new</span> Student(<span class="string">&quot;xiaobo&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="操作BOM对象"><a href="#操作BOM对象" class="headerlink" title="操作BOM对象"></a>操作BOM对象</h2><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p><code>window</code> 代表浏览器窗口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//window父对象 浏览器窗口相关信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.innerHeight);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.innerWidth);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.outerHeight);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.outerWidth);</span><br></pre></td></tr></table></figure>

<h3 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h3><p><code>navigator</code> 封装了浏览器信息</p>
<h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><p><code>screen</code> 代表全屏幕属性</p>
<h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p><code>location</code> 当前页面的URL信息</p>
<h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><p><code>document</code> 代表当前的页面文档树</p>
<p><code>docoument.title</code> 获取标题</p>
<p><code>document.getElementById(&quot;demo1&quot;)</code> 获取到id标记的元素</p>
<p><code>document.getElementsByTagName(&quot;div&quot;)</code> 获取到标签元素</p>
<p><code>document.getElementsByClassName(&quot;demo2&quot;)</code> 获取到class标记的标签元素  </p>
<p><code>document.cookie</code> 获取到当前的cookie</p>
<h3 id="history（不建议使用）"><a href="#history（不建议使用）" class="headerlink" title="history（不建议使用）"></a>history（不建议使用）</h3><p>历史记录</p>
<p><code>history.back()</code> 后退</p>
<p><code>history.forward()</code> 前进</p>
<h2 id="操作DOM对象"><a href="#操作DOM对象" class="headerlink" title="操作DOM对象"></a>操作DOM对象</h2><p>DOM：文档对象模型</p>
<p>浏览器网页是一个DOM 树形结构</p>
<p>要操作一个DOM节点、 要先获取这个DOM节点</p>
<p>更新：更新DOM节点</p>
<p>删除：删除一个DOM节点</p>
<p>添加：添加一个节点</p>
<p>遍历DOM节点：得到DOM节点</p>
<h3 id="获得DMO节点"><a href="#获得DMO节点" class="headerlink" title="获得DMO节点"></a>获得DMO节点</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">document</span>.getElementById(<span class="string">&quot;demo1&quot;</span>);</span><br><span class="line">		</span><br><span class="line">			<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;demo2&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="更新DOM节点"><a href="#更新DOM节点" class="headerlink" title="更新DOM节点"></a>更新DOM节点</h3><p><code>document.getElementById(&quot;id&quot;).innerHTML = &quot;&quot;;</code> 解析超文本标签</p>
<p><code>document.getElementById(&quot;id&quot;).innerText = &quot;&quot;;</code> 修改文本的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo1&quot;</span>);</span><br><span class="line">		</span><br><span class="line">			d.style.color = <span class="string">&quot;red&quot;</span></span><br><span class="line">			d.style.lineHeight = <span class="string">&quot;100px&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>现获取父节点、在通过父节点删除自己<br><code>id名.parentElement</code> 获取到父类</p>
<p><code>父类对象.removeChild(要删除的对象)</code> 删除节点</p>
<p><code>父类对象.removeChild(父类对象.children[要删除的下标])</code> 删除多个节点</p>
<p>删除多个节点时、要注意children是变化的</p>
<h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><p><code>appendChild</code> 后面追加节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&quot;js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;demo2&quot;</span>);</span><br><span class="line"></span><br><span class="line">demo.appendChild(js);</span><br></pre></td></tr></table></figure>

<p><code>document.createElement(&quot;标签名&quot;);</code> 创建一个标签</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newp = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		newp.id = <span class="string">&quot;newP&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		newp.innerText = <span class="string">&quot;xiaobo&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> news = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		news.setAttribute(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;application/javascript&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="表单操作（验证）"><a href="#表单操作（验证）" class="headerlink" title="表单操作（验证）"></a>表单操作（验证）</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				用户名：</span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				密码：</span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;boy&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;giri&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;giri&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> boy = <span class="built_in">document</span>.getElementById(<span class="string">&quot;boy&quot;</span>);</span></span><br><span class="line"><span class="javascript">				giri = <span class="built_in">document</span>.getElementById(<span class="string">&quot;giri&quot;</span>);</span></span><br><span class="line"><span class="javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>document.getElementById(&quot;boy&quot;).value</code> 拿到值</p>
<p><code>document.getElementById(&quot;boy&quot;).checked</code> 判断是拿到值</p>
<p><strong>javaScript写在html中要先加载页面信息、在加载javaScript、否则拿不到数据、就是先些信息、才能拿到信息</strong></p>
<h3 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>表单校验<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/md5.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return s()&quot;</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				用户名：</span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				密码：</span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;md5_password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;boy&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;giri&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;giri&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> /&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> boy = <span class="built_in">document</span>.getElementById(<span class="string">&quot;boy&quot;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span>	giri = <span class="built_in">document</span>.getElementById(<span class="string">&quot;giri&quot;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span>	username = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> password = <span class="built_in">document</span>.getElementById(<span class="string">&quot;md5_password&quot;</span>);</span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(password.value);</span></span><br><span class="line"><span class="javascript">				password.value = md5(password.value);</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(password.value);</span></span><br><span class="line"><span class="javascript">				</span></span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>&lt;form action=&quot;#&quot; onsubmit=&quot;return s()&quot;&gt;&lt;/form&gt;</code> 表单绑定提交事件 </p>
<h2 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h2><p>js的第三方库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">		<span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery-3.6.0.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">			$(<span class="string">&quot;#a1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				alert(<span class="string">&quot;点我了&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="jquery选择器"><a href="#jquery选择器" class="headerlink" title="jquery选择器"></a>jquery选择器</h3><p>css里面的选择器都可以用</p>
<p><strong>语法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> $(选择器).函数(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>常用的</strong></p>
<p><code>id选择器</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#a1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				alert(<span class="string">&quot;点我了&quot;</span>);</span><br><span class="line">			&#125;);</span><br></pre></td></tr></table></figure>

<p><code>class选择器</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.a1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				alert(<span class="string">&quot;点我了&quot;</span>);</span><br><span class="line">			&#125;);</span><br></pre></td></tr></table></figure>

<p><code>标签选择器</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;a&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				alert(<span class="string">&quot;点我了&quot;</span>);</span><br><span class="line">			&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>jquery文档</strong></p>
<p><a href="https://jquery.cuishifeng.cn/">https://jquery.cuishifeng.cn/</a></p>
<h3 id="jquery事件"><a href="#jquery事件" class="headerlink" title="jquery事件"></a>jquery事件</h3><p><strong>鼠标事件</strong></p>
<p><code>mouse***()</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-id">#divMouse</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery-3.6.0.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		鼠标：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;mouseMove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divMouse&quot;</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">			$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				$(<span class="string">&quot;#divMouse&quot;</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					$(<span class="string">&quot;#mouseMove&quot;</span>).text(<span class="string">&quot;x:&quot;</span> + e.pageX + <span class="string">&quot;y:&quot;</span> + e.pageY);</span></span><br><span class="line"><span class="javascript">				&#125;);</span></span><br><span class="line"><span class="javascript">			&#125;);</span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="jquery操作DOM"><a href="#jquery操作DOM" class="headerlink" title="jquery操作DOM"></a>jquery操作DOM</h3><p><strong>节点文本操作</strong></p>
<p><code>$(&quot;选择器&quot;).text()</code> 获取值</p>
<p><code>$(&quot;选择器&quot;).text(设置值)</code> 设置值</p>
<p><code>$(&quot;选择器&quot;).html()</code> 获得值</p>
<p><code>$(&quot;选择器&quot;).html(&lt;h1&gt;小博&lt;/h1&gt;)</code> 设置值 </p>
<p><strong>css操作</strong></p>
<p><code>$(&quot;选择器&quot;).css(&#123;&quot;color&quot;,&quot;red&quot;&#125;)</code> 设置css样式</p>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-CSS</title>
    <url>/posts/877835020/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E7%A9%BA%E6%AC%A2%E5%96%9C.205w1y9gvfi8.jpg" alt="空欢喜"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="CSS的历史发展"><a href="#CSS的历史发展" class="headerlink" title="CSS的历史发展"></a>CSS的历史发展</h2><p><strong>css1.0</strong></p>
<p>基本的字体样式</p>
<p><strong>css2.0</strong></p>
<p>出现了 div + css HTML与CSS结构分离的思想</p>
<p><strong>css2.1</strong></p>
<p>浮动和定位</p>
<p><strong>css3.0</strong></p>
<p>圆角、阴影、动画 浏览器兼容性</p>
<h2 id="css优势"><a href="#css优势" class="headerlink" title="css优势"></a>css优势</h2><ul>
<li><p>内容和表现分离</p>
</li>
<li><p>网页结构表现统一、可以实现复用</p>
</li>
<li><p>样式十分丰富</p>
</li>
<li><p>使用独立于Html的css文件</p>
</li>
<li><p>利用SEO、容易被搜索引擎收录</p>
</li>
</ul>
<h2 id="css使用"><a href="#css使用" class="headerlink" title="css使用"></a>css使用</h2><p><code>&lt;h1 style=&quot;color:red&quot;&gt;</code> 行内式css样式</p>
<p><code>&lt;style&gt;&lt;/style&gt;</code> 内嵌式css样式</p>
<p><code>&lt;style&gt;@import url(&quot;css/index.css&quot;);&lt;/style&gt;</code> 导入式css样式</p>
<p><code>&lt;link href=&quot;css/index.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt;</code> 链入式css样式</p>
<p><strong>优先级</strong></p>
<p>就近原则</p>
<h2 id="css基本选择器"><a href="#css基本选择器" class="headerlink" title="css基本选择器"></a>css基本选择器</h2><p><strong>标签选择器</strong></p>
<p><code>标签名&#123;&#125;</code> 标签选择器 会选择页面上所有这个标签的元素</p>
<p><strong>类选择器</strong></p>
<p><code>.类名&#123;&#125;</code> 类选择器 可以设置多组class</p>
<p><strong>id选择器</strong></p>
<p><code>#id名&#123;&#125;</code> id选择器 id唯一</p>
<p><strong>通配符选择器</strong></p>
<p><code>*&#123;&#125;</code> 通配符选择器 设置真个页面</p>
<p><strong>选择器优先级</strong></p>
<p>选择器优先级  id选择器 &gt; class选择器 &gt; 标签选择器</p>
<h2 id="css层次选择器"><a href="#css层次选择器" class="headerlink" title="css层次选择器"></a>css层次选择器</h2><p><code>主选择器名&amp;nbsp下级选择器名</code> 后代选择器 后代全部被选择</p>
<p><code>主选择器名&gt;下一代选择器名</code> 子代选择器 只选择子代这一代</p>
<p><code>主选择器名 + 相邻一个选择器名</code> 相邻兄弟选择器  同辈 只选择向下相邻的一个元素</p>
<p><code>主选择器~相邻选择其名</code> 通用选择器  同辈 选择向下的所有同等级的元素</p>
<h2 id="css属性选择器"><a href="#css属性选择器" class="headerlink" title="css属性选择器"></a>css属性选择器</h2><p>属性选择器就是一个选择器结合另一个选择器使用、使其定位更准确</p>
<p><code>选择器[选择器条件]</code> = 绝对等于 *= 包含这个元素 ^= 以这个开头 $= 以这个结尾</p>
<h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><p><code>background</code>: 背景颜色</p>
<p><code>font-size</code>: 字体大小</p>
<p><code>font-family</code>: 楷体</p>
<p><code>color</code>：字体颜色</p>
<p><code>font-weight</code>:字体粗细</p>
<p><code>font</code>: 可设置多个属性   是否倾斜 粗细 字体大小 行高 字体样式</p>
<p><code>颜色的几种表达形式</code>：</p>
<pre><code>        英文单词
        #RGB 16进制的表达形式 0 ~ F
        RGB()函数 0~255,0~255,0~255  R 红 G 绿 B 蓝
        RGBA()函数 0~255,0~255,0~255,0~1 R 红 G 绿 B 蓝 A 透明度
</code></pre>
<p><code>text-align</code> 排版样式</p>
<p><code>text-indent</code> 首行缩进    </p>
<p><code>line-height</code>    行高、单行文字上下居中        </p>
<p><code>text-decoration</code> 设置划线 underline 下划线 line-through 中划线 overline 上划线</p>
<p><code>vertical-align</code>: 参照对齐</p>
<p><code>text-shadow</code> 阴影效果 属性内容 阴影颜色、水平偏移、垂直偏移、阴影半径</p>
<p><code>a:hover</code> 鼠标悬浮状态</p>
<p><code>a:active</code> 鼠标单击状态</p>
<p><code>list-style</code>: 去掉无序列表的原点</p>
<p><code>border</code>: 线宽 solid 实线 dashed 虚线  red 颜色</p>
<p><code>background-image</code>: 背景图片</p>
<p><code>background-repeat: repeat-x;</code> 水平铺</p>
<p><code>background-repeat: repeat-y;</code> 垂直铺</p>
<p><code>background-repeat: no-repeat;</code> 不铺</p>
<p><code>background-image: linear-gradient(43deg, #4158D0 0%, #C850C0 46%, #FFCC70 100%)</code>  渐变</p>
<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E5%89%8D%E7%AB%AF/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.3gr964mvhvk0.png" alt="盒子模型"></p>
<p><code>position</code>: 位置</p>
<p><code>margin</code>: 外边距</p>
<p><code>border</code>: 边框</p>
<p><code>padding</code>: 内边距</p>
<p>margin + border + padding + 内容宽度</p>
<p><code>display</code>: 浮动 不能控制方向 </p>
<p><code>float</code> 浮动 inline 行内元素 block块元素 inline-block 即使块元素又是行内元素</p>
<p><code>clear</code> 不允许有浮动</p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><p>相对于原来位置进行偏移、在标准流文档中、原来的位置会被保留</p>
<p><code>position: relative</code>: 相对定位 </p>
<p><code>top</code>: 距离上</p>
<p><code>left</code>：距离左</p>
<p><code>bottom</code>：距离下</p>
<p><code>right</code>： 距离右</p>
<h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><p><code>position</code>: absolute 绝对定位</p>
<p><code>top</code>: 距离上</p>
<p><code>left</code>：距离左</p>
<p><code>bottom</code>：距离下</p>
<p><code>right</code>： 距离右</p>
<p>没有父级元素定位的前提下、相对于浏览器定位</p>
<p>父级元素存在定位 会相对于父级元素进行偏移</p>
<p>在父级元素范围内移动</p>
<p>相对于父级或浏览器的位置、进行指定偏移、绝对定位后、不在标准文档流中、原来的位置不会被保留</p>
<h4 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位 fixed"></a>固定定位 fixed</h4><p><code>position</code>: fixed 固定定位</p>
<p><code>div:nth-oftype(第几个div)&#123;&#125;</code>: 操控元素 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a0&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>第一块div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a2&quot;</span>&gt;</span>第二块div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a3&quot;</span>&gt;</span>第三块div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一块div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* div:nth-oftype(第几个div) */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#FF1493</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* position:fixed 固定定位 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>)&#123;</span><br><span class="line">		</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#FF0000</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#F0FFFF</span>;</span><br><span class="line">	<span class="attribute">position</span>: fixed;</span><br><span class="line">	<span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E5%89%8D%E7%AB%AF/4.6883fcd27uo0.png" alt="4"></p>
<h4 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h4><p><code>z-index: 数字</code> z-index 层次级别 越大越优先</p>
<p><code>opacity: 0.5</code> 透明度 0 ~ 1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;context&quot;</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/近况.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;近况&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;jk&quot;</span>&gt;</span>近期状况<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>时间：2021年11月3日16:10:19<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>地点：中华人民共和国东北辽宁省大连市旅顺口区大连交通大学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#context</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20%</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#context</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jk</span>,<span class="selector-class">.bg</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">625px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">96px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* z-index 层次级别 越大越优先 */</span></span><br><span class="line"><span class="selector-class">.jk</span>&#123;</span><br><span class="line">	<span class="comment">/* z-index: 999; */</span></span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#F0FFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* opacity 透明度 */</span></span><br><span class="line"><span class="selector-class">.bg</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#696969</span>;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E5%89%8D%E7%AB%AF/5.41mc68zo4m60.png" alt="5"></p>
<h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>css练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 引入链入式css样式 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/index.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 内嵌式css样式 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="comment">/* 选择器优先级  id选择器 &gt; class选择器 &gt; 标签选择器 */</span></span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="comment">/* 标签选择器 会选择页面上所有这个标签的元素 */</span></span></span><br><span class="line"><span class="css">			<span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="comment">/* 字体颜色 */</span></span></span><br><span class="line"><span class="css">				<span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">				<span class="comment">/* 背景颜色 */</span></span></span><br><span class="line"><span class="css">				<span class="attribute">background</span>: chartreuse;</span></span><br><span class="line"><span class="css">				<span class="comment">/* 背景死角圆弧 */</span></span></span><br><span class="line"><span class="css">				<span class="attribute">border-radius</span>: <span class="number">1.125rem</span>;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			<span class="comment">/* 导入式 */</span></span></span><br><span class="line"><span class="css">			<span class="keyword">@import</span> url(<span class="string">&quot;css/index.css&quot;</span>);</span></span><br><span class="line"><span class="css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>比悲伤更悲伤的故事<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 行内式css样式 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: blueviolet;&quot;</span>&gt;</span>空欢喜<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- class可以设置多个相同的 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;xiaobo&quot;</span>&gt;</span>if you miss the train I&#x27;m on,若你错过了我搭乘的那班列车<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- id名唯一 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;wangyibo&quot;</span>&gt;</span>You will know that I am gone,你应明白我已离开<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>爸爸<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>叔叔<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>我<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>姐姐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>哥哥<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>妈妈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>舅舅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https:/www.baidu.com&quot;</span> <span class="attr">id</span>=<span class="string">&quot;baidu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bai 1&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https:/www.baidu.com&quot;</span> <span class="attr">id</span>=<span class="string">&quot;baidu2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bai 2&quot;</span>&gt;</span>百度二下<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https:/www.baidu.com&quot;</span> <span class="attr">id</span>=<span class="string">&quot;baidu3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bai 3&quot;</span>&gt;</span>百度三下<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https:/www.baidu.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bai 4&quot;</span>&gt;</span>百度四下<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https:/www.baidu.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bai 5&quot;</span>&gt;</span>百度五下<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;wangyangnan&quot;</span> <span class="attr">class</span>=<span class="string">&quot;wang&quot;</span>&gt;</span>小博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;wang&quot;</span>&gt;</span>小博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">h5</span>&gt;</span>一首民谣、温三两故事、四海为家<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">			恰如年秋 木槿凋谢</span><br><span class="line">			明月仲秋 桂花初开</span><br><span class="line">			把一张旧照 放在窗台</span><br><span class="line">			你笑靥如花如期归来</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">			 </span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">			回首雨时春分  丁香花开</span><br><span class="line">			言语青涩 还是小孩</span><br><span class="line">			年少时的夕阳 它来的太快</span><br><span class="line">			忘记什么是两小无猜</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">			 </span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">			转眼冬至那天 飞雪漫天</span><br><span class="line">			留不下的 那个少年</span><br><span class="line">			记忆留在昨天 还是搁浅</span><br><span class="line">			无心这世间悲欢上演</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">			恰如年夏 梧桐花开</span><br><span class="line">			盛夏末路 荼靡开败</span><br><span class="line">			我凝望窗外 只等雨来</span><br><span class="line">			你素衣浅衫走过窗外</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">			恰如年秋 木槿凋谢</span><br><span class="line">			明月仲秋 桂花初开</span><br><span class="line">			把一张旧照 放在窗台</span><br><span class="line">			你笑靥如花如期归来</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">			回首雨时春分  丁香花开</span><br><span class="line">			言语青涩 还是小孩</span><br><span class="line">			年少时的夕阳 它来的太快</span><br><span class="line">			忘记什么是两小无猜</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">			</span><br><span class="line">			 </span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">			转眼冬至那天 飞雪漫天</span><br><span class="line">			留不下的 那个少年</span><br><span class="line">			记忆留在昨天 还是搁浅</span><br><span class="line">			无心这世间悲欢上演</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span> </span><br><span class="line">			回首雨时春分  丁香花开</span><br><span class="line">			言语青涩 还是小孩</span><br><span class="line">			年少时的夕阳 它来的太快</span><br><span class="line">			忘记什么是两小无猜</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span> </span><br><span class="line">			转眼冬至那天 飞雪漫天</span><br><span class="line">			留不下的 那个少年</span><br><span class="line">			记忆留在昨天 还是搁浅</span><br><span class="line">			无心这世间悲欢上演</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span> </span><br><span class="line">			笛声穿越人海 寂寞掩盖</span><br><span class="line">			骊声婉转 相月徘徊</span><br><span class="line">			长亭一梦如初 曾为沧海</span><br><span class="line">			曾经初心不负的简爱</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">			你是我的窗外 如风驶来</span><br><span class="line">			落花多少 再难释怀</span><br><span class="line">			所爱如风易逝 不及未来</span><br><span class="line">			从此四季 疏途的窗外 窗外</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/java.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;java&quot;</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span>&gt;</span>我想和图片对齐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;xiaochang&quot;</span> <span class="attr">src</span>=<span class="string">&quot;images/笑场.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;笑场&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>笑场<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>作者：李诞<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;qian&quot;</span>&gt;</span>￥ 99<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-indent: 2em;&quot;</span>&gt;</span>商品分类<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span></span><br><span class="line">		 <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;service-bd&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menubar&quot;</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;0&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://huodong.taobao.com/wow/a/act/tao/dailyact/4634/wupr?wh_pid=dailyAct-257518&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>女装<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=内衣&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>内衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=家居&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222889&quot;</span>&gt;</span>家居<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://huodong.taobao.com/wow/a/act/tao/dailyact/2772/wupr?wh_pid=dailyAct-216657&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>女鞋<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=%E7%94%B7%E9%9E%8B&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.1&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>男鞋<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=%E7%AE%B1%E5%8C%85&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.21814703.201856-taobao-item.1&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222889&quot;</span>&gt;</span>箱包<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;2&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?ie=utf8&amp;initiative_id=staobaoz_20210219&amp;stats_click=search_radio_all%3A1&amp;js=1&amp;imgfile=&amp;q=%E6%AF%8D%E5%A9%B4&amp;suggest=history_1&amp;_input_charset=utf-8&amp;wq=%E6%AF%8D%E5%A9%B4&amp;suggest_query=%E6%AF%8D%E5%A9%B4&amp;source=suggest&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=童装&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>童装<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=玩具&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222889&quot;</span>&gt;</span>玩具<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;3&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=男装&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>男装<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=运动户外&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>运动户外<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;4&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=%E7%BE%8E%E5%A6%86&amp;imgfile=&amp;js=1&amp;stats_click=search_radio_all%3A1&amp;initiative_id=staobaoz_20210126&amp;ie=utf8&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>美妆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=彩妆&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>彩妆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=个护&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222889&quot;</span>&gt;</span>个护<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;5&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=手机&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=数码&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>数码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=办公&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222889&quot;</span>&gt;</span>企业<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;6&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=大家电&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>大家电<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=生活电器&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>生活电器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;7&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=零食&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>零食<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=生鲜&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>生鲜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=茶酒&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222889&quot;</span>&gt;</span>茶酒<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;8&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=厨具&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>厨具<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=收纳&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>收纳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=清洁&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222889&quot;</span>&gt;</span>清洁<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;9&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=家纺&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>家纺<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=家饰&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>家饰<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=鲜花&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222889&quot;</span>&gt;</span>鲜花<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://book.tmall.com/?spm=875.7931836.0.0.66144265Ac70A1&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>图书音像<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=%E6%96%87%E5%85%B7&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.1&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>文具<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;11&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=医药保健&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>医药保健<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=%E8%BF%9B%E5%8F%A3&amp;imgfile=&amp;js=1&amp;stats_click=search_radio_all%3A1&amp;initiative_id=staobaoz_20201113&amp;ie=utf8&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>进口<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;12&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://car.tmall.com/wow/car/act/carfp&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>汽车<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://huodong.taobao.com/wow/pm/default/pcgroup/c51a5b?disableNav=YES&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>二手车<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://car.tmall.com/wow/car/act/carfp&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222889&quot;</span>&gt;</span>用品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;13&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=%E5%A4%A9%E7%8C%AB%E5%A5%BD%E6%88%BF&amp;imgfile=&amp;js=1&amp;stats_click=search_radio_all%3A1&amp;initiative_id=staobaoz_20200925&amp;ie=utf8&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>房产<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=装修&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>装修家具<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=建材&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222889&quot;</span>&gt;</span>建材<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		                <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-closeper</span> <span class="attr">aria-label</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-groupid</span>=<span class="string">&quot;14&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;J_Cat a-all&quot;</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tb-ifont service-arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=手表&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222887&quot;</span>&gt;</span>手表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=眼镜&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222890&quot;</span>&gt;</span>眼镜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;service-slash&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://s.taobao.com/search?q=珠宝饰品&quot;</span> <span class="attr">data-cid</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-dataid</span>=<span class="string">&quot;222889&quot;</span>&gt;</span>珠宝饰品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		              </span><br><span class="line">		            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div7&quot;</span>&gt;</span>	</span><br><span class="line">				用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div8&quot;</span>&gt;</span></span><br><span class="line">			div块元素</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">b</span> <span class="attr">id</span>=<span class="string">&quot;hang&quot;</span>&gt;</span></span><br><span class="line">			span行内元素</span><br><span class="line">		<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div12&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div9&quot;</span>&gt;</span></span><br><span class="line">				第一块div</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div10&quot;</span>&gt;</span></span><br><span class="line">				第二块div</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div11&quot;</span>&gt;</span></span><br><span class="line">				第三块div</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 通配符选择器 设置真个页面*/</span></span><br><span class="line">*&#123;</span><br><span class="line">	<span class="comment">/* background: darkgray; */</span></span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#4158D0</span>;</span><br><span class="line">	<span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(<span class="number">43deg</span>, <span class="number">#4158D0</span> <span class="number">0%</span>, <span class="number">#C850C0</span> <span class="number">46%</span>, <span class="number">#FFCC70</span> <span class="number">100%</span>);</span><br><span class="line">	<span class="attribute">background-image</span>: <span class="built_in">-moz-linear-gradient</span>(<span class="number">43deg</span>, <span class="number">#4158D0</span> <span class="number">0%</span>, <span class="number">#C850C0</span> <span class="number">46%</span>, <span class="number">#FFCC70</span> <span class="number">100%</span>);</span><br><span class="line">	<span class="attribute">background-image</span>: <span class="built_in">-o-linear-gradient</span>(<span class="number">43deg</span>, <span class="number">#4158D0</span> <span class="number">0%</span>, <span class="number">#C850C0</span> <span class="number">46%</span>, <span class="number">#FFCC70</span> <span class="number">100%</span>);</span><br><span class="line">	<span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">43deg</span>, <span class="number">#4158D0</span> <span class="number">0%</span>, <span class="number">#C850C0</span> <span class="number">46%</span>, <span class="number">#FFCC70</span> <span class="number">100%</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 标签选择器 相同的标签都会被设置 */</span></span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 类选择器 可以设置多组class */</span></span><br><span class="line"><span class="selector-class">.xiaobo</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: aqua;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* id选择器 id唯一 */</span></span><br><span class="line"><span class="selector-id">#wangyibo</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: burlywood;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 后代选择器 后代全部被选择 */</span></span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 子代选择器 只选择子代这一代 */</span></span><br><span class="line"><span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: coral;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 相邻兄弟选择器  同辈 只选择向下相邻的一个元素 */</span></span><br><span class="line"><span class="selector-class">.p1</span> + <span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: deeppink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 通用选择器  同辈 选择向下的所有同等级的元素 */</span></span><br><span class="line"><span class="selector-class">.p1</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: dimgrey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存在id属性的元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[id]</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存在id属性=baidu2的元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[id=baidu2]</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存在class中有 bai的元素 = 绝对等于 *= 包含这个元素 ^= 以这个开头 $= 以这个结尾 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[class *= bai]</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#0000FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wang</span><span class="selector-attr">[id=wangyangnan]</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h5</span>&#123;</span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&quot;楷体&quot;</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	background: 背景颜色</span></span><br><span class="line"><span class="comment">	font-size: 字体大小</span></span><br><span class="line"><span class="comment">	font-family: 楷体</span></span><br><span class="line"><span class="comment">	color：字体颜色</span></span><br><span class="line"><span class="comment">	font-weight:字体粗细</span></span><br><span class="line"><span class="comment">	font 可设置多个属性   是否倾斜 粗细 字体大小 行高 字体样式</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	颜色的几种表达形式：</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">						英文单词</span></span><br><span class="line"><span class="comment">						#RGB 16进制的表达形式 0 ~ F</span></span><br><span class="line"><span class="comment">						RGB()函数 0~255,0~255,0~255  R 红 G 绿 B 蓝</span></span><br><span class="line"><span class="comment">						RGBA()函数 0~255,0~255,0~255,0~1 R 红 G 绿 B 蓝 A 透明度</span></span><br><span class="line"><span class="comment">						</span></span><br><span class="line"><span class="comment">	text-align 排版样式</span></span><br><span class="line"><span class="comment">	text-indent 首行缩进					</span></span><br><span class="line"><span class="comment">	line-height	行高			</span></span><br><span class="line"><span class="comment">	text-decoration 设置划线 underline 下划线 line-through 中划线 overline 上划线</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.div1</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">background</span>: azure;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&quot;楷体&quot;</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#696969</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: bolder;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	<span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* height: 100px; */</span></span><br><span class="line">	</span><br><span class="line">	<span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">line-height</span>:<span class="number">200px</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* text-decoration: line-through; */</span></span><br><span class="line">	<span class="attribute">text-decoration</span>: overline;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* font: oblique bold 1.875rem &quot;楷体&quot;; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多个标签选择器用,分割 */</span></span><br><span class="line"><span class="selector-tag">img</span>,<span class="selector-tag">span</span>&#123;</span><br><span class="line">	<span class="comment">/* 参照对齐 */</span></span><br><span class="line">	<span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#F0FFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标悬浮状态 */</span></span><br><span class="line"><span class="selector-class">.div2</span>&gt;<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#7FFF00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div3</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* .div2&gt;a:active&#123;</span></span><br><span class="line"><span class="comment">	color: #FF1493;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="comment">/* 阴影颜色、水平偏移、垂直偏移、阴影半径 */</span></span><br><span class="line"><span class="selector-class">.qian</span>&#123;</span><br><span class="line">	<span class="attribute">text-shadow</span>: <span class="number">#FFFF00</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">   list-style: 去掉原点</span></span><br><span class="line"><span class="comment">   text-indent：首行缩进</span></span><br><span class="line"><span class="comment">   height：行高</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div3</span>&gt;<span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">		</span><br><span class="line">	<span class="attribute">text-indent</span>: <span class="number">2em</span>;	</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">list-style</span>: none;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#696969</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">50px</span> red;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	width:宽度</span></span><br><span class="line"><span class="comment">	height:高度</span></span><br><span class="line"><span class="comment">	border:线宽 solid 实线  red 颜色</span></span><br><span class="line"><span class="comment">	background-image:背景图片</span></span><br><span class="line"><span class="comment">	background-repeat: repeat-x; 水平铺</span></span><br><span class="line"><span class="comment">	background-repeat: repeat-y; 垂直铺</span></span><br><span class="line"><span class="comment">	background-repeat: no-repeat; 不铺</span></span><br><span class="line"><span class="comment">	background-image: linear-gradient(43deg, #4158D0 0%, #C850C0 46%, #FFCC70 100%); 渐变</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.div4</span>,<span class="selector-class">.div5</span>,<span class="selector-class">.div6</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">700px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">	<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/java.png</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div4</span>&#123;</span><br><span class="line">	<span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div5</span>&#123;</span><br><span class="line">	<span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div6</span>&#123;</span><br><span class="line">	<span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#login</span>&#123;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#F0FFFF</span>;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	<span class="attribute">color</span>: greenyellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* border-radius圆弧 顺时针 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div7</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#F0FFFF</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">50px</span> <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	clear: 不允许有浮动 right 右侧不允许有浮动 left 左侧不允许有浮动 both 两侧都不允许有浮动 none 没有效果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.div8</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span>;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">float</span>: right;</span><br><span class="line">	<span class="attribute">clear</span>: none;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* float 浮动 inline 行内元素 block块元素 inline-block 即使块元素又是行内元素  */</span></span><br><span class="line"><span class="selector-id">#hang</span>&#123;</span><br><span class="line">	<span class="attribute">float</span>: right;</span><br><span class="line">	<span class="comment">/* display: inline; */</span></span><br><span class="line">	<span class="comment">/* display: block; */</span></span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div12</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ADFF2F</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div9</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#F0FFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E5%89%8D%E7%AB%AF/1.6m9ie4tsw400.png" alt="1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E5%89%8D%E7%AB%AF/2.3s9sdhrdkqi0.png" alt="2"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E5%89%8D%E7%AB%AF/3.3tm1a2onbpi0.png" alt="3"></p>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-HTML</title>
    <url>/posts/2732937973/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E4%BA%BA%E9%97%B4%E9%A2%9C%E8%89%B2.4aicgmohtp00.jpg" alt="人间颜色"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="HTML-5"><a href="#HTML-5" class="headerlink" title="HTML 5"></a>HTML 5</h1><h2 id="W3C标准"><a href="#W3C标准" class="headerlink" title="W3C标准"></a>W3C标准</h2><p>World Wide Web Consortium 万维网联盟</p>
<p>HTML XML (结构化标准语言)</p>
<p>CSS 表现标准语言</p>
<p>DOM ECMAScript 行为标准</p>
<h2 id="网页基本信息"><a href="#网页基本信息" class="headerlink" title="网页基本信息"></a>网页基本信息</h2><p><code>DOCTYPE</code> 声明 告诉浏览器、我们要是用什么规范</p>
<p><code>html</code> 编辑网页的代码都写在这里</p>
<p><code>head</code> 引入相关文件等作用</p>
<p><code>body</code> 编辑网页的内容信息写在这里面</p>
<p><code>meta标签</code> 设置编码、以及搜索关键词等条件</p>
<p><code>title标签</code> 设置标题头名称</p>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p><code>&lt;h1&gt;</code> 一级标题标签</p>
<p><code>&lt;h2&gt;</code> 二级标题标签</p>
<p><code>&lt;h3&gt;</code> 三级标题标签</p>
<p><code>&lt;h4&gt;</code> 四级标题标签</p>
<p><code>&lt;h5&gt;</code> 五级标题标签</p>
<p><code>&lt;h6&gt;</code> 六级标题标签</p>
<p><code>&lt;p&gt;</code> 段落标签</p>
<p><code>&lt;hr /&gt;</code> 水平线标签</p>
<p><code>&lt;br /&gt;</code> 换行标签</p>
<p><code>&lt;strong&gt;</code> 粗体标签</p>
<p><code>&lt;em&gt;</code> 斜体标签</p>
<p><code>&lt;a href=&quot;要跳转的路径&quot; target=&quot;值&quot;&gt;</code> 超链接 href:链接路径 target:在哪个窗口打开 _blank属性在每个新标签中打开 _search属性都在一个新标签中打开 _self属性在当前标签中打开</p>
<p><code>&lt;img src=&quot;路径&quot; alt=&quot;没加载出来文字替代&quot; title=&quot;鼠标停在这上面你就看见字了&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;</code> 引入图片 src:路径 alt:图片没加载出来文字替代 title:鼠标悬停显示的内容 width:宽度 height: 高度</p>
<p>src路径分为相对路径和绝对路径 绝对路径就是写死的路径 相对路径看具体情况 ../代表上一级目录</p>
<p><code>&amp;nbsp;</code>  空格</p>
<p><code>&amp;gt</code> 大于号</p>
<p><code>&amp;lt</code> 小于号</p>
<p><code>&amp;copy</code> 版权符号</p>
<p><code>&lt;ol&gt;&lt;li&gt;</code> 有序列表</p>
<p><code>&lt;ul&gt;&lt;li&gt;</code> 无序列表</p>
<p><code>&lt;dl&gt;&lt;li&gt;</code> 自定义列表</p>
<p><code>&lt;table border = 像素大小&gt;</code> 列表 border代表列表的线的粗细</p>
<p><code>&lt;tr&gt;</code> 代表表格行数</p>
<p><code>&lt;td&gt;</code> 代表表格列数</p>
<p><code>&lt;td rowspan&gt;</code> 跨行</p>
<p><code>&lt;td colspan&gt;</code> 跨列</p>
<p><code>&lt;video src=&quot;视频路径&quot; controls width=&quot;值&quot; height=&quot;值&quot;&gt;</code> 引入视频 controls 在浏览器中可显示 width视频界面的宽 heignt视频界面的高</p>
<p><code>&lt;audio src=&quot;音频路径&quot; controls autoplay&gt;</code> 引入音频 autoplay 自动播放音乐 controls 可显示</p>
<p><code>&lt;header</code> 标题头部区域的内容</p>
<p><code>&lt;section&gt;</code> web页面中的一块独立区域</p>
<p><code>&lt;article&gt;</code> 独立的文章内容</p>
<p><code>&lt;aside&gt;</code> 相关内容或应用(侧边栏)</p>
<p><code>&lt;nav&gt;</code> 导航类辅助内容</p>
<p><code>&lt;footer&gt;</code> 标记脚步区域内容</p>
<p><code>&lt;iframe src=&quot;https://www.bilibili.com/&quot; name=&quot;b站&quot; frameborder=&quot;0&quot; width=&quot;1000px&quot; height=&quot;800px&quot;&gt;</code> 内联框架、src内联路径 name、名字 frameborder、是否有边框 width、宽度 height、高度</p>
<h3 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h3><p><code>action</code> 请求路径</p>
<p><code>method</code> 请求方法</p>
<p><code>get</code> 不安全、请求的信息会显示在地址栏中</p>
<p><code>post</code> 较安全、请求的路径不会显示在地址栏中、用于传送大文件、文件上传用post</p>
<blockquote>
<p>input type 属性</p>
</blockquote>
<p><code>text</code> 文本</p>
<p><code>password</code> 密码</p>
<p><code>radio</code> 单选框</p>
<p><code>checkbox</code> 多选框</p>
<p><code>email</code> 简单的邮箱校验</p>
<p><code>url</code> 简单的url校验</p>
<p><code>type = &quot;bumber&quot; max=&quot;最大值&quot; min=&quot;最小值&quot; step=&quot;每次增减值&quot;</code>  数字增减量</p>
<p><code>maxlength</code> text或password设置允许输入的最大值</p>
<p><code>search</code> 搜索框</p>
<p><code>button</code> 按钮</p>
<p><code>image</code> 图片按钮</p>
<p><code>file</code> 文件上传</p>
<p><code>reset</code> 重置文本框</p>
<p><code>submit</code> 提交按钮</p>
<p><code>type = &quot;range&quot; max=&quot;最大值&quot; min = &quot;最小值&quot; step=&quot;5&quot; value=&quot;默认值&quot;</code> 音量增减量 </p>
<p><code>hidden</code> 隐藏表单</p>
<p><code>readonly</code> 只读</p>
<p><code>disabled</code> 禁用</p>
<p><code>&lt;select name=&quot;值&quot;&gt;</code> 下拉框</p>
<p><code>&lt;option&gt;</code> 下拉框的值</p>
<p><code>&lt;textarea cols=&quot;列数&quot; rows=&quot;行数&quot;&gt;</code> 文本域 </p>
<p><code>&lt;label for = &quot;值&quot;&gt;</code> 增强鼠标点击性</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>标题栏的标题名<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 定义一个超链接头部 方便跳回到头部  --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;top&quot;</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#down&quot;</span>&gt;</span>去到底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 标题标签 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标签<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标签<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 段落标签 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>第一段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 换行标签 --&gt;</span></span><br><span class="line">		水平线标签<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 段落标签 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>第二段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 换行标签 --&gt;</span></span><br><span class="line">		换行标签<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 粗体标签 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">strong</span>&gt;</span>粗体标签<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 斜体标签 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体标签<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 特殊符号：空格 --&gt;</span></span><br><span class="line">		空格：I<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>Love<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>You</span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 特殊符号：大于号 --&gt;</span></span><br><span class="line">		大于号：<span class="symbol">&amp;gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 特殊符号：小于号 --&gt;</span></span><br><span class="line">		小于号：<span class="symbol">&amp;lt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 特殊符号：版权符号 --&gt;</span></span><br><span class="line">		版权符号：<span class="symbol">&amp;copy;</span>版权所有</span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 引入图片 src:路径 alt:图片没加载出来文字替代 title:鼠标悬停显示的内容 width:宽度 height: 高度   --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- src路径分为相对路径和绝对路径 绝对路径就是写死的路径 相对路径看具体情况 ../代表上一级目录 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/我.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;没加载出来文字替代&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标停在这上面你就看见字了&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50%&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 超链接引入 href:链接路径 target:在哪个窗口打开 _blank属性在每个新标签中打开 _search属性都在一个新标签中打开 _self属性在当前标签中打开 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/我.jpg&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_search&quot;</span>&gt;</span>文本或图像都可以<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 有序列表 应用范围 考试、试卷问答 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>数据库<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 无序列表 应用范围 导航 侧边连 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>xiaobo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>pangzi<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>ming<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>zeng<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>tr<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>wxh<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 自定义列表 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dt</span>&gt;</span>历程<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dd</span>&gt;</span>0~6 初始世界<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dd</span>&gt;</span>6~12 小学<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dd</span>&gt;</span>12~15 中学<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dd</span>&gt;</span>15~18 高中<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dd</span>&gt;</span>18~21 专科<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dd</span>&gt;</span>21~23 本科<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dd</span>&gt;</span>23~死亡 未知<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 列表 border表格线粗细 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- tr 行 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- td 列 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>xiaobo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>ming<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>pangzi<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 表格 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- tr 行 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- colspan 跨列 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>没有结局的故事<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- rowspan 跨行 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>自己的故事<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>xiaobo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>wangyibo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- controls 可显示 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;videos/“思念一个人的时候对方会感觉到吗？”.376843593.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- autoplay 自动播放音乐 controls 可显示 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audios/天佑、毛不易%20-%20如果有一天我变得很有钱%20(Live).mp3&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 标题头部区域的内容 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">header</span>&gt;</span>标题头部区域的内容<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- web页面中的一块独立区域 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">section</span>&gt;</span>web页面中的一块独立区域<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 独立的文章内容 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">article</span>&gt;</span>独立的文章内容<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 相关内容或应用(常用语侧边栏) --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aside</span>&gt;</span>相关内容或应用(常用语侧边栏)<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 导航类辅助内容 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">nav</span>&gt;</span>导航类辅助内容<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 标记脚部区域的内容 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">footer</span>&gt;</span>标记脚部区域的内容<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 内联框架 src要嵌入的网站 name 一个名字  --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span> <span class="attr">name</span>=<span class="string">&quot;b站&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- action：请求路径</span></span><br><span class="line"><span class="comment">			method：请求方式</span></span><br><span class="line"><span class="comment">			get请求： 不安全、请求的信息会显示在地址栏</span></span><br><span class="line"><span class="comment">			post请求：较安全、请求的信息不会显示在地址栏上</span></span><br><span class="line"><span class="comment">			readonly：只读</span></span><br><span class="line"><span class="comment">			disabled：禁用</span></span><br><span class="line"><span class="comment">			submit：提交表单按钮</span></span><br><span class="line"><span class="comment">			reset：清空input表单信息</span></span><br><span class="line"><span class="comment">			value：表单初始值</span></span><br><span class="line"><span class="comment">			size：表单初始宽度</span></span><br><span class="line"><span class="comment">			maxlength：type为text或password时、允许输入的最大字符数</span></span><br><span class="line"><span class="comment">			checked：type为checkbox或radio时、按钮是否被指定</span></span><br><span class="line"><span class="comment">			hidden：隐藏表单</span></span><br><span class="line"><span class="comment">			radio：单选框 设置个name让单选框的数据同属于一个组中</span></span><br><span class="line"><span class="comment">			checkbox：多选框</span></span><br><span class="line"><span class="comment">			button：普通按钮</span></span><br><span class="line"><span class="comment">			image：图片按钮</span></span><br><span class="line"><span class="comment">			checked：多选框默认选择的</span></span><br><span class="line"><span class="comment">			file： 文件上传</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">			email：简单邮箱校验</span></span><br><span class="line"><span class="comment">			url：简单url校验</span></span><br><span class="line"><span class="comment">			number：简单数字增减</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;请求路径&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;readonly&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;16&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			性别：</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mark&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mark&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nv&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nv&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			</span><br><span class="line">			姓名</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span> /&gt;</span>xiaobo</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangyibo&quot;</span> <span class="attr">checked</span> /&gt;</span>wangyibo</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangyangna&quot;</span> /&gt;</span>wangyangnan<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;简单邮箱校验&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;简单url校验&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			</span><br><span class="line">			音量<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;range&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;5&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span> /&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搜索&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;but1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;images/开始.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		去过的城市</span><br><span class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;changtu&quot;</span>&gt;</span>昌图<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;tieling&quot;</span>&gt;</span>铁岭<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenyang&quot;</span>&gt;</span>沈阳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;dalian&quot;</span>&gt;</span>大连<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- cols列数 rows行数 --&gt;</span></span><br><span class="line">		反馈：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;20&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请您输入您的反馈内容&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="comment">&lt;!-- 定义一个锚节点  --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 定义一个超链接底部 方便跳到底部  --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;down&quot;</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- qq推广 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://wpa.qq.com/msgrd?v=3&amp;uin=1013859397&amp;site=qq&amp;menu=yes&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://wpa.qq.com/pa?p=2:1013859397:53&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;点击这里给我发消息&quot;</span> <span class="attr">title</span>=<span class="string">&quot;点击这里给我发消息&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="结果图"><a href="#结果图" class="headerlink" title="结果图"></a>结果图</h2><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E5%89%8D%E7%AB%AF/1.2lluj8ths1g0.png" alt="1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E5%89%8D%E7%AB%AF/2.4o75pf881li0.png" alt="2"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E5%89%8D%E7%AB%AF/3.448gws4pzx80.png" alt="3"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E5%89%8D%E7%AB%AF/4.4j6vcpcm8gi0.png" alt="4"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E5%89%8D%E7%AB%AF/5.79oybtcazkc0.png" alt="5"></p>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>redis基础</title>
    <url>/posts/2025154759/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211010161510.6ogvf8ra22s0.jpg" alt="微信图片_20211010161510"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Nosql-AND-Redis"><a href="#Nosql-AND-Redis" class="headerlink" title="Nosql AND Redis"></a>Nosql AND Redis</h1><h2 id="Nosql概述"><a href="#Nosql概述" class="headerlink" title="Nosql概述"></a>Nosql概述</h2><blockquote>
<p>为什么用Nosql</p>
</blockquote>
<p><strong>我们生活在一个大数据的时代、普通数据库不能满足大数据的要求、所以要用Nosql数据库</strong></p>
<blockquote>
<p>源生Mysql  </p>
</blockquote>
<p><strong>数据量访问太大、存放不下<br>数据索引（B+Tree）、内存放不下<br>访问量太大、服务器承受不了</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%BA%90%E7%94%9FMysql.4tx58584ui20.png" alt="源生Mysql"></p>
<blockquote>
<p>缓存+Mysql+垂直拆分（读写分离）主从副治</p>
</blockquote>
<p><strong>因为系统的90%都是在读取、所以为了减轻数据库的负担、所以用缓存来提高效率</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E7%BC%93%E5%AD%98+mysql+%E5%9E%82%E7%9B%B4%E6%8B%86%E5%88%86.mti1mv55hw0.png" alt="缓存+mysql+垂直拆分"></p>
<blockquote>
<p>分库分表+水平拆分+Mysql集群</p>
</blockquote>
<p><strong>将不同的逻辑所需的数据存放到不同的表中、例如、像将订单、支付、登录业务数据存放到不同的数据库中、然后最后根据分布式将系统整合起来</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8+%E6%B0%B4%E5%B9%B3%E6%8B%86%E5%88%86+mysql%E9%9B%86%E7%BE%A4.3je69i2aw3c0.png" alt="分库分表+水平拆分+mysql集群"></p>
<blockquote>
<p>互联网公司服务流程</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E4%BA%92%E8%81%94%E7%BD%91%E5%85%AC%E5%8F%B8%E7%8E%B0%E5%9C%A8%E5%9F%BA%E6%9C%AC%E8%AE%BE%E6%96%BD.1mo9klhpnikg.png" alt="互联网公司现在基本设施"></p>
<h2 id="什么是Nosql"><a href="#什么是Nosql" class="headerlink" title="什么是Nosql"></a>什么是Nosql</h2><p><strong>Nosql = Not Only Sql</strong>  </p>
<p><strong>Nosql不像关系型数据库那样、存储的是表格、行、列、Nosql的存储不需要一个固定的格式、像一些地图信息、社交网络、地理位置等都是用Nosql存储的、使用Map&lt;String,Object&gt;键值对的形式来控制的</strong></p>
<blockquote>
<p>Nosql的特点</p>
</blockquote>
<ul>
<li><p>解耦 </p>
</li>
<li><p>方便扩展（数据之间没有关系）  </p>
</li>
<li><p>大数据量高性能（Redis一秒可以写8万次、一秒可以读11万次、性能较高）  </p>
</li>
<li><p>数据类型多样性（不需要事先设计数据库、随取随用）</p>
</li>
</ul>
<h3 id="传统的RDBMS-和-Nosql的区别"><a href="#传统的RDBMS-和-Nosql的区别" class="headerlink" title="传统的RDBMS 和 Nosql的区别"></a>传统的RDBMS 和 Nosql的区别</h3><blockquote>
<p>传统的RDBMS</p>
<ul>
<li>结构化组织  </li>
<li>SQL  </li>
<li>数据和关系都存在单独的表中  </li>
<li>数据定义语言  </li>
<li>严格的一致性  </li>
</ul>
</blockquote>
<ul>
<li>基础的事务</li>
</ul>
<blockquote>
<p>Nosql</p>
</blockquote>
<ul>
<li>不仅仅是数据  </li>
<li>键值对存储、列存储、文档存储、图形数据库（社交）  </li>
<li>最终一致性  </li>
<li>CAP定理和BASE  </li>
<li>高性能、高可用、高可控</li>
</ul>
<h3 id="阿里巴巴演进史"><a href="#阿里巴巴演进史" class="headerlink" title="阿里巴巴演进史"></a>阿里巴巴演进史</h3><blockquote>
<p>商品的基本信息</p>
</blockquote>
<p>RDBMS+Nosql  </p>
<blockquote>
<p>商品的描述、评论（文字较多）</p>
</blockquote>
<p>文档型数据库、MongoDB</p>
<blockquote>
<p>图片</p>
</blockquote>
<p>分布式文件系统 FastDFS<br>淘宝自己的 TFS<br>Gooale的 GFS<br>Hadoop的 HDFS<br>阿里云的 OSS</p>
<blockquote>
<p>商品关键字（搜索）</p>
</blockquote>
<p>搜索引擎 Solr elasticsearch<br>Iserach </p>
<blockquote>
<p>商品热门的波段信息</p>
</blockquote>
<p>内存数据库<br>Redis Tair Memache</p>
<h2 id="Nosql的四大分类"><a href="#Nosql的四大分类" class="headerlink" title="Nosql的四大分类"></a>Nosql的四大分类</h2><h3 id="KV键值对"><a href="#KV键值对" class="headerlink" title="KV键值对"></a>KV键值对</h3><p><strong>Redis</strong></p>
<h3 id="文档型数据库"><a href="#文档型数据库" class="headerlink" title="文档型数据库"></a>文档型数据库</h3><p><strong>MongoDB</strong><br>MongoDB基于分布式文件存储数据库、C++编写、用来处理大量的文档<br>MongoDB介于关系数据库和非关系数据库中间的产品、最像关系数据库的数据库</p>
<h3 id="列存储数据库"><a href="#列存储数据库" class="headerlink" title="列存储数据库"></a>列存储数据库</h3><p><strong>HBase</strong><br><strong>分布式文件系统</strong></p>
<h3 id="图关系数据库"><a href="#图关系数据库" class="headerlink" title="图关系数据库"></a>图关系数据库</h3><p><strong>Neo4j</strong><br><strong>InfoGrid</strong><br><strong>他存放的是关系、而不是图形、例如、社交网络、广告推荐</strong></p>
<h2 id="Nosql四大分类的对比"><a href="#Nosql四大分类的对比" class="headerlink" title="Nosql四大分类的对比"></a>Nosql四大分类的对比</h2><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/Nosql%E5%9B%9B%E5%A4%A7%E5%88%86%E7%B1%BB%E7%9A%84%E5%AF%B9%E6%AF%94%E5%9B%BE.5ox3w01qkow.png" alt="Nosql四大分类的对比图"><br>图片来源于网络</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><blockquote>
<p>Redis概述</p>
</blockquote>
<p><strong>Redis（Remote Dictionary Server )，即远程字典服务、结构化数据库</strong> </p>
<p><strong>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。</strong></p>
<blockquote>
<p>Redis的功能</p>
<ul>
<li>1、内存存储、持久化（rdb、aof）  </li>
<li>2、效率高、可以用于高速缓存  </li>
<li>3、发布订阅系统  </li>
<li>4、地图信息分析  </li>
</ul>
</blockquote>
<ul>
<li>5、计时器、计数器（浏览量）</li>
</ul>
<blockquote>
<p>Redis特性</p>
</blockquote>
<ul>
<li>1、多样的数据类型  </li>
<li>2、持久化  </li>
<li>3、集群  </li>
<li>4、事务</li>
</ul>
<h2 id="Redis-Windows系统下的操作"><a href="#Redis-Windows系统下的操作" class="headerlink" title="Redis Windows系统下的操作"></a>Redis Windows系统下的操作</h2><p>下载Redis压缩包、解压即可、四个服务</p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/windows%E7%9A%84redis%E5%9B%9B%E4%B8%AA%E6%9C%8D%E5%8A%A1.3any3k4qhac.png" alt="windows的redis四个服务"></p>
<p><code>redis-server.exe：</code>redis启动服务<br><code>redis-cli.exe：</code>redis客户端服务<br><code>redis-check-aof.exe：</code>检查持久化的文件是否正确<br><code>redis-benchmark.exe：</code>测试性能的</p>
<p>Redis服务的启动  </p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/redis%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.5uqo17gu1o00.png" alt="redis服务启动成功"></p>
<p>Redis客户端的启动</p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/redis%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5.1djvzezzqf40.png" alt="redis客户端连接"></p>
<h2 id="Redis在Linux系统下的操作"><a href="#Redis在Linux系统下的操作" class="headerlink" title="Redis在Linux系统下的操作"></a>Redis在Linux系统下的操作</h2><p>1、下载Redis压缩包、解压安装即可    程序会安装到/opt 目录下  </p>
<p>2、解压后进入安装目录下去下载所需的相关组件  </p>
<p><code>yum install gcc-c++</code>  </p>
<p><code>make</code>  </p>
<p><code>make install</code>  </p>
<p>3、寻找Redis默认安装路径 <code>/usr/local/bin</code>  </p>
<p>4、在安装路径下新建一个config文件夹、然后将redis的redis.config文件复制到此目录下、以后操作这个配置文件就行了、一点出错、不会收到什么影响  </p>
<p>5、修改配置文件中的 <code>daemonize</code> 将它从no 改为 yes  </p>
<p>6、启动Redis服务 命令 <code>redis-server 配置文件路径/配置文件名</code> 就是启动服务、并告诉服务按照哪个配置文件启动  </p>
<p>7、启动Redis连通测试 命令 <code>redis-cli -p 端口号</code>  </p>
<p>8、查看Redis进程服务 命令 <code>ps -ef|grep redis</code>  </p>
<p>9、关闭Redis服务 命令 <code>shutdown</code></p>
<h2 id="Redis性能测试"><a href="#Redis性能测试" class="headerlink" title="Redis性能测试"></a>Redis性能测试</h2><p><code>redis-benchmark -h localhost -p 6379 -c 100 -n 100000</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/redis%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E8%A1%A8.64h03adletc0.png" alt="redis性能测试表"></p>
<h2 id="Redis基础知识"><a href="#Redis基础知识" class="headerlink" title="Redis基础知识"></a>Redis基础知识</h2><p><strong>Redis有16个数据库</strong>  </p>
<p><strong>默认使用第0个数据库</strong>  </p>
<h3 id="Redis基本命令"><a href="#Redis基本命令" class="headerlink" title="Redis基本命令"></a>Redis基本命令</h3><p><a href="http://www.redis.cn/commands.html">Redis命令大全直通车</a><br><a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></p>
<p><code>SELECT 第几个库</code> 切换数据库  </p>
<p><code>DBSIZE</code> 查看当前数据库的大小  </p>
<p><code>KEYS *</code> 查看当前数据库的所有key  </p>
<p><code>flushdb</code> 删除当前数据库的所有内容  </p>
<p><code>flushAll</code> 清除所有数据库的内容</p>
<h3 id="Redis的端口号为什么是6379"><a href="#Redis的端口号为什么是6379" class="headerlink" title="Redis的端口号为什么是6379"></a>Redis的端口号为什么是6379</h3><p><strong>因为作者喜欢的一个明星的名字用9键输入法打出来就是6379</strong></p>
<h3 id="Redis是单线程的为什么还这么快"><a href="#Redis是单线程的为什么还这么快" class="headerlink" title="Redis是单线程的为什么还这么快"></a>Redis是单线程的为什么还这么快</h3><p><strong>因为Redis是基于内存的、CPU并不是Redis的瓶颈、Redis的瓶颈是机器的内存和网络带宽有关、因为使用单线程可以实现、所以就使用了单线程</strong>  </p>
<p><strong>Redis是将所有的数据存放到内存中、所以说单线程去操作效率是最高的、因为CPU会上下文切换、这个过程会耗时、对于内存系统来说、没有上下文切换效率就是最高的</strong></p>
<h2 id="Redis五个基本类型"><a href="#Redis五个基本类型" class="headerlink" title="Redis五个基本类型"></a>Redis五个基本类型</h2><h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><p><code>EXISTS key名</code> 判断这个键是否存在</p>
<p><code>move key名 哪个库</code> 移除当前的key</p>
<p><code>EXPIRE key名 过期时间（这个是秒）</code> 设置key过期时间</p>
<p><code>ttl key名</code> 查看剩余过期时间</p>
<p><code>type key名</code> 查看key的类型</p>
<p><code>append key名 &quot; love&quot;</code> 追加内容</p>
<p><code>strlen key名</code> 获取到内容的长度</p>
<p><code>incr key名</code> 使其数据 + 1</p>
<p><code>decr key名</code> 使其数据 - 1</p>
<p><code>incrby key名 你要设置的步长</code> 设置每次增加的数量</p>
<p><code>decrby key名 你要设置的步长</code> 设置每次减少的数量</p>
<p><code>getrange key名 起始位置 要截取的位置</code> 查看指定范围内的数据</p>
<p><code>setrange key名 起始位置 要替换的内容</code> 替换指定位置的数据</p>
<p><code>setex key名 过期时间</code> 设置过期时间</p>
<p><code>setnx key名 过期时间</code> 不存在时在设置、如果存在则创建失败（分布式锁中常常使用）</p>
<p><code>mset key名 值 key名 值 key名 值</code> 批量操作、设置k和v</p>
<p><code>mget key名 key名 key名</code> 批量操作、取到多个key</p>
<p><code>msetnx key名 值 key名 值</code> 原子性操作、要么一起成功、要么一起失败</p>
<p><code>getset key名 值</code> 先get、后set、如果不存在则返回nil、如果存在则返回刚刚赋的值、并设置新的值</p>
<p><strong>应用场景</strong></p>
<ul>
<li>计数器</li>
<li>统计多单位数量</li>
<li>粉丝数</li>
<li>对象缓存存储</li>
</ul>
<h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>我们可以把List运用成栈、对列、阻塞对列</p>
<p>两边插入或者改动效率最高、中间元素相对效率低些</p>
<p>消息排队、消息队列（Lpush Rpop）左进右出</p>
<p>栈（Lpush Lpop）左进左出</p>
<p><code>lpush key名 值</code> 将一个值或多个值插入到列表的头部、也可以想象成是左边</p>
<p><code>lrange key名 起始数据下标 末尾数据下标</code> 获取List中的值（0 -1）获取所有的值</p>
<p><code>rpush key名 值</code> 将一个值或多个值插入到列表的尾部、也可以想象成是右边</p>
<p><code>lpop key名</code> 移除第一个元素、头部、也就是左边的</p>
<p><code>rpop key名</code> 移除最后一个元素、尾部、也就是右边的</p>
<p><code>lindex key名 要查找元素的下标</code> 查询指定下标的内容</p>
<p><code>llen key名</code> 判断数据的长度</p>
<p><code>lrem key名 要移除的数量 要移除的数据内容</code> 移除指定数据内容和个数</p>
<p><code>ltrim key名 起始位置 结束位置</code> 截取指定范围内的数据、使其内容只剩下截取的内容</p>
<p><code>rpoplpush 原key名 新key名</code> 移除列表中的最后一个元素、将它移动到新的列表中</p>
<p><code>exists key名</code> 判断这个列表是否存在</p>
<p><code>lset key名 要修改的下标 要修改成的内容</code> 修改列表中的数据、前提是这个数据得存在、否则报错</p>
<p><code>linsert key名 前面插入（before）/后面插入（after） 插入位置的数据名 要插入的内容</code> 在指定位置的前面或后面插入数据</p>
<h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>set的值是不能重读的</p>
<p>set是无序不重复的</p>
<p><code>sadd key名 值</code> 向set中添加元素</p>
<p><code>smembers key名</code> 查看set中的所有值</p>
<p><code>sismember key名 值</code> 判断该key中的这个值是否存在</p>
<p><code>scard key名</code> 获取该key中的元素个数</p>
<p><code>srem key名 值</code> 移除元素中的指定元素</p>
<p><code>srandmember key名 要查询的个数</code> 随机查询出内容</p>
<p><code>spop key名 弹出数量</code> 随机弹出元素</p>
<p><code>smove 要移动的key名 移动到指定位置的key名 要移动的元素</code> 从一个key中移动元素到指定key中</p>
<p><code>sdiff 要比较的key名 被比较的key名</code> 返回差集 返回与被比较的key不同的元素</p>
<p><code>sinter 要比较的key名 被比较的key名</code> 返回交集</p>
<p><code>sunion 要比较的key名 被比较的key名</code> 返回并集</p>
<h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><p>存放形式和java的map差不多、只不过就是把整个map集合当成值了</p>
<p>形式： key key - value</p>
<p><code>hset key名 哈希key名 值</code> 向hash中添加元素</p>
<p><code>hget key名 哈希key名</code> 获取hash中的全部元素</p>
<p><code>hmset key名 哈希key名 值 哈希key名 值</code> 批量添加元素</p>
<p><code>hmget key名 哈希key名 哈希key名</code> 批量获取元素</p>
<p><code>hgetall key名</code> 查看所有key中的元素</p>
<p><code>hlen key名</code> 判断hash长度</p>
<p><code>hkeys key名</code> 查询hash中的key中的哈希key</p>
<p><code>hvals key名</code> 查询hash中的key中的值</p>
<p><code>hsetnx key名 hashkey名 值</code> 如果不存在则创建、如果存在则无法创建</p>
<p>hash适合对象存储、string适合字符串存储</p>
<h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><p>也是一个集合、和set集合一样、但是这个是有排序的</p>
<p><code>zadd key名 序号（例如、工资） 值</code> 像zset集合中添加元素</p>
<p><code>zrange key名 0 -1</code> 查询集合中的全部信息</p>
<p><code>zrangebyscore key名 min最小值（-inf 负无穷） max最大值（+inf 正无穷） withscores（显示序号）</code> 排序后显示信息（从小到大）</p>
<p><code>zrem key名 值</code> 移除集合中的元素</p>
<p><code>zcard key名</code> 判断集合中key的数量</p>
<p><code>zrevrange key名 0 -1</code> 从高到低查询全部信息</p>
<p><code>zcount key名 最小值 最大值</code> 获得区间数据条数</p>
<p><strong>zset应用场景</strong></p>
<ul>
<li><p>存储班级成绩表、工资表排序等</p>
</li>
<li><p>排行榜 top N</p>
</li>
</ul>
<h2 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h2><h3 id="geospatial（地理位置）"><a href="#geospatial（地理位置）" class="headerlink" title="geospatial（地理位置）"></a>geospatial（地理位置）</h3><blockquote>
<p>geoadd</p>
</blockquote>
<p><code>geoadd key名 经度 纬度 值（城市名）</code>  添加地理位置的经纬度</p>
<blockquote>
<p>geopos </p>
</blockquote>
<p><code>geopos key名 值 key名 值 ...</code> 查询地理位置的经纬度</p>
<blockquote>
<p>geodist </p>
</blockquote>
<p>判断两人之间的距离</p>
<p><strong>单位</strong></p>
<ul>
<li>m 米</li>
<li>km 千米</li>
<li>mi 英里</li>
<li>ft 英尺</li>
</ul>
<p><code>geodist key名 值（地点） 值（地点） 单位（km/m/mi/ft）</code> 计算出两个城市之间的直线距离</p>
<blockquote>
<p>georadius</p>
</blockquote>
<p>附近的人</p>
<p>给出一个经纬度、在给出一个范围、可查询当前范围内的信息</p>
<p><code>georadius key名 经度 纬度 距离 单位 withdist(显示距离) withcoord(显示查询到的详细经纬度) count 数量（显示几条查询到的信息）</code> 查看你已经存入的城市中有哪些城市在这个经纬度范围内</p>
<blockquote>
<p>GEORADIUSBYMEMBER</p>
</blockquote>
<p>地图</p>
<p>根据城市查询范围内的信息</p>
<p><code>georadiusbymember key名 值（城市） 数量（距离） 单位（km/m/mi/ct）</code> 查看这个城市范围内的城市</p>
<blockquote>
<p>GEOHASH</p>
</blockquote>
<p>城市的Hash值、字符串</p>
<p><code>geohash key名 值 值 值...</code> 将二维的经纬度转换为一维的字符串</p>
<blockquote>
<p>删除地理位置</p>
</blockquote>
<p>因为geo底层原理是zset、所以删除即可用zset完成</p>
<p><code>zrange key名 0 -1</code> 查看地图中全部信息</p>
<p><code>zrem key名 值...</code> 删除地理位置信息</p>
<h3 id="hyperloglogs（基数统计）"><a href="#hyperloglogs（基数统计）" class="headerlink" title="hyperloglogs（基数统计）"></a>hyperloglogs（基数统计）</h3><p>基数统计的算法、一种数据结构</p>
<p>优点：占用的内是固定的 非常的小 大概12kb 0.81%错误率</p>
<p>应用范围： 网页的UV（互联网访问、浏览这个网页的自然人）</p>
<p><code>pfadd key名 值 值 值 值...</code> 添加信息</p>
<p><code>pfcount key名</code> 查看数据数量</p>
<p><code>pfmerge 合并后的key名 要合并的key名 要合并的key名</code> 将多个key合并成新的key但是是基数、不重复的</p>
<h3 id="bitmaps（位图）"><a href="#bitmaps（位图）" class="headerlink" title="bitmaps（位图）"></a>bitmaps（位图）</h3><p>一种数据结构、操作二进制位来进记录、只有0和1两个状态</p>
<p><strong>应用场景</strong></p>
<ul>
<li>统计用户信息</li>
<li>活跃、不活跃</li>
<li>登录、未登录</li>
<li>打卡</li>
</ul>
<p>两个状态的都可以使用bigmaps</p>
<p><code>setbit key名 值 存储的值（0/1）</code> 设置存储状态</p>
<p><code>getbit key名 值</code> 查看数据状态</p>
<p><code>bitcount key名</code> 查看状态为1的信息数量</p>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式、适配器模式、代理模式、模板方法模式、责任链模式</title>
    <url>/posts/1976879072/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211009085252.6fn149fb5ao0.jpg" alt="微信图片_20211009085252"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.6rrpvq389140.jpg" alt="设计模式"></p>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>
<p>意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p>
<p>主要解决：主要解决接口选择的问题。</p>
<p>何时使用：我们明确地计划不同条件下创建不同实例时。</p>
<p>如何解决：让其子类实现工厂接口，返回的也是一个抽象的产品。</p>
<p>关键代码：创建过程在其子类执行。</p>
<p>应用实例： 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate 换数据库只需换方言和驱动就可以。</p>
<p>优点： 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>
<p>缺点：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>
<p>使用场景： 1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 3、设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</p>
<p>注意事项：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul>
<li>Computer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 13:32</span></span><br><span class="line"><span class="comment"> * 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createComputer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ComputerA</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 13:32</span></span><br><span class="line"><span class="comment"> * 计算机A类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerA</span> <span class="keyword">implements</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机A生产完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ComputerB</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 13:32</span></span><br><span class="line"><span class="comment"> * 计算机B类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerB</span> <span class="keyword">implements</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机B生产完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ComputerFactory</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 13:33</span></span><br><span class="line"><span class="comment"> * 计算机工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入进来</span></span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建计算机的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">createComputer</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当传入的名字为a时、创建计算机A类实例化对象</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">            computer = <span class="keyword">new</span> ComputerA();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当传入的名字为b时、创建计算机B类实例化对象</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">&quot;b&quot;</span>)) &#123;</span><br><span class="line">            computer = <span class="keyword">new</span> ComputerB();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回计算机对象</span></span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 13:35</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建计算机工厂实例化对象</span></span><br><span class="line">        ComputerFactory computerFactory = <span class="keyword">new</span> ComputerFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建计算机</span></span><br><span class="line">        Computer computerA = computerFactory.createComputer(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">        computerA.createComputer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建计算机</span></span><br><span class="line">        Computer computerB = computerFactory.createComputer(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">       computerB.createComputer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%9C.135tnig9u34w.png" alt="工厂模式结果"></p>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p>
<p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。</p>
<p>我们通过下面的实例来演示适配器模式的使用。其中，音频播放器设备只能播放 mp3 文件，通过使用一个更高级的音频播放器来播放 vlc 和 mp4 文件。</p>
<p>意图：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
<p>主要解决：主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。</p>
<p>何时使用： 1、系统需要使用现有的类，而此类的接口不符合系统的需要。 2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）</p>
<p>如何解决：继承或依赖（推荐）。</p>
<p>关键代码：适配器继承或依赖已有的对象，实现想要的目标接口。</p>
<p>应用实例： 1、美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。 2、JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。 3、在 LINUX 上运行 WINDOWS 程序。 4、JAVA 中的 jdbc。</p>
<p>优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。</p>
<p>缺点： 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</p>
<p>使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。</p>
<p>注意事项：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</p>
<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><ul>
<li>MusicPlayer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MusicPlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String type, String fileName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MyPlay</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 14:05</span></span><br><span class="line"><span class="comment"> * 播放器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MP3方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playerMp3</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Player mp3:&quot;</span> + fileName + <span class="string">&quot;.mp3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * wma方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playerWma</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Player wma:&quot;</span> + fileName + <span class="string">&quot;.wma&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>PlayerAdapter</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 14:10</span></span><br><span class="line"><span class="comment"> * 播放器适配器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerAdapter</span> <span class="keyword">implements</span> <span class="title">MusicPlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入播放器类</span></span><br><span class="line">    <span class="keyword">private</span> MyPlayer myPlayer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法、创建播放器实例化对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myPlayer = <span class="keyword">new</span> MyPlayer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 适配方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String type, String fileName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当类型为mp3类型时、适配mp3</span></span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;mp3&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.myPlayer.playerMp3(fileName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当类型为wma类型时、适配wma</span></span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;wma&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">this</span>.myPlayer.playerWma(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 14:12</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建适配器实例化对象</span></span><br><span class="line">        PlayerAdapter playterAdapter = <span class="keyword">new</span> PlayerAdapter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用适配方法</span></span><br><span class="line">        playterAdapter.play(<span class="string">&quot;mp3&quot;</span>,<span class="string">&quot;起风了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用适配方法</span></span><br><span class="line">        playterAdapter.play(<span class="string">&quot;wma&quot;</span>,<span class="string">&quot;遇见&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%9C.2m0ps8fpwb00.png" alt="适配器模式结果"></p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p> 在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。</p>
<p>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p>
<p>意图：为其他对象提供一种代理以控制对这个对象的访问。</p>
<p>主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p>
<p>何时使用：想在访问一个类时做一些控制。</p>
<p>如何解决：增加中间层。</p>
<p>关键代码：实现与被代理类组合。</p>
<p>应用实例： 1、Windows 里面的快捷方式。 2、猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。 3、买火车票不一定在火车站买，也可以去代售点。 4、一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。 5、spring aop。</p>
<p>优点： 1、职责清晰。 2、高扩展性。 3、智能化。</p>
<p>缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p>
<p>使用场景：按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。</p>
<p>注意事项： 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p>
<h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><ul>
<li>House</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 14:44</span></span><br><span class="line"><span class="comment"> * 找房子接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">House</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findHoues</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>XiaoBO</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 14:44</span></span><br><span class="line"><span class="comment"> * 小博找房子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoBo</span> <span class="keyword">implements</span> <span class="title">House</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findHoues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小博在找房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>HouseProxy</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 14:44</span></span><br><span class="line"><span class="comment"> * 代理找房子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseProxy</span> <span class="keyword">implements</span> <span class="title">House</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入房子接口</span></span><br><span class="line">    <span class="keyword">private</span> House house;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> house</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseProxy</span><span class="params">(House house)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.house = house;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理找房子方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findHoues</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这块可以写业务逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;代理再给我找房子&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.house.findHoues();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 14:46</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        House house = <span class="keyword">new</span> XiaoBo();</span><br><span class="line"></span><br><span class="line">        HouseProxy houseProxy = <span class="keyword">new</span> HouseProxy(house);</span><br><span class="line"></span><br><span class="line">        houseProxy.findHoues();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%9C.71d88xl4dvs0.png" alt="代理模式结果"></p>
<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p>
<p>意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<p>主要解决：一些方法通用，却在每一个子类都重新写了这一方法。</p>
<p>何时使用：有一些通用的方法。</p>
<p>如何解决：将这些通用算法抽象出来。</p>
<p>关键代码：在抽象类实现，其他步骤在子类实现。</p>
<p>应用实例： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p>
<p>优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</p>
<p>缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p>
<p>使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。</p>
<p>注意事项：为防止恶意操作，一般模板方法都加上 final 关键词。</p>
<h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><ul>
<li>Cook</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 15:12</span></span><br><span class="line"><span class="comment"> * 模板类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cook</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开抽油烟机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fire</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doCook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outFire</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭抽油烟机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.open();</span><br><span class="line">        <span class="keyword">this</span>.fire();</span><br><span class="line">        <span class="keyword">this</span>.doCook();</span><br><span class="line">        <span class="keyword">this</span>.outFire();</span><br><span class="line">        <span class="keyword">this</span>.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>CookTomato</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 15:15</span></span><br><span class="line"><span class="comment"> * 工作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookTomato</span> <span class="keyword">extends</span> <span class="title">Cook</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;炒西红柿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>CookPotato</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 15:16</span></span><br><span class="line"><span class="comment"> * 工作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookPotato</span> <span class="keyword">extends</span> <span class="title">Cook</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;炒土豆&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/8 - 15:17</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cook cook = <span class="keyword">new</span> CookTomato();</span><br><span class="line">        cook.cook();</span><br><span class="line">        System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">        cook = <span class="keyword">new</span> CookPotato();</span><br><span class="line">        cook.cook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%A8%A1%E6%9D%BF%E6%96%B9%E5%BC%8F%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%9C.1a12el8fqq5c.png" alt="模板方式模式结果"></p>
<h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。</p>
<p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p>
<p>意图：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p>
<p>主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</p>
<p>何时使用：在处理消息的时候以过滤很多道。</p>
<p>如何解决：拦截的类都实现统一接口。</p>
<p>关键代码：Handler 里面聚合它自己，在 HandlerRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。</p>
<p>应用实例： 1、红楼梦中的”击鼓传花”。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。</p>
<p>优点： 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。</p>
<p>缺点： 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。</p>
<p>使用场景： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。</p>
<p>注意事项：在 JAVA WEB 中遇到很多应用。</p>
<h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><ul>
<li>Post</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/9 - 8:12</span></span><br><span class="line"><span class="comment"> * 实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(String context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>PostHandler</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/9 - 8:13</span></span><br><span class="line"><span class="comment"> * 抽象父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PostHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PostHandler postHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPostHandler</span><span class="params">(PostHandler postHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.postHandler = postHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法、使其子类重写</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> post</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(Post post)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下一节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> post</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">(Post post)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.postHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.postHandler.handlerRequest(post);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>AHandler</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/9 - 8:23</span></span><br><span class="line"><span class="comment"> * A子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AHandler</span> <span class="keyword">extends</span> <span class="title">PostHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(Post post)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得传入的内容</span></span><br><span class="line">        String context = post.getContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将传入的内容中个关键字过滤</span></span><br><span class="line">        context = context.replace(<span class="string">&quot;sb&quot;</span>,<span class="string">&quot;**&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将过滤后的内容存回去</span></span><br><span class="line">        post.setContext(context);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤敏感词&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//继续下一节点</span></span><br><span class="line">        <span class="keyword">this</span>.next(post);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>BHandler</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/9 - 8:25</span></span><br><span class="line"><span class="comment"> * B子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BHandler</span> <span class="keyword">extends</span> <span class="title">PostHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(Post post)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得传入的内容</span></span><br><span class="line">        String context = post.getContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将传入的内容中个关键字过滤</span></span><br><span class="line">        context = context.replace(<span class="string">&quot;垃圾&quot;</span>,<span class="string">&quot;**&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将过滤后的内容存回去</span></span><br><span class="line">        post.setContext(context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//继续下一节点</span></span><br><span class="line">        <span class="keyword">this</span>.next(post);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/9 - 8:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建A子类和B子类实例化对象</span></span><br><span class="line">        PostHandler aHandler = <span class="keyword">new</span> AHandler();</span><br><span class="line">        PostHandler bHandler = <span class="keyword">new</span> BHandler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将B子类放入到A子类中、使其B称为A的下一节点</span></span><br><span class="line">        aHandler.setPostHandler(bHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化post实体类对象</span></span><br><span class="line">        Post post = <span class="keyword">new</span> Post();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存入内容</span></span><br><span class="line">        post.setContext(<span class="string">&quot;正常内容，垃圾，sb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤前的内容：&quot;</span> + post.getContext());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将post对象放进抽象父类中</span></span><br><span class="line">        aHandler.handlerRequest(post);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤后的内容：&quot;</span> + post.getContext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%9C.5r7xzzmzv200.png" alt="责任链模式结果"></p>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式、装饰模式、观察者模式、单例模式</title>
    <url>/posts/2677239693/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211007174823.6dotqskujnw0.jpg" alt="微信图片_20211007174823"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.6rrpvq389140.jpg" alt="设计模式"></p>
<h2 id="策略者模式"><a href="#策略者模式" class="headerlink" title="策略者模式"></a>策略者模式</h2><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p>
<p>意图：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p>
<p>主要解决：在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p>
<p>何时使用：一个系统有许多许多类，而区分它们的只是他们直接的行为。</p>
<p>如何解决：将这些算法封装成一个一个的类，任意地替换。</p>
<p>关键代码：实现同一个接口。</p>
<p>应用实例： 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。</p>
<p>优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</p>
<p>缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。</p>
<p>使用场景： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p>
<p>注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p>
<blockquote>
<p>开闭原则  </p>
</blockquote>
<p>对修改关闭、对扩展开放、操作者不能修改我们的代码、但是可以自己去扩展添加自己想要的功能</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul>
<li>Operation</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 14:11</span></span><br><span class="line"><span class="comment"> * 定义一个操作接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行操作的接口方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num1 参数1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num2 参数2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回计算结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Calculator</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 14:12</span></span><br><span class="line"><span class="comment"> * 实现操作接口、使其操作这个计算器类即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">implements</span> <span class="title">Operation</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将操作接口注入进来</span></span><br><span class="line">    <span class="keyword">private</span> Operation operation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成一个set方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOperation</span><span class="params">(Operation operation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.operation = operation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现的接口方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num1 参数1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num2 参数2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回接口中所返回的值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.operation.doOperation(num1, num2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>OperationAdd</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 14:17</span></span><br><span class="line"><span class="comment"> * 加法操作、实现操作接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">implements</span> <span class="title">Operation</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现操作接口并将其变为加法操作方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num1 参数1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num2 参数2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>OperationSub</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 14:19</span></span><br><span class="line"><span class="comment"> * 减法操作、实现操作接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationSub</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现操作接口并将其变为减法操作方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num1 参数1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num2 参数2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 14:19</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化计算器对象</span></span><br><span class="line">        Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化加法运算对象、并将其注入到计算器对象中</span></span><br><span class="line">        calculator.setOperation(<span class="keyword">new</span> OperationAdd());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行加法运算</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加法运算结果为  &quot;</span> + calculator.doOperation(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化减法运算对象、并将其注入到计算器对象中</span></span><br><span class="line">        calculator.setOperation(<span class="keyword">new</span> OperationSub());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行加法运算</span></span><br><span class="line">        System.out.println(<span class="string">&quot;减法运算结果为  &quot;</span> + calculator.doOperation(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%9C.d92o56xldw0.png" alt="策略模式结果"></p>
<h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p>
<p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p>
<p>意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p>
<p>主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p>
<p>何时使用：在不想增加很多子类的情况下扩展类。</p>
<p>如何解决：将具体功能职责划分，同时继承装饰者模式。</p>
<p>关键代码： 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。</p>
<p>应用实例： 1、孙悟空有 72 变，当他变成”庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。 2、不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。</p>
<p>优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p>
<p>缺点：多层装饰比较复杂。</p>
<p>使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。</p>
<p>注意事项：可代替继承。</p>
<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><ul>
<li>person</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 15:20</span></span><br><span class="line"><span class="comment"> * 定义人的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>XiaoBo</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 15:23</span></span><br><span class="line"><span class="comment"> * 被装饰类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoBo</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现接口的消费金额方法、初始化为0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(<span class="number">0.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现显示信息的接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;啥也没有的小博&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ClothesDecorator</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 15:25</span></span><br><span class="line"><span class="comment"> * 装饰类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClothesDecorator</span> <span class="keyword">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将Person接口注入进来</span></span><br><span class="line">    <span class="keyword">protected</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法、初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> person</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClothesDecorator</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Smoke</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 15:28</span></span><br><span class="line"><span class="comment"> * 买东西的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Smoke</span> <span class="keyword">extends</span> <span class="title">ClothesDecorator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 继承父类的构造方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> person</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Smoke</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 累加消费金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.person.cost().add(BigDecimal.valueOf(<span class="number">11.0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;买了一包烟、累积消费&quot;</span> + <span class="keyword">this</span>.cost() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Lighter</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 15:38</span></span><br><span class="line"><span class="comment"> * 买东西的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lighter</span> <span class="keyword">extends</span> <span class="title">ClothesDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 继承父类的构造方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> person</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Lighter</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 累加消费金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.person.cost().add(BigDecimal.valueOf(<span class="number">3.0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;买了个火机、累积消费&quot;</span> + <span class="keyword">this</span>.cost() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 15:40</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化被装饰的对象</span></span><br><span class="line">        Person xiaobo = <span class="keyword">new</span> XiaoBo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉商品谁买了我</span></span><br><span class="line">        xiaobo = <span class="keyword">new</span> Smoke(xiaobo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉商品谁买了我</span></span><br><span class="line">        xiaobo = <span class="keyword">new</span> Lighter(xiaobo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示信息</span></span><br><span class="line">        xiaobo.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;小博总消费  &quot;</span> + xiaobo.cost() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%9C.449qzogoark0.png" alt="装饰模式结果"></p>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。</p>
<p>意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>
<p>主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p>
<p>何时使用：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p>
<p>如何解决：使用面向对象技术，可以将这种依赖关系弱化。</p>
<p>关键代码：在抽象类里有一个 ArrayList 存放观察者们。</p>
<p>应用实例： 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。</p>
<p>优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。</p>
<p>缺点： 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p>
<p>使用场景：</p>
<p>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。<br>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。<br>一个对象必须通知其他对象，而并不知道这些对象是谁。<br>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。<br>注意事项： 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</p>
<h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><ul>
<li>Customer</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 16:55</span></span><br><span class="line"><span class="comment"> * 客户抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法、提高扩展性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>CustomerA</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 16:56</span></span><br><span class="line"><span class="comment"> * 观察者类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerA</span> <span class="keyword">extends</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户A的报纸已送达&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>CustomerB</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 16:57</span></span><br><span class="line"><span class="comment"> * 观察者类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerB</span> <span class="keyword">extends</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户B的报纸已送达&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>newSpaperOffice</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 16:58</span></span><br><span class="line"><span class="comment"> * 被观察者类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewSpaperOffice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个List集合、用于存放客户</span></span><br><span class="line">    List&lt;Customer&gt; customers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将客户添加到集合中的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCustomer</span><span class="params">(Customer customer)</span></span>&#123;</span><br><span class="line">        customers.add(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环遍历集合、依次调用update方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObserver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Customer customer : customers)&#123;</span><br><span class="line">            customer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始派发方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newSpaper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.notifyAllObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 17:02</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建报社实例化对象</span></span><br><span class="line">        NewSpaperOffice newSpaperOffice = <span class="keyword">new</span> NewSpaperOffice();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加要派发的客户</span></span><br><span class="line">        newSpaperOffice.addCustomer(<span class="keyword">new</span> CustomerA());</span><br><span class="line">        <span class="comment">//添加要派发的客户</span></span><br><span class="line">        newSpaperOffice.addCustomer(<span class="keyword">new</span> CustomerB());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始派发</span></span><br><span class="line">        newSpaperOffice.newSpaper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%9C.4eg8doez2780.png" alt="观察者模式结果"></p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<p>注意：</p>
<p>1、单例类只能有一个实例。<br>2、单例类必须自己创建自己的唯一实例。<br>3、单例类必须给所有其他对象提供这一实例。</p>
<p>意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<p>主要解决：一个全局使用的类频繁地创建与销毁。</p>
<p>何时使用：当您想控制实例数目，节省系统资源的时候。</p>
<p>如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p>
<p>关键代码：构造函数是私有的。</p>
<p>应用实例：</p>
<p>1、一个班级只有一个班主任。<br>2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。<br>3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。<br>优点：</p>
<p>1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。<br>2、避免对资源的多重占用（比如写文件操作）。<br>缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p>
<p>使用场景：</p>
<p>1、要求生产唯一序列号。<br>2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。<br>3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。<br>注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p>
<h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><h4 id="单线程下的单例模式"><a href="#单线程下的单例模式" class="headerlink" title="单线程下的单例模式"></a>单线程下的单例模式</h4><ul>
<li>Single</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 17:22</span></span><br><span class="line"><span class="comment"> * 单例类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个静态私有的Single属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置私有的构造犯法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建了Single对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当instance为空时</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">            <span class="comment">//创建实例化对象</span></span><br><span class="line">            instance = <span class="keyword">new</span> Single();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 17:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Single.getInstance();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%9C.76oxsc2mbgk0.png" alt="单例模式结果"></p>
<h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><ul>
<li>single</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 17:22</span></span><br><span class="line"><span class="comment"> * 单例类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个静态私有的Single属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Single instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置私有的构造犯法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建了Single对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当instance为空时</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">           <span class="keyword">synchronized</span> (Single.class)&#123;</span><br><span class="line">               <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">                   <span class="comment">//创建实例化对象</span></span><br><span class="line">                   instance = <span class="keyword">new</span> Single();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/7 - 17:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                Single.getInstance();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%9C.76oxsc2mbgk0.png" alt="单例模式结果"></p>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>git操作</title>
    <url>/posts/1178143540/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/1.2qq9rivg6bg0.png" alt="1"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>
<p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p>
<p>管理多人协同开发项目的技术、多人开发就必须要使用版本控制！</p>
<h3 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h3><ul>
<li><p>Git</p>
</li>
<li><p>SVN（Subversion）</p>
</li>
<li><p>CVS（Concurrent Versions System）</p>
</li>
<li><p>VSS（Micorosoft Visual SourceSafe）</p>
</li>
<li><p>TFS（Team Foundation Server）</p>
</li>
</ul>
<p>影响力最大且使用最广泛的是Git与SVN</p>
<h3 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h3><p><strong>本地版本控制</strong></p>
<p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS</p>
<p><strong>集中版本控制  SVN</strong></p>
<p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p>
<p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p>
<p><strong>分布式版本控制     Git</strong></p>
<p>每个人都拥有全部的代码！安全隐患！</p>
<p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p>
<p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p>
<h3 id="git和SVN的区别"><a href="#git和SVN的区别" class="headerlink" title="git和SVN的区别"></a>git和SVN的区别</h3><p><strong>SVN</strong></p>
<p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p>
<p><strong>git</strong></p>
<p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p>
<p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p>
<h2 id="git环境配置"><a href="#git环境配置" class="headerlink" title="git环境配置"></a>git环境配置</h2><p>镜像或者官网下载、无脑安装即可、安装成功后进入环境变量配置git的cmd目录即完成git的使用准备阶段</p>
<h3 id="基本的常用命令"><a href="#基本的常用命令" class="headerlink" title="基本的常用命令"></a>基本的常用命令</h3><p><code>cd</code> : 改变目录。</p>
<p><code>cd ..</code>: 回退到上一个目录，直接cd进入默认目录</p>
<p><code>pwd</code> : 显示当前所在的目录路径。</p>
<p><code>ls(ll)</code>:  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p>
<p><code>touch</code> : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p>
<p><code>rm</code>:  删除一个文件, rm index.js 就会把index.js文件删除。</p>
<p><code>mkdir</code>:  新建一个目录,就是新建一个文件夹。</p>
<p><code>rm -r</code> :  删除一个文件夹, rm -r src 删除src目录</p>
<p><code>rm -rf /</code>: 切勿在Linux中尝试！删除电脑中全部文件！</p>
<p><code>mv</code>: 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p>
<p><code>reset</code>: 重新初始化终端/清屏。</p>
<p><code>clear</code>: 清屏。</p>
<p><code>history</code>: 查看命令历史。</p>
<p><code>help</code>: 帮助。</p>
<p><code>exit</code>: 退出。</p>
<p><code>#</code>:表示注释</p>
<h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><p><code>git config -l</code> 查看配置   </p>
<p><code>git config --system --list</code> 查看系统config  </p>
<p><code>git config --global  --list</code> 查看当前用户（global）配置  </p>
<p><strong>Git相关的配置文件</strong></p>
<p><code>Git\etc\gitconfig</code>  ：Git 安装目录下的 gitconfig     –system 系统级</p>
<p><code>C:\Users\Administrator\ .gitconfig</code> 只适用于当前登录用户的配置   </p>
<p><code>--global</code> 全局</p>
<h3 id="设置用户名与邮箱（必须配置）"><a href="#设置用户名与邮箱（必须配置）" class="headerlink" title="设置用户名与邮箱（必须配置）"></a>设置用户名与邮箱（必须配置）</h3><p><code>git config --global user.name 用户名</code> 名称  </p>
<p><code>git config --global user.email 邮箱</code> 邮箱  </p>
<p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。</p>
<h3 id="git工作流程"><a href="#git工作流程" class="headerlink" title="git工作流程"></a>git工作流程</h3><ul>
<li><p>在工作目录中添加、修改文件；</p>
</li>
<li><p>将需要进行版本管理的文件放入暂存区域；</p>
</li>
<li><p>将暂存区域的文件提交到git仓库。</p>
</li>
</ul>
<p><strong>git管理的文件有三种状态</strong></p>
<ul>
<li>已修改（modified）  </li>
<li>已暂存（staged）  </li>
<li>已提交(committed)</li>
</ul>
<h2 id="git的项目使用"><a href="#git的项目使用" class="headerlink" title="git的项目使用"></a>git的项目使用</h2><h3 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h3><p><code>git init</code> 在当前目录新建一个Git代码库</p>
<p>执行后可以看到，在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面、需要打开显示隐藏目录</p>
<h3 id="克隆远程仓库登录"><a href="#克隆远程仓库登录" class="headerlink" title="克隆远程仓库登录"></a>克隆远程仓库登录</h3><p><code>git clone [url]</code> 克隆一个项目和它的整个代码历史</p>
<h2 id="git文件操作"><a href="#git文件操作" class="headerlink" title="git文件操作"></a>git文件操作</h2><h3 id="文件的4种状态"><a href="#文件的4种状态" class="headerlink" title="文件的4种状态"></a>文件的4种状态</h3><ul>
<li><p>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p>
</li>
<li><p>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</p>
</li>
<li><p>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</p>
</li>
<li><p>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</p>
</li>
</ul>
<h3 id="文件状态的操作"><a href="#文件状态的操作" class="headerlink" title="文件状态的操作"></a>文件状态的操作</h3><p><code>git status</code> 查看所有文件状态  </p>
<p><code>git add .</code> 添加所有文件到暂存区  </p>
<p><code>git commit -m &quot;消息内容&quot; </code>   提交暂存区中的内容到本地仓库 -m 提交信息</p>
<p><code>git push</code> 更新远程仓库</p>
<p><code>ssh-keygen</code> 生成公钥、位置（C:\用户\xiaobo.ssh）</p>
<h3 id="忽略提交文件"><a href="#忽略提交文件" class="headerlink" title="忽略提交文件"></a>忽略提交文件</h3><p>在主目录下建立”.gitignore”文件，文件规则如下：</p>
<ul>
<li><p>忽略文件中的空行或以井号（#）开始的行将会被忽略。</p>
</li>
<li><p>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</p>
</li>
<li><p>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p>
</li>
<li><p>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p>
</li>
<li><p>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p>
</li>
</ul>
<p><code>#</code> 注释  </p>
<p><code>*.txt</code> 忽略所有 .txt结尾的文件,这样的话上传就不会被选中！  </p>
<p><code>!lib.txt</code> lib.txt除外  </p>
<p><code>/temp</code> 仅忽略项目根目录下的TODO文件,不包括其它目录temp  </p>
<p><code>build/</code> 忽略build/目录下的所有文件  </p>
<p><code>doc/*.txt</code> 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt  </p>
<h2 id="git的分支"><a href="#git的分支" class="headerlink" title="git的分支"></a>git的分支</h2><p><code>git branch</code> 列出所有本地分支</p>
<p><code>git branch -r</code> 列出所有远程分支</p>
<p><code>git branch [branch-name]</code> 新建一个分支，但依然停留在当前分支</p>
<p><code>git checkout -b [branch]</code> 新建一个分支，并切换到该分支</p>
<p><code>git merge [branch]</code> 合并指定分支到当前分支</p>
<p><code>git branch -d [branch-name]</code> 删除分支</p>
<p><code>git push origin --delete [branch-name]</code> 删除远程分支  </p>
<p><code>git branch -dr [remote/branch]</code> 删除远程分支  </p>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux管理操作</title>
    <url>/posts/3368120724/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210928173914.799sfxwsals0.png" alt="微信截图_20210928173914"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h1><h2 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h2><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统  </p>
<p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除、本质是对/etc/passwd文件进行更新</p>
<h3 id="添加账号"><a href="#添加账号" class="headerlink" title="添加账号"></a>添加账号</h3><p><code>useradd 选项 用户名</code> 完成账号的添加功能</p>
<ul>
<li><p>c comment 指定一段注释性描述。</p>
</li>
<li><p>d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</p>
</li>
<li><p>g 用户组 指定用户所属的用户组。</p>
</li>
<li><p>G 用户组，用户组 指定用户所属的附加组。</p>
</li>
<li><p>m　使用者目录如不存在则自动建立。</p>
</li>
<li><p>s Shell文件 指定用户的登录Shell。</p>
</li>
<li><p>u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</p>
</li>
</ul>
<h3 id="删除账号"><a href="#删除账号" class="headerlink" title="删除账号"></a>删除账号</h3><p><code>userdel -r 用户名</code> 删除用户在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录</p>
<h3 id="修改账号"><a href="#修改账号" class="headerlink" title="修改账号"></a>修改账号</h3><p><code>usermod -d 位置 用户名</code> 更改用户</p>
<h3 id="用户之间身份切换"><a href="#用户之间身份切换" class="headerlink" title="用户之间身份切换"></a>用户之间身份切换</h3><p><code>su 用户名</code> 切换到你想要用的用户名<br><code>exit 或 logout 或 ctrl + d</code> 退回到原来用户<br><code>su - 用户名</code> 使用新用户的工作环境<br><code>#</code> root用户<br><code>$</code> 普通用户</p>
<h3 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h3><ul>
<li><p>root用户下管理<br><code>passwd 用户名</code> 等待依次输入新密码、输入确认密码</p>
</li>
<li><p>普通用户<br><code>passwd</code> 等待输入当前密码、然后新密码、输入确认密码</p>
</li>
</ul>
<h3 id="锁定账户"><a href="#锁定账户" class="headerlink" title="锁定账户"></a>锁定账户</h3><p><code>passwd 选项 用户名</code></p>
<ul>
<li><p>l 锁定口令，即禁用账号。</p>
</li>
<li><p>u 口令解锁。</p>
</li>
<li><p>d 使账号无口令。</p>
</li>
<li><p>f 强迫用户下次登录时修改口令。</p>
</li>
</ul>
<h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理  </p>
<p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改本质上是对/etc/group文件的更新</p>
<h3 id="用户组的创建"><a href="#用户组的创建" class="headerlink" title="用户组的创建"></a>用户组的创建</h3><p><code>groupadd 用户组名</code> 不指定端口号创建用户组<br><code>group -g 端口号 用户组名</code> 指定端口号创建用户组  </p>
<p>如果不指定端口号时那么端口号就是自增、每次自增1</p>
<h3 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h3><p><code>groupdel 用户组名</code> 删除指定给的用户组</p>
<h3 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组"></a>修改用户组</h3><p><code>groupmod -g 端口号 -n 新用户组名字 用户组名字</code> 对用户组进行修改</p>
<h3 id="切换用户组"><a href="#切换用户组" class="headerlink" title="切换用户组"></a>切换用户组</h3><p><code>$ newgroup root</code></p>
<h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><h3 id="磁盘信息查看"><a href="#磁盘信息查看" class="headerlink" title="磁盘信息查看"></a>磁盘信息查看</h3><p><code>df</code> 查看系统磁盘信息和已使用量<br><code>df -h</code> 查看系统磁盘信息和已使用量、用MB或GB显示、更切近我们正常所用给的Windows<br><code>du</code> 查看当前文件夹所用磁盘的信息<br><code>du -a</code> 查看当前文件价所用磁盘的详细信息<br><code>du -h</code> 更直观的查看当前文件夹爱所用个磁盘的信息</p>
<p><strong>参数</strong></p>
<ul>
<li><p>a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</p>
</li>
<li><p>k ：以 KBytes 的容量显示各文件系统；</p>
</li>
<li><p>m ：以 MBytes 的容量显示各文件系统；</p>
</li>
<li><p>h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</p>
</li>
<li><p>H ：以 M=1000K 取代 M=1024K 的进位方式；</p>
</li>
<li><p>T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</p>
</li>
<li><p>i ：不用硬盘容量，而以 inode 的数量来显示</p>
</li>
</ul>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="查看系统正在进行的进程信息"><a href="#查看系统正在进行的进程信息" class="headerlink" title="查看系统正在进行的进程信息"></a>查看系统正在进行的进程信息</h3><p><code>ps man</code> 帮助文档<br><code>ps -aux</code> 查看所有进程<br><code>|</code> 管道符<br><code>grep</code> 查找文件中复合条件的字符串<br><code>ps -aux|grep 进程名</code> 查看要查看的进程的信息<br><code>ps -ef|grep mysql</code> 查看要查看的进程的父进程信息<br><strong>参数</strong></p>
<ul>
<li>-a 显示当前终端运行的进程信息  </li>
<li>-u 以用户的信息显示进程  </li>
<li>-x 显示后台运行进程的参数</li>
</ul>
<p><code>pstree -pu</code> 树结构查看</p>
<ul>
<li>-p 显示父Id</li>
<li>-u 显示用户组</li>
</ul>
<h3 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h3><p><code>kill -9 进程Id</code> 直接干死进程、相当于windows的结束任务</p>
<h2 id="Linux环境安装"><a href="#Linux环境安装" class="headerlink" title="Linux环境安装"></a>Linux环境安装</h2><h3 id="rpm版JDK的安装"><a href="#rpm版JDK的安装" class="headerlink" title="rpm版JDK的安装"></a>rpm版JDK的安装</h3><p><code>rpm -ivh rpm包名</code> 安装jdk<br><code>rpm - qa|grep jdk</code> 检测jdk版本信息<br><code>rpm -e --nodeps jdk版本名</code> 强制删除JDK</p>
<h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><p><code>vim/etc/profile</code> 编辑环境变量配置文件<br><code>#JDK export JAVA_HOME=/usr/java/jdk1.8.0_65 export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar</code>  设置环境变量<br><code>source /etc/profile</code> 刷新使其生效<br><code>java -version</code> 查看版本<br><code>echo $JAVA_HOME</code> 查看JAVA_HOME<br><code>whereis java</code> 查看java<br><code>which java</code> 查看java</p>
<h3 id="解压Tomcat"><a href="#解压Tomcat" class="headerlink" title="解压Tomcat"></a>解压Tomcat</h3><p><code>tar -zxvf 压缩文件名</code> 解压文件<br><code>../startup.sh</code> 启动<br><code>../shotdown.sh</code> 关闭</p>
<h3 id="Linux防火墙操作"><a href="#Linux防火墙操作" class="headerlink" title="Linux防火墙操作"></a>Linux防火墙操作</h3><p><code>systemctl status firewalld</code> 查看firewall服务状态<br><code>service firewalld start</code> 开启 firewalld.service服务<br><code>service firewalld restart</code> 重启 firewalld.service服务<br><code>service firewalld stop</code> 关闭 firewalld.service服务</p>
<p><code>firewall-cmd --list-all</code>    查看全部信息<br><code>firewall-cmd --list-ports</code>  只看端口信息</p>
<p><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code> 开端口命令<br><code>systemctl restart firewalld.service</code> 重启防火墙  </p>
<p><code>--zone</code> 作用域<br><code>--add-port=80/tcp</code>  添加端口，格式为：端口/通讯协议<br><code>--permanent</code>   永久生效，没有此参数重启后失效</p>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基本命令</title>
    <url>/posts/1265541217/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E8%B0%A2%E8%B0%A2.3rt1rv1950y0.jpg" alt="谢谢"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h1><p><strong>Linux一切皆文件</strong></p>
<h2 id="Linux通常使用的服务器"><a href="#Linux通常使用的服务器" class="headerlink" title="Linux通常使用的服务器"></a>Linux通常使用的服务器</h2><p><code>LAMP：</code>Linux + Tomcat + Mysql + PHP<br><code>LNMP：</code>Linux + Nginx + Mysql + PHP</p>
<h2 id="Linux获取方法"><a href="#Linux获取方法" class="headerlink" title="Linux获取方法"></a>Linux获取方法</h2><p><strong>本地虚拟机方式</strong>  </p>
<p>你可以下载个虚拟机在本地跑、但这样可能需要一定的电脑性能、如果是本地的话那么就进去之后启动命令行就行了、因为虚拟机镜像是有图形化界面的、相关工具、vmware、centos 7镜像</p>
<p><strong>云服务器方式</strong>  </p>
<p>可以花点经费去购买个云服务器、某里云、某讯云、某为云都可以、有秒杀活动、都不太贵、反正学习是够了、如果是购买的服务器那么是没有图形化界面的、只有命令行、所以需要一些工具来操作、这样会方便些、本人是windows电脑、所以推荐windows相关工具、例如 Xshell、Xftp</p>
<h2 id="Linux系统的登录"><a href="#Linux系统的登录" class="headerlink" title="Linux系统的登录"></a>Linux系统的登录</h2><ul>
<li><p>命令行登录  </p>
</li>
<li><p>ssh登录</p>
</li>
<li><p>图形界面登录</p>
</li>
</ul>
<p>开机启动后的程序在Windows中称为服务（service）、在Linux中称为守护进程（daemon）</p>
<p><strong>最高权限为root、操作一切</strong></p>
<h2 id="Linux系统关机基本命令"><a href="#Linux系统关机基本命令" class="headerlink" title="Linux系统关机基本命令"></a>Linux系统关机基本命令</h2><p><code>sync</code> 将数据有内存同步到硬盘中<br><code>shutdown</code> 关机指令<br><code>man shutdown</code> 关机指令帮助信息文档<br><code>shutdown -h 10</code> 系统在10分钟后关机<br><code>shutdown -h now</code> 立刻关机<br><code>shutdown -h 07:05</code> 系统在七点零五关机<br><code>shutdown -r now</code> 系统立刻重启<br><code>shutdown -r +10</code> 系统在10分钟后重启<br><code>reboot</code> 立刻重启<br><code>halt</code> 关闭系统</p>
<h2 id="linux目录结构"><a href="#linux目录结构" class="headerlink" title="linux目录结构"></a>linux目录结构</h2><ul>
<li><p>/bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。</p>
</li>
<li><p>/boot： 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。（别动）</p>
</li>
<li><p>/dev ： dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p>
</li>
<li><p>/etc： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。（重要）</p>
</li>
<li><p>/home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。（重要）</p>
</li>
<li><p>/lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。（别动）</p>
</li>
<li><p>/lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。（存放突然关机的文件）</p>
</li>
<li><p>/media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p>
</li>
<li><p>/mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
<li><p>/opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。（重要）</p>
</li>
<li><p>/proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p>
</li>
<li><p>/root：该目录为系统管理员，也称作超级权限者的用户主目录。（重要）</p>
</li>
<li><p>/sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p>
</li>
<li><p>/srv：该目录存放一些服务启动之后需要提取的数据。</p>
</li>
<li><p>/sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</p>
</li>
<li><p>/tmp：这个目录是用来存放一些临时文件的。</p>
</li>
<li><p>/usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。（重要）</p>
</li>
<li><p>/usr/bin： 系统用户使用的应用程序。</p>
</li>
<li><p>/usr/sbin： 超级用户使用的比较高级的管理程序和系统守护程序。</p>
</li>
<li><p>/usr/src： 内核源代码默认的放置目录。</p>
</li>
<li><p>/var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p>
</li>
<li><p>/run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</p>
</li>
<li><p>/www：存放服务器网站相关的资源、环境、网站的项目（重要）</p>
</li>
</ul>
<h2 id="Linux基本命令"><a href="#Linux基本命令" class="headerlink" title="Linux基本命令"></a>Linux基本命令</h2><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><p><code>cd</code> 切换目录<br><code>./</code> 当前目录<br><code>cd..</code> 返回上一级目录</p>
<p><strong>绝地路径</strong></p>
<p>绝对路径就是文件的全部路径、总路径、绝对路径用 / 例如：/dream/xiaobo/xiaobo.txt</p>
<p><strong>相对路径</strong></p>
<p>相对路径就是文件的当前所在路径、例如：../xiaobo.txt</p>
<h3 id="目录查看常用命令"><a href="#目录查看常用命令" class="headerlink" title="目录查看常用命令"></a>目录查看常用命令</h3><p><code>ls</code> 查看当前路径信息<br><code>ls -a</code> 查看当前路径的全部信息（包括隐藏信息）<br><code>ls -l</code> 查看当前路径下的详细信息<br><code>ls -al</code> 查看当前路径下的全部信息的详细信息（包括隐藏信息）<br><code>pwd</code> 显示当前用户所在的目录  </p>
<h3 id="目录创建常用命令"><a href="#目录创建常用命令" class="headerlink" title="目录创建常用命令"></a>目录创建常用命令</h3><p><code>mkdir</code> 创建一个目录<br><code>mkdir -p</code> 递归的创建一个目录、例如：mkdir -p xiaobo1/xiaobo2/xiaobo3/xiaobo4  </p>
<h3 id="目录删除常用命令"><a href="#目录删除常用命令" class="headerlink" title="目录删除常用命令"></a>目录删除常用命令</h3><p><code>rmdir</code> 删除一个目录<br><code>rmdir -p</code> 删除一个层级目录、例如：rmdir -p xiaobo1/xiaobo2/xiaobo3/xiaobo4</p>
<h3 id="目录复制常用命令"><a href="#目录复制常用命令" class="headerlink" title="目录复制常用命令"></a>目录复制常用命令</h3><p><code>cp 要复制的文件 要复制到的位置</code> 例如：cp xiaobo.txt xiaobo </p>
<p><code>-a：</code>相当于 -pdr 的意思，至于 pdr 请参考下列说明；(常用)</p>
<p><code>-p</code>：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</p>
<p><code>-d：</code>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</p>
<p><code>-r：</code>递归持续复制，用于目录的复制行为；(常用)</p>
<p><code>-f：</code>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</p>
<p><code>-i：</code>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</p>
<p><code>-l：</code>进行硬式连结(hard link)的连结档创建，而非复制文件本身。</p>
<p><code>-s：</code>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</p>
<p><code>-u：</code>若 destination 比 source 旧才升级 destination ！</p>
<h3 id="移除文件或目录命令"><a href="#移除文件或目录命令" class="headerlink" title="移除文件或目录命令"></a>移除文件或目录命令</h3><p><code>rm -f</code> 忽略不存在的文件、不会出现警告、强制删除<br><code>rm - r</code> 递归删除目录<br><code>rm -i</code> 删除询问是否删除<br><code>rm -rf /*</code> 删库跑路 </p>
<h3 id="移动文件或目录命令"><a href="#移动文件或目录命令" class="headerlink" title="移动文件或目录命令"></a>移动文件或目录命令</h3><p><code>mv 要移动/重命名的文件 操作后的路径/名字</code> 移动和重命名<br><code>mv -f</code> 强制性<br><code>mv -u</code> 只替换已经更新过的文件  </p>
<h3 id="文件的创建"><a href="#文件的创建" class="headerlink" title="文件的创建"></a>文件的创建</h3><p><code>touch 文件名</code> 创建一个文件</p>
<h3 id="文件内容的添加"><a href="#文件内容的添加" class="headerlink" title="文件内容的添加"></a>文件内容的添加</h3><p><code>echo 内容 &gt;&gt; 文件名</code> 文件添加内容</p>
<h2 id="修改文件属性"><a href="#修改文件属性" class="headerlink" title="修改文件属性"></a>修改文件属性</h2><h3 id="更改文件属组"><a href="#更改文件属组" class="headerlink" title="更改文件属组"></a>更改文件属组</h3><p><code>chgrp -R 属性组 文件名</code> 该目录下的所有文件的属组都会更改</p>
<h3 id="更改文件属主"><a href="#更改文件属主" class="headerlink" title="更改文件属主"></a>更改文件属主</h3><p><code>chown -R 属主名 文件名</code> 更改文件的属主<br><code>chown -R 属主名:属组名 文件名</code> 同时更改属主名和属组名</p>
<h3 id="更改文件9个属性（非常重要）"><a href="#更改文件9个属性（非常重要）" class="headerlink" title="更改文件9个属性（非常重要）"></a>更改文件9个属性（非常重要）</h3><ul>
<li><p>当为[ d ]则是目录</p>
</li>
<li><p>当为[ - ]则是文件；</p>
</li>
<li><p>若是[ l ]则表示为链接文档 ( link file )；</p>
</li>
<li><p>若是[ b ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</p>
</li>
<li><p>若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</p>
</li>
</ul>
<p><code>chmod -R xyz 文件或目录</code> 更改权限</p>
<p>Linux文件的基本权限为9个、分别是owner/group/others、这三种身份都有自己的read/write/execute权限</p>
<p><strong>三种权限用数字表示</strong></p>
<p><code>r:</code> 4<br><code>w:</code> 2<br><code>x:</code> 1  </p>
<p>可读可写不可执行  rw-  6<br>可读可写可执行  rwx  7</p>
<p>chomd 777 文件赋予所有用户可读可写可执行</p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF.4lsb9xvyoia0.png" alt="详细信息"></p>
<h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><p><code>cat 文件名</code> 由第一行开始显示文件内容、用来读文章、配置文件等<br><code>tac 文件名</code> 从最后一行开始显示<br><code>nl 文件名</code> 显示的时候输出行号、看代码时常常使用<br><code>more 文件名</code> 一页一页的显示文件内容（空格翻页、回车看下一行、:f行号）<br><code>less 文件名</code> 与more相比可以进行翻页（空格翻页、上下键滑动页面、/要查找的字符串(向下查询)、?要查找的字符串(想上查询)、大小n代表继续查找、退出按q）<br><code>head -n 行数 文件名</code> 只看头几行<br><code>tail -n 行数 文件名</code> 只看文件尾几行  </p>
<p><code>cd /etc/sysconfig/network-scripts</code> 网络配置目录<br><code>ifconfig</code> 查看网络配置</p>
<h2 id="Linux链接的概念"><a href="#Linux链接的概念" class="headerlink" title="Linux链接的概念"></a>Linux链接的概念</h2><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><p>硬链接就是允许一个文件拥有多个路径、例如：B是A的硬链接、那么他们两个指向了同一个文件</p>
<p><code>ln 源文件 要生成的文件</code> 创建硬链接  </p>
<h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><p>软连接就是相当于一个快捷方式、如果源文件被删除、则软连接失效</p>
<p><code>ln -s 源文件 要生成的文件</code> 创建软连接</p>
<h2 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h2><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>用户刚刚启动 vi/vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p>i 切换到输入模式，以输入字符。</p>
<p>x 删除当前光标所在处的字符。</p>
<p>: 切换到底线命令模式，以在最底一行输入命令。</p>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式下按下i就进入了输入模式</p>
<p>在输入模式中，可以使用以下按键：</p>
<ul>
<li><p>字符按键以及Shift组合，输入字符</p>
</li>
<li><p>ENTER，回车键，换行</p>
</li>
<li><p>BACK SPACE，退格键，删除光标前一个字符</p>
</li>
<li><p>DEL，删除键，删除光标后一个字符</p>
</li>
<li><p>方向键，在文本中移动光标</p>
</li>
<li><p>HOME/END，移动光标到行首/行尾</p>
</li>
<li><p>Page Up/Page Down，上/下翻页</p>
</li>
<li><p>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</p>
</li>
<li><p>ESC，退出输入模式，切换到命令模式</p>
</li>
</ul>
<h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<p>q 退出程序</p>
<p>w 保存文件</p>
<p>按ESC键可随时退出底线命令模式。</p>
<h3 id="vim-按键说明"><a href="#vim-按键说明" class="headerlink" title="vim 按键说明"></a>vim 按键说明</h3><table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>数字 space</td>
<td>按下数字后再按空格键，光标会向右移动这一行的 n 个字符</td>
</tr>
<tr>
<td>数字 Enter</td>
<td>光标向下移动数字行</td>
</tr>
<tr>
<td>esc</td>
<td>退出编辑模式，回到一般模式中</td>
</tr>
<tr>
<td>/word</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 xiaobo 这个字符串，就输入 /xiaobo 即可！</td>
</tr>
<tr>
<td>n</td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td>N</td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
<tr>
<td>:wq</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开</td>
</tr>
<tr>
<td>:set nu</td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td>:set nonu</td>
<td>与 set nu 相反，为取消行号</td>
</tr>
</tbody></table>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>spring cloud Alibaba</title>
    <url>/posts/3456049725/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210920171736.1jlaouv3mtgg.jpg" alt="微信图片_20210920171736"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Spring-Cloud-Alibaba入门"><a href="#Spring-Cloud-Alibaba入门" class="headerlink" title="Spring Cloud Alibaba入门"></a>Spring Cloud Alibaba入门</h1><h2 id="spring-Cloud-Alibaba版本说明"><a href="#spring-Cloud-Alibaba版本说明" class="headerlink" title="spring Cloud Alibaba版本说明"></a>spring Cloud Alibaba版本说明</h2><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E7%BB%84%E4%BB%B6%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB.7l0zkvw0nq00.png" alt="组件版本关系"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/springcloud-springboot%E7%89%88%E6%9C%AC%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.2to4bj7thyu0.png" alt="springcloud-springboot版本依赖关系"></p>
<p><strong>springcloud 的版本号是用伦敦地铁站站名标记的版本、因为错综复杂、用数字标记不是太友好</strong></p>
<h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p><strong>spring boot  –&gt;   spring cloud   –&gt;   spring cloud alibaba</strong></p>
<h2 id="Nacos服务治理"><a href="#Nacos服务治理" class="headerlink" title="Nacos服务治理"></a>Nacos服务治理</h2><h3 id="Nacos服务注册"><a href="#Nacos服务注册" class="headerlink" title="Nacos服务注册"></a>Nacos服务注册</h3><ul>
<li>首先我们要先下载相应的Nacos服务、然后启动Nacos服务</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/Nacos%E5%90%AF%E5%8A%A8.1hfetuxqbark.png" alt="Nacos服务启动"></p>
<ul>
<li>引入父工程的相关依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Spring Cloud Hoxton --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Spring Cloud Alibaba --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建provider子模块、引入相关依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    继承父工程--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloudalibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        引入nacos发现依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># 在nacos中注册、nacos地址</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider</span> <span class="comment"># 服务名字</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span> <span class="comment"># 端口号</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注册成功</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/Nacos%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F.5onz8u4knsc0.png" alt="Nacos注册成功"></p>
<h3 id="Nacos-服务发现"><a href="#Nacos-服务发现" class="headerlink" title="Nacos 服务发现"></a>Nacos 服务发现</h3><ul>
<li>创建consumer子模块、引入相关pom依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    继承父工程--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloudalibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        引入nacos发现依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DiscoveryClient是springCloud提供的一个发现Nacos的接口、直接将其注入到IOC容器即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ServiceInstance是springCloud提供的一个接受服务的一个接口、直接用其接受即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/instances&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ServiceInstance&gt; <span class="title">instances</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据服务Id获取到服务、</span></span><br><span class="line">        List&lt;ServiceInstance&gt; provider = <span class="keyword">this</span>.discoveryClient.getInstances(<span class="string">&quot;provider&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Nacos-服务调用"><a href="#Nacos-服务调用" class="headerlink" title="Nacos 服务调用"></a>Nacos 服务调用</h3><ul>
<li>consumerController</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DiscoveryClient是springCloud提供的一个发现Nacos的接口、直接将其注入到IOC容器即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里面spring boot没有提供RestTemplate、所以需要手动配置放到Bean中</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ServiceInstance是springCloud提供的一个接受服务的一个接口、直接用其接受即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/instances&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ServiceInstance&gt; <span class="title">instances</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据服务Id获取到服务</span></span><br><span class="line">        List&lt;ServiceInstance&gt; provider = <span class="keyword">this</span>.discoveryClient.getInstances(<span class="string">&quot;provider&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据服务Id获取到服务</span></span><br><span class="line">        List&lt;ServiceInstance&gt; list = <span class="keyword">this</span>.discoveryClient.getInstances(<span class="string">&quot;provider&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成一个随机数用于在不同服务之间访问</span></span><br><span class="line">        <span class="keyword">int</span> index = ThreadLocalRandom.current().nextInt(list.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到一个服务</span></span><br><span class="line">        ServiceInstance serviceInstance = list.get(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到当前服务的URI</span></span><br><span class="line">        URI uri = serviceInstance.getUri();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印日志</span></span><br><span class="line">        log.info(<span class="string">&quot;调用的端口是：&quot;</span> + serviceInstance.getPort());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;调用的端口是&quot;</span>+serviceInstance.getPort() + <span class="string">&quot;uri是：&quot;</span> + serviceInstance.getUri();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ConsumerConfiguration</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入到Bean中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接返回RestTemplate对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里只实现了简单的调用、并没有太多的起到负载均衡、这里面的随机数相当于了负载均衡</p>
</blockquote>
<h2 id="Ribbon-负载均衡"><a href="#Ribbon-负载均衡" class="headerlink" title="Ribbon 负载均衡"></a>Ribbon 负载均衡</h2><blockquote>
<p>Ribbon 不是spring Alibaba的组件、是Netfilx的、底层是RestTemplate、用的是轮询算法</p>
</blockquote>
<ul>
<li>ribbon的用法  @LoadBalanced</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入到Bean中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接返回RestTemplate对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/ribbonIndex&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ribbonIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">&quot;http://provider/index&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是一种轮询算法</p>
</blockquote>
<h3 id="Ribbon之随机算法"><a href="#Ribbon之随机算法" class="headerlink" title="Ribbon之随机算法"></a>Ribbon之随机算法</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8180</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ribbon  随机算法</span></span><br><span class="line"><span class="attr">provider:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure>

<h3 id="Ribbon之权重算法"><a href="#Ribbon之权重算法" class="headerlink" title="Ribbon之权重算法"></a>Ribbon之权重算法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosWeightedRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> NacosDiscoveryProperties nacosDiscoveryProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig iClientConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        ILoadBalancer loadBalancer = <span class="keyword">this</span>.getLoadBalancer();</span><br><span class="line">        BaseLoadBalancer baseLoadBalancer = (BaseLoadBalancer) loadBalancer;</span><br><span class="line">        <span class="comment">//获取要请求的微服务名称</span></span><br><span class="line">        String name = baseLoadBalancer.getName();</span><br><span class="line">        <span class="comment">//获取服务发现的相关API</span></span><br><span class="line">        NamingService namingService = nacosDiscoveryProperties.namingServiceInstance();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Instance instance = namingService.selectOneHealthyInstance(name);</span><br><span class="line">            log.info(<span class="string">&quot;选择的实例是port=&#123;&#125;,instance=&#123;&#125;&quot;</span>,instance.getPort(),instance);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NacosServer(instance);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ribbon  权重算法</span></span><br><span class="line"><span class="attr">provider:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.southwind.configuration.NacosWeightedRule</span></span><br></pre></td></tr></table></figure>

<h2 id="Sentinel-服务限流降级"><a href="#Sentinel-服务限流降级" class="headerlink" title="Sentinel 服务限流降级"></a>Sentinel 服务限流降级</h2><h3 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h3><p>这里来说以下雪崩效应的理解、举个例子、就好比现在有A、B、C、D四块服务、现在项目中D需要调用C、C需要调用B、B需要调用A、但是由于A出现了一点点的小问题、导致B无法调用它、这样就会导致B内从增加、而导致B、C、D服务都不能正常工作、这样的问题就叫做雪崩效应</p>
<h3 id="雪崩效应的解决方案"><a href="#雪崩效应的解决方案" class="headerlink" title="雪崩效应的解决方案"></a>雪崩效应的解决方案</h3><p><strong>设置线程</strong></p>
<p>这里可以设置线程、例如、B访问A时设置一个线程访问时间、如果在规定时间内没有获取到相应的线程就释放掉、这样就不会产生阻塞线程从而使得B的内存崩溃了</p>
<p><strong>设置限流</strong></p>
<p>例如、给A服务设置一个访问上限、假如给A设置10个访问上限、这样B来了10个访问线程之后就不会再有线程去访问、从而防止内存崩溃</p>
<p><strong>熔断器  Sentienl  Hystrix</strong></p>
<ul>
<li>降级（应对服务自身的）</li>
</ul>
<p>系统将某些不重要的接口功能进行降低、限制一些功能的使用、只提供部分功能、不提供全部功能</p>
<ul>
<li>限流（应对服务自身的）</li>
</ul>
<p>只接受系统能够承载的访问量、超出即抛出异常  </p>
<ul>
<li>熔断（应对服务外部的）</li>
</ul>
<p>例如、B访问A时、A反应很慢、这样就会导致B反应也很慢、所以直接熔断、不去访问A了、直接返回错误</p>
<h3 id="熔断器效果"><a href="#熔断器效果" class="headerlink" title="熔断器效果"></a>熔断器效果</h3><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/sentinel%E5%A4%A7%E8%87%B4%E5%8E%86%E7%A8%8B.2xvy96milx00.png" alt="sentinel大致历程"></p>
<h3 id="Sentinel的使用方法"><a href="#Sentinel的使用方法" class="headerlink" title="Sentinel的使用方法"></a>Sentinel的使用方法</h3><p>下载相应的jar、用于启动Sentinel、然后运行下载的jar即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/sentinel%E5%90%AF%E5%8A%A8.gtv55n7n1bk.png" alt="sentinel启动"></p>
<ul>
<li>pom依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        用于流量控制--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        用于采集数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># 在nacos中注册、nacosURI  完成注册的（Nacos）</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment"># 完成流量控制的   （Sentinel）</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment"># 用于Sentinel链路控制Service层的开关</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider</span> <span class="comment"># 服务名字</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span> <span class="comment"># 端口号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 监控所有请求、用于Sentienel进行控制</span></span><br></pre></td></tr></table></figure>

<p><strong>效果图</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/sentinel%E6%8E%A7%E5%88%B6%E5%8F%B0.3nlwni820ns0.png" alt="sentinel控制台"></p>
<h3 id="流量规则"><a href="#流量规则" class="headerlink" title="流量规则"></a>流量规则</h3><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/sentinel%E6%B5%81%E6%8E%A7.6d9d83xsocw0.png" alt="sentinel流控"></p>
<p><strong>直接流控</strong></p>
<p>直接将其访问的方法加入阈值</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/sentinel%E9%98%80%E5%80%BC%E6%8E%A7%E5%88%B6.2fdubxnubv9c.png" alt="sentinel直接阀值控制"></p>
<p><strong>关联流控</strong></p>
<p>关联阈值是关联别的方法、简单点说就是别人做事我背锅、例如关联一个list方法、那么访问list方法时我就会被收到控制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            restTemplate.getForObject(<span class="string">&quot;http://localhost:8082/list&quot;</span>,String.class);</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/sentinel%E5%85%B3%E8%81%94%E6%A8%A1%E5%BC%8F.aux1y3a51cs.png" alt="sentinel关联模式"></p>
<p><strong>链路流控</strong></p>
<p>链路流控其实就是控制service层、但是service不能直接被访问、所以要和调用的Controller进行关联</p>
<ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        为Service做限流所用到的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-web-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>configuration</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> CommonFilter());</span><br><span class="line">        registrationBean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        registrationBean.addInitParameter(CommonFilter.WEB_CONTEXT_UNIFY,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">&quot;sentinelFilter&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProviderService providerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  <span class="string">&quot;端口号为：&quot;</span>+port;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        providerService.test();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        providerService.test();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>service</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明Sentinel控制</span></span><br><span class="line">    <span class="meta">@SentinelResource</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="流量效果"><a href="#流量效果" class="headerlink" title="流量效果"></a>流量效果</h3><p><strong>直接失败</strong></p>
<p>直接抛出异常、没什么附加功能</p>
<p><strong>warm up</strong></p>
<p>warm up就会在系统刚开始的性能比较低、举个例子就好比一个业务员刚上班、可能状态不是很好、所以他会在刚开始的时候只接受一个人办理业务、过了一会他可能状态适应了、会一个人接受多个人同时办理业务、这里大家可以想一下抢购、抢购业务用的可能就是这个</p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/warm-up.7h5ka2w8rww0.png" alt="warm-up"></p>
<p><strong>排队等待</strong></p>
<p>排队等待就是出现异常时不会直接抛出、会等待一下、等待下一个时间段请求、如果请求上了、就不会抛出异常、正常执行、否则会抛出异常</p>
<ul>
<li>失败<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/Sentinel%E6%8E%92%E9%98%9F%E7%AD%89%E5%BE%85%E5%A4%B1%E8%B4%A5.1x1jjmyi00e8.png" alt="Sentinel排队等待失败"></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            restTemplate.getForObject(<span class="string">&quot;http://localhost:8082/index&quot;</span>,String.class);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%8E%92%E9%98%9F%E7%AD%89%E5%BE%85%E5%A4%B1%E8%B4%A5.51c6gp4eqlk0.png" alt="排队等待失败"></p>
<blockquote>
<p>失败原因、以为0.5s+0.3s &lt; 1s 所以在等待之后的请求当中还在阈值1s当中、所以不会请求成功、而会抛出异常</p>
</blockquote>
<ul>
<li>成功<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/Sentinel%E6%8E%92%E9%98%9F%E7%AD%89%E5%BE%85%E6%88%90%E5%8A%9F.2n9wswp36m00.png" alt="Sentinel排队等待成功"></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            restTemplate.getForObject(<span class="string">&quot;http://localhost:8082/index&quot;</span>,String.class);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%8E%92%E9%98%9F%E7%AD%89%E5%BE%85%E6%88%90%E5%8A%9F.6ztskuntiz80.png" alt="排队等待成功"></p>
<blockquote>
<p>成功原因、因为0.5s + 0.5s = 1s、所以在等待之后阈值正好为1、所以后得到下一次的请求</p>
</blockquote>
<h3 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a>降级规则</h3><p><strong>RT</strong></p>
<p>单个请求的响应时间超过阈值、则进入准降级状态、接下来 1 S 内连续 5 个请求响应时间均超过阈值、就进行降级、持续时间为时间窗口的值</p>
<p><strong>异常比例</strong></p>
<p>每秒异常数量占通过量的比例大于阈值、就进行降级处理、持续时间为时间窗口的值</p>
<p><strong>异常数</strong></p>
<p>1 分钟内的异常数超过阈值就进行降级处理、时间窗口的值要大于 60S、否则刚结束熔断又进入下一次熔断了</p>
<h3 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h3><p>热点规则是流控规则的更细粒度操作、可以具体到对某个热点参数的限流、设置限流之后、如果带着限流参数的请求量超过阈值、则进行限流、时间为统计窗口时长</p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E7%83%AD%E7%82%B9%E8%A7%84%E5%88%99.3tie4hd8kyw0.png" alt="热点规则"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(&quot;test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@RequestParam(value = &quot;num1&quot;,required = false)</span> Integer num1,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@RequestParam(value = &quot;num2&quot;, required = false)</span> Integer num2</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + <span class="string">&quot;-&quot;</span> + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="授权规则"><a href="#授权规则" class="headerlink" title="授权规则"></a>授权规则</h3><p>给指定的资源设置流控应用（追加参数）、可以对流控应用进行访问权限的设置、具体就是添加白名单和黑名单<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%8E%88%E6%9D%83.1egvgjnaf8e8.png" alt="授权"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestOriginParserDefinition</span> <span class="keyword">implements</span> <span class="title">RequestOriginParser</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parseOrigin</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        String name = httpServletRequest.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(name))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;name is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebCallbackManager.setRequestOriginParser(<span class="keyword">new</span> RequestOriginParserDefinition());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>框架</tag>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>开学一周的生活</title>
    <url>/posts/509947787/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%85%B5%E8%8D%92%E9%A9%AC%E4%B9%B1.3z6er1u6z0y0.jpg" alt="一个人的兵荒马乱"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="聊聊生活吧"><a href="#聊聊生活吧" class="headerlink" title="聊聊生活吧"></a>聊聊生活吧</h1><p><strong>好久没更新了、刚才看了一下正好一个月了、主要是这一个月事情很多、挺忙的、然后又忙着开学、开学后课和作业又很多、天天净忙着做项目和做作业了、然后今天放假了、坐在图书馆、就找了个时间来说说话、顺便记录一下自己、然后以后争取一周更新一篇吧、算是督促自己了……</strong></p>
<h2 id="聊聊开学前"><a href="#聊聊开学前" class="headerlink" title="聊聊开学前"></a>聊聊开学前</h2><p><strong>开学前还是蛮期盼开学的、毕竟三年的大学我只上了12个月、挺遗憾的、对自己也是很失望、然后去年这一年期间也失控过好几次、但还好、自己调整过来了、这几年真的让我改变了很多、就是那种悄无声息的让我的生活方式发生了改变、可能是自己的这些年经历吧、有些事情就像刻在DNA里面一样、给你留下深刻的印象、让你铭记、也让我变得对自己有了一定的要求、也让自己变得沉稳了许多、做事知道三思而行了、冲动的亏吃了无数、被现实一次又一次的扇了耳光、这就是我、没什么快乐带给别人、却又总是欲言又止……</strong></p>
<h3 id="开学前一周"><a href="#开学前一周" class="headerlink" title="开学前一周"></a>开学前一周</h3><p><strong>开学前没什么事、拿完录取通知书、然后就等着开学了、那阵真的很期盼开学的、开学前就是每天正常学点东西、但是看了几次英语、想学、是真想学、但是对外语可能真的没有天分吧、特别的陌生、也是、从三年级学完那一年英语就再也没学过了（此处没有办法能用语言表达）、然后学点java、又看了看日语、然后停更这阶段我做了一个纯javaWeb的模仿小米商城的一个电商项目、基本功能、基本电商流程都实现了、过几天再发出来吧</strong></p>
<h2 id="聊聊开学后"><a href="#聊聊开学后" class="headerlink" title="聊聊开学后"></a>聊聊开学后</h2><p><strong>开学后我自己感觉蛮好的、虽然上课几乎都是学过的、但是还好、也没指望在这学到有用的、毕竟学校教育吗、然后上课氛围也不怎么样、也是分三六九等吗、毕竟自己也是这个圈子里面的、曾经你就是这样的、那么你现在的定义就是这样的、哈、开学后跟他们在一起挺不适应的、感觉他们好无聊、和两年前的自己一模一样、讨论着那点是个半成年人就懂的问题、以及那几把游戏、哈哈一笑、一笑一天、确实、看到他们确实真的很开心、所以所有人都是正常人、那就是我不正常了、可能真的是我不正常、那就自己慢慢走好咯、致我可能虚度了的青春</strong></p>
<h3 id="开学后的一周"><a href="#开学后的一周" class="headerlink" title="开学后的一周"></a>开学后的一周</h3><p>开学这一周就是正常上课、然后下课就泡在图书馆里面了、累了逛一逛学校、从开学到现在一直泡在这里、我真的觉得这样的环境已经很好了、最后放几张这一周的生活吧</p>
<p><strong>起床</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210919140903.7kzlyduzs540.jpg" alt="微信图片_20210919140903"><br><strong>食堂</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210919140921.1pbz0vmaorsw.jpg" alt="微信图片_20210919140921"><br><strong>操场</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210919140856.2ohfk8jmme80.jpg" alt="微信图片_20210919140856"><br><strong>大门</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210919140914.6z05mfmpvpo0.jpg" alt="微信图片_20210919140914"><br><strong>教学楼（我不在这上课）</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210919140911.6nxrr0884gg0.jpg" alt="微信图片_20210919140911"><br><strong>图书馆</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210919140849.40t6xtz63wq0.jpg" alt="微信图片_20210919140849"><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210919140907.16u5qggrclq8.jpg" alt="微信图片_20210919140907"><br><strong>宿舍</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%AE%BF%E8%88%8D.5bq8sm2il9k0.jpg" alt="宿舍"><br><strong>私（我）</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210919140834.6kr5pq1s5ps0.jpg" alt="微信图片_20210919140834"><br><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界、</strong></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Springcloud 负载均衡、熔断、监控、跟踪、配置</title>
    <url>/posts/1877709900/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%83%8F.11uutsunr50w.png" alt="像"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Spring-Cloud-NetFlix"><a href="#Spring-Cloud-NetFlix" class="headerlink" title="Spring Cloud NetFlix"></a>Spring Cloud NetFlix</h1><h2 id="负载均衡-Ribbon"><a href="#负载均衡-Ribbon" class="headerlink" title="负载均衡 Ribbon"></a>负载均衡 Ribbon</h2><blockquote>
<p>Spring Cloud Ribbon 是一个负载均衡解决方案、Ribbon 是 Netflix 发布的负载均衡器、Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的、是一个用于对 HTTP 请求进行控制的负载均衡客户端<br>Spring Cloud Ribbon 需要结合 Spring Cloud Eureka 来使用、Eureka Server 提供所有可以调用的服务提供者列表、Ribbon 基于特定的负载均衡算法从这些服务提供者中选择要调用的具体实例</p>
</blockquote>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><ul>
<li>子模块 ribbon pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8040</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ribbon</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/ribbon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://provider/student/findAll&quot;</span>,Collection.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RibbonApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@LoadBalanced</code>：声明一个基于 Ribbon 的负载均衡</p>
<h2 id="负载均衡-Feign"><a href="#负载均衡-Feign" class="headerlink" title="负载均衡 Feign"></a>负载均衡 Feign</h2><blockquote>
<p>与 Ribbon 一样、Feign 也是由 Netflix 提供的、Feign 是一个声明式、模版化的 Web Service 客户端、它简化了开发者编写 Web 服务客户端的操作、开发者可以通过简单的接口和注解来调用 HTTP API、Spring Cloud Feign、它整合了 Ribbon 和 Hystrix、具有可插拔、基于注解、负载均衡、服务熔断等 </p>
</blockquote>
<h3 id="Feign和ribbon区别"><a href="#Feign和ribbon区别" class="headerlink" title="Feign和ribbon区别"></a>Feign和ribbon区别</h3><blockquote>
<p>Ribbon 是一个通用的 HTTP 客户端工具，Feign 是基于 Ribbon 实现的  </p>
</blockquote>
<h3 id="Feign的特点"><a href="#Feign的特点" class="headerlink" title="Feign的特点"></a>Feign的特点</h3><p>Feign 是一个声明式的 Web Service 客户端</p>
<p>支持 Feign 注解、Spring MVC 注解、JAX-RS 注解</p>
<p>Feign 基于 Ribbon 实现，使用起来更加简单</p>
<p>Feign 集成了 Hystrix，具备服务熔断的功能</p>
<h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><ul>
<li>子模块 feign pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8050</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">feign</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><code>feign.hystrix.enabled</code>：是否开启熔断器</p>
<ul>
<li>feign接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;provider&quot;, fallback = FeignProviderClientImpl.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignProviderClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/student/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/student/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@FeignClient value</code>:映射提供者</p>
<p><code>@FeignClient fallback</code>：映射实现类</p>
<ul>
<li>实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignProviderClientImpl</span> <span class="keyword">implements</span> <span class="title">FeignProviderClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务器维护中......&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Component</code>：注入IOC容器</p>
<ul>
<li>Controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/feign&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FeignProviderClient feignProviderClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/finAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignProviderClient.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignProviderClient.index();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@EnableFeignClients</code>：开启Feign</p>
<h2 id="容错机制-Hystrix"><a href="#容错机制-Hystrix" class="headerlink" title="容错机制 Hystrix"></a>容错机制 Hystrix</h2><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>服务隔离机制</p>
<p>服务降级机制</p>
<p>熔断机制</p>
<p>提供实时的监控和报警功能</p>
<p>提供实时的配置修改功能</p>
<p><strong>Hystrix 数据监控需要结合 Spring Boot Actuator（服务监控） 来使用、Actuator（服务监控） 提供了对服务的健康健康、数据统计、可以通过 hystrix.stream 节点获取监控的请求数据、提供了可视化的监控界面</strong></p>
<h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h3><ul>
<li>子模块 hystrix pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.com.dream.xiaobo.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        负载均衡--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        监控--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        可视化监控界面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8060</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hystrix</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据熔断</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;hystrix.stream&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>management.endpoints.web.exposure.include</code>：监控hystrix.stream节点</p>
<ul>
<li>启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span>   <span class="comment">//声明启用数据监控</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span> <span class="comment">//声明启用可视化数据监控</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@EnableCircuitBreaker</code>：声明启用数据监控</p>
<p><code>@EnableHystrixDashboard</code>：声明启用可视化数据监控</p>
<blockquote>
<p>启动成功之后，访问 <code>http://localhost:8060/actuator/hystrix.stream</code> 可以监控到请求数据</p>
</blockquote>
<blockquote>
<p>访问 <code>http://localhost:8060/hystrix</code>，可以看到可视化的监控界面、输入要监控的地址节点即可看到该节点的可视化数据监控</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%97%A0%E8%AE%BF%E9%97%AE%E6%97%B6actuator%E7%9B%91%E6%8E%A7.5drp55nhytw0.png" alt="无访问时actuator监控"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%9C%89%E8%AE%BF%E9%97%AE%E6%97%B6actuator%E7%9B%91%E6%8E%A7.10fy7rmw241c.png" alt="有访问时actuator监控"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%9B%91%E6%8E%A7.2tcayet00ag0.png" alt="图形界面监控"></p>
<h2 id="配置中心（config）"><a href="#配置中心（config）" class="headerlink" title="配置中心（config）"></a>配置中心（config）</h2><blockquote>
<p>Spring Cloud Config 通过服务端可以为多个客户端提供配置服务、Spring Cloud Config 可以将配置文件存储在本地、也可以将配置文件存储在远程 Git 仓库、创建 Config Server、通过它管理所有的配置文件。</p>
</blockquote>
<h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><ul>
<li>文件夹 application.yml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8090</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: configclient</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure>

<ul>
<li>子模块 configserver pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8762</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nativeconfigserver</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">native</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">native:</span></span><br><span class="line">          <span class="attr">search-locations:</span> <span class="string">classpath:/search</span></span><br></pre></td></tr></table></figure>

<p><code>profiles.active</code>：配置文件的获取方式</p>
<p><code>cloud.config.server.native.search-locations</code>：本地配置文件存放的路径</p>
<ul>
<li>search/configclient.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8070</span></span><br><span class="line"><span class="attr">foo:</span> <span class="string">foo</span> <span class="string">version</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NativeConfigServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@EnableConfigServer</code>：声明配置中心</p>
<h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><ul>
<li>子模块 pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>bootstrap.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">configclient2</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8762</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><code>cloud.config.uri</code>：本地 Config Server 的访问路径</p>
<p><code>cloud.config.fail-fase</code>：设置客户端优先判断 Config Server 获取是否正常</p>
<p>通过<code>spring.application.name</code> 结合<code>spring.profiles.active</code>拼接目标配置文件名，configclient-dev.yml，去 Config Server 中查找该文件</p>
<ul>
<li>controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NariveConfigController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;foo&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String foo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.port + <span class="string">&quot;--&quot;</span> + <span class="keyword">this</span>.foo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeConfigClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NativeConfigClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="服务跟踪-zipkin"><a href="#服务跟踪-zipkin" class="headerlink" title="服务跟踪 zipkin"></a>服务跟踪 zipkin</h2><blockquote>
<p>Zipkin 是一个可以采集并且跟踪分布式系统中请求数据的组件，让开发者可以更加直观的监控到请求在各个微服务所耗费的时间等</p>
</blockquote>
<h3 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h3><ul>
<li>子模块 zipkin pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--        需要添加springbootweb依赖、否则报错--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        可视化界面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZipkinServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipkinApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZipkinApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@EnableZipkinServer</code>：声明启动 Zipkin Server</p>
<ul>
<li>子模块 zipkinclient pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zipkinclient</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9090/</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>

<p><code>spring.sleuth.web.client.enabled</code>：设置开启请求跟踪</p>
<p><code>spring.sleuth.sampler.probability</code>：设置采样比例，默认是 1.0</p>
<p><code>srping.zipkin.base-url</code>：Zipkin Server 地址</p>
<ul>
<li>controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/zipkin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipkinController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipkinClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZipkinClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/zipkin.2pf0azta10w0.png" alt="zipkin"></p>
<h2 id="springcloud项目流程"><a href="#springcloud项目流程" class="headerlink" title="springcloud项目流程"></a>springcloud项目流程</h2><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/springcloud%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.79hynh6pc9w0.png" alt="springcloud项目结构"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/springcloud%E5%B0%8F%E5%8D%9A%E8%87%AA%E6%88%91%E8%AE%A4%E8%AF%86.1ro278ctx9z4.png" alt="springcloud小博自我认识"></p>
<h3 id="流程图图片地址"><a href="#流程图图片地址" class="headerlink" title="流程图图片地址"></a>流程图图片地址</h3><p><a href="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/springcloud%E5%B0%8F%E5%8D%9A%E8%87%AA%E6%88%91%E8%AE%A4%E8%AF%86.1ro278ctx9z4.png">点击获取小博的流程图</a></p>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>框架</tag>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>spring cloud注册中心、提供者、消费者</title>
    <url>/posts/1522176931/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%97%A0.6ywm0gqeeus0.jpg" alt="无"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="spring-cloud"><a href="#spring-cloud" class="headerlink" title="spring cloud"></a>spring cloud</h1><p><strong>spring cloud完全基于spring boot、服务调用方式是基于REST API、整合了各种成熟的产品和框架、同时基于spring boot也使得整体的开发、配置、部署都非常方便</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/springcloud%E6%9E%B6%E6%9E%84%E5%9B%BE.y3rhrs7g1a8.png" alt="springcloud架构图"></p>
<h2 id="单体应用"><a href="#单体应用" class="headerlink" title="单体应用"></a>单体应用</h2><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E6%B5%81%E7%A8%8B%E5%9B%BE.27q8pbvgrgkk.png" alt="单体应用流程图"></p>
<h3 id="单体应用存在的问题"><a href="#单体应用存在的问题" class="headerlink" title="单体应用存在的问题"></a>单体应用存在的问题</h3><p><strong>随着业务的发展、开发变得越来越复杂</strong></p>
<p><strong>修改、新增某个功能，需要对整个系统进行测试、重新部署</strong></p>
<p><strong>一个模块出现问题、很可能导致整个系统崩溃</strong></p>
<p><strong>多个开发团队同时对数据进行管理、容易产生安全漏洞</strong></p>
<p><strong>各个模块使用同一种技术进行开发、各个模块很难根据实际情况选择更合适的技术框架、局限性很大</strong></p>
<p><strong>模块内容过于复杂、可能需要很长时间才能完成工作交接</strong></p>
<h2 id="分布式、集群、微服务"><a href="#分布式、集群、微服务" class="headerlink" title="分布式、集群、微服务"></a>分布式、集群、微服务</h2><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p><strong>一台服务器无法负荷高并发的数据访问量、那么就设置十台服务器一起分担压力、十台不行就设置一百台（物理层面）、很多人干同一件事情、来分摊压力</strong></p>
<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p><strong>将一个复杂问题拆分成若干个简单的小问题、将一个大型的项目架构拆分成若干个微服务来协同完成（软件设计层面）、将一个庞大的工作拆分成若干个小步骤、分别由不同的人完成这些小步骤、最终将所有的结果进行整合实现大的需求</strong></p>
<h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p><strong>将应用程序分为多个可独立部署的较小组件</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8%E6%B5%81%E7%A8%8B%E5%9B%BE.3vmstaujzu60.png" alt="微服务应用流程图"></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%90%BD%E5%9C%B0%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94.3cy3e84u4e20.png" alt="微服务落地框架对比"></p>
<h2 id="spring-cloud核心组件"><a href="#spring-cloud核心组件" class="headerlink" title="spring cloud核心组件"></a>spring cloud核心组件</h2><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/springcloud%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6.4l8isf69h7k0.png" alt="springcloud核心组件"></p>
<h3 id="服务治理-Eureka"><a href="#服务治理-Eureka" class="headerlink" title="服务治理 Eureka"></a>服务治理 Eureka</h3><blockquote>
<p>spring cloud Eureka<br>Eureka Server：注册中心<br>Eureka Client：所有要进行注册的微服务通过 Eureka Client 连接到 Eureka Server、完成注册</p>
</blockquote>
<h4 id="核心组成部分"><a href="#核心组成部分" class="headerlink" title="核心组成部分"></a>核心组成部分</h4><ul>
<li>注册中心</li>
</ul>
<p><strong>在分布式系统架构中、每个微服务在启动时、将自己的信息存储在注册中心、叫做服务注册</strong></p>
<p><strong>代码示例</strong></p>
<p>父工程 pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>eurekaserver<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 解决 JDK 9 以上没有 JAXB API 的问题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            spring cloud管理组件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.SR2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子模块 eurekaServer pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eurekaserver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        eurekaserver组件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子模块 eurekaService application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>属性说明</p>
</blockquote>
<p><code>server.port</code>：当前 Eureka Server 服务端口</p>
<p><code>eureka.client.register-with-eureka</code>：是否将当前的 Eureka Server 服务作为客户端进行注册</p>
<p><code>eureka.client.fetch-fegistry</code>：是否获取其他 Eureka Server 服务的数据</p>
<p><code>eureka.client.service-url.defaultZone</code>：注册中心的访问地址</p>
<p>启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerAppliaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerAppliaction.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@EnableEurekaServer</code>:声明该类是一个 Eureka Server 微服务、提供服务注册和服务发现功能</p>
<ul>
<li>服务提供者</li>
</ul>
<p><strong>服务提供者在注册中心注册相关信息</strong></p>
<p><strong>代码示例</strong></p>
<p>子模块 eurekaClient  pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eurekaclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        eurekaclient组件注册--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子模块 eurekaClient  application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><code>spring.application.name</code>:当前服务注册在Eureka Server上的名称</p>
<p><code>eureka.client.servic.url.defaultZone</code>:注册中心的访问地址</p>
<p><code>eureka.instance.prefer-ip-address</code>:是否将当前服务的 IP 注册到 Eureka Server</p>
<p>Controlle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentServiceImpl studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span>  Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line">        studentService.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(value = &quot;/updata&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        studentService.updata(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        studentService.save(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>repository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long,Student&gt; map = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;Long, Student&gt;();</span><br><span class="line">        map.put(<span class="number">1L</span>,<span class="keyword">new</span> Student(<span class="number">1L</span>,<span class="string">&quot;xiaobo&quot;</span>,<span class="number">21</span>));</span><br><span class="line">        map.put(<span class="number">2L</span>,<span class="keyword">new</span> Student(<span class="number">2L</span>,<span class="string">&quot;xiaowang&quot;</span>,<span class="number">21</span>));</span><br><span class="line">        map.put(<span class="number">3L</span>,<span class="keyword">new</span> Student(<span class="number">3L</span>,<span class="string">&quot;wangyibo&quot;</span>,<span class="number">21</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        map.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAndUpdata</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        map.put(student.getId(),student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>服务消费者</li>
</ul>
<p><strong>服务消费者从注册中心获取服务提供者的网络信息、通过该信息调用服务、叫做服务发现</strong></p>
<p><strong>代码示例</strong></p>
<p>子模块 conmuser pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>conmuser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8020</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">conmuser</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConmuserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">&quot;http://localhost:8010/student/findAll&quot;</span>,Collection.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8010/student/findById/&#123;id&#125;&quot;</span>,Student.class,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletedById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        restTemplate.delete(<span class="string">&quot;http://localhost:8010/student/deleteById/&#123;id&#125;&quot;</span>,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        restTemplate.postForEntity(<span class="string">&quot;http://localhost:8010/student/save&quot;</span>,student,<span class="keyword">null</span>).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(value = &quot;/updata&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        restTemplate.put(<span class="string">&quot;http://localhost:8010/student/updata&quot;</span>,student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>提供者和消费者是相对的</strong></p>
<p><strong>RestTemplate 是 Spring 框架提供的基于 REST 的服务组件，底层是对 HTTP 请求及响应进行了封装，提供了很多访问 RETS 服务的方法</strong></p>
<h3 id="服务网关-Zuul"><a href="#服务网关-Zuul" class="headerlink" title="服务网关 Zuul"></a>服务网关 Zuul</h3><p><strong>Spring Cloud 集成了 Zuul 组件、实现服务网关</strong></p>
<p><strong>Zuul 是 Netflix 提供的一个开源的 API 网关服务器、是客户端和网站后端所有请求的中间层、对外开放一个 API、将所有请求导入统一的入口、屏蔽了服务端的具体实现逻辑、Zuul 可以实现反向代理的功能、在网关内部实现动态路由、身份认证、IP 过滤、数据监控等</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3.714d81d0fjo0.png" alt="服务网关"></p>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p><strong>子模块 zuul pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.com.dream.xiaobo.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>application.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8030</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">provider:</span> <span class="string">p/**</span></span><br></pre></td></tr></table></figure>

<p><code>zuul.routes.provider</code>：给服务提供者 provider 设置映射</p>
<p><strong>启动类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@EnableZuulProxy</code>：包含了 <code>@EnableZuulServer</code>、设置该类是网关的启动类</p>
<p><code>@EnableAutoConfiguration</code>：可以帮助 Spring Boot 应用将所有符合条件的 <code>@Configuration</code> 配置加载到当前 Spring Boot 创建并使用的 IoC 容器中</p>
<p><strong>Zuul 自带了负载均衡功能，修改 provider 的代码</strong></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>框架</tag>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法 树结构 二叉树</title>
    <url>/posts/3265814123/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%9E%AB%E5%8F%B6.672jk3r8ajg0.png" alt="枫叶"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="树结构"><a href="#树结构" class="headerlink" title="树结构"></a>树结构</h1><h2 id="树结构概述"><a href="#树结构概述" class="headerlink" title="树结构概述"></a>树结构概述</h2><h3 id="啥是树结构"><a href="#啥是树结构" class="headerlink" title="啥是树结构"></a>啥是树结构</h3><p><strong>树是一种重要的非线性数据结构，直观地看，它是数据元素（在树中称为结点）按分支关系组织起来的结构，很象自然界中的树那样</strong></p>
<h3 id="为什么使用树结构"><a href="#为什么使用树结构" class="headerlink" title="为什么使用树结构"></a>为什么使用树结构</h3><p><strong>因为线性结构插入和查找不方便、效率不是太高</strong></p>
<h3 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h3><ul>
<li>根节点</li>
</ul>
<p><strong>根节点就是最开始的那一个节点、就是祖宗</strong></p>
<ul>
<li>双亲节点</li>
</ul>
<p><strong>双亲节点就是一个节点下面有两个节点、就是他自己即是爹又是娘、自己就能生两个节点出来</strong></p>
<ul>
<li>子节点</li>
</ul>
<p><strong>子节点就是被生出来的那个</strong></p>
<ul>
<li>路径</li>
</ul>
<p><strong>路径就是从一个节点到另一个节点所经过的地方、走的路</strong></p>
<ul>
<li>节点的度</li>
</ul>
<p><strong>节点的度就是一个节点有几个子节点、有几个子节点那么他的度就是多少</strong></p>
<ul>
<li>节点的权</li>
</ul>
<p><strong>节点的权就是当前节点里面存的内容、存的内容是多少它的权就是多少</strong></p>
<ul>
<li>叶子节点</li>
</ul>
<p><strong>叶子节点就是当前节点没有子节点、他就是最后一个了</strong></p>
<ul>
<li>子树</li>
</ul>
<p><strong>子树就是当前这个树里面的叉、把里面的几个节点也看成一个树、那么这个树就是它的子树</strong></p>
<ul>
<li>层</li>
</ul>
<p><strong>层就是每个节点的层次、就是例如辈分一样、太爷、爷爷、爹、儿子、孙子、重孙子</strong></p>
<ul>
<li>树的高度</li>
</ul>
<p><strong>树的高度就是最大的层数</strong></p>
<ul>
<li>森林</li>
</ul>
<p><strong>森林就是将多个树连在一起组成一个森林</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%A0%91%E7%BB%93%E6%9E%84.v2ylfg2ritc.png" alt="树结构"></p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="啥是二叉树"><a href="#啥是二叉树" class="headerlink" title="啥是二叉树"></a>啥是二叉树</h3><p><strong>二叉树就是任何一个节点的子节点数量不超过2</strong></br><br><strong>二叉树的子节点分为左节点和右节点、并且左右节点不可颠倒位置</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E4%BA%8C%E5%8F%89%E6%A0%91.7j0wutsqzn80.png" alt="二叉树"></p>
<h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p><strong>除最后一层无任何子节点外、每一层上的所有结点都有两个子结点的二叉树</strong></br><br><strong>一个二叉树、如果每一个层的结点数都达到最大值、则这个二叉树就是满二叉树。也就是说、如果一个二叉树的层数为K、且结点总数是(2^k) -1  则它就是满二叉树</strong></p>
<h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p><strong>所有叶子节点都在最后一层或倒数第二层、且最后一层的叶子节点在左边连续、倒数第二层叶子节点在右边连续</strong></p>
<p><strong>一棵深度为k的有n个结点的二叉树、对树中的结点按从上至下、从左到右的顺序进行编号、如果编号为i（1≤i≤n）的结点与满二叉树中编号为i的结点在二叉树中的位置相同、则这棵二叉树称为完全二叉树</strong></p>
<h3 id="链式存储的二叉树"><a href="#链式存储的二叉树" class="headerlink" title="链式存储的二叉树"></a>链式存储的二叉树</h3><p><strong>CRUD</strong></p>
<ul>
<li>TreeNode（节点）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义当前节点</span></span><br><span class="line">    <span class="keyword">private</span> Integer value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义左节点</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode leftNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义右节点</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode rightNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(Integer value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为左节点定义</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftNode</span><span class="params">(TreeNode leftNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftNode = leftNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取出左节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getLeftNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> leftNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为右节点定义</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightNode</span><span class="params">(TreeNode rightNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rightNode = rightNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取出右节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getRightNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rightNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历</span></span><br><span class="line"><span class="comment">     * node 当前节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">frontShow</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示当前节点</span></span><br><span class="line">        System.out.print(value + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断左节点是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != leftNode)&#123;</span><br><span class="line">            <span class="comment">//递归</span></span><br><span class="line">            leftNode.frontShow(node.getLeftNode());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断右节点是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != rightNode)&#123;</span><br><span class="line">            <span class="comment">//递归</span></span><br><span class="line">            rightNode.frontShow(node.getRightNode());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">middleShow</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != leftNode)&#123;</span><br><span class="line">            leftNode.middleShow(node.getLeftNode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(value + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != rightNode)&#123;</span><br><span class="line">            rightNode.middleShow(node.getRightNode());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rearShow</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != leftNode)&#123;</span><br><span class="line">            leftNode.rearShow(node.getLeftNode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != rightNode)&#123;</span><br><span class="line">            rightNode.rearShow(node.getRightNode());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(value + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">frontSearch</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义用于存放查到的数据变量</span></span><br><span class="line">        TreeNode target = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断当前权是否为要查找的数据</span></span><br><span class="line">        <span class="keyword">if</span>(i == value)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断左节点</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != leftNode)&#123;</span><br><span class="line">            <span class="comment">//递归</span></span><br><span class="line">            target = leftNode.frontSearch(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否找到要查找的数据</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != target)&#123;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断右节点</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != rightNode)&#123;</span><br><span class="line">            target = rightNode.frontSearch(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义变量存放当前节点</span></span><br><span class="line">        TreeNode node = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断当前节点的左节点是否是要删除的</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != leftNode &amp;&amp; node.leftNode.value == i )&#123;</span><br><span class="line">            node.rightNode = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断当前节点的右节点是否是要删除的</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != rightNode &amp;&amp; node.rightNode.value == i)&#123;</span><br><span class="line">            node.rightNode = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前节点的左节点没有找到则继续向下找、将左节点作为当前节点、开始递归</span></span><br><span class="line">        node = leftNode;</span><br><span class="line">        <span class="keyword">if</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            node.delete(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果当前节点的右节点没有找到则继续向下找、将右节点作为当前节点、开始递归</span></span><br><span class="line">        node = rightNode;</span><br><span class="line">        <span class="keyword">if</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            node.delete(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>BinaryTree(树)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个根节点</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode treeNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取根节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getTreeNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> treeNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置根节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTreeNode</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.treeNode = treeNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历</span></span><br><span class="line"><span class="comment">     * node 当前节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">frontShow</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != treeNode)&#123;</span><br><span class="line">            treeNode.frontShow(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">middleShow</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != treeNode)&#123;</span><br><span class="line">            treeNode.middleShow(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rearShow</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != treeNode)&#123;</span><br><span class="line">            treeNode.rearShow(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">frontSearch</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> treeNode.frontSearch(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除子树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断删除的是否为树的根节点</span></span><br><span class="line">        <span class="keyword">if</span>(treeNode.getValue() == i)&#123;</span><br><span class="line">            treeNode = <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            treeNode.delete(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBinaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个树的实例化对象</span></span><br><span class="line">        BinaryTree tree = <span class="keyword">new</span> BinaryTree();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个节点的实例化对象</span></span><br><span class="line">        TreeNode node1 = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">        TreeNode node2 = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">        TreeNode node3 = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">        TreeNode node4 = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</span><br><span class="line">        TreeNode node5 = <span class="keyword">new</span> TreeNode(<span class="number">5</span>);</span><br><span class="line">        TreeNode node6 = <span class="keyword">new</span> TreeNode(<span class="number">6</span>);</span><br><span class="line">        TreeNode node7 = <span class="keyword">new</span> TreeNode(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//为树添加根节点</span></span><br><span class="line">        tree.setTreeNode(node1);</span><br><span class="line">        <span class="comment">//为根节点添加左节点</span></span><br><span class="line">        node1.setLeftNode(node2);</span><br><span class="line">        <span class="comment">//为根节点添加右节点</span></span><br><span class="line">        node1.setRightNode(node3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为第二层节点添加左右节点</span></span><br><span class="line">        node2.setLeftNode(node4);</span><br><span class="line">        node2.setRightNode(node5);</span><br><span class="line">        node3.setLeftNode(node6);</span><br><span class="line">        node3.setRightNode(node7);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//前序遍历</span></span><br><span class="line">        tree.frontShow(node1);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//中序遍历</span></span><br><span class="line">        tree.middleShow(node1);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//后序遍历</span></span><br><span class="line">        tree.rearShow(node1);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//前序查找</span></span><br><span class="line">        System.out.println(tree.frontSearch(<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        tree.delete(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//前序遍历</span></span><br><span class="line">        tree.frontShow(node1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序存储的二叉树"><a href="#顺序存储的二叉树" class="headerlink" title="顺序存储的二叉树"></a>顺序存储的二叉树</h3><p><strong>通常情况下只考虑满二叉树和完全二叉树、因为普通的二叉树没有意义</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E4%BA%8C%E5%8F%89%E6%A0%91.1dbprsg5ybhc.png" alt="顺序存储二叉树"></p>
<ul>
<li>第n个元素的左子节点</li>
</ul>
<p><strong>2 * n + 1</strong></p>
<ul>
<li>第n个元素的右子节点</li>
</ul>
<p><strong>2 * n + 2</strong></p>
<ul>
<li>第n个元素的父节点</li>
</ul>
<p><strong>（n - 1） / 2</strong></p>
<h3 id="顺序存储的二叉树遍历"><a href="#顺序存储的二叉树遍历" class="headerlink" title="顺序存储的二叉树遍历"></a>顺序存储的二叉树遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBinaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayBinaryTree</span><span class="params">(<span class="keyword">int</span>[] data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从哪里开始</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">frontShow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        frontShow(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">frontShow</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//显示数据</span></span><br><span class="line">        System.out.println(data[index]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断是否有数据</span></span><br><span class="line">        <span class="keyword">if</span>(data == <span class="keyword">null</span> || data.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断左节点是否在数组里面</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">2</span> * index + <span class="number">1</span> &lt; data.length)&#123;</span><br><span class="line">            <span class="comment">//遍历</span></span><br><span class="line">            frontShow(<span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断右节点是否在数组里面</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">2</span> * index + <span class="number">2</span> &lt; data.length)&#123;</span><br><span class="line">            <span class="comment">//遍历</span></span><br><span class="line">            frontShow(<span class="number">2</span> * index + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        ArrayBinaryTree arrayBinaryTree = <span class="keyword">new</span> ArrayBinaryTree(data);</span><br><span class="line"></span><br><span class="line">        arrayBinaryTree.frontShow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法 八种基本算法</title>
    <url>/posts/1028172237/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%98%8C%E5%9B%BE.3igw5hmxzdc0.jpg" alt="昌图"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="数据结构与算法基础"><a href="#数据结构与算法基础" class="headerlink" title="数据结构与算法基础"></a>数据结构与算法基础</h1><h2 id="八种常用排序方法"><a href="#八种常用排序方法" class="headerlink" title="八种常用排序方法"></a>八种常用排序方法</h2><h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><ul>
<li>冒泡排序</li>
</ul>
<blockquote>
<p>原理就是与后一个进行比较、然后根据大小决定是否进行交换位置、将得到结果放在后面最后形成排序结果</p>
</blockquote>
<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="comment">//显示原数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//调用冒泡排序方法</span></span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        <span class="comment">//显示排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//比较次数、控制比较几轮</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//控制与他后面的进行比较、最后一个不进行比较</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">                <span class="comment">//定义一个中间量暂时存放数据</span></span><br><span class="line">                <span class="keyword">int</span> temp;</span><br><span class="line">                <span class="comment">//如果前一个比后一个大、数据交换</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>快速排序</li>
</ul>
<blockquote>
<p>原理就是找到一个标准数、随便找、一般都是用数组第一个元素、然后将比标准数小的放在左边、记作为底的一边、然后将比标准数大的放在右边、记作高的一边、然后递归得到排序结果</p>
</blockquote>
<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示原数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用快速排序方法</span></span><br><span class="line">        quickSort(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当开始位置小于结束位置时执行</span></span><br><span class="line">        <span class="keyword">if</span>(start &lt; end)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将第一个作为目标标准数</span></span><br><span class="line">            <span class="keyword">int</span> stard = arr[start];</span><br><span class="line">            <span class="comment">//记录数据小的和数据大的下标</span></span><br><span class="line">            <span class="keyword">int</span> low = start;</span><br><span class="line">            <span class="keyword">int</span> hight = end;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环找出比标准数大的和比标准数小的</span></span><br><span class="line">            <span class="keyword">while</span> (low &lt; hight)&#123;</span><br><span class="line">                <span class="comment">//如果高的数据比目标数大则保持数据不变、并移动下标</span></span><br><span class="line">                <span class="keyword">while</span> (low &lt; hight &amp;&amp; stard &lt;= arr[hight])&#123;</span><br><span class="line">                    hight--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//这里经过上面条件处理后这里的高位置数据小于目标数所以放到低位置</span></span><br><span class="line">                arr[low] = arr[hight];</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果低的数据比目标数小则保持数据不变、并移动下标</span></span><br><span class="line">                <span class="keyword">while</span> (low &lt; hight &amp;&amp; stard &gt;= arr[low])&#123;</span><br><span class="line">                    low++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//这里经过上面条件处理后这里的低位置数据大于目标数所以放到高位置</span></span><br><span class="line">                arr[hight] = arr[low];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将目标数给低位置上面</span></span><br><span class="line">            arr[low] = stard;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//递归处理所有小的数据、将起始位置设置为0、将结束位置设置为目标数下标</span></span><br><span class="line">            quickSort(arr,start,low);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//递归处理所有大的数据、将起始位置设置为目标数下标+1、将结束位置设置为数组最后元素</span></span><br><span class="line">            quickSort(arr,low + <span class="number">1</span>,end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ul>
<li>直接插入排序</li>
</ul>
<blockquote>
<p>原理就是判断当前的这个数据值与他前一个数据的值的关系、从小到大就是当前这个数据比前一个数据小、则将当前数据存放到中间变量中、然后将前一个赋值给当前变量、将中间变量一直与前一个数据判断、最后中间变量赋值给不符合题意的、从大到小反之即可、但是效率不怎么好</p>
</blockquote>
<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示原数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//调用插入排序方法</span></span><br><span class="line">        insertSort(arr);</span><br><span class="line">        <span class="comment">//显示排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断后一个是否比前一个数据小</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; arr[i - <span class="number">1</span>])&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//定义一个中间变量来存放小的那个数据</span></span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                <span class="comment">//定义一个变量j</span></span><br><span class="line">                <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//遍历当前数字的所有前面的数字</span></span><br><span class="line">                <span class="keyword">for</span>(j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>&amp;&amp;temp&lt;arr[j]; j--)&#123;</span><br><span class="line">                    <span class="comment">//将前一个赋值给后一个</span></span><br><span class="line">                    arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将中间变量temp赋值给不满足条件的那个值</span></span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>希尔排序</li>
</ul>
<blockquote>
<p>原理就是根据步长分成若干份、依次遍历步长分成的不同块、根据要求交换位置进行排序</p>
</blockquote>
<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示原数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用希尔排序方法</span></span><br><span class="line">        shellSort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 希尔排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历所有的步长</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> d = arr.length / <span class="number">2</span>; d &gt; <span class="number">0</span>; d /= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">// 遍历所有有元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = d; i &lt; arr.length; i++)&#123;</span><br><span class="line">                <span class="comment">// 遍历本组中所有的元素</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i - d; j &gt;= <span class="number">0</span>; j -= d)&#123;</span><br><span class="line">                    <span class="comment">// 如果当前元素大于加上步长后的那个元素</span></span><br><span class="line">                    <span class="keyword">if</span>(arr[j] &gt; arr[j + d])&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//交换位置</span></span><br><span class="line">                        <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                        arr[j] = arr[j + d];</span><br><span class="line">                        arr[j + d] = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul>
<li>简单选择排序</li>
</ul>
<blockquote>
<p>原理就是假定一个元素值是最小的、然后和所有的值进行比较、进行交换位置、一直将所有元素值都遍历比较结束即可</p>
</blockquote>
<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示原数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用选择排序方法</span></span><br><span class="line">        selectSort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="comment">//定义最小值</span></span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="comment">//定义中间值</span></span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="comment">//遍历最小值的其他值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断最小值和其他值的关系、并进行排序交换</span></span><br><span class="line">                <span class="keyword">if</span>(arr[min] &gt; arr[j])&#123;</span><br><span class="line">                    temp = arr[min];</span><br><span class="line">                    arr[min] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><blockquote>
<p>原理就是将一个数组在中间拆开、然后两个数组从头依次比较每个下标元素、将小的数据存放到新的临时数组当中、然后循环遍历拆分、依次放到新的临时数组当中、最后将临时数组在赋值给原数组即可</p>
</blockquote>
<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        <span class="comment">//显示数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//调用归并排序方法</span></span><br><span class="line">        mergeSort(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//显示排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> low   开始下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hight 结束下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low, <span class="keyword">int</span> hight)</span></span>&#123;</span><br><span class="line">        <span class="comment">//取出中间值</span></span><br><span class="line">        <span class="keyword">int</span> middle = (low + hight ) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(low &lt; hight)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//递归左边那个数组</span></span><br><span class="line">            mergeSort(arr,low, middle);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//递归右边那个数组</span></span><br><span class="line">            mergeSort(arr,middle + <span class="number">1</span>,hight);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用归并方法、进行归并</span></span><br><span class="line">            merge(arr,low,middle,hight);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> low   开始下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> middle    中间下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hight 结束下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low, <span class="keyword">int</span> middle,<span class="keyword">int</span> hight)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个临时数组</span></span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[hight - low +<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//第一个数组的开始下标</span></span><br><span class="line">        <span class="keyword">int</span> i = low;</span><br><span class="line">        <span class="comment">//第二个数组的开始下标</span></span><br><span class="line">        <span class="keyword">int</span> j = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//临时数组下标</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历两个数组取出小的数字，放入临时数组中</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= middle &amp;&amp; j &lt;= hight)&#123;</span><br><span class="line">            <span class="comment">//判断两个数组中哪个数据更小</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt;= arr[j])&#123;</span><br><span class="line">                <span class="comment">//将小的存储临时数组中</span></span><br><span class="line">                temp[index++] = arr[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//将小的存储临时数组中</span></span><br><span class="line">                temp[index++] = arr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理多余的数据</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= middle )&#123;</span><br><span class="line">            temp[index++] = arr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理多余的数据</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt;= hight)&#123;</span><br><span class="line">            temp[index++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把临时数组中的数据重新存入原数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;temp.length;k++) &#123;</span><br><span class="line">            arr[k+low]=temp[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>堆排序</li>
</ul>
<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><blockquote>
<p>原理就是找到数组当中的最大数是几位数、然后就排几次、依次按个十百千万开始排、用几个临时数组依次存储个十百千万位为0~9的、先是个位、然后一直到最大值位数、最后将临时数组中的数据赋值给原数组即可</p>
</blockquote>
<ul>
<li>数组方式</li>
</ul>
<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">23</span>,<span class="number">6</span>,<span class="number">189</span>,<span class="number">45</span>,<span class="number">9</span>,<span class="number">287</span>,<span class="number">56</span>,<span class="number">1</span>,<span class="number">798</span>,<span class="number">34</span>,<span class="number">65</span>,<span class="number">652</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//显示原数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//调用基数排序方法</span></span><br><span class="line">        radixSort(arr);</span><br><span class="line">        <span class="comment">//显示排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基数排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个最大值变量</span></span><br><span class="line">        <span class="keyword">int</span> max = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组找出最大值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; arr[i])&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取出最大值的位数</span></span><br><span class="line">        <span class="keyword">int</span> maxLength = (max + <span class="string">&quot;&quot;</span>).length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建临时存放数据的二维数组</span></span><br><span class="line">        <span class="keyword">int</span> temp[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建存储临时数据数量的数组</span></span><br><span class="line">        <span class="keyword">int</span> counts[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据最大长度的数决定比较的次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,n = <span class="number">1</span>; i &lt; maxLength; i++,n *= <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="comment">//把每一个数字分别计算余数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++)&#123;</span><br><span class="line">                <span class="comment">//计算余数</span></span><br><span class="line">                <span class="keyword">int</span> ys = arr[j] / n % <span class="number">10</span>;</span><br><span class="line">                <span class="comment">//把当前遍历的数据放入指定的数组中</span></span><br><span class="line">                temp[ys][counts[ys]] = arr[j];</span><br><span class="line">                <span class="comment">//记录数量</span></span><br><span class="line">                counts[ys]++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//记录原数组下标</span></span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历数量的数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; counts.length; k++)&#123;</span><br><span class="line">                <span class="comment">//如果数组里面有数据则赋值</span></span><br><span class="line">                <span class="keyword">if</span>(counts[k] != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//遍历数组里面的数据依次顺序赋值给原数组</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; counts[k]; l++)&#123;</span><br><span class="line">                        arr[index++] = temp[k][l];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//赋值后将当前这个数组的数量清零</span></span><br><span class="line">                    counts[k]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>队列方式</li>
</ul>
<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadixQueueSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">23</span>,<span class="number">6</span>,<span class="number">189</span>,<span class="number">45</span>,<span class="number">9</span>,<span class="number">287</span>,<span class="number">56</span>,<span class="number">1</span>,<span class="number">798</span>,<span class="number">34</span>,<span class="number">65</span>,<span class="number">652</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//显示原数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//调用基数排序方法</span></span><br><span class="line">        radixSort(arr);</span><br><span class="line">        <span class="comment">//显示排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基数排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个最大值变量</span></span><br><span class="line">        <span class="keyword">int</span> max = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组找出最大值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; arr[i])&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取出最大值的位数</span></span><br><span class="line">        <span class="keyword">int</span> maxLength = (max + <span class="string">&quot;&quot;</span>).length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建临时存放数据的对列</span></span><br><span class="line">        MyQueue[] queue = <span class="keyword">new</span> MyQueue[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queue.length; i++)&#123;</span><br><span class="line">            queue[i] = <span class="keyword">new</span> MyQueue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据最大长度的数决定比较的次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,n = <span class="number">1</span>; i &lt; maxLength; i++,n *= <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="comment">//把每一个数字分别计算余数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++)&#123;</span><br><span class="line">                <span class="comment">//计算余数</span></span><br><span class="line">                <span class="keyword">int</span> ys = arr[j] / n % <span class="number">10</span>;</span><br><span class="line">                <span class="comment">//把当前遍历的数据放入指定的数组中</span></span><br><span class="line">                queue[ys].add(arr[j]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录原数组下标</span></span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历数量的数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; queue.length; k++)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (!queue[k].isEmpty())&#123;</span><br><span class="line">                    arr[index++] = queue[k].poll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对列</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elements = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入队</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个新的数组、长度为原数组+1</span></span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;elements.length; i++)&#123;</span><br><span class="line">            newArr[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        newArr[elements.length] = element;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新原数组</span></span><br><span class="line">        <span class="keyword">this</span>.elements = newArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">poll</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        出队</span></span><br><span class="line">        <span class="keyword">int</span> element = <span class="keyword">this</span>.elements[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//        创建新数组</span></span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//        将数据赋值到新数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newArr.length; i++)&#123;</span><br><span class="line">            newArr[i] = elements[i +<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        数据更新</span></span><br><span class="line">        <span class="keyword">this</span>.elements = newArr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        返回出队数据</span></span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public String isEmpty()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        return this.elements.length == 0?&quot;队列为空&quot;:&quot;队列不为空&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.elements.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构概述、线性结构</title>
    <url>/posts/675515198/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%83%8F%E4%BD%A0.2ycaoa2b80w0.png" alt="像你"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="数据结构与算法基础"><a href="#数据结构与算法基础" class="headerlink" title="数据结构与算法基础"></a>数据结构与算法基础</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h3><blockquote>
<p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成</p>
</blockquote>
<p><strong>数据的存储结构</strong></p>
<ul>
<li>顺序存储结构</li>
</ul>
<blockquote>
<p>把数据元素存放在地址连续的存储单元里、其数据间的逻辑关系和物理关系是一致的、数组就是顺序存储结构的典型代表</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/14994/fcd62538-f226-4a04-9a9d-e1a11c422c72.png" alt="顺序存储结构"></p>
<ul>
<li>链式存储结构</li>
</ul>
<blockquote>
<p>把数据元素存放在内存中的任意存储单元里、也就是可以把数据存放在内存的各个位置、这些数据在内存中的地址可以是连续的、也可以是不连续的</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/14994/ecdefa20-f4eb-4d2b-9453-4b7cb4cea684.png" alt="链式存储结构"></p>
<p><strong>数据的逻辑结构</strong></p>
<ul>
<li>集合结构</li>
</ul>
<blockquote>
<p>集合结构中的数据元素同属于一个集合、他们之间是并列的关系、除此之外没有其他关系</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/14994/f48dafe0-3262-45a6-86e8-446910a994d9.png" alt="集合结构"></p>
<ul>
<li>线性结构</li>
</ul>
<blockquote>
<p>线性结构中的元素存在一对一的相互关系</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/14994/009c4663-6c81-4155-b591-f425760b5a22.png" alt="线性结构"></p>
<ul>
<li>树形结构</li>
</ul>
<blockquote>
<p>树形结构中的元素存在一对多的相互关系</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/14994/9064117e-38ae-486f-8e93-ba85b050de21.png" alt="树形结构"></p>
<ul>
<li>图形结构</li>
</ul>
<blockquote>
<p>图形结构中的元素存在多对多的相互关系</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/14994/026b2ffe-520a-4cad-ba5d-2419dc7dc707.png" alt="图形结构"></p>
<h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><blockquote>
<p>是指解题方案的准确而完整的描述、是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制</p>
</blockquote>
<p><strong>算法的特性</strong></p>
<ul>
<li>输入</li>
<li>输出</li>
<li>有穷性</li>
<li>确定性</li>
<li>可行性</li>
</ul>
<p><strong>算法的基本要求</strong></p>
<ul>
<li>正确性</li>
<li>可读性</li>
<li>健壮性</li>
<li>时间复杂度</li>
<li>空间复杂度</li>
</ul>
<h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><img src="https://files.mdnice.com/user/14994/11e8761f-49e5-44d0-89cf-f35148734219.png" alt="数组"></p>
<p><strong>数组的基本使用</strong></p>
<ul>
<li>添加数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给数组中添加数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建数组</span></span><br><span class="line">        <span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出arr数组数据</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义要添加的数据</span></span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建新数组长度为arr数组+1</span></span><br><span class="line">        <span class="keyword">int</span> [] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据添加到新数组末端</span></span><br><span class="line">        newArr[arr.length] = number;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将原数组数据复制给新数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            newArr[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//新数组替换原数组</span></span><br><span class="line">        arr = newArr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出更新后数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个数组长度为6、含有12个元素</span></span><br><span class="line">        <span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出原数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//创建一个新数组</span></span><br><span class="line">        <span class="keyword">int</span> [] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成一个随机数、用于代表要删除的位置</span></span><br><span class="line">        <span class="keyword">int</span> number = (<span class="keyword">int</span>) (Math.random() * <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出删除下标</span></span><br><span class="line">        System.out.println(number);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除替换</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number; i++)&#123;</span><br><span class="line">            newArr[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = number+<span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            newArr[i - <span class="number">1</span>] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//新数组替换源数组</span></span><br><span class="line">        arr = newArr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出原数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>查找算法</strong></p>
<ul>
<li>线性查找</li>
</ul>
<blockquote>
<p>线性查找就是从数组头部开始、依次向后查找、一直到查到结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线性查找</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wire</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] elements = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">43</span>,<span class="number">1</span>,<span class="number">56</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">54</span>,<span class="number">2</span>,<span class="number">43</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个默认下标、默认为-1</span></span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明一个要查找的元素</span></span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组、从头开始查看是否有与target相等的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length; i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>(elements[i] == target)&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;index = &quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>二分法查找</li>
</ul>
<blockquote>
<p>首先二分法查找的数组必须为有序的、然后取数组中间位置查看、查看此刻的值与要查询的值的关系、如果相对较小则取较小的一边、然后再次取中间位置查看、再次进行比较、依此类推此法、相对较大则同理</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二分法查找</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dichotomy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//目标位置</span></span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个要查询的值</span></span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//起始位置</span></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//末位置</span></span><br><span class="line">        <span class="keyword">int</span> end = arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中间位置</span></span><br><span class="line">        <span class="keyword">int</span> mid = (begin + end) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//中间值是否与查询的相等</span></span><br><span class="line">            <span class="keyword">if</span>(arr[mid] == target)&#123;</span><br><span class="line">                index = mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//查询内容比中间值小时</span></span><br><span class="line">                <span class="keyword">if</span>(target &lt; arr[mid])&#123;</span><br><span class="line">                    <span class="comment">//将末位置改成中间位置前一个</span></span><br><span class="line">                    end = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//将起始位置改为中间位置后一个</span></span><br><span class="line">                    begin = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//重新取中间值</span></span><br><span class="line">                mid = (begin + end) / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;index = &quot;</span>  + index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>面向对象的数组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrays</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArrays</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elements = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个新的数组、长度为原数组+1</span></span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;elements.length; i++)&#123;</span><br><span class="line">            newArr[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        newArr[elements.length] = element;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新原数组</span></span><br><span class="line">        <span class="keyword">this</span>.elements = newArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入到指定位置元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; index)&#123;</span><br><span class="line">                newArr[i] = elements[i];</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                newArr[i+<span class="number">1</span>] = elements[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        newArr[index] = element;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.elements = newArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newArr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; index)&#123;</span><br><span class="line">                newArr[i] = elements[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                newArr[i] = elements[i+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.elements = newArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; elements.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;数组下标越界&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.elements[index] = element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据下标取出数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; elements.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;数组下标越界&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elements[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> elements.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出数组元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(<span class="keyword">this</span>.elements));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线性查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wire</span><span class="params">(<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组、从头开始查看是否有与target相等的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length; i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>(elements[i] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二分法查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dichotomy</span><span class="params">(<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//起始位置</span></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//末位置</span></span><br><span class="line">        <span class="keyword">int</span> end = elements.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中间位置</span></span><br><span class="line">        <span class="keyword">int</span> mid = (begin + end) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当起始位置大于等于末位置时说明数组中没有查询的内容</span></span><br><span class="line">            <span class="keyword">if</span>(begin &gt;= end)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//中间值是否与查询的相等</span></span><br><span class="line">            <span class="keyword">if</span>(elements[mid] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//查询内容比中间值小时</span></span><br><span class="line">                <span class="keyword">if</span>(target &lt; elements[mid])&#123;</span><br><span class="line">                    <span class="comment">//将末位置改成中间位置前一个</span></span><br><span class="line">                    end = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//将起始位置改为中间位置后一个</span></span><br><span class="line">                    begin = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//重新取中间值</span></span><br><span class="line">                mid = (begin + end) / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyArrays arrays = <span class="keyword">new</span> MyArrays();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        arrays.add(<span class="number">1</span>);</span><br><span class="line">        arrays.add(<span class="number">2</span>);</span><br><span class="line">        arrays.add(<span class="number">3</span>);</span><br><span class="line">        arrays.add(<span class="number">4</span>);</span><br><span class="line">        arrays.add(<span class="number">5</span>);</span><br><span class="line">        arrays.add(<span class="number">6</span>);</span><br><span class="line">        arrays.add(<span class="number">7</span>);</span><br><span class="line">        arrays.add(<span class="number">8</span>);</span><br><span class="line">        arrays.add(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线性查找</span></span><br><span class="line">        System.out.println(arrays.wire(<span class="number">4</span>));</span><br><span class="line">        <span class="comment">//二分法查找</span></span><br><span class="line">        System.out.println(arrays.dichotomy(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在指定位置添加</span></span><br><span class="line">        arrays.add(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">        arrays.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        arrays.delete(<span class="number">1</span>);</span><br><span class="line">        arrays.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组长度</span></span><br><span class="line">        System.out.println(<span class="string">&quot;数组的长度为：&quot;</span> + arrays.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据下标查询内容</span></span><br><span class="line">        System.out.println(arrays.get(<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新数据</span></span><br><span class="line">        arrays.update(<span class="number">2</span>,<span class="number">100</span>);</span><br><span class="line">        arrays.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote>
<p>栈的数据特点是顺序结构、先进后出</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/14994/2fa8f2b4-0817-4880-91a1-92a581a8581e.png" alt="栈结构"></p>
<p><strong>简单示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义栈结构</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elements = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加数据到栈中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个新的数组、长度为原数组+1</span></span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;elements.length; i++)&#123;</span><br><span class="line">            newArr[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        newArr[elements.length] = element;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新原数组</span></span><br><span class="line">        <span class="keyword">this</span>.elements = newArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出栈顶的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//栈是空的时候有个异常</span></span><br><span class="line">        <span class="keyword">if</span>(elements.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;栈是空的&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出最后一个放入栈中的元素</span></span><br><span class="line">        <span class="keyword">int</span> element = <span class="keyword">this</span>.elements[elements.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建取出后的栈结构数组</span></span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将源数据放入到新数组中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            newArr[i] = <span class="keyword">this</span>.elements[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新栈结构</span></span><br><span class="line">        <span class="keyword">this</span>.elements = newArr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回栈顶的值</span></span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询栈顶元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(elements.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">&quot;栈是空的&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.elements[elements.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断栈是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.elements.length == <span class="number">0</span>?<span class="string">&quot;栈是空的&quot;</span>:<span class="string">&quot;栈不是空的&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyStack myStack = <span class="keyword">new</span> MyStack();</span><br><span class="line"></span><br><span class="line">        myStack.push(<span class="number">9</span>);</span><br><span class="line">        myStack.push(<span class="number">8</span>);</span><br><span class="line">        myStack.push(<span class="number">7</span>);</span><br><span class="line">        myStack.push(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(myStack.isEmpty());</span><br><span class="line">        System.out.println(myStack.pop());</span><br><span class="line">        System.out.println(myStack.pop());</span><br><span class="line">        System.out.println(myStack.pop());</span><br><span class="line">        System.out.println(myStack.pop());</span><br><span class="line">        System.out.println(myStack.isEmpty());</span><br><span class="line">        System.out.println(myStack.peek());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote>
<p>队列的数据特点是顺序结构、先进先出</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/14994/99213a37-bd73-4cca-9c36-4f957cc70d91.png" alt="结构"></p>
<p><img src="https://files.mdnice.com/user/14994/488efd3d-972a-42e0-919c-e221e1373a56.png" alt="样式"></p>
<p><strong>简单示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elements = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入队</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个新的数组、长度为原数组+1</span></span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;elements.length; i++)&#123;</span><br><span class="line">            newArr[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        newArr[elements.length] = element;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新原数组</span></span><br><span class="line">        <span class="keyword">this</span>.elements = newArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">poll</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        出队</span></span><br><span class="line">        <span class="keyword">int</span> element = <span class="keyword">this</span>.elements[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//        创建新数组</span></span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//        将数据赋值到新数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newArr.length; i++)&#123;</span><br><span class="line">            newArr[i] = elements[i +<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        数据更新</span></span><br><span class="line">        <span class="keyword">this</span>.elements = newArr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        返回出队数据</span></span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.elements.length == <span class="number">0</span>?<span class="string">&quot;队列为空&quot;</span>:<span class="string">&quot;队列不为空&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyQueue mq = <span class="keyword">new</span> MyQueue();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        入队</span></span><br><span class="line">        mq.add(<span class="number">5</span>);</span><br><span class="line">        mq.add(<span class="number">2</span>);</span><br><span class="line">        mq.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        判断是否为空</span></span><br><span class="line">        System.out.println(mq.isEmpty());</span><br><span class="line"><span class="comment">//        出队</span></span><br><span class="line">        System.out.println(mq.poll());</span><br><span class="line"><span class="comment">//        入队</span></span><br><span class="line">        mq.add(<span class="number">6</span>);</span><br><span class="line"><span class="comment">//        出队</span></span><br><span class="line">        System.out.println(mq.poll());</span><br><span class="line">        mq.add(<span class="number">7</span>);</span><br><span class="line">        System.out.println(mq.poll());</span><br><span class="line">        mq.add(<span class="number">8</span>);</span><br><span class="line">        System.out.println(mq.poll());</span><br><span class="line">        System.out.println(mq.poll());</span><br><span class="line">        System.out.println(mq.poll());</span><br><span class="line">        System.out.println(mq.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><blockquote>
<p>单链表的数据结构是链表的形式存储的、当存储数据的同时要存储下一个结点的地址</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/14994/3abc794a-365e-4d78-aacf-0c9ada55494d.png" alt="单链表"></p>
<p><strong>简单示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结点内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下一节点</span></span><br><span class="line">    <span class="keyword">private</span> MyNode next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 追加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyNode <span class="title">append</span><span class="params">(MyNode node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义当前节点</span></span><br><span class="line">        MyNode currentNode = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取出下一节点</span></span><br><span class="line">            MyNode nextNode = currentNode.next;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断取出的下一个节点是否为空</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> == nextNode)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将取出的下一节点赋值给当前节点</span></span><br><span class="line">            currentNode = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//追加为当前节点的下一节点</span></span><br><span class="line">        currentNode.next = node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下一节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyNode <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断下一节点是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">islast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.next == <span class="keyword">null</span>?<span class="string">&quot;下一个结点为空&quot;</span>:<span class="string">&quot;下一节点不为空&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点、删除原理是将当前节点的下一节点删除、将下下节点连接到当前节点的下一节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下下节点</span></span><br><span class="line">        MyNode newNode = <span class="keyword">this</span>.next.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将下下节点连接到当前节点的下一节点</span></span><br><span class="line">        <span class="keyword">this</span>.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定位置添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(MyNode node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取到下个节点</span></span><br><span class="line">        MyNode nextNext = <span class="keyword">this</span>.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将添加的内容添加到下一节点的开始</span></span><br><span class="line">        <span class="keyword">this</span>.next = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将下个节点的内容添加到新加入的节点后面</span></span><br><span class="line">        node.next = nextNext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示全部节点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前节点</span></span><br><span class="line">        MyNode currentNode = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//当前节点内容</span></span><br><span class="line">            System.out.print(currentNode.data + <span class="string">&quot;  &quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当前节点的下一节点</span></span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//下一节点是否为空</span></span><br><span class="line">            <span class="keyword">if</span>(currentNode == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyNode node1 = <span class="keyword">new</span> MyNode(<span class="number">1</span>);</span><br><span class="line">        MyNode node2 = <span class="keyword">new</span> MyNode(<span class="number">2</span>);</span><br><span class="line">        MyNode node3 = <span class="keyword">new</span> MyNode(<span class="number">3</span>);</span><br><span class="line">        MyNode node4 = <span class="keyword">new</span> MyNode(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//        System.out.println(node1.islast());</span></span><br><span class="line">        node1.append(node2).append(node3).append(node4);</span><br><span class="line"><span class="comment">//        System.out.println(node1.islast());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(node1.next().next().next().getData());</span></span><br><span class="line"></span><br><span class="line">        node1.show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        node1.next().next().deleteNode();</span></span><br><span class="line"></span><br><span class="line">        node1.next().insert(<span class="keyword">new</span> MyNode(<span class="number">9</span>));</span><br><span class="line"></span><br><span class="line">        node1.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><blockquote>
<p>循环链表就是最后一位的下一节点是起始位</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/14994/aee2f438-feb2-4398-b28e-9346ed10e894.png" alt="循环链表"></p>
<p><strong>简单示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结点内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下一节点</span></span><br><span class="line">    <span class="keyword">private</span> LoopNode next = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoopNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下一节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoopNode <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点、删除原理是将当前节点的下一节点删除、将下下节点连接到当前节点的下一节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下下节点</span></span><br><span class="line">        LoopNode newNode = <span class="keyword">this</span>.next.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将下下节点连接到当前节点的下一节点</span></span><br><span class="line">        <span class="keyword">this</span>.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定位置添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(LoopNode node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取到下个节点</span></span><br><span class="line">        LoopNode nextNext = <span class="keyword">this</span>.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将添加的内容添加到下一节点的开始</span></span><br><span class="line">        <span class="keyword">this</span>.next = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将下个节点的内容添加到新加入的节点后面</span></span><br><span class="line">        node.next = nextNext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LoopNode loopNode1 = <span class="keyword">new</span> LoopNode(<span class="number">1</span>);</span><br><span class="line">        LoopNode loopNode2 = <span class="keyword">new</span> LoopNode(<span class="number">2</span>);</span><br><span class="line">        LoopNode loopNode3 = <span class="keyword">new</span> LoopNode(<span class="number">3</span>);</span><br><span class="line">        LoopNode loopNode4 = <span class="keyword">new</span> LoopNode(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        loopNode1.insert(loopNode2);</span><br><span class="line">        loopNode2.insert(loopNode3);</span><br><span class="line">        loopNode3.insert(loopNode4);</span><br><span class="line">        System.out.println(loopNode1.next().getData());</span><br><span class="line">        System.out.println(loopNode2.next().getData());</span><br><span class="line">        System.out.println(loopNode3.next().getData());</span><br><span class="line">        System.out.println(loopNode4.next().getData());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><blockquote>
<p>双链表的数据结构是存储两个节点、一个存储上一个节点、一个存储下一个节点、因为双链表是循环的所以没有最后一个节点</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/14994/d8f9547f-b918-4454-847e-4b34adb113de.png" alt="双链表"></p>
<p><strong>简单示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    上一个结点</span></span><br><span class="line">    <span class="keyword">private</span> DoubleNode pre = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    下一个结点</span></span><br><span class="line">    <span class="keyword">private</span> DoubleNode next = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    结点内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    初始化数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    获取上一节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DoubleNode <span class="title">getPre</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    获取下一节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DoubleNode <span class="title">getNext</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    获取数据内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inser</span><span class="params">(DoubleNode node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        原结点的下一节点</span></span><br><span class="line">        DoubleNode nextNext = <span class="keyword">this</span>.next;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        将插入的节点连接到源节点上面</span></span><br><span class="line">        <span class="keyword">this</span>.next = node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        插入的节点的上一节点是源节点</span></span><br><span class="line">        node.pre = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        插入的节点的下一节点是原结点的下一节点</span></span><br><span class="line">        node.next = nextNext;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        源节点的下一节点的上一节点连接到插入的节点上面</span></span><br><span class="line">        nextNext.pre = node;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDoubleNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        创建节点</span></span><br><span class="line">        DoubleNode node1 = <span class="keyword">new</span> DoubleNode(<span class="number">1</span>);</span><br><span class="line">        DoubleNode node2 = <span class="keyword">new</span> DoubleNode(<span class="number">2</span>);</span><br><span class="line">        DoubleNode node3 = <span class="keyword">new</span> DoubleNode(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        追加节点</span></span><br><span class="line">        node1.inser(node2);</span><br><span class="line">        node2.inser(node3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        查看node2的上一个节点内容、自己的内容、下一节点的内容</span></span><br><span class="line">        System.out.println(node2.getPre().getData());</span><br><span class="line">        System.out.println(node2.getData());</span><br><span class="line">        System.out.println(node2.getNext().getData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote>
<p>在一个方法（函数）的内部调用该方法（函数）本身、并且有一个条件能使它停止调用自己本身 的编程方式</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/14994/48c49da4-0e60-4c97-afbc-f31c68551ae4.png" alt="递归"></p>
<p><strong>简单示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRecursion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        printf(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i &gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            printf(i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>斐波那契数列</strong></p>
<blockquote>
<p>第一位为1、第二位为1、其余后面的都为  前两位相加的和<br>1、1、2、3、5、8 ……</p>
</blockquote>
<ul>
<li>显示前10位的斐波那契数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FBNQ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(printf(i));</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((i == <span class="number">1</span>) || (i == <span class="number">2</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> printf(i - <span class="number">2</span>) + printf(i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis plus</title>
    <url>/posts/92906615/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/mossawi_133336916082_20190520013852_389495090337.71a9wknulfw0.jpg" alt="mybatisplus"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis Plus"></a>MyBatis Plus</h1><blockquote>
<p>国产的开源框架、基于Mybatis、简化Mybatis开发、提高效率</p>
</blockquote>
<h2 id="spirng-boot-整合-MyBatis"><a href="#spirng-boot-整合-MyBatis" class="headerlink" title="spirng boot 整合 MyBatis"></a>spirng boot 整合 MyBatis</h2><ul>
<li>pom</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>pojo</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;,type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;create_time&quot;, fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;update_time&quot;, fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Mapper</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.dream.xiaobo.mapping&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisplusApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatisplusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>test</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userMapper.selectList(<span class="keyword">null</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">        user.setName(<span class="string">&quot;小博&quot;</span>);</span><br><span class="line">        user.setSex(<span class="number">0</span>);</span><br><span class="line">        user.setAge(<span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        userMapper.insert(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = userMapper.selectById(<span class="number">17</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.setName(<span class="string">&quot;wangyibo&quot;</span>);</span><br><span class="line">        user.setSex(<span class="number">1</span>);</span><br><span class="line">        user.setAge(<span class="number">22</span>);</span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注解剖析"><a href="#注解剖析" class="headerlink" title="注解剖析"></a>注解剖析</h2><ul>
<li>@TableName</li>
</ul>
<blockquote>
<p>映射数据库表名  </p>
<ul>
<li>@TableId<br>主键映射  </li>
</ul>
</blockquote>
<ul>
<li>value属性</li>
</ul>
<blockquote>
<p>映射字段名</p>
</blockquote>
<ul>
<li>type属性</li>
</ul>
<blockquote>
<p>设置主键类型</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>AUTO</td>
<td>数据库自增</td>
</tr>
<tr>
<td>NONE</td>
<td>set一个主键值、用雪花算法实现的</td>
</tr>
<tr>
<td>INPUT</td>
<td>需要开发者手动赋值</td>
</tr>
<tr>
<td>ASSIGN_ID</td>
<td>自动分配ID、Long、Integer、String</td>
</tr>
<tr>
<td>ASSIGN_UUID</td>
<td>分配UUID、数据类型必须是String类型</td>
</tr>
</tbody></table>
<ul>
<li>@TableField</li>
</ul>
<blockquote>
<p>映射非主键字段</p>
</blockquote>
<ul>
<li>exist属性</li>
</ul>
<blockquote>
<p>设置是否为数据库字段名、true OR false</p>
</blockquote>
<ul>
<li>select属性</li>
</ul>
<blockquote>
<p>表示是否查询该字段</p>
</blockquote>
<ul>
<li>fill属性</li>
</ul>
<blockquote>
<p>表示是否自动填充<br>值：<br>INSERT<br>INSRT_UPDATE<br>UPDATE<br>DEFAULT</p>
</blockquote>
<p><strong>创建时间和更新时间自动填充演示</strong></p>
<ul>
<li>Handler</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Version</li>
</ul>
<blockquote>
<p>标记乐观锁、通过数据库添加version字段、设置个默认值来保护数据安全性、当修改数据时、用version作为条件、当条件成立时方可修改</p>
</blockquote>
<ul>
<li>pojo</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(value = &quot;version&quot;)</span></span><br><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>

<ul>
<li>config</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>test</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = userMapper.selectById(<span class="number">17</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;wangxiaobo&quot;</span>);</span><br><span class="line">    user.setSex(<span class="number">0</span>);</span><br><span class="line">    user.setAge(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">    User user1 = userMapper.selectById(<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">    user1.setName(<span class="string">&quot;hhh&quot;</span>);</span><br><span class="line"></span><br><span class="line">    userMapper.updateById(user1);</span><br><span class="line"></span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@EnumValue实现显示数据转换</strong></p>
<p>通过枚举注解方式</p>
<ul>
<li>enum</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">StatusEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    工作(<span class="number">1</span>,<span class="string">&quot;工作&quot;</span>),</span><br><span class="line">    休息(<span class="number">0</span>,<span class="string">&quot;休息&quot;</span>);</span><br><span class="line"></span><br><span class="line">    StatusEnum(Integer code,String msg)&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SexEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    男(<span class="number">1</span>,<span class="string">&quot;男&quot;</span>),</span><br><span class="line">    女(<span class="number">0</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer code, String msg)&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>pojo</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(value = &quot;sex&quot;)</span></span><br><span class="line"><span class="keyword">private</span> SexEnum sex;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(value = &quot;status&quot;)</span></span><br><span class="line"><span class="keyword">private</span> StatusEnum status;</span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"><span class="comment"># 扫描enum</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.dream.xiaobo.enums</span></span><br></pre></td></tr></table></figure>

<p>实现接口方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SexEnum</span> <span class="keyword">implements</span> <span class="title">IEnum</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    男(<span class="number">1</span>,<span class="string">&quot;男&quot;</span>),</span><br><span class="line">    女(<span class="number">0</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer code, String msg)&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mybatis-Plus-增删改查"><a href="#Mybatis-Plus-增删改查" class="headerlink" title="Mybatis Plus 增删改查"></a>Mybatis Plus 增删改查</h2><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><p><strong>基本查询</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询全部</span></span><br><span class="line">        userMapper.selectList(<span class="keyword">null</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建操作对象</span></span><br><span class="line">        QueryWrapper queryWrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map集合</span></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        <span class="comment">//将Map放入操作对象中</span></span><br><span class="line">        queryWrapper.allEq(map);</span><br><span class="line">        <span class="comment">//模糊查询</span></span><br><span class="line">        queryWrapper.likeLeft(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;x&quot;</span>);</span><br><span class="line">        <span class="comment">//模糊查询</span></span><br><span class="line">        queryWrapper.likeRight(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;x&quot;</span>);</span><br><span class="line">        <span class="comment">//等值查询</span></span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;age&quot;</span>,<span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//子查询</span></span><br><span class="line">        queryWrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;SELECT id FROM user WHERE id &lt; 12&quot;</span>);</span><br><span class="line">        queryWrapper.inSql(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;SELECT age FROM user WHERE age &lt; 30&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//升降序</span></span><br><span class="line">        queryWrapper.orderByAsc(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        queryWrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印查询结果</span></span><br><span class="line">        userMapper.selectList(queryWrapper).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        根据Id查询</span><br><span class="line">        userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        <span class="comment">//Map 只能做等值判断、逻辑判断需要使用 queryWrapper 来处理</span></span><br><span class="line">        userMapper.selectByMap(map).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        QueryWrapper queryWrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;age&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        <span class="comment">//查询结果数量</span></span><br><span class="line">        System.out.println(userMapper.selectCount(queryWrapper));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        Page&lt;User&gt; result = userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(result.getSize());</span><br><span class="line">        System.out.println(result.getTotal());</span><br><span class="line">        System.out.println(result.getCurrent());</span><br><span class="line"></span><br><span class="line">        result.getRecords().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将map放在Page里面</span></span><br><span class="line">        Page&lt;Map&lt;String,Object&gt;&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">        userMapper.selectMapsPage(page,<span class="keyword">null</span>).getRecords().forEach(System.out::println);</span><br><span class="line">        userMapper.selectObjs(<span class="keyword">null</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>自定义查询</strong></p>
<ul>
<li>pojo</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>mapper</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT u.id,username,password,name,age FROM user u,login l &quot; +</span></span><br><span class="line"><span class="meta">            &quot;WHERE u.login_id = l.id AND u.id = #&#123;id &#125;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;UserVO&gt; <span class="title">userVoList</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    user.setName(<span class="string">&quot;小博&quot;</span>);</span><br><span class="line">    user.setSex(SexEnum.男);</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        userMapper.deleteById(17);</span></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        userMapper.deleteByMap(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        User user = userMapper.selectById(17);</span></span><br><span class="line"><span class="comment">//        user.setName(&quot;wangxiaobo&quot;);</span></span><br><span class="line"><span class="comment">//        user.setSex(SexEnum.女);</span></span><br><span class="line"><span class="comment">//        user.setAge(21);</span></span><br><span class="line"><span class="comment">//        User user1 = userMapper.selectById(17);</span></span><br><span class="line"><span class="comment">//        user1.setName(&quot;hhh&quot;);</span></span><br><span class="line"><span class="comment">//        userMapper.updateById(user1);</span></span><br><span class="line"><span class="comment">//        userMapper.updateById(user);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        User user = userMapper.selectById(<span class="number">17</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;wangxiaobo&quot;</span>);</span><br><span class="line">        user.setSex(SexEnum.男);</span><br><span class="line"></span><br><span class="line">        QueryWrapper queryWrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;id&quot;</span>,<span class="number">17</span>);</span><br><span class="line">        userMapper.update(user,queryWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mybatis-Plus-自动生成"><a href="#Mybatis-Plus-自动生成" class="headerlink" title="Mybatis Plus 自动生成"></a>Mybatis Plus 自动生成</h2><ul>
<li>pom</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        Mybatis Plus 自动生成--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>生成类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建generator对象</span></span><br><span class="line">        AutoGenerator autoGenerator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        <span class="comment">//数据源</span></span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setDbType(DbType.MYSQL);</span><br><span class="line">        dataSourceConfig.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/db_springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC&quot;</span>);</span><br><span class="line">        dataSourceConfig.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSourceConfig.setPassword(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        dataSourceConfig.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        autoGenerator.setDataSource(dataSourceConfig);</span><br><span class="line">        <span class="comment">//全局配置</span></span><br><span class="line">        GlobalConfig globalConfig = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        globalConfig.setOutputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>)+<span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        globalConfig.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        globalConfig.setAuthor(<span class="string">&quot;dream.xiaobo&quot;</span>);</span><br><span class="line">        globalConfig.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line">        <span class="comment">//包信息</span></span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        packageConfig.setParent(<span class="string">&quot;com.dream.xiaobo.mybatisplus&quot;</span>);</span><br><span class="line">        packageConfig.setModuleName(<span class="string">&quot;generator&quot;</span>);</span><br><span class="line">        packageConfig.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        packageConfig.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        packageConfig.setServiceImpl(<span class="string">&quot;service.impl&quot;</span>);</span><br><span class="line">        packageConfig.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        packageConfig.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        autoGenerator.setPackageInfo(packageConfig);</span><br><span class="line">        <span class="comment">//配置策略</span></span><br><span class="line">        StrategyConfig strategyConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategyConfig.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line"></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>框架</tag>
        <tag>Mybatis plus</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot入门</title>
    <url>/posts/1686262074/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/springio.4ceoheqi8940.png" alt="springio"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring boot"></a>spring boot</h1><blockquote>
<p>Spring Boot 是一个快速开发框架、Spring boot开启了自动装配、从而简化代码开发、不需要编写各种该配置文件、只需要引入相关依赖就可以迅速搭建一个应用  </p>
</blockquote>
<ul>
<li>特点</li>
</ul>
<blockquote>
<p>不需要web.xml<br>不需要springmvc.xml<br>不需要tomcat、spring boot本身内嵌tomcat<br>不需要JSON解析、支持REST  </p>
</blockquote>
<h2 id="spring-boot简单搭建"><a href="#spring-boot简单搭建" class="headerlink" title="spring boot简单搭建"></a>spring boot简单搭建</h2><ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Application启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appliaction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Appliaction.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="spring-boot整合JSP"><a href="#spring-boot整合JSP" class="headerlink" title="spring boot整合JSP"></a>spring boot整合JSP</h2><ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承父包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web启动jar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    整合jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    jstl--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>pojo</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepositoryImpl studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ModelAndView modelAndView =</span><br><span class="line">                <span class="keyword">new</span> ModelAndView(<span class="string">&quot;index&quot;</span>,<span class="string">&quot;collection&quot;</span>,studentRepository.findAll());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ModelAndView modelAndView =</span><br><span class="line">                <span class="keyword">new</span> ModelAndView(<span class="string">&quot;update&quot;</span>,<span class="string">&quot;student&quot;</span>,studentRepository.findById(id));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        studentRepository.deleteById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/student/index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span>  Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.saveAndUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(value = &quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.saveAndUpdate(student);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/student/index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>repository</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long, Student&gt; map = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1L</span>,<span class="keyword">new</span> Student(<span class="number">1L</span>,<span class="string">&quot;xiaobo&quot;</span>,<span class="number">0</span>,<span class="number">21</span>));</span><br><span class="line">        map.put(<span class="number">2L</span>,<span class="keyword">new</span> Student(<span class="number">2L</span>,<span class="string">&quot;h&quot;</span>,<span class="number">1</span>,<span class="number">21</span>));</span><br><span class="line">        map.put(<span class="number">3L</span>,<span class="keyword">new</span> Student(<span class="number">3L</span>,<span class="string">&quot;pangzi&quot;</span>,<span class="number">0</span>,<span class="number">22</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        map.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAndUpdate</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        map.put(student.getId(),student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery-3.2.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;学生信息&lt;/h1&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">&quot;$&#123;collection &#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;student.id &#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;student.name &#125;&lt;/td&gt;</span><br><span class="line">                &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;student.sex == 0&#125;&quot;</span>&gt;</span><br><span class="line">                    &lt;td&gt;男&lt;/td&gt;</span><br><span class="line">                &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">                &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;student.sex == 1&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;女&quot;</span>&gt;</span><br><span class="line">                    &lt;td&gt;女&lt;/td&gt;</span><br><span class="line">                &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">                &lt;td&gt;$&#123;student.age &#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;form action=<span class="string">&quot;/student/findById/$&#123;student.id &#125;&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">                        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;修改&quot;</span> /&gt;</span><br><span class="line">                    &lt;/form&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;form action=<span class="string">&quot;/student/deleteById/$&#123;student.id &#125;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">                        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;_method&quot;</span> value=<span class="string">&quot;delete&quot;</span>/&gt;</span><br><span class="line">                        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;删除&quot;</span> /&gt;</span><br><span class="line">                    &lt;/form&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;input id=<span class="string">&quot;addBut&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;添加学生&quot;</span> /&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="spring-boot-整合thymeleaf模板"><a href="#spring-boot-整合thymeleaf模板" class="headerlink" title="spring boot 整合thymeleaf模板"></a>spring boot 整合thymeleaf模板</h2><ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Student&gt; list = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">1L</span>,<span class="string">&quot;xiaobo&quot;</span>,<span class="number">21</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">2L</span>,<span class="string">&quot;pangzi&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">3L</span>,<span class="string">&quot;h&quot;</span>,<span class="number">21</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;student:$&#123;list &#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;student.id &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;student.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;student.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">HTML</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br></pre></td></tr></table></figure>

<h2 id="Thymeleaf语法"><a href="#Thymeleaf语法" class="headerlink" title="Thymeleaf语法"></a>Thymeleaf语法</h2><ul>
<li>赋值、拼接</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;学生姓名是&#x27;+$&#123;name&#125;+ good&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;|学生姓名是,$&#123;name&#125;|&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>th:if</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;flag == true&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;if判断成立&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;flag != true&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;unless判断成立&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>th:each</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;student,stat:$&#123;list&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;stat.index&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;stat.count&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;student.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;student.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;student.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>stat 是状态变量，属性：</li>
</ul>
<blockquote>
<p>index 集合中元素的index（从0开始）<br>count 集合中元素的count（从1开始）<br>size 集合的大小<br>current 当前迭代变量<br>even/odd 当前迭代是否为偶数/奇数（从0开始计算）<br>first 当前迭代的元素是否是第一个<br>last 当前迭代的元素是否是最后一个</p>
</blockquote>
<ul>
<li>url</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;http://www.baidu.com&#125;&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>三元运算符</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;age gt 30?&#x27;中年&#x27;:&#x27;青年&#x27;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>gt great than 大于<br>ge great equal 大于等于<br>eq equal 等于<br>lt less than 小于<br>le less equal 小于等于<br>ne not equal 不等于</p>
</blockquote>
<ul>
<li>switch</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;gender&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span>未知<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>基本对象</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getAttribute(&#x27;request&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#session.getAttribute(&#x27;session&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale.country&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>#ctx ：上下文对象<br>#vars：上下文变量<br>#locale：区域对象<br>#request：HttpServletRequest 对象<br>#response：HttpServletResponse 对象<br>#session：HttpSession 对象<br>#servletContext：ServletContext 对象</p>
</blockquote>
<p><strong>内嵌对象</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 格式化时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(date,&#x27;yyyy-MM-dd HH:mm:sss&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建当前时间，精确到天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.createToday()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建当前时间，精确到秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.createNow()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 判断是否为空 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.isEmpty(name)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 判断List是否为空 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#lists.isEmpty(users)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出字符串长度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.length(name)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 拼接字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.concat(name,name,name)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建自定义字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.randomAlphanumeric(count)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>dates：java.util.Date 的功能方法<br>calendars：java.util.Calendar 的功能方法<br>numbers：格式化数字<br>strings：java.lang.String 的功能方法<br>objects：Object 的功能方法<br>bools：对布尔求值的方法<br>arrays：操作数组的功能方法<br>lists：操作集合的功能方法<br>sets：操作集合的功能方法<br>maps：操作集合的功能方法</p>
</blockquote>
<h2 id="spring-boot-数据校验"><a href="#spring-boot-数据校验" class="headerlink" title="spring boot 数据校验"></a>spring boot 数据校验</h2><ul>
<li>pojo</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;id不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(min = 3,message = &quot;用户名长度不能小于3位&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(min = 6,message = &quot;密码长度不能小于6位&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>validator</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validatorUser</span><span class="params">(<span class="meta">@Valid</span> User user, BindingResult bindingResult, Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bindingResult.hasErrors()) &#123;</span><br><span class="line">            List&lt;ObjectError&gt; allErrors =</span><br><span class="line">                    bindingResult.getAllErrors();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (ObjectError objectError : allErrors) &#123;</span><br><span class="line">                System.out.println(objectError.getCode());</span><br><span class="line">                System.out.println(objectError.getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="spring-boot整合JDBC"><a href="#spring-boot整合JDBC" class="headerlink" title="spring boot整合JDBC"></a>spring boot整合JDBC</h2><ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepositoryImpl userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        model.addAttribute(&quot;users&quot;,userRepository.findAll());</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line"><span class="comment">//            userRepository.findById(id);</span></span><br><span class="line">        System.out.println(userRepository.findById(id));</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.save(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        userRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(value = &quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.update(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>repository</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(<span class="string">&quot;SELECT * FROM user&quot;</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">&quot;SELECT * FROM user WHERE id = ?&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;id&#125;,<span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;INSERT INTO user(id,username,password) VALUES(?,?,?)&quot;</span>,user.getId(),user.getUsername(),user.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;DELETE FROM user WHERE id = ?&quot;</span>,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;UPDATE user SET username = ?,password=? WHERE id = ?&quot;</span>,user.getUsername(),user.getPassword(),user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">HTML</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_mybatis?useUnicode=true&amp;charcaterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xiaobo</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<h2 id="springboot-整合Mybatis"><a href="#springboot-整合Mybatis" class="headerlink" title="springboot 整合Mybatis"></a>springboot 整合Mybatis</h2><ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapping/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.dream.xiaobo.pojo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_mybatis?useUnicode=true&amp;charcaterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xiaobo</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<ul>
<li>repository</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>mapper</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dream.xiaobo.repository.UserRepository&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE id = #&#123;id &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO user(username,password) VALUES(#&#123;username &#125;,#&#123;password &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        UPDATE user SET username = #&#123;username&#125;,password = #&#123;password &#125; WHERE id = #&#123;id &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM user WHERE id = #&#123;id &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        System.out.println(userRepository.findById(id));</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.save(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        userRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(value = &quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.update(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>application</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.dream.xiaobo.repository&quot;)</span><span class="comment">//将repository包下的放入到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>框架</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架整合</title>
    <url>/posts/3554612912/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/ssm%E6%A1%86%E6%9E%B6%E6%B5%81%E7%A8%8B%E5%9B%BE.wts461b905s.png" alt="ssm框架流程图"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h1><p>Spring + Spring MVC + MyBatis</p>
<blockquote>
<p>Spring MVC 负责实现 MVC 设计模式、MyBatis 负责数据持久层、Spring 负责管理 Spring MVC 和 MyBatis 相关对象的创建和依赖注入</p>
</blockquote>
<h2 id="整合流程"><a href="#整合流程" class="headerlink" title="整合流程"></a>整合流程</h2><ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>ssmintegration<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssmintegration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    IDEA开发工具需要手动配置扫描路径、如果用Eclipse则不需要配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">connectors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">connector</span> <span class="attr">implementation</span>=<span class="string">&quot;org.mortbay.jetty.nio.SelectChannelConnector&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">port</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">maxIdleTime</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">maxIdleTime</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">connectors</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">webAppSourceDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/$&#123;pom.artifactId&#125;-$&#123;pom.version&#125;<span class="tag">&lt;/<span class="name">webAppSourceDirectory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dependency&gt;</span></span><br><span class="line"><span class="comment">      &lt;groupId&gt;com.dream.xiaobo&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">      &lt;artifactId&gt;[the artifact id of the block to be mounted]&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    spring mvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    spring  jdbc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    spring aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    mybatis整合spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    C3P0--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    JSTL标签库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    lombok   不是必要的、简写set和get方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>web.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;2.4&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  启动sprign--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    全局初始化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  配置spring mvc--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    spring mvc初始化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  接受所有请求到DispatcherServlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  字符编码过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    过滤器初始化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  拦截所有请求--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  加载静态资源--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.png<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>web.xml 中配置一些 SpringMVC、Spring、字符编码过滤器、加载静态资源</p>
</blockquote>
<ul>
<li>spring.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    整合Mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>charcaterEncodeing=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置Mybatis 的SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        读取数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        读取mapper.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        读取mybatis-config.xml配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描自定义的Mapper接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.dream.xiaobo.dao&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 spring.xml 中配置 MyBatis 和 Spring 的整合</p>
</blockquote>
<ul>
<li>spring-mvc.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描业务代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dream.xiaobo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>mybatis-config.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印SQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定一个包名，MyBatis会在包名下搜索需要的JavaBean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.southwind.entity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>config.xml 配置一些 MyBatis 辅助信息、比如打印 SQL 等</p>
</blockquote>
<ul>
<li>entity</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>dao</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>mapper</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dream.xiaobo.dao.UserRepository&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>service</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>serviceImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;list&quot;</span>,userService.findAll());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>index.jsp</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;list &#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">        $&#123;user.id&#125;</span><br><span class="line">        $&#123;user.username&#125;</span><br><span class="line">        $&#123;user.password&#125;&lt;br/&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>db</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/db.1w8shmt6hphc.png" alt="db"><br><strong>运行结果</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/index.jsp.3il849xnb480.png" alt="index"><br><strong>流程图示分析</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/ssm%E6%A1%86%E6%9E%B6%E6%B5%81%E7%A8%8B%E5%9B%BE.wts461b905s.png" alt="ssm框架流程图"></p>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>框架</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/posts/469711973/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E4%BD%A0%E8%83%BD%E5%A4%9F%E8%A2%AB%E7%90%86%E8%A7%A3%E5%90%97.63wpvo30ep40.jpg" alt="你能够被理解吗"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><blockquote>
<p>ORMapping: Object Relationship Mapping 对象关系映射<br>Java 到 MySQL 的映射、以面向对象的思想来管理理数据库</p>
</blockquote>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p><strong>源生接口执行</strong></p>
<ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    保证能扫描到mapper.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>entity</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>mybatis-config.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    default是执行哪一个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mybatisTest&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    配置Mybatis运行环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mybatisTest&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            配置JDBC事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            配置POOLED数据源连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                配置使用驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                配置数据库路径--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                配置数据库用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                配置数据库密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    映射到mapper文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/dream/xiaobo/mapper/userMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>userMapper.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace指定自己的位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dream.xiaobo.mapper.userMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    添加语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO user(username,password) VALUES(#&#123;username &#125;,#&#123;password &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>test</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        InputStream stream = MybastisTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessionFactoryBuilder工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        <span class="comment">//在SqlSessionFactoryBuilder工厂中同过build方法拿到SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(stream);</span><br><span class="line">        <span class="comment">//SqlSessionFactory通过openSession方法拿到SqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        String url = <span class="string">&quot;com.dream.xiaobo.mapper.userMapper.save&quot;</span>;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1L</span>,<span class="string">&quot;xiaobo&quot;</span>,<span class="string">&quot;xiaboo&quot;</span>);</span><br><span class="line">        <span class="comment">//告诉位置以及传入的对象准备执行</span></span><br><span class="line">        sqlSession.insert(url,user);</span><br><span class="line">        <span class="comment">//提交事务、开始执行</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>mapper代理实现接口执行</strong></p>
<ul>
<li>userRespository</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userRespository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>userRespository.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dream.xiaobo.respository.userRespository&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO user(username,password) VALUES(#&#123;username &#125;,#&#123;password &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        UPDATE user SET username = #&#123;username &#125;,password = #&#123;password &#125; WHERE id = #&#123;id &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM user WHERE id = #&#123;id &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE id = #&#123;id &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>namespace:当前mapper的所在包名+文件名<br>insert：执行添加操作<br>delete：执行删除操作<br>update：执行更新操作<br>select：执行查询操作<br>id：与接口方法名相同<br>parameterType：与接口中对应方法的参数类型一致<br>resultType：与接口中对应方法的返回值类型一致</p>
</blockquote>
<ul>
<li>mybatis-config.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    映射到mapper文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/dream/xiaobo/respository/userRespository.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>test</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream stream = TestMybatis.class.getClassLoader().getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(stream);</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        拿到userRespository的运行时类</span></span><br><span class="line">        userRespository mapper = sqlSession.getMapper(userRespository.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询全部数据</span></span><br><span class="line">        List&lt;User&gt; list = mapper.findAll();</span><br><span class="line">        <span class="keyword">for</span>(User user: list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        根据Id进行查询</span></span><br><span class="line">        User byId = mapper.findById(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(byId);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        添加数据</span></span><br><span class="line">        mapper.save(<span class="keyword">new</span> User(<span class="number">4L</span>,<span class="string">&quot;wyb&quot;</span>,<span class="string">&quot;xiaobo&quot;</span>));</span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        更新数据</span></span><br><span class="line">        User user = mapper.findById(<span class="number">1L</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;wxh&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> update = mapper.update(user);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        删除数据</span></span><br><span class="line">        mapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        关闭资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h2><p><strong>parameterType 参数数据类型</strong></p>
<ul>
<li>基本数据类型</li>
<li>String类型</li>
<li>包装类类型</li>
<li>多个参数</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByNameAndAge&quot;</span>&gt;</span></span><br><span class="line">  select * from user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>javaBean</li>
</ul>
<p><strong>resultType 结果数据类型</strong></p>
<ul>
<li>基本数据类型</li>
<li>String数据类型</li>
<li>包装类数据类型</li>
<li>javaBean</li>
</ul>
<h2 id="级联查询"><a href="#级联查询" class="headerlink" title="级联查询"></a>级联查询</h2><p><strong>一对多的情况</strong></p>
<ul>
<li>entity</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>mapper.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        SELECT s.id,s.age,s.`name`,s.sex,u.username,u.`password` FROM student s,user u</span><br><span class="line">        WHERE s.id = 1 AND s.userId = u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">&gt; resultMap：是数据库与实体类形成映射关系  </span><br><span class="line">&gt; id：主键字段映射  </span><br><span class="line">&gt; result：普通字段映射</span><br><span class="line">&gt; column：数据库表字段名  </span><br><span class="line">&gt; property：实体类字段名  </span><br><span class="line">&gt; association：对象之间映射</span><br><span class="line"></span><br><span class="line">**多对对的情况**</span><br><span class="line"></span><br><span class="line">- entity</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">    private Long id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String sex;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private List<span class="tag">&lt;<span class="name">User</span>&gt;</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>mapper.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;users&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        SELECT s.id,s.age,s.`name`,s.sex,u.username,u.`password` FROM student s,user u</span><br><span class="line">        WHERE s.id = 1 AND s.userId = u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>collention：集合对象映射<br>ofType：泛型内对象</p>
</blockquote>
<h2 id="MyBatis延迟加载"><a href="#MyBatis延迟加载" class="headerlink" title="MyBatis延迟加载"></a>MyBatis延迟加载</h2><blockquote>
<p>别名懒加载、惰性加载、可提高程序的运行效率、在某些特定的情况下去访问特定的数据库、在某些情况下不去访问某些表、在一定成都上减少了交互次数、根据具体的业务需求来动态减少数据表的查询工作</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印SQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h2><p><strong>一级缓存：SqlSession级别、默认开启、不能关闭</strong></p>
<blockquote>
<p>创建SqlSession对象、在对象中有一个HashMap用于存储数据、不同的SqlSession之间缓存数据区域是互不影响的  </p>
</blockquote>
<blockquote>
<p>一级缓存的作用域是SqlSession、当同一个SqlSession中执行两次相同的SQL语句、第一次执行完毕会将结果保存到缓存中、第二次查询时直接从缓存中获取</p>
</blockquote>
<blockquote>
<p>SqlSession执行了DML操作（INSERT、UPDATE、DELETE）、MyBatis必须将缓存清空保证数据的准确性、否则会出现读脏数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream stream = TestMybatis.class.getClassLoader().getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(stream);</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        拿到userRespository的运行时类</span></span><br><span class="line">        userRespository mapper = sqlSession.getMapper(userRespository.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据Id进行查询</span></span><br><span class="line">        User byId = mapper.findById(<span class="number">2L</span>);</span><br><span class="line">        System.out.println(byId);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        mapper = sqlSession.getMapper(userRespository.class);</span><br><span class="line">        System.out.println(mapper.findById(<span class="number">3L</span>));</span><br><span class="line">        sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>二级缓存、Mapper级别、默认关闭、可以开启</strong></p>
<blockquote>
<p>多个SqlSession使用同一个Mapper的SQL语句操作数据库、得到的数据会存在二级缓存区、使用HashMap进行数据存储、SqlSession可以使用二级缓存、二级缓存是跨SqlSession的  </p>
</blockquote>
<blockquote>
<p>二级缓存的多个SqlSession共享的、其作用域是Mapper的同一个namespace、不同的SQLSession执行的是相同的namspace下的SQL语句、参数也相等、第一次执行后会将数据保存到二级缓存中、第二次查询时也是直接从二级缓存中取出数据</p>
</blockquote>
<h3 id="mybatis自带二级缓存配置"><a href="#mybatis自带二级缓存配置" class="headerlink" title="mybatis自带二级缓存配置"></a>mybatis自带二级缓存配置</h3><ul>
<li>mybatis-config.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印SQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启⼆二级缓存 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>mapper.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>entity(实现Serializable接口)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ints;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第三方ehcache二级缓存配置"><a href="#第三方ehcache二级缓存配置" class="headerlink" title="第三方ehcache二级缓存配置"></a>第三方ehcache二级缓存配置</h3><ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ehcache.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>mybatis-config.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打印SQL--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启⼆二级缓存 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>mapper.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 缓存创建之后，最后⼀一次访问缓存的时间⾄至缓存失效的时间间隔 --&gt;</span>   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeToIdleSeconds&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3600&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 缓存⾃自创建时间起⾄至失效的时间间隔 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeToLiveSeconds&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3600&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 缓存回收策略略，LRU表示移除近期使⽤用最少的对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memoryStoreEvictionPolicy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="MyBatis动态SQL"><a href="#MyBatis动态SQL" class="headerlink" title="MyBatis动态SQL"></a>MyBatis动态SQL</h2><blockquote>
<p>减少开发者的工作量、程序⾃自动根据业务参数来决定 SQL 的组成</p>
</blockquote>
<ul>
<li>while、if标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">                id = #&#123;id &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">                AND username = #&#123;username &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span></span><br><span class="line">                AND password = #&#123;password &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>where标签：自动判断是否要删除语句块中的AND关键字、如果检测到where直接和AND拼接、则自动删除<br>if标签：自动根据表达式结果来决定是否将对应的语句添加到SQL中、条件成立添加、反之不添加</p>
</blockquote>
<ul>
<li>choose、when标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">                    id = #&#123;id &#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">                    AND username = #&#123;username &#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span></span><br><span class="line">                    AND password = #&#123;password &#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>trim标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">                id = #&#123;id &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">                AND username = #&#123;username &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span></span><br><span class="line">                 AND password = #&#123;password &#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>trim标签：prefix和suffix属性都会被用于生成实际的SQL语句、和标签内部语句进行拼接、但是如果语句前后出现prefixOverrides或者suffixOverrides属性汇总所指定的值、那么自动将其移除</p>
</blockquote>
<ul>
<li>set标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        UPDATE user</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">                username = #&#123;username &#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span></span><br><span class="line">                password = #&#123;password &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            WHERE id = #&#123;id &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>set标签：用于更新</p>
</blockquote>
<ul>
<li>foreach标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ints&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id IN (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                #&#123;id &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>foreach标签：迭代生成的一系列值、主要用于SQL的IN语句</p>
</blockquote>
<h2 id="MyBatis逆向工程"><a href="#MyBatis逆向工程" class="headerlink" title="MyBatis逆向工程"></a>MyBatis逆向工程</h2><blockquote>
<p>自动创建、实体类、自定义Mapper接口、Mapper.xml、支持基本的CRUD</p>
</blockquote>
<ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>generatorConfig.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mysql数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>charcaterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;xiaobo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Oracle数据库</span></span><br><span class="line"><span class="comment">            &lt;jdbcConnection driverClass=&quot;oracle.jdbc.OracleDriver&quot;</span></span><br><span class="line"><span class="comment">                connectionURL=&quot;jdbc:oracle:thin:@127.0.0.1:1521:yycg&quot;</span></span><br><span class="line"><span class="comment">                userId=&quot;yycg&quot;</span></span><br><span class="line"><span class="comment">                password=&quot;yycg&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;/jdbcConnection&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认为false，把JDBC DECIMAL 和NUMERIC类型解析为Integer，为true时</span></span><br><span class="line"><span class="comment">        把JDBC DECIMAL 和NUMERIC类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject：生成POJO类的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.dream.xiaobo.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject：mapper映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject：mapper接口生成的的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.dream.xiaobo.dao&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">&quot;user&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 有些表的字段需要指定java类型</span></span><br><span class="line"><span class="comment">        &lt;table schema=&quot;DB2ADMIN&quot; tableName=&quot;ALLTYPES&quot; domainObjectName=&quot;Customer&quot; &gt;</span></span><br><span class="line"><span class="comment">          &lt;property name=&quot;useActualColumnNames&quot; value=&quot;true&quot;/&gt;</span></span><br><span class="line"><span class="comment">          &lt;generatedKey column=&quot;ID&quot; sqlStatement=&quot;DB2&quot; identity=&quot;true&quot; /&gt;</span></span><br><span class="line"><span class="comment">          &lt;columnOverride column=&quot;DATE_FIELD&quot; property=&quot;startDate&quot; /&gt;</span></span><br><span class="line"><span class="comment">          &lt;ignoreColumn column=&quot;FRED&quot; /&gt;</span></span><br><span class="line"><span class="comment">          &lt;columnOverride column=&quot;LONG_VARCHAR_FIELD&quot; jdbcType=&quot;VARCHAR&quot; /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/table&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>main入口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, XMLParserException,</span></span><br><span class="line"><span class="function">            InvalidConfigurationException, SQLException, InterruptedException </span>&#123;</span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//自己的配置文件位置</span></span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">&quot;./src/main/resources/generatorConfig.xml&quot;</span>);</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        <span class="comment">//mybatis-generator-core依赖 1.3.6 后才有MyBatisGenerator类,需要jre1.8才能运行</span></span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>框架</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>日本語でタイプを打つ</title>
    <url>/posts/1334219283/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%97%A5%E8%AF%AD.20euma443ekg.jpg" alt="日语"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="日本語50音图拼写"><a href="#日本語50音图拼写" class="headerlink" title="日本語50音图拼写"></a>日本語50音图拼写</h1><p><strong>清音表</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>あ段</th>
<th>い段</th>
<th>う段</th>
<th>え段</th>
<th>お段</th>
</tr>
</thead>
<tbody><tr>
<td>あ行</td>
<td>あ　ア</br>a</td>
<td>い　イ</br>i</td>
<td>う　ウ</br>u</td>
<td>え　エ</br> e</td>
<td>お　オ</br> o</td>
</tr>
<tr>
<td>か行</td>
<td>か　カ</br>ka</td>
<td>き　キ</br>ki</td>
<td>く　ク</br>ku</td>
<td>け　ケ</br>ke</td>
<td>こ　コ</br>ko</td>
</tr>
<tr>
<td>さ行</td>
<td>さ　サ</br>sa</td>
<td>し　シ</br>shi/si</td>
<td>す　ス</br>su</td>
<td>せ　セ</br>se</td>
<td>そ　ソ</br>so</td>
</tr>
<tr>
<td>た行</td>
<td>た　タ</br>ta</td>
<td>ち　チ</br>chi/ti</td>
<td>つ　ツ</br>tsu/tu</td>
<td>て　テ</br>te</td>
<td>と　ト</br>to</td>
</tr>
<tr>
<td>な行</td>
<td>な　ナ</br>na</td>
<td>に　ニ</br>ni</td>
<td>ぬ　ヌ</br>nu</td>
<td>ね　ネ</br>ne</td>
<td>の　ノ</br>no</td>
</tr>
<tr>
<td>は行</td>
<td>は　ハ</br>ha</td>
<td>ひ　ヒ</br>hi</td>
<td>ふ　フ</br>fu/hu</td>
<td>へ　ヘ</br>he</td>
<td>ほ　ホ</br>ho</td>
</tr>
<tr>
<td>ま行</td>
<td>ま　マ</br>ma</td>
<td>み　ミ</br>mi</td>
<td>む　ム</br>mu</td>
<td>め　メ</br>me</td>
<td>も　モ</br>mo</td>
</tr>
<tr>
<td>や行</td>
<td>や　ヤ</br>ya</td>
<td>い　イ</br>i</td>
<td>ゆ　ユ</br>yu</td>
<td>え　エ</br>e</td>
<td>よ　ヨ</br>yo</td>
</tr>
<tr>
<td>ら行</td>
<td>ら　ラ</br>ra</td>
<td>り　リ</br>ri</td>
<td>る　ル</br>ru</td>
<td>れ　レ</br>re</td>
<td>ろ　ロ</br>ro</td>
</tr>
<tr>
<td>わ行</td>
<td>わ　ワ</br>wa</td>
<td>い　イ</br>i</td>
<td>う　ウ</br>u</td>
<td>え　エ</br>e</td>
<td>を　ヲ</br>o</td>
</tr>
<tr>
<td></td>
<td>ん　ン</br>nn</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>浊音表</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>あ段</th>
<th>い段</th>
<th>う段</th>
<th>え段</th>
<th>お段</th>
</tr>
</thead>
<tbody><tr>
<td>が行</td>
<td>が　ガ</br>ga</td>
<td>ぎ　ギ</br>gi</td>
<td>ぐ　グ</br>gu</td>
<td>げ　ゲ</br>ge</td>
<td>ご　ゴ</br>go</td>
</tr>
<tr>
<td>ざ行</td>
<td>ざ　ザ</br>za</td>
<td>じ　ジ</br>zi/ji</td>
<td>ず　ズ</br>zu</td>
<td>ぜ　ゼ</br>ze</td>
<td>ぞ　ゾ</br>zo</td>
</tr>
<tr>
<td>だ行</td>
<td>だ　ダ</br>da</td>
<td>ぢ　ヂ</br>di/ji</td>
<td>づ　ヅ</br>du/zu</td>
<td>で　デ</br>de</td>
<td>ど　ド</br>do</td>
</tr>
<tr>
<td>ば行</td>
<td>ば　バ</br>ba</td>
<td>び　ビ</br>bi</td>
<td>ぶ　ブ</br>bu</td>
<td>べ　ベ</br>be</td>
<td>ぼ　ボ</br>bo</td>
</tr>
</tbody></table>
<p><strong>半浊音表</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>あ段</th>
<th>い段</th>
<th>う段</th>
<th>え段</th>
<th>お段</th>
</tr>
</thead>
<tbody><tr>
<td>ぱ行</td>
<td>ぱ　パ</br>pa</td>
<td>ぴ　ピ</br>pi</td>
<td>ぷ　プ</br>pu</td>
<td>ぺ　ペ</br>pe</td>
<td>ぽ　ポ</br>po</td>
</tr>
</tbody></table>
<p><strong>拗音表</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>きゃ　キャ</br>kya</td>
<td>きゅ　キュ</br>kyu</td>
<td>きょ　キョ</br>kyo</td>
</tr>
<tr>
<td>ぎゃ　ギャ</br>gya</td>
<td>ぎゅ　ギュ</br>gyu</td>
<td>ぎょ　ギョ</br>gyo</td>
</tr>
<tr>
<td>しゃ　シャ</br>sha</td>
<td>しゅ　シュ</br>shu</td>
<td>しょ　ショ</br>sho</td>
</tr>
<tr>
<td>じゃ　ジャ</br>ja</td>
<td>じゅ　ジュ</br>ju</td>
<td>じょ　ジョ</br>jo</td>
</tr>
<tr>
<td>ちゃ　チャ</br>cha</td>
<td>ちゅ　チュ</br>chu</td>
<td>ちょ　チョ</br>cho</td>
</tr>
<tr>
<td>にゃ　ニャ</br>nya</td>
<td>にゅ　ニュ</br>nyu</td>
<td>にょ　ニョ</br>nyo</td>
</tr>
<tr>
<td>ひゃ　ヒャ</br>hya</td>
<td>ひゅ　ヒュ</br>hyu</td>
<td>ひょ　ヒョ</br>hyo</td>
</tr>
<tr>
<td>びゃ　ビャ</br>bya</td>
<td>びゅ　ビュ</br>byu</td>
<td>びょ　ビョ</br>byo</td>
</tr>
<tr>
<td>ぴゃ　ピャ</br>pya</td>
<td>ぴゅ　ピュ</br>pyu</td>
<td>ぴょ　ピョ</br>pyo</td>
</tr>
<tr>
<td>みゃ　ミャ</br>mya</td>
<td>みゅ　ミュ</br>myu</td>
<td>みょ　ミョ</br>myo</td>
</tr>
<tr>
<td>りゃ　リャ</br>rya</td>
<td>りゅ　リュ</br>ryu</td>
<td>りょ　リョ</br>ryo</td>
</tr>
</tbody></table>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>日语</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Mvc</title>
    <url>/posts/3709047675/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%AE%B6%E9%87%8C%E8%B9%B2%E5%A4%A7%E5%AD%A6.67y1v221ivs0.jpg" alt="家里蹲大学"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Spring-Mvc"><a href="#Spring-Mvc" class="headerlink" title="Spring Mvc"></a>Spring Mvc</h1><blockquote>
<p>通过把Model，View，Controller分离，把较为复杂的web应用分成逻辑清晰的几部分，是为了简化开发，减少出错</p>
</blockquote>
<h2 id="Spring-Mvc核心组件"><a href="#Spring-Mvc核心组件" class="headerlink" title="Spring Mvc核心组件"></a>Spring Mvc核心组件</h2><blockquote>
<p>DispatcherServlet：前置控制器、是整个流程控制的核心、控制其他组件的执行、进行统一调度、降低组件之间的耦合性、总指挥<br>Handler：处理器、完成具体的业务逻辑、相当于 Servlet<br>HandlerMapping：DispatcherServlet 接收到请求之后、通过 HandlerMapping 将不同的请求映射到不同的 Handler<br>HandlerInterceptor：处理器拦截器、是一个接口、如果需要完成一些拦截处理、可以实现该接口<br>HandlerExecutionChain：处理器执行链、包括两部分内容：Handler 和 HandlerInterceptor（系统会有一个默认的 HandlerInterceptor、如果需要额外设置拦截、可以添加拦截器）<br>HandlerAdapter：处理器适配器、Handler 执行业务方法之前、需要进行一系列的操作、包括表单数据的验证、数据类型的转换、将表单数据封装到 JavaBean 等、这些操作都是由 HandlerApater 来完成、开发者只需将注意力集中业务逻辑的处理上、DispatcherServlet 通过 HandlerAdapter 执行不同的 Handler<br>ModelAndView：装载了模型数据和视图信息、作为 Handler 的处理结果、返回给 DispatcherServlet<br>ViewResolver：视图解析器、DispatcheServlet 通过它将逻辑视图解析为物理视图、最终将渲染结果响应给客户端</p>
</blockquote>
<h2 id="Spring-Mvc工作流程"><a href="#Spring-Mvc工作流程" class="headerlink" title="Spring Mvc工作流程"></a>Spring Mvc工作流程</h2><blockquote>
<p>1、客户端请求被 DisptacherServlet 接收<br>2、根据 HandlerMapping 映射到 Handler<br>3、生成 Handler 和 HandlerIntercepto<br>、Handler 和 HandlerInterceptor 以 HandlerExecutionChain 的形式一并返回给 DisptacherServlet<br>4、DispatcherServlet 通过 HandlerAdapter 调用 Handler 的方法完成业务逻辑处理<br>5、Handler 返回一个 ModelAndView 给 DispatcherServlet<br>6、DispatcherServlet 将获取的 ModelAndView 对象传给 ViewResolver 视图解析器，将逻辑视图解析为物理视图 View<br>7、ViewResovler 返回一个 View 给 DispatcherServlet<br>8、DispatcherServlet 根据 View 进行视图渲染（将模型数据 Model 填充到视图 View 中）<br>9、DispatcherServlet 将渲染后的结果响应给客户端</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/springMvc.5h1glvt8his0.png" alt="springMvc"></p>
<h2 id="Spring-Mvc使用方法"><a href="#Spring-Mvc使用方法" class="headerlink" title="Spring Mvc使用方法"></a>Spring Mvc使用方法</h2><ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置mvc所需依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>web.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>spring-mvc.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    自动装配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dream.xiaobo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>MyHandler.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/index&quot;,</span></span><br><span class="line"><span class="meta">            method = RequestMethod.GET,</span></span><br><span class="line"><span class="meta">            params = &#123;&quot;id=1&quot;,&quot;name=xiaobo&quot;, &quot;sex=nan&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Integer sId,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@RequestParam(&quot;name&quot;)</span> String sName,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@RequestParam(&quot;sex&quot;)</span> String sSex)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;控制器执行了&quot;</span>);</span><br><span class="line">        System.out.println(sId);</span><br><span class="line">        System.out.println(sName);</span><br><span class="line">        System.out.println(sSex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@RequestMapping:将URL请求与业务方法进行映射<br>@Controller:使其该类成为一个控制器、接受客户端请求、并将该类放入到IOC容器中<br>value：URL地址值<br>method:请求类型、get、post、put、delete<br>params：请求中必须包含的参数、否则无法访问、限制请求参数<br>@RequestParam：与形参映射、给形参赋值、当形参和params参数相同时可自动赋值、否则需要@RequestParam赋值  </p>
</blockquote>
<ul>
<li>RESTFUL风格</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/xiaobo/&#123;id&#125;/&#123;name&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, <span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@ParhVariable:与形参映射、给形参赋值</p>
</blockquote>
<ul>
<li>映射Cookie</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/cookie&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">cookie</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String sessionId)</span></span>&#123;</span><br><span class="line">        System.out.println(sessionId);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>转发</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/forward&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">forward</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Spring Mvc默认是转发、所以可以省略</p>
</blockquote>
<ul>
<li>重定向</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/redirect&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-Mvc数据绑定"><a href="#Spring-Mvc数据绑定" class="headerlink" title="Spring Mvc数据绑定"></a>Spring Mvc数据绑定</h2><blockquote>
<p>后端直接获取客户端请求中的参数、将参数映射到形参中、数据绑定工作是由HandlerAdapter完成的</p>
</blockquote>
<ul>
<li>普通绑定</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/data&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;jiben&quot;)</span></span><br><span class="line"><span class="comment">//  @ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">jiben</span><span class="params">(<span class="meta">@RequestParam(value = &quot;num&quot;,</span></span></span></span><br><span class="line"><span class="meta"><span class="params"><span class="function">                                    required = false,</span></span></span></span><br><span class="line"><span class="meta"><span class="params"><span class="function">                                    defaultValue = &quot;0&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">                                    String[] name)</span></span>&#123;</span><br><span class="line">        String string = Arrays.toString(name);</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@ResponseBody 表示 Spring MVC 会直接将业务方法的返回值响应给客户端、如果不加 @ResponseBody 注解、Spring MVC 会将业务方法的放回值传递给 DispatcherServlet、再由 DisptacherServlet 调用 ViewResolver 对返回值进行解析、映射到一个 JSP 资源<br>@RestController：表示该控制器会直接将业务方法的返回值响应给客户端、不进行视图解析<br>@Controller：表示该控制器的每一个业务方法的返回值都会交给视图解析器进行解析<br>@RequestParam（value = “num”）：将 HTTP 请求中名为 num 的参数赋给形参 id<br>requried：设置 num 是否为必填项、true 表示必填、false 表示非必填<br>defaultValue = “0”：如果 HTTP 请求中没有 num 参数、默认值为0</p>
</blockquote>
<ul>
<li>List集合绑定</li>
</ul>
<blockquote>
<p>List集合必须进行封装后操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(UserList userList)</span></span>&#123;</span><br><span class="line">    StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span>(User user:userList.getUsers())&#123;</span><br><span class="line">        str.append(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Map集合绑定</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/map&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">map</span><span class="params">(UserMap userMap)</span></span>&#123;</span><br><span class="line">    StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span>(String key:userMap.getUsers().keySet())&#123;</span><br><span class="line">        User user = userMap.getUsers().get(key);</span><br><span class="line">        str.append(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JSON绑定  </li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    JSON数据转换成Java对象--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  使后缀为.js的放行、不交给dispatcherServlet处理--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            配置fastjson--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;json页面&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery-3.2.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            <span class="keyword">var</span> person = &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;xiaobo&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sex&quot;</span> : <span class="string">&quot;男&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url:<span class="string">&quot;/data/json&quot;</span>,</span><br><span class="line">                type:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">                dataType:<span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">                contentType:<span class="string">&quot;appliaction/json;charset=UTF-8&quot;</span>,</span><br><span class="line">                data:JSON.stringify(person),</span><br><span class="line">                success:function (data) &#123;</span><br><span class="line">                    alert(data.id + <span class="string">&quot;---&quot;</span> + data.name + <span class="string">&quot;---&quot;</span> + data.sex)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/json&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">json</span><span class="params">(<span class="meta">@RequestBody</span> Person person)</span></span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        person.setId(<span class="number">666</span>);</span><br><span class="line">        person.setName(<span class="string">&quot;小博&quot;</span>);</span><br><span class="line">        person.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>servletAPI</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;servlet&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">httpServlet</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setId(<span class="number">1</span>);</span><br><span class="line">        person.setName(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        person.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;person&quot;</span>,person);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-Mvc-REST"><a href="#Spring-Mvc-REST" class="headerlink" title="Spring Mvc REST"></a>Spring Mvc REST</h2><blockquote>
<p>资源表现层状态<br>URL简洁<br>有利于不同系统之间资源共享</p>
</blockquote>
<p><strong>使用方法</strong></p>
<blockquote>
<p>GET用来表示获取资源（select）<br>POST用来新建资源（insert）<br>PUT用来表示修改资源（update）<br>DELETE用来表示删除资源（delete）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Person&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(Person person)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">PersonRepository</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer,Person&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>,<span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;xiaobo&quot;</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">&quot;wyb&quot;</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">&quot;wangyibo&quot;</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Person&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        map.put(person.getId(),person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        map.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/reft&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReftController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepositoryImpl personRepository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Person&gt; <span class="title">findAll</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> personRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> personRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(value = &quot;/saveOrUpdate&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(<span class="meta">@RequestBody</span> Person person)</span></span>&#123;</span><br><span class="line">        personRepository.saveOrUpdate(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        personRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件上传（upload）"><a href="#文件上传（upload）" class="headerlink" title="文件上传（upload）"></a>文件上传（upload）</h2><ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>upload.jsp</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/file/upload&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;sc&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;$&#123;requestScope.path &#125;&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>spring-mvc.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>uploadController</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile sc, HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sc.getSize() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//获取文件上传保存路径</span></span><br><span class="line">            String path = request.getServletContext().getRealPath(<span class="string">&quot;/file&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取文件上传名字</span></span><br><span class="line">            String filename = sc.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">            File file = <span class="keyword">new</span> File(path,filename);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//读出</span></span><br><span class="line">                sc.transferTo(file);</span><br><span class="line">                <span class="comment">//放到Request中传送过去</span></span><br><span class="line">                request.setAttribute(<span class="string">&quot;path&quot;</span>,<span class="string">&quot;/file/&quot;</span>+filename);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>同时上传多个文件</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/file/upload&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;sc&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;sc&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;sc&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;files&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;file&quot;</span> &gt;</span><br><span class="line">    &lt;img src=<span class="string">&quot;$&#123;file&#125;&quot;</span> width=<span class="string">&quot;300px&quot;</span>&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile[] sc, HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(MultipartFile multipartFile: sc)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(multipartFile.getSize() &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取文件上传保存路径</span></span><br><span class="line">                String path = request.getServletContext().getRealPath(<span class="string">&quot;/file&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取文件上传名字</span></span><br><span class="line">                String filename = multipartFile.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">                File file = <span class="keyword">new</span> File(path,filename);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//读出</span></span><br><span class="line">                    multipartFile.transferTo(file);</span><br><span class="line"></span><br><span class="line">                    list.add(<span class="string">&quot;/file/&quot;</span> + filename);</span><br><span class="line">                    <span class="comment">//放到Request中传送过去</span></span><br><span class="line">                    request.setAttribute(<span class="string">&quot;files&quot;</span>,list);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;/file/download/springMvc&quot;</span>&gt;springMvc.png&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;/file/download/IOC&quot;</span>&gt;IOC.png&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;/file/download/MVC&quot;</span>&gt;MVC.png&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/download/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(<span class="meta">@PathVariable</span> String name, HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name != <span class="keyword">null</span>)&#123;</span><br><span class="line">            name += <span class="string">&quot;.png&quot;</span>;</span><br><span class="line">            String path = request.getServletContext().getRealPath(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">            File file = <span class="keyword">new</span> File(path,name);</span><br><span class="line">            OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;application/forc-download&quot;</span>);</span><br><span class="line">                response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+name);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream = response.getOutputStream();</span><br><span class="line">                    outputStream.write(FileUtils.readFileToByteArray(file));</span><br><span class="line">                    outputStream.flush();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(outputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            outputStream.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-MVC-表单标签库"><a href="#Spring-MVC-表单标签库" class="headerlink" title="Spring MVC 表单标签库"></a>Spring MVC 表单标签库</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;tag&quot;</span>);</span><br><span class="line">    Student student = <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">&quot;xiaobo&quot;</span>,<span class="number">21</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form:form modelAttribute=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">        学生ID：&lt;form:input path=<span class="string">&quot;id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        学生姓名：&lt;form:input path=<span class="string">&quot;name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        学生年龄：&lt;form:input path=<span class="string">&quot;age&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-Mvc数据校验"><a href="#Spring-Mvc数据校验" class="headerlink" title="Spring Mvc数据校验"></a>Spring Mvc数据校验</h2><ul>
<li>基于Validator接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Account.class.equals(aClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object o, Errors errors)</span> </span>&#123;</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors,<span class="string">&quot;name&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;姓名不能为空&quot;</span>);</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors,<span class="string">&quot;password&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountValidator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.validator.AccountValidator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">&quot;accountValidator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Annotation JSR - 303校验</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSR-303 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jboss-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Size(min = 6,max = 12,message = &quot;密码6-12位&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Email(regexp = &quot;^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\\\\.[a-zA-Z0-9-]+)*\\\\.[a-zA-Z0-9]&#123;2,6&#125;$&quot;,message = &quot;请输入正确的邮箱格式&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\\\\\\\d&#123;8&#125;$&quot;,message = &quot;请输入正确的电话&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@Null                    被注解的元素必须为null<br>@NotNull                  被注解的元素不能为null<br>@Min(value)                 被注解的元素必须是一个数字，其值必须大于等于指定的最小值<br>@Max(value)                被注解的元素必须是一个数字，其值必须小于于等于指定的最大值<br>@Email                     被注解的元素必须是电子邮箱地址<br>@Pattern                  被注解的元素必须符合对应的正则表达式<br>@Length                   被注解的元素的大小必须在指定的范围内<br>@NotEmpty                  被注解的字符串的值必须非空</p>
</blockquote>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>框架</tag>
        <tag>spring mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/posts/2063047165/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%8F%8D%E5%B0%84.4cmr5cqtnx60.jpg" alt="反射"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><blockquote>
<p>反射机制是在<strong>运行状态</strong>中<br>对于任意一个类、都能够知道这个类所有的属性和方法<br>对于任意一个对象、都能够调用他的任意一个属性和方法</p>
</blockquote>
<h2 id="反射提供的功能"><a href="#反射提供的功能" class="headerlink" title="反射提供的功能"></a>反射提供的功能</h2><blockquote>
<p>运行时判断任意一个对象所属的类<br>运行时构造任意一个类的对象<br>运行时判断任意一个类所具有的成员变量和方法<br>运行时调用一个对象的方法<br>生成动态代理</p>
</blockquote>
<h2 id="反射入口"><a href="#反射入口" class="headerlink" title="反射入口"></a>反射入口</h2><p><strong>获取Class的三种方法</strong></p>
<ul>
<li>Class.forName() （使用较多）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    clazz = Class.forName(<span class="string">&quot;com.dream.xiaobo.reflect.impl.MyInterfaceImpl&quot;</span>);</span><br><span class="line">    System.out.println(clazz);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>类名.class</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(MyInterfaceImpl.class);</span><br></pre></td></tr></table></figure>

<ul>
<li>对象.getClass</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MyInterfaceImpl myInterface = <span class="keyword">new</span> MyInterfaceImpl();</span><br><span class="line">Class&lt;? extends MyInterfaceImpl&gt; aClass = myInterface.getClass();</span><br><span class="line">System.out.println(aClass);</span><br></pre></td></tr></table></figure>

<p><strong>获取方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    clazz = Class.forName(<span class="string">&quot;com.dream.xiaobo.reflect.impl.MyInterfaceImpl&quot;</span>);</span><br><span class="line">    <span class="comment">//获取所有的公共方法（本类以及父类、接口中的所有方法  符合的访问修饰符规律的方法）</span></span><br><span class="line">    Method[] methods = clazz.getMethods();</span><br><span class="line">    <span class="keyword">for</span>(Method method: methods)&#123;</span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    <span class="comment">//当前类的所有方法、不收访问修饰符的限制</span></span><br><span class="line">    Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method declare:declaredMethods)&#123;</span><br><span class="line">        System.out.println(declare);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>公共方法：本类以及父类、接口中的所有方法<br>符合的访问修饰符规律的方法</p>
</blockquote>
<p><strong>获取接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    clazz = Class.forName(<span class="string">&quot;com.dream.xiaobo.reflect.impl.MyInterfaceImpl&quot;</span>);</span><br><span class="line">    Class[] interfaces = clazz.getInterfaces();</span><br><span class="line">    <span class="keyword">for</span> (Class inter: interfaces)&#123;</span><br><span class="line">        System.out.println(inter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取父类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    clazz = Class.forName(<span class="string">&quot;com.dream.xiaobo.reflect.impl.MyInterfaceImpl&quot;</span>);</span><br><span class="line">    Class superclass = clazz.getSuperclass();</span><br><span class="line">    System.out.println(superclass);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    clazz = Class.forName(<span class="string">&quot;com.dream.xiaobo.reflect.impl.MyInterfaceImpl&quot;</span>);</span><br><span class="line">    Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">    <span class="keyword">for</span>(Constructor constructor: constructors)&#123;</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取属性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    clazz = Class.forName(<span class="string">&quot;com.dream.xiaobo.reflect.impl.MyInterfaceImpl&quot;</span>);</span><br><span class="line">    <span class="comment">//获取共有的属性</span></span><br><span class="line">    Field[] fields = clazz.getFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field : fields)&#123;</span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取本类的属性</span></span><br><span class="line">    Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field fie : declaredFields)&#123;</span><br><span class="line">        System.out.println(fie);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取类的类的对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clazz = Class.forName(<span class="string">&quot;com.dream.xiaobo.reflect.impl.MyInterfaceImpl&quot;</span>);</span><br><span class="line">            <span class="comment">//获取当前反射所代表类（接口）的实例对象</span></span><br><span class="line">            MyInterfaceImpl o = (MyInterfaceImpl)clazz.newInstance();</span><br><span class="line">            o.getInterface1();</span><br><span class="line">            o.getInterface2();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><strong>操作属性和方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    clazz = Class.forName(<span class="string">&quot;com.dream.xiaobo.reflect.impl.MyInterfaceImpl&quot;</span>);</span><br><span class="line">    <span class="comment">//获取到反射类的对象</span></span><br><span class="line">    MyInterfaceImpl instance = (MyInterfaceImpl) clazz.newInstance();</span><br><span class="line">    <span class="comment">//获取到id属性</span></span><br><span class="line">    Field id = clazz.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//屏蔽private修饰符</span></span><br><span class="line">    id.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//给id赋值</span></span><br><span class="line">    id.set(instance,<span class="number">1</span>);</span><br><span class="line">    System.out.println(instance.getId());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">    <span class="comment">//获取到student方法</span></span><br><span class="line">    Method method = clazz.getDeclaredMethod(<span class="string">&quot;student&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//屏蔽private修饰符</span></span><br><span class="line">    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    method.invoke(instance,<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取public修饰符的构造方法</span></span><br><span class="line">    Constructor constructor1 = clazz.getDeclaredConstructor(String.class);</span><br><span class="line">    <span class="comment">//调用构造方法</span></span><br><span class="line">    MyInterfaceImpl xiaobo = (MyInterfaceImpl)constructor1.newInstance(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取private修饰符的构造方法</span></span><br><span class="line">    Constructor constructor2 = clazz.getDeclaredConstructor(Integer.class);</span><br><span class="line">    <span class="comment">//屏蔽private修饰符访问权限</span></span><br><span class="line">    constructor2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//调用构造方法</span></span><br><span class="line">    MyInterfaceImpl wyb = (MyInterfaceImpl)constructor2.newInstance(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>越过泛型检查</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">Class clazz = list.getClass();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Method method = clazz.getMethod(<span class="string">&quot;add&quot;</span>,Object.class);</span><br><span class="line"></span><br><span class="line">    method.invoke(list,<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(list);</span><br></pre></td></tr></table></figure>

<p><strong>简单应用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">propertyUtils</span><span class="params">(Object type,String name,Object value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = type.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = clazz.getDeclaredField(name);</span><br><span class="line"></span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(type,value);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MyInterfaceImpl myInterface = <span class="keyword">new</span> MyInterfaceImpl();</span><br><span class="line"></span><br><span class="line">            PropertyUtils.propertyUtils(myInterface,<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">            PropertyUtils.propertyUtils(myInterface,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">            System.out.println(myInterface.getId());</span><br><span class="line">            System.out.println(myInterface.getName());</span><br><span class="line"></span><br><span class="line">            Student student = <span class="keyword">new</span> Student();</span><br><span class="line">            PropertyUtils.propertyUtils(student,<span class="string">&quot;score&quot;</span>,<span class="number">99.99</span>);</span><br><span class="line">            System.out.println(student.getScore());</span><br></pre></td></tr></table></figure>

<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架</title>
    <url>/posts/1658389689/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/spring%E5%9B%BE%E6%A0%87.6f0hdm0rghs0.jpg" alt="spring图标"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><blockquote>
<p>企业级开发框架、软件设计层框架、可将应用分层、开发者自主选择组件</p>
</blockquote>
<h2 id="Spring框架核心机制"><a href="#Spring框架核心机制" class="headerlink" title="Spring框架核心机制"></a>Spring框架核心机制</h2><p><strong>IOC（控制反转）/DI（依赖注入）</strong></p>
<p><strong>AOP（面向切面编程）</strong></p>
<h2 id="IOC（控制反转）"><a href="#IOC（控制反转）" class="headerlink" title="IOC（控制反转）"></a>IOC（控制反转）</h2><blockquote>
<p>这里我们来举个例子、就好比我们有个A类、B类、当我们想使用B类时、通常做法是直接就new一个B类对象、而IOC就是提供了一个容器、我们不需要直接new一个B类对象、而是直接去容器里面取B类对象即可</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/IOC.6dracx1von00.png" alt="IOC"></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Spring上下文依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        自动生成set和get方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>传统方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setId(<span class="number">1</span>);</span><br><span class="line">student.setName(<span class="string">&quot;小博&quot;</span>);</span><br><span class="line">student.setAge(<span class="number">21</span>);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure>

<ul>
<li>IOC方式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置要管理的对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小博&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext application = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">        Student student = (Student)application.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br></pre></td></tr></table></figure>

<h3 id="IOC文件配置"><a href="#IOC文件配置" class="headerlink" title="IOC文件配置"></a>IOC文件配置</h3><blockquote>
<p>id：对象名<br>class：对象模板类（此类必须有无参构造函数、因为Spring通过反射机制创建对象、调用无参构造函数）<br>name：成员变量<br>value：成员变量值（基本数据类型、String）<br>ref：将IOC中另一个Bean赋值给当前成员变量</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置要管理的对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小博&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;student&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IOC-底层原理模拟"><a href="#IOC-底层原理模拟" class="headerlink" title="IOC 底层原理模拟"></a>IOC 底层原理模拟</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span><span class="comment">//set和get方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span><span class="comment">//有参构造（所有参数）</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span><span class="comment">//无参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathXmlApplicationContext</span> <span class="keyword">implements</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; ioc = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//拿到spring.xml配置文件</span></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document document = reader.read(<span class="string">&quot;./src/main/resources/&quot;</span> + path);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿到spring.xml配置文件上下文</span></span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获得迭代器</span></span><br><span class="line">            Iterator&lt;Element&gt; element = root.elementIterator();</span><br><span class="line">            <span class="comment">//遍历beans</span></span><br><span class="line">            <span class="keyword">while</span> (element.hasNext())&#123;</span><br><span class="line">                Element next = element.next();</span><br><span class="line">                <span class="comment">//获得id</span></span><br><span class="line">                String id = next.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="comment">//获得class</span></span><br><span class="line">                String className = next.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//通过反射拿到class</span></span><br><span class="line">                Class clazz = Class.forName(className);</span><br><span class="line">                <span class="comment">//拿到无参构造</span></span><br><span class="line">                Constructor constructor = clazz.getConstructor();</span><br><span class="line">                <span class="comment">//创建无参构造的对象</span></span><br><span class="line">                Object object = constructor.newInstance();</span><br><span class="line">                <span class="comment">//获得迭代器</span></span><br><span class="line">                Iterator&lt;Element&gt; iterator = next.elementIterator();</span><br><span class="line">                <span class="comment">//遍历bean</span></span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">                    Element el = iterator.next();</span><br><span class="line">                    <span class="comment">//拿到name</span></span><br><span class="line">                    String name = el.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                    <span class="comment">//拿到value</span></span><br><span class="line">                    String valueStr = el.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    <span class="comment">//拿到ref</span></span><br><span class="line">                    String ref = el.attributeValue(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">                    <span class="comment">//判断ref</span></span><br><span class="line">                    <span class="keyword">if</span>(ref == <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="comment">//将name转换为set方法</span></span><br><span class="line">                        String s = <span class="string">&quot;set&quot;</span> + name.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + name.substring(<span class="number">1</span>);</span><br><span class="line">                        <span class="comment">//获取本身属性</span></span><br><span class="line">                        Field field = clazz.getDeclaredField(name);</span><br><span class="line">                        <span class="comment">//获取方法</span></span><br><span class="line">                        Method method = clazz.getDeclaredMethod(s, field.getType());</span><br><span class="line"></span><br><span class="line">                        Object value = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">&quot;java.lang.Integer&quot;</span>)&#123;</span><br><span class="line">                            value = Integer.valueOf(valueStr);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">&quot;java.lang.String&quot;</span>)&#123;</span><br><span class="line">                            value = valueStr;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//执行方法</span></span><br><span class="line">                        method.invoke(object,value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ioc.put(id,object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ioc.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">        Person person = (Person)applicationContext.getBean(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过运行是类获取Bean"><a href="#通过运行是类获取Bean" class="headerlink" title="通过运行是类获取Bean"></a>通过运行是类获取Bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext application = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">        Person person = (Person)application.getBean(Person.class);</span><br><span class="line">        System.out.println(person);</span><br></pre></td></tr></table></figure>

<h3 id="通过有参构造赋值"><a href="#通过有参构造赋值" class="headerlink" title="通过有参构造赋值"></a>通过有参构造赋值</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    通过有参构造赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    通过有参构造赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wyb&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Bean注入集合"><a href="#Bean注入集合" class="headerlink" title="Bean注入集合"></a>Bean注入集合</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小博&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;student2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;r&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="scope作用域"><a href="#scope作用域" class="headerlink" title="scope作用域"></a>scope作用域</h3><blockquote>
<p>spring管理bean的作用域是靠scope控制的、共4种、默认值是singleton  </p>
</blockquote>
<ul>
<li>singleton 单例</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Student student1 = (Student)applicationContext.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        Student student2 = (Student)applicationContext.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        Student student3 = (Student)applicationContext.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student1 == student2);<span class="comment">//true</span></span><br><span class="line">        System.out.println(student1 == student3);<span class="comment">//true</span></span><br><span class="line">        System.out.println(student2 == student3);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由结果可得出、singleton通过IOC容器获得的Bean是唯一的、并且当spring.xml被加载时bean就被创建</p>
</blockquote>
<ul>
<li>prototype 原型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Student student1 = (Student)applicationContext.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        Student student2 = (Student)applicationContext.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        Student student3 = (Student)applicationContext.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student1 == student2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(student1 == student3);<span class="comment">//false</span></span><br><span class="line">        System.out.println(student2 == student3);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>由结果可得出、prototype通过IOC容器获得的Bean是不同的、并且当业务获取IOC容器中bean时才被创建</p>
</blockquote>
<ul>
<li>request 请求</li>
</ul>
<blockquote>
<p>在一次HTTP请求内有效</p>
</blockquote>
<ul>
<li>session 会话</li>
</ul>
<blockquote>
<p>在一次用户会话内有效</p>
</blockquote>
<h3 id="Bean之间继承"><a href="#Bean之间继承" class="headerlink" title="Bean之间继承"></a>Bean之间继承</h3><blockquote>
<p>子对象可以继承父对象的属性值、子对象必须包含父对象的所有属性、并且可以在父对象的基础上自行添加</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Bean之间依赖"><a href="#Bean之间依赖" class="headerlink" title="Bean之间依赖"></a>Bean之间依赖</h3><blockquote>
<p>被依赖的Bean先创建、在创建依赖的Bean、A依赖B、在创建B、在创建A</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span> <span class="attr">depends-on</span>=<span class="string">&quot;student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><ul>
<li>静态工厂方法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    静态Bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.factory.StaticCarFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticCarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Long, Car&gt; map = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line"></span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;Long, Car&gt;();</span><br><span class="line">        map.put(<span class="number">1L</span>,<span class="keyword">new</span> Car(<span class="number">1</span>,<span class="string">&quot;摩托车&quot;</span>));</span><br><span class="line">        map.put(<span class="number">2L</span>,<span class="keyword">new</span> Car(<span class="number">2</span>,<span class="string">&quot;赛车&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实例工厂方法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--实例Bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instance&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.factory.InstanceCarFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car2&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;instance&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">InstanceCarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;Long, Car&gt; map = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InstanceCarFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;Long, Car&gt;();</span><br><span class="line">        map.put(<span class="number">1L</span>,<span class="keyword">new</span> Car(<span class="number">1</span>,<span class="string">&quot;摩托车&quot;</span>));</span><br><span class="line">        map.put(<span class="number">2L</span>,<span class="keyword">new</span> Car(<span class="number">2</span>,<span class="string">&quot;赛车&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="IOC自动装载（Autowire）"><a href="#IOC自动装载（Autowire）" class="headerlink" title="IOC自动装载（Autowire）"></a>IOC自动装载（Autowire）</h3><ul>
<li>自动装载byName方式</li>
</ul>
<blockquote>
<p>通过属性名自动装载</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wang&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>自动装载byType方式</li>
</ul>
<blockquote>
<p>通过属性的数据类型自动装载、类型不能出现相同的否则报错</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wang&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="AOP（面向切面）"><a href="#AOP（面向切面）" class="headerlink" title="AOP（面向切面）"></a>AOP（面向切面）</h2><blockquote>
<p>动态的将代码切入到类指定的位置、将不同的方法的同一位置抽象成一个切面对象、然后对这个切面进行编程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalImpl</span> <span class="keyword">implements</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = a + b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = a - b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = a * b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = a / b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span><span class="comment">//定义切面类</span></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//将该类注入到IOC容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public double com.dream.xiaobo.aop.impl.CalImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        String args = Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        System.out.println(name + <span class="string">&quot;的方法参数是&quot;</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(public double com.dream.xiaobo.aop.impl.CalImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(public double com.dream.xiaobo.aop.impl.CalImpl.*(..))&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRetrun</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法的结果是：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(public double com.dream.xiaobo.aop.impl.CalImpl.*(..))&quot;,throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThread</span><span class="params">(JoinPoint joinPoint,Exception exception)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法的异常:&quot;</span> + exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context-4.2.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    自动扫描、扫描该包下的交给我容器处理的所有类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dream.xiaobo.aop&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    使Aspect注解生效、为目标类生成代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring-aop.xml&quot;</span>);</span><br><span class="line">        Cal calImpl = (Cal)applicationContext.getBean(<span class="string">&quot;calImpl&quot;</span>);</span><br><span class="line">        calImpl.add(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">        calImpl.sub(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">        calImpl.mul(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">        calImpl.div(<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Aspect</li>
</ul>
<p>定义该类为切面类</p>
<ul>
<li>@Component</li>
</ul>
<p>将类注入到IOC容器</p>
<ul>
<li>@Before  @After</li>
</ul>
<p>切入方法执行的具体位置和时机</p>
<ul>
<li>context:component-scan</li>
</ul>
<p>对包中所有类进行扫描、如果该类被注入到容器中了、则使用IOC管理这个类</p>
<ul>
<li>aop:aspectj-auoproxy</li>
</ul>
<p>使@Aspect标注过的类自动生成动态代理对象</p>
<blockquote>
<p>切⾯：横切关注点被模块化的抽象对象<br>通知：切⾯面对象完成的⼯工作<br>目标：被通知的对象，即被横切的对象<br>代理：切⾯面、通知、⽬目标混合之后的对象<br>连接点：通知要插入业务代码的具体位置<br>切点：AOP 通过切点定位到连接点</p>
</blockquote>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/posts/120011996/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/Maven.1t9grf8m7z0g.png" alt="Maven"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p><strong>基于java平台的、自动化构建工具</strong></p>
<blockquote>
<p>清理：删除编译结果、为重新编译做准备<br>编译：java编译成class<br>测试：对项目中关键点进行测试、用测试代码去测试开发代码<br>报告：将测试的结果进行显示<br>打包：将项目中包含的多个文件压缩成一个文件、用于安装和部署<br>安装：将打成的包放到 本地仓库、供其他项目使用<br>部署：将打成的包方到  服务器上运行  </p>
</blockquote>
<h2 id="Maven作用"><a href="#Maven作用" class="headerlink" title="Maven作用"></a>Maven作用</h2><ul>
<li>管理jar</li>
</ul>
<blockquote>
<p>添加第三方jar<br>自动关联下载所有依赖的jar、并且不会冲突<br>通常下载一个jar、先在本地仓库中下载、如果本地仓库中不存在、则在联网去中央仓库或中央仓库镜像去下载</p>
</blockquote>
<ul>
<li>将项目拆分成若干个模块</li>
</ul>
<h2 id="Maven配置流程"><a href="#Maven配置流程" class="headerlink" title="Maven配置流程"></a>Maven配置流程</h2><ul>
<li>环境变量配置-</li>
</ul>
<p><strong>path配置Maven的bin目录</strong></p>
<ul>
<li>conf/settings.xml配置属性<br>配置阿里云镜像和修改本地仓库</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/Maven/IDEA jar<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Maven结构"><a href="#Maven结构" class="headerlink" title="Maven结构"></a>Maven结构</h2><blockquote>
<p>src/main/java  程序功能代码<br>src/main/resourses  资源代码、配置代码<br>src/test  测试代码<br>pom.xml  项目对象模型（把项目看成一个对象）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    大项目名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    子模块名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    名字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>testMaven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Maven常见命令"><a href="#Maven常见命令" class="headerlink" title="Maven常见命令"></a>Maven常见命令</h2><ul>
<li>编译命令（只编译main目录java文件）</li>
</ul>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">mvn compile</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">mvn test</span><br></pre></td></tr></table></figure>

<ul>
<li>打包（jar/war）</li>
</ul>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure>

<ul>
<li>存入本地仓库（供其他模块使用）</li>
</ul>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure>

<ul>
<li>删除target</li>
</ul>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">mvn clean</span><br></pre></td></tr></table></figure>

<h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><blockquote>
<p>maven依赖一般都是在pom.xml中进行引入操作</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>依赖的范围</li>
</ul>
<blockquote>
<p>complie（默认）<br>test<br>provided</p>
</blockquote>
<ul>
<li>依赖排除</li>
</ul>
<p>我们来举个例子啊、就好比引入a.jar时他依赖于b.jar、所以会自动引入、但我们就是不想要b.jar、所以可以手动排除掉</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>依赖的传递</li>
</ul>
<p>A.jar-B.jar-&gt;C.jar 要使 A.jar -&gt;C.jar:当且仅当 B.jar 依赖于C.jar的范围是compile</p>
<ul>
<li>依赖原则</li>
</ul>
<p><strong>路径最短优先原则</strong><br><strong>路径长度相同时：</strong>  </p>
<blockquote>
<p>在同一个pom.xml文件中有2个相同的依赖（覆盖）：后面声明的依赖 会覆盖前面声明的依赖<br>如果是不同的 pom.xml中有2个相同的依赖（优先）：则先声明的依赖 ，会覆盖后声明的依赖</p>
</blockquote>
<ul>
<li>多个maven项目（模块）之间依赖</li>
</ul>
<blockquote>
<p>现将被依赖的项目install到仓库<br>然后另一个项目导入依赖即可</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> 		 	 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Maven统一项目jdk版本</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-18<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>动态配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xiaobotest</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">xiaobotest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;xiaobotest&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Maven打包种类"><a href="#Maven打包种类" class="headerlink" title="Maven打包种类"></a>Maven打包种类</h2><p><strong>jar</strong></p>
<p><strong>war</strong></p>
<p><strong>pom</strong></p>
<h2 id="Maven实现项目之间继承"><a href="#Maven实现项目之间继承" class="headerlink" title="Maven实现项目之间继承"></a>Maven实现项目之间继承</h2><ul>
<li>父类</li>
</ul>
<blockquote>
<p>建立父类工程、其父类工程打包方式必须为pom<br>在父类中pom.xml中编写</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子类</li>
</ul>
<blockquote>
<p>继承一个父工程、加入父工程gav<br>当前项目中pom.xml导入父工程pom.xml相对路径<br>当前项目中pom.xml使用父类依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1加入父工程坐标gav --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>大项目名<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>小模块名<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2当前工程的Pom.xml到父工程的Pom.xml之间的 相对路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../模块名/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 声明：需要使用到父类的junit （只需要ga） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Maven的聚合"><a href="#Maven的聚合" class="headerlink" title="Maven的聚合"></a>Maven的聚合</h2><blockquote>
<p>将多个子工程和起来</p>
</blockquote>
<ul>
<li>使用方法</li>
</ul>
<blockquote>
<p>建立一个总工程、打包方式为pom<br>进行配置<br>配置完聚合之后，以后只要操作总工程，则会自动操作 改聚合中配置过的工程</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  		<span class="comment">&lt;!--项目的根路径  --&gt;</span></span><br><span class="line">  	  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../Maven1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  	  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../Maven2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  	  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Lesson-one-Lesson-Two</title>
    <url>/posts/1137689928/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%96%B0%E6%A6%82%E5%BF%B5%E8%8B%B1%E8%AF%AD%E7%AC%AC%E4%B8%80%E5%86%8C.yg2kvsapz34.png" alt="新概念英语第一册"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Lesson-One-amp-Lesson-Two"><a href="#Lesson-One-amp-Lesson-Two" class="headerlink" title="Lesson One &amp; Lesson Two"></a>Lesson One &amp; Lesson Two</h1><table>
<thead>
<tr>
<th align="center">单词</th>
<th align="center">翻译</th>
</tr>
</thead>
<tbody><tr>
<td align="center">excuse</td>
<td align="center">原谅</td>
</tr>
<tr>
<td align="center">me</td>
<td align="center">我（宾格）</td>
</tr>
<tr>
<td align="center">yes</td>
<td align="center">是的</td>
</tr>
<tr>
<td align="center">is</td>
<td align="center">动词现在时第三人称单数</td>
</tr>
<tr>
<td align="center">this</td>
<td align="center">这</td>
</tr>
<tr>
<td align="center">your</td>
<td align="center">你的、你们的</td>
</tr>
<tr>
<td align="center">hand</td>
<td align="center">手</td>
</tr>
<tr>
<td align="center">bag</td>
<td align="center">包</td>
</tr>
<tr>
<td align="center">handbag</td>
<td align="center">手提包</td>
</tr>
<tr>
<td align="center">pardon</td>
<td align="center">原谅、请再说一遍</td>
</tr>
<tr>
<td align="center">it</td>
<td align="center">它</td>
</tr>
<tr>
<td align="center">thank you</td>
<td align="center">感谢你</td>
</tr>
<tr>
<td align="center">very much</td>
<td align="center">非常地</td>
</tr>
<tr>
<td align="center">friend</td>
<td align="center">朋友</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">名字</td>
</tr>
<tr>
<td align="center">student</td>
<td align="center">学生</td>
</tr>
<tr>
<td align="center">nice</td>
<td align="center">好</td>
</tr>
<tr>
<td align="center">sorry</td>
<td align="center">对不起</td>
</tr>
<tr>
<td align="center">pretty</td>
<td align="center">漂亮</td>
</tr>
<tr>
<td align="center">pen</td>
<td align="center">钢笔</td>
</tr>
<tr>
<td align="center">pencil</td>
<td align="center">铅笔</td>
</tr>
<tr>
<td align="center">book</td>
<td align="center">书</td>
</tr>
<tr>
<td align="center">watch</td>
<td align="center">手表</td>
</tr>
<tr>
<td align="center">coat</td>
<td align="center">上衣、外衣</td>
</tr>
<tr>
<td align="center">dress</td>
<td align="center">连衣裙</td>
</tr>
<tr>
<td align="center">skirt</td>
<td align="center">裙子</td>
</tr>
<tr>
<td align="center">shirt</td>
<td align="center">衬衣</td>
</tr>
<tr>
<td align="center">car</td>
<td align="center">汽车</td>
</tr>
<tr>
<td align="center">house</td>
<td align="center">房子</td>
</tr>
<tr>
<td align="center">flat</td>
<td align="center">公寓楼</td>
</tr>
<tr>
<td align="center">bus</td>
<td align="center">公共汽车</td>
</tr>
<tr>
<td align="center">coach</td>
<td align="center">长途客车</td>
</tr>
<tr>
<td align="center">now</td>
<td align="center">现在</td>
</tr>
</tbody></table>
<h2 id="Is-this-your-book-（这是你的书吗？）"><a href="#Is-this-your-book-（这是你的书吗？）" class="headerlink" title="Is this your book?（这是你的书吗？）"></a>Is this your book?（这是你的书吗？）</h2><blockquote>
<p>Yes,it,is            是的这是我的书</p>
</blockquote>
<blockquote>
<p>No,it isn’t            不、这不是我的</p>
</blockquote>
]]></content>
      <tags>
        <tag>new concept english</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Github无法访问问题</title>
    <url>/posts/997874523/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/git/git.796qjy99re40.jpg" alt="git"></p>
<!--sleep-->

<span id="more"></span>

<p><strong>打开计算机C:\Windows\System32\Drivers\etc中hosts文件</strong></p>
<p><strong>添加</strong></p>
<p><strong>140.82.112.4 github.com<br>199.232.69.194 github.global.ssl.fastly.net</strong></p>
<p><strong>WIN+R启动DOS</strong></p>
<p><strong>输入</strong></p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ipconfig</span> /flushdns</span><br></pre></td></tr></table></figure>
<p><strong>刷新DNS</strong></p>
<p><strong>重新访问即可</strong></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>javaWeb图书管理系统version 1.1</title>
    <url>/posts/4197782020/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/t018b8434f8ef35a6ea.3ddjwtzmz3u0.jpg" alt="version 1.1"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="javaWeb"><a href="#javaWeb" class="headerlink" title="javaWeb"></a>javaWeb</h1><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><blockquote>
<p>一种编程思想</p>
</blockquote>
<p><strong>C（Controller）</strong></p>
<blockquote>
<p>控制、派发、Servlet</p>
</blockquote>
<p><strong>M（Model）</strong></p>
<blockquote>
<p>业务数据、service、entity、repository</p>
</blockquote>
<p><strong>V（View）</strong></p>
<blockquote>
<p>视图、jsp</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/MVC.3si24j9pxm00.png" alt="MVC"></p>
<h2 id="图书管理系统简单模拟"><a href="#图书管理系统简单模拟" class="headerlink" title="图书管理系统简单模拟"></a>图书管理系统简单模拟</h2><blockquote>
<p>开发人员：1人<br>开发环境：windows10/jdk1.8/mysql5.7<br>开发工具：Idea/Datagrip/<br>项目介绍：图书管理系统模拟、首先分为读者和图书管理员、读者可登录进行图书借阅、归还、等待图书管理员审批、图书管理员可登录对读者进行审批、记录等操作<br>项目技术：JSP+Jquery+Java+JavaWeb</p>
</blockquote>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><strong>读者表</strong> <strong>管理员表</strong> <strong>图书表</strong> <strong>图书分类表</strong> <strong>借阅表</strong> <strong>归还表</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%95%B0%E6%8D%AE%E5%BA%93.7cck8ctubu40.png" alt="数据库"></p>
<h3 id="后端结构"><a href="#后端结构" class="headerlink" title="后端结构"></a>后端结构</h3><p><strong>Controller</strong> <strong>Entity</strong> <strong>Filter</strong> <strong>Repository</strong> <strong>Service</strong> <strong>Utils</strong> <strong>C3P0-config.xml</strong> <strong>web</strong> <strong>css</strong> <strong>images</strong> <strong>js</strong> <strong>WEB-INF</strong> <strong>jsp</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E9%A1%B9%E7%9B%AE%E5%88%86%E5%B1%82.57eo5qwbjcw0.png" alt="项目分层"></p>
<p><strong>Controller</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/Controller.1wuqyhu8fcww.png" alt="Controller"></p>
<p><strong>Entity</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/Entity.6hrpbtdz6zo.png" alt="Entity"></p>
<p><strong>Filter</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/Filter.7diwgdk5ed40.png" alt="Filter"></p>
<p><strong>Repository</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/Repository.6yyhczc1ujg0.png" alt="Repository"></p>
<p><strong>Service</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/Service.28bszpsjiusk.png" alt="Service"></p>
<p><strong>Uitls</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/Utils.75hm43vyipg0.png" alt="Utils"></p>
<p><strong>C3P0-config.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;testc3p0&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 指定连接数据源的基本属性 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>xiaobo<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/db_library?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>web</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/web.1mwqewfnzpuo.png" alt="web"></p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p><strong>BookServlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图书分页Controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/23 - 10:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BookService bookService = <span class="keyword">new</span> BookServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        Reader reader = (Reader)req.getSession().getAttribute(<span class="string">&quot;object&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == method)&#123;</span><br><span class="line">            method = <span class="string">&quot;findAll&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (method)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;findAll&quot;</span>:</span><br><span class="line">                String pageStr = req.getParameter(<span class="string">&quot;page&quot;</span>);</span><br><span class="line">                Integer page = Integer.parseInt(pageStr);</span><br><span class="line"></span><br><span class="line">                req.setAttribute(<span class="string">&quot;list&quot;</span>,bookService.findAll(page));</span><br><span class="line">                req.setAttribute(<span class="string">&quot;dataPrePage&quot;</span>,<span class="number">5</span>);</span><br><span class="line">                req.setAttribute(<span class="string">&quot;currentPage&quot;</span>,page);</span><br><span class="line">                req.setAttribute(<span class="string">&quot;pages&quot;</span>,bookService.getPages());</span><br><span class="line">                req.setAttribute(<span class="string">&quot;reader&quot;</span>,reader);</span><br><span class="line"></span><br><span class="line">                req.getRequestDispatcher(<span class="string">&quot;index.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;addBorrow&quot;</span>:</span><br><span class="line">                String bookidStr = req.getParameter(<span class="string">&quot;bookid&quot;</span>);</span><br><span class="line">                Integer bookid = Integer.parseInt(bookidStr);</span><br><span class="line">                bookService.addBorrow(bookid,reader.getId());</span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;/book?method=findAllBorrow&amp;page=1&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span><span class="string">&quot;findAllBorrow&quot;</span>:</span><br><span class="line">                pageStr = req.getParameter(<span class="string">&quot;page&quot;</span>);</span><br><span class="line">                page = Integer.parseInt(pageStr);</span><br><span class="line"></span><br><span class="line">                req.setAttribute(<span class="string">&quot;list&quot;</span>,bookService.findBorrowById(reader.getId(),page));</span><br><span class="line">                req.setAttribute(<span class="string">&quot;dataPrePage&quot;</span>,<span class="number">5</span>);</span><br><span class="line">                req.setAttribute(<span class="string">&quot;currentPage&quot;</span>,page);</span><br><span class="line">                req.setAttribute(<span class="string">&quot;pages&quot;</span>,bookService.getBorrowPages(reader.getId()));</span><br><span class="line"></span><br><span class="line">                req.setAttribute(<span class="string">&quot;reader&quot;</span>,reader);</span><br><span class="line">                req.getRequestDispatcher(<span class="string">&quot;borrow.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>BookServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**图书业务处理service实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/23 - 10:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository = <span class="keyword">new</span> BookRepositoryImpl();</span><br><span class="line">    <span class="keyword">private</span> BorrowRepository borrowRepository = <span class="keyword">new</span> BorrowRepositoryImpl();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> LIMIT = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图书查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 当前页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询到的图书结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAll</span><span class="params">(<span class="keyword">int</span> page)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算起始位置、总页码数-1 乘 分页数量</span></span><br><span class="line">        <span class="keyword">int</span> index = (page - <span class="number">1</span>) * LIMIT;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll(index,LIMIT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总页码设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回总页码数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = bookRepository.count();</span><br><span class="line">        <span class="keyword">int</span> page = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(count / LIMIT == <span class="number">0</span>)&#123;</span><br><span class="line">            page = count/LIMIT;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            page = count/LIMIT + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 借阅业务处理接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bookId 图书编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> readerId 读者编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBorrow</span><span class="params">(Integer bookId, Integer readerId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前系统时间</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//将时间转为字符串格式</span></span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        String dates = simpleDateFormat.format(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将当前系统时间+14天设置为最晚归还日期</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.set(Calendar.DAY_OF_YEAR, calendar.get(Calendar.DAY_OF_YEAR) + <span class="number">14</span>);</span><br><span class="line">        Date time = calendar.getTime();</span><br><span class="line">        String returnTime = simpleDateFormat.format(time);</span><br><span class="line">        borrowRepository.insert(bookId,readerId,dates,returnTime,<span class="keyword">null</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Borrow&gt; <span class="title">findBorrowById</span><span class="params">(Integer id,Integer page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = (page - <span class="number">1</span>) * LIMIT;</span><br><span class="line">        <span class="keyword">return</span> borrowRepository.findAllById(id,index,LIMIT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBorrowPages</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = borrowRepository.count(id);</span><br><span class="line">        <span class="keyword">int</span> page = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (count % LIMIT == <span class="number">0</span>)&#123;</span><br><span class="line">            page = count / LIMIT;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            page = count / LIMIT + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Borrow&gt; <span class="title">findBorrowByState</span><span class="params">(Integer state, Integer page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = (page - <span class="number">1</span>) * LIMIT;</span><br><span class="line">        <span class="keyword">return</span> borrowRepository.findAllByState(state,index,LIMIT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBorrowStatePages</span><span class="params">(Integer state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = borrowRepository.countState(state);</span><br><span class="line">        <span class="keyword">int</span> page = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(count % LIMIT == <span class="number">0</span>)&#123;</span><br><span class="line">            page = count / LIMIT;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            page = count / LIMIT + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>BookRepositoryImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/23 - 10:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">BookRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员变量、扩大作用范围</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ComboPooledDataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; list = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图书分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 起始下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 查询个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAll</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用自定义工具类访问数据库</span></span><br><span class="line">            connection = JDBCTools.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义SQL语句、赋值、并执行</span></span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM book,bookcase WHERE book.bookcaseid = bookcase.id limit ?,?&quot;</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>,index);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>,limit);</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">//定义一个List集合接受查询结果</span></span><br><span class="line">            list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">//遍历查询的结果集</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> Book(resultSet.getInt(<span class="number">1</span>),</span><br><span class="line">                        resultSet.getString(<span class="number">2</span>),</span><br><span class="line">                        resultSet.getString(<span class="number">3</span>),</span><br><span class="line">                        resultSet.getString(<span class="number">4</span>),</span><br><span class="line">                        resultSet.getInt(<span class="number">5</span>),</span><br><span class="line">                        resultSet.getDouble(<span class="number">6</span>),</span><br><span class="line">                        <span class="keyword">new</span> BookCase(resultSet.getInt(<span class="number">9</span>),resultSet.getString(<span class="number">10</span>))</span><br><span class="line">                ));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//调用自定义工具类关闭资源</span></span><br><span class="line">            JDBCTools.release(connection,preparedStatement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询图书数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回查询到的数量个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用自定义工具类访问数据库</span></span><br><span class="line">            connection = JDBCTools.getConnection();</span><br><span class="line">            <span class="comment">//定义SQL语句、赋值、并执行</span></span><br><span class="line">            String sql = <span class="string">&quot;SELECT count(*) FROM book,bookcase WHERE book.bookcaseid = bookcase.id&quot;</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">//判断查询到的结果集</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                count = resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//调用自定义工具类关闭资源</span></span><br><span class="line">            JDBCTools.release(connection,preparedStatement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JDBCTools</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/22 - 23:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTools</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员变量、扩大作用范围</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ComboPooledDataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块、类加载时初始化</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;testc3p0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回数据库连接驱动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Book</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图书实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/23 - 9:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String publish;</span><br><span class="line">    <span class="keyword">private</span> Integer pages;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> BookCase bookCase;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name, String author, String publish)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">        <span class="keyword">this</span>.publish = publish;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(Integer id, String name, String author, String publish, Integer pages, Double price, BookCase bookCase)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">        <span class="keyword">this</span>.publish = publish;</span><br><span class="line">        <span class="keyword">this</span>.pages = pages;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.bookCase = bookCase;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPublish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> publish;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublish</span><span class="params">(String publish)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publish = publish;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPages</span><span class="params">(Integer pages)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pages = pages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Double price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookCase <span class="title">getBookCase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookCase;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookCase</span><span class="params">(BookCase bookCase)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookCase = bookCase;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>…</p>
<p><strong>功能欠缺</strong></p>
<blockquote>
<p>管理员图书添加功能<br>管理员图书修改功能<br>管理员图书删除功能<br>借阅状态更新 已借出的图书不允许再借、未借出的图书允许借阅</p>
</blockquote>
<p>小博正在完善功能、后续更新……</p>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX&amp;JDBC&amp;C3P0&amp;DBUtils</title>
    <url>/posts/851211976/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E7%9A%AE%E5%8D%A1%E4%B8%98.5r796lrej2o0.jpg" alt="皮卡丘"></p>
<!--sellp-->

<span id="more"></span>

<h1 id="javaWeb"><a href="#javaWeb" class="headerlink" title="javaWeb"></a>javaWeb</h1><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><blockquote>
<p>异步加载、客户端和服务器数据交互更新在局部页面的技术、局部刷新</p>
</blockquote>
<ul>
<li>Ajax优点</li>
</ul>
<p><strong>局部刷新、效率高</strong></p>
<p><strong>用户体验好</strong></p>
<ul>
<li>Ajax语法</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;lib/jquery-3.2.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">      &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">          $(function () &#123;</span><br><span class="line">              <span class="keyword">var</span> btn = $(<span class="string">&quot;#btn&quot;</span>);</span><br><span class="line">              btn.click(function () &#123;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: <span class="string">&quot;/test&quot;</span>,</span><br><span class="line">                    type: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">                    data: <span class="string">&quot;id=1&quot;</span>,</span><br><span class="line">                    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">                    success: function (data) &#123;</span><br><span class="line">                        <span class="keyword">var</span> id = $(<span class="string">&quot;#id&quot;</span>);</span><br><span class="line">                        <span class="keyword">var</span> name = $(<span class="string">&quot;#name&quot;</span>);</span><br><span class="line">                        <span class="keyword">var</span> score = $(<span class="string">&quot;#score&quot;</span>);</span><br><span class="line">                        id.val(data.id);</span><br><span class="line">                        name.val(data.name)</span><br><span class="line">                        score.val(data.score)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h1 style=<span class="string">&quot;color: aqua&quot;</span>&gt;$&#123;String &#125;&lt;/h1&gt;</span><br><span class="line">  编号&lt;input id=<span class="string">&quot;id&quot;</span> type=<span class="string">&quot;text&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">  姓名&lt;input id=<span class="string">&quot;name&quot;</span> type=<span class="string">&quot;text&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">  分数&lt;input id=<span class="string">&quot;score&quot;</span> type=<span class="string">&quot;text&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">  &lt;input id=<span class="string">&quot;btn&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;点击添加&quot;</span>&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, <span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;小博&quot;</span>,<span class="number">99.99</span>);</span><br><span class="line">            JSONObject jsonObject = JSONObject.fromObject(user);</span><br><span class="line">            resp.getWriter().write(jsonObject.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>$.ajax({属性})  </li>
</ul>
<p><strong>url:请求的后端服务地址</strong>  </p>
<p><strong>type:请求方式、默认get</strong>  </p>
<p><strong>data:请求参数</strong>  </p>
<p><strong>dataType:服务器返回的数据类型、text/json/html/xml、一般为text/json</strong></p>
<p><strong>success:请求成功的回调函数</strong></p>
<p><strong>error:请求失败的回调函数</strong>  </p>
<p><strong>complete:请求完成的回调函数、无论成功或者失败都会调用</strong></p>
<ul>
<li><p>Ajax大致原理<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/AJAX%E6%B5%81%E7%A8%8B.11tqpqi9078.png" alt="AJAX流程"></p>
</li>
<li><p>传统Web数据交互和Ajax数据交互的区别</p>
</li>
</ul>
<p><strong>客户端请求方式</strong></p>
<blockquote>
<p>传统Web发送同步请求<br>Ajax发送异步请求</p>
</blockquote>
<p><strong>服务器响应方式</strong></p>
<blockquote>
<p>传统Web响应整个JSP页面<br>Ajax响应需要的数据</p>
</blockquote>
<p><strong>客户端处理方式</strong></p>
<blockquote>
<p>传统Web需要等待服务器完成响应并重新加载整个页面后、用户才能继续后续操纵<br>Ajax动态更新页面中局部内容、不影响用户其他操作</p>
</blockquote>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><blockquote>
<p>一种轻量级数据交互格式、完成js与后端开发语言对象之间的转换</p>
</blockquote>
<ul>
<li>JSON格式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小博&quot;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">99.99</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="省市区分级联动模拟"><a href="#省市区分级联动模拟" class="headerlink" title="省市区分级联动模拟"></a>省市区分级联动模拟</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery-3.2.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;地区&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(<span class="string">&quot;#shi&quot;</span>).change(function () &#123;</span><br><span class="line">                <span class="keyword">var</span> id = $(<span class="keyword">this</span>).val();</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: <span class="string">&quot;/servlet&quot;</span>,</span><br><span class="line">                    type: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">                    data: <span class="string">&quot;id=&quot;</span> + id + <span class="string">&quot;&amp;type=shi&quot;</span>,</span><br><span class="line">                    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">                    success: function (data) &#123;</span><br><span class="line">                        <span class="keyword">var</span> common = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                            common += <span class="string">&quot;&lt;option&gt;&quot;</span> + data[i] + <span class="string">&quot;&lt;/option&gt;&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        $(<span class="string">&quot;#qu&quot;</span>).html(common);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&quot;#sheng&quot;</span>).change(function () &#123;</span><br><span class="line">                <span class="keyword">var</span> id = $(<span class="keyword">this</span>).val();</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: <span class="string">&quot;/servlet&quot;</span>,</span><br><span class="line">                    type: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">                    data: <span class="string">&quot;id=&quot;</span> + id + <span class="string">&quot;&amp;type=sheng&quot;</span>,</span><br><span class="line">                    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">                    success: function (data) &#123;</span><br><span class="line">                        <span class="keyword">var</span> common = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        <span class="keyword">var</span> shi = data.shi;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shi.length; i++) &#123;</span><br><span class="line">                            common += <span class="string">&quot;&lt;option&gt;&quot;</span> + shi[i] + <span class="string">&quot;&lt;/option&gt;&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        $(<span class="string">&quot;#shi&quot;</span>).html(common);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span>  common = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        <span class="keyword">var</span> qu = data.qu;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; qu.length; i++) &#123;</span><br><span class="line">                            common += <span class="string">&quot;&lt;option&gt;&quot;</span> + qu[i] + <span class="string">&quot;&lt;/option&gt;&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        $(<span class="string">&quot;#qu&quot;</span>).html(common);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">省&lt;select id=<span class="string">&quot;sheng&quot;</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;请选择&quot;</span>&gt;请选择&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;辽宁省&quot;</span>&gt;辽宁省&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;吉林省&quot;</span>&gt;吉林省&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;黑龙江省&quot;</span>&gt;黑龙江省&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">市&lt;select id=<span class="string">&quot;shi&quot;</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;请选择&quot;</span>&gt;请选择&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">区&lt;select id=<span class="string">&quot;qu&quot;</span>&gt;</span><br><span class="line">    &lt;option&gt;请选择&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; map1 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;沈北新区&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;皇姑区&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;和平区&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;沈阳市&quot;</span>,list);</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;昌图县&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;西丰县&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;铁岭县&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;铁岭市&quot;</span>,list);</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;西岗区&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;甘井子区&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;高薪园区&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;大连市&quot;</span>,list);</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;吉林一区&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;吉林二区&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;吉林市&quot;</span>,list);</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;长春一区&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;长春二区&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;长春市&quot;</span>,list);</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;四平一区&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;四平二区&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;四平市&quot;</span>,list);</span><br><span class="line"></span><br><span class="line">        map1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;沈阳市&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;大连市&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;铁岭市&quot;</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;辽宁省&quot;</span>,list);</span><br><span class="line"></span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;吉林市&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;四平市&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;长春市&quot;</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;吉林省&quot;</span>,list);</span><br><span class="line"></span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;哈尔滨市&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;齐齐哈尔市&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;鹤岗市&quot;</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;黑龙江省&quot;</span>,list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        String id = req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        String type = req.getParameter(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">&quot;shi&quot;</span>))&#123;</span><br><span class="line">            List&lt;String&gt; list = map.get(id);</span><br><span class="line"></span><br><span class="line">            JSONArray jsonArray = JSONArray.fromObject(list);</span><br><span class="line">            resp.getWriter().write(jsonArray.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">&quot;sheng&quot;</span>))&#123;</span><br><span class="line">            List&lt;String&gt; shi = map1.get(id);</span><br><span class="line">            String s = shi.get(<span class="number">0</span>);</span><br><span class="line">            List&lt;String&gt; qu = map.get(s);</span><br><span class="line">            Region region = <span class="keyword">new</span> Region();</span><br><span class="line">            region.setShi(shi);</span><br><span class="line">            region.setQu(qu);</span><br><span class="line"></span><br><span class="line">            JSONObject jsonObject = JSONObject.fromObject(region);</span><br><span class="line"></span><br><span class="line">            resp.getWriter().write(jsonObject.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Region</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; shi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; qu;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getShi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShi</span><span class="params">(List&lt;String&gt; shi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shi = shi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getQu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> qu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQu</span><span class="params">(List&lt;String&gt; qu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.qu = qu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><ul>
<li>java.sql 和 javax.sq</li>
</ul>
<p><strong>DriverManager类</strong></p>
<p><strong>Connection接口</strong></p>
<p><strong>Statement接口</strong></p>
<p><strong>ResultSet接口</strong></p>
<ul>
<li>JDBC使用</li>
</ul>
<blockquote>
<p>加载数据驱动<br>获取Connection、java于数据库一次连接<br>创建Statement对象、由Connection产生执行SQL<br>创建ResultSet对象、保存Statement执行之后所查询到的结果  </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line">            String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test_jdbc?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将地址、用户名、密码传进去</span></span><br><span class="line">            Connection connection = DriverManager.getConnection(url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            表更新的操作</span></span><br><span class="line"><span class="comment">//            String sql = &quot;INSERT INTO student(name,score) VALUES(&#x27;xiaobo&#x27;,66.66)&quot;;</span></span><br><span class="line"><span class="comment">//            String sql = &quot;UPDATE student SET name = &#x27;小王&#x27; WHERE id = 3&quot;;</span></span><br><span class="line"><span class="comment">//            String sql = &quot;DELETE FROM student WHERE id = 3&quot;;</span></span><br><span class="line"><span class="comment">//            Statement statement = connection.createStatement();</span></span><br><span class="line"><span class="comment">//            int i = statement.executeUpdate(sql);</span></span><br><span class="line"><span class="comment">//            if(i &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;成功执行Sql&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM student&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//createStatement对象的创建</span></span><br><span class="line">            Statement statement = connection.createStatement();</span><br><span class="line">            <span class="comment">//执行SQL</span></span><br><span class="line">            ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> id = resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String name = resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="keyword">double</span> score = resultSet.getDouble(<span class="string">&quot;score&quot;</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(id + <span class="string">&quot;-&quot;</span> + name + <span class="string">&quot;-&quot;</span> + score);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Statement存在的问题</li>
</ul>
<p><strong>需要频繁拼接String字符串、出错率高</strong></p>
<p><strong>存在SQL注入风险</strong></p>
<ul>
<li><p>SQL注入<br><strong>利用系统没有对用户输入的信息进行充分检测、在用户输入的数据中注入非法的SQL语句、来进行恶意的行为</strong></p>
</li>
<li><p>PreparedStatement</p>
</li>
</ul>
<p><strong>Statement的子类、提供了SQL占位符的功能</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加载驱动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line">            String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test_jdbc?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">            Connection connection = DriverManager.getConnection(url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">            String userName = <span class="string">&quot;xiaobo&quot;</span>;</span><br><span class="line">            String passWord = <span class="string">&quot;xiaobo&quot;</span>;</span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM user WHERE name = ? AND password = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">            PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">            ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                <span class="keyword">if</span>(userName.equals(resultSet.getString(<span class="string">&quot;password&quot;</span>)) &amp;&amp; passWord.equals(resultSet.getString(<span class="number">2</span>)))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ul>
<li>数据库连接池思想</li>
</ul>
<blockquote>
<p>为数据库建立一个缓冲区、预先向缓冲区放入一定数量的连接对象、当需要获取数据库连接时、只需要从缓冲池取出对象、用完之后在放回缓冲池中、供下一次请求使用、使资源重复利用<br>当数据库连接池中没有空闲的连接时、新的请求就会进入等待队列、等待其他线程释放资源</p>
</blockquote>
<ul>
<li>C3P0</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建C3P0</span></span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource.setDriverClass(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test_jdbc?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC&quot;</span>);</span><br><span class="line">            dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            dataSource.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//初始化连接池数量</span></span><br><span class="line">            dataSource.setInitialPoolSize(<span class="number">20</span>);</span><br><span class="line">            <span class="comment">//当访问大于连接池数量时、连接池向DB申请的数量</span></span><br><span class="line">            dataSource.setAcquireIncrement(<span class="number">5</span>);</span><br><span class="line">            <span class="comment">//连接池空闲的最小数量</span></span><br><span class="line">            dataSource.setMinPoolSize(<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//连接池最大数量</span></span><br><span class="line">            dataSource.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (PropertyVetoException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>C3P0配置文件c3p0-config.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;testc3p0&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 指定连接数据源的基本属性 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/test_jdbc?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;testc3p0&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>初始化ComboPooledDataSource传入named-config标签name属性值即可</strong></p>
<h2 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h2><ul>
<li>ResultHandler结果集处理</li>
</ul>
<p><strong>BeanHandler:将结果映射成java对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(Double score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, score=&quot;</span> + score +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;testc3p0&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Student student = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM student WHERE id = 1&quot;</span>;</span><br><span class="line">            QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            student = queryRunner.query(connection, sql, <span class="keyword">new</span> BeanHandler&lt;&gt;(Student.class));</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Student类当中必须有无参构造、因为通过反射获取到的Stduent、Student中属性需要和数据库字段相同形成映射关系 </p>
</blockquote>
<p><strong>BeanListHandler:将结果映射成List集合</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;testc3p0&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM student&quot;</span>;</span><br><span class="line">            QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            List&lt;Object&gt; list = queryRunner.query(connection, sql, <span class="keyword">new</span> BeanListHandler&lt;&gt;(Student.class));</span><br><span class="line">            list.add(queryRunner.query(connection, sql, <span class="keyword">new</span> BeanListHandler&lt;&gt;(User.class)));</span><br><span class="line"></span><br><span class="line">            System.out.println(list);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>MapHandler:将结果映射成Map对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;testc3p0&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM student WHERE id = 1&quot;</span>;</span><br><span class="line">            QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            Map&lt;String, Object&gt; map = queryRunner.query(connection, sql, <span class="keyword">new</span> MapHandler());</span><br><span class="line">            System.out.println(map.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(map.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(map.get(<span class="string">&quot;score&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>MapListHandler:将结果映射成MapList集合</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;testc3p0&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM student&quot;</span>;</span><br><span class="line">            QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">            List&lt;Map&lt;String,Object&gt;&gt; list = queryRunner.query(connection,sql,<span class="keyword">new</span> MapListHandler());</span><br><span class="line">            <span class="keyword">for</span>(Map&lt;String,Object&gt; map : list)&#123;</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>EL表达式&amp;JSTL&amp;Filter&amp;Upload&amp;Download</title>
    <url>/posts/3944027832/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%93%86%E5%95%A6A%E6%A2%A6.4hh8d3sxrde0.jpg" alt="哆啦A梦"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h1><h2 id="JSP内置对象作用域"><a href="#JSP内置对象作用域" class="headerlink" title="JSP内置对象作用域"></a>JSP内置对象作用域</h2><blockquote>
<p>page:对应的内置对象是pageContext、只在当前页面有效<br>request:对应的内置对象是request、在一次请求内有效<br>session:对应的内置对象是Session、在一次会话内有效<br>appliaction：对应的内置对象是Appliaction、对应整个Web应用</p>
</blockquote>
<ul>
<li>作用范围</li>
</ul>
<blockquote>
<p>page &lt; request &lt; session &lt; appliaction</p>
</blockquote>
<h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><blockquote>
<p>替代JSP页面中数据访问时的复杂编码、方便取出域中对象保存的数据</p>
<ul>
<li>表达式语法<br><strong>${变量名}</strong></li>
</ul>
</blockquote>
<ul>
<li>EL表达式默认查找顺序</li>
</ul>
<blockquote>
<p>pageContext ——&gt; request ——&gt; session ——&gt;appliaction</p>
</blockquote>
<ul>
<li>EL表达式指定查找顺序</li>
</ul>
<p><strong>pageContext:${pageScope.name}</strong> </p>
<p><strong>request:${requestScope.name}</strong>  </p>
<p><strong>session:${sessionScope.name}</strong></p>
<p><strong>appliaction:${appliactionScope.name}</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double score;</span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, Double score, Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">        <span class="keyword">this</span>.student = student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(Double score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.student = student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, score=&quot;</span> + score +</span><br><span class="line">                <span class="string">&quot;, student=&quot;</span> + student +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.dream.xiaobo.EL.User&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.dream.xiaobo.EL.Student&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;小博&quot;</span>,<span class="number">99.9</span>, student);</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;分数&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;地址&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;pageContext.user.id&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;pageContext.user.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;pageContext.user.score&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;pageContext.user.student&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>EL表达式支持运算符</li>
</ul>
<blockquote>
<p>&amp;&amp; –&gt; and<br>|| –&gt; or<br>! –&gt; not<br>== -&gt;&gt; eq<br>&lt; –&gt; lt<br>–&gt; gt<br>&lt;= –&gt; le<br>= –&gt; ge<br>empty（判断是否为空） –&gt; 空是变量为null、长度为0的String、size为0的集合</p>
</blockquote>
<h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><blockquote>
<p>使用标签完成一些逻辑处理、不在出现JSP脚本穿插情况</p>
</blockquote>
<ul>
<li>JSTL使用</li>
</ul>
<p>1、导入两个jar包（jstl.jar  standard.jar）、放在web/WEB-INF</p>
<p>2、在JSP页面引入</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<p>3、直接使用  </p>
<ul>
<li>JSTL优点</li>
</ul>
<blockquote>
<p>提供统一标签<br>用于编写各种动态功能</p>
</blockquote>
<ul>
<li>JSTL常用标签</li>
</ul>
<p>set:向域中对象添加数据</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;set值&quot;</span> scope=<span class="string">&quot;request&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">    $&#123;requestScope.name&#125;</span><br></pre></td></tr></table></figure>

<p>out:输出域对象中的数据</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;name&#125;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;未定义&quot;</span>&gt;&lt;/c:out&gt;</span><br></pre></td></tr></table></figure>

<p>remove:删除域对象中的数据</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> scope=<span class="string">&quot;page&quot;</span>&gt;&lt;/c:remove&gt;</span><br></pre></td></tr></table></figure>

<p>catch:异常捕获</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">catch</span> <span class="keyword">var</span>=<span class="string">&quot;exception&quot;</span>&gt;</span><br><span class="line">            &lt;%</span><br><span class="line">                <span class="keyword">int</span> a = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">            %&gt;</span><br><span class="line">        &lt;/c:<span class="keyword">catch</span>&gt;</span><br><span class="line">        $&#123;exception&#125;</span><br></pre></td></tr></table></figure>

<p>forEach:迭代标签</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;map&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.id&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.score&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><ul>
<li>功能</li>
</ul>
<blockquote>
<p>拦截传入的请求和传出的响应<br>修改或以某种方式处理正在客户端和服务器之间交换的数据流</p>
</blockquote>
<ul>
<li>Filter接口的实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Filter配置方法</li>
</ul>
<p><strong>web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.dream.xiaobo.filter.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;*&quot;)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注解可以简化配置、但是web.xml配置可以控制Filter的执行先后顺序、而注解无法控制Filter执行先后顺序</p>
</blockquote>
<ul>
<li>Filter基本的使用场景</li>
</ul>
<p><strong>统一处理资源乱码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>屏蔽敏感词汇</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">name.replaceAll(<span class="string">&quot;敏感词&quot;</span>,<span class="string">&quot;***&quot;</span>);</span><br><span class="line">request.setAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">filterChain.doFilter(request, response);</span><br></pre></td></tr></table></figure>

<p>控制资源访问权限</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><ul>
<li>流程</li>
</ul>
<p>1、input设置为file </p>
<p>2、form表单method设置为post、get请求发送的是文件名给服务端、而不是文件本身、所以必须用post  </p>
<p>3、form表单enctype设置为multipart/form-data,以二进制的形式传输数据</p>
<ul>
<li>底层大致流程</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;form action=<span class="string">&quot;uploadServlet&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;desc&quot;</span> /&gt;&lt;/br&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;img&quot;</span> /&gt;&lt;/br&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/uploadServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        ServletInputStream inputStream = req.getInputStream();</span><br><span class="line">        InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line"></span><br><span class="line">        String path = req.getServletContext().getRealPath(<span class="string">&quot;file/xiaobo.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line">        OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(outputStream);</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(outputStreamWriter);</span><br><span class="line"></span><br><span class="line">        String temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>((temp = bufferedReader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            bufferedWriter.write(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        outputStreamWriter.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        inputStreamReader.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>组件实现流程</li>
</ul>
<blockquote>
<p>web/WEB-INF下导入jar<br>commons-fileupload-1.3.1<br>commons-io-2.5</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;form action=<span class="string">&quot;upload&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;desc&quot;</span> /&gt;&lt;/br&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;img&quot;</span> /&gt;&lt;/br&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUpload</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DiskFileItemFactory diskFileItemFactory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">            ServletFileUpload fileUpload = <span class="keyword">new</span> ServletFileUpload(diskFileItemFactory);</span><br><span class="line">            List&lt;FileItem&gt; fileItems = fileUpload.parseRequest(req);</span><br><span class="line">            <span class="keyword">for</span>(FileItem fileItem: fileItems)&#123;</span><br><span class="line">                <span class="keyword">if</span>(fileItem.isFormField())&#123;</span><br><span class="line">                    String name = fileItem.getName();</span><br><span class="line">                    String fieldName = fileItem.getFieldName();</span><br><span class="line">                    System.out.println(name + <span class="string">&quot;:&quot;</span> + fieldName);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    String name = fileItem.getName();</span><br><span class="line">                    InputStream inputStream = fileItem.getInputStream();</span><br><span class="line">                    String path = req.getServletContext().getRealPath(<span class="string">&quot;file/&quot;</span> + name);</span><br><span class="line">                    System.out.println(path);</span><br><span class="line">                    OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line">                    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span>((temp = inputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        System.out.println(temp);</span><br><span class="line">                        outputStream.write(temp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                    System.out.println(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;下载&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/download?type=png&quot;</span>&gt;<span class="number">1.</span>png&lt;/a&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/download?type=txt&quot;</span>&gt;xiaobo.txt&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDownload</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        String type = req.getParameter(<span class="string">&quot;type&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String fileName = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;png&quot;</span>:</span><br><span class="line">                fileName = <span class="string">&quot;微信截图_20210618143454.png&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;txt&quot;</span>:</span><br><span class="line">                fileName = <span class="string">&quot;xiaobo.txt&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置响应⽅式</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/x-msdownload&quot;</span>);</span><br><span class="line">        <span class="comment">//设置下载之后的⽂件名</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+fileName);</span><br><span class="line">        <span class="comment">//获取输出流</span></span><br><span class="line">        OutputStream outputStream = resp.getOutputStream();</span><br><span class="line">        String path = req.getServletContext().getRealPath(<span class="string">&quot;file/&quot;</span>+fileName);</span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((temp=inputStream.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close(); outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet&amp;JSP&amp;Session&amp;Cookie</title>
    <url>/posts/3563979080/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210613165951.4zc06xnby6w0.png" alt="javaWeb"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h1><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><blockquote>
<p>一个与平台无关的组件、运行在Servlet容器/Web应用服务器/Tomcat、负责与客户端进行通信  </p>
</blockquote>
<h3 id="Servlet功能"><a href="#Servlet功能" class="headerlink" title="Servlet功能"></a>Servlet功能</h3><blockquote>
<p>创建并返回基于客户请求的动态HTML页面<br>与数据库进行通信</p>
</blockquote>
<h3 id="Servlet使用"><a href="#Servlet使用" class="headerlink" title="Servlet使用"></a>Servlet使用</h3><blockquote>
<p>Servlet本身是一个接口、如果一个类实现了这个接口、则这个类就具备了接受客户端请求及做出响应的功能</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是无参构造、我创建对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化Servlet</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;报告后台工作人员、我Servlet已初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Servlet执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String id = servletRequest.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="comment">//汉字编码转换</span></span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;我已收到你传入的参数：&quot;</span> + id );</span><br><span class="line">        servletResponse.getWriter().write(<span class="string">&quot;您好用户、我们后台已收到您的反馈、请您耐心等待&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Servlet销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;报告后台工作人员、我Servlet已经销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Servlet不能直接访问Servlet文件、只能通过映射方式来访问</strong></p>
<ul>
<li>XML配置映射关系</li>
</ul>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.dream.xiaobo.Servlet.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注解配置映射关系</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@WebServlet(&quot;/myServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><blockquote>
<p>1、调用init方法完成初始化操作<br> 2、调用service方法完成业务逻辑操作<br> 3、关闭tomcat时、调用destory方法、释放当前对象所占资源  </p>
</blockquote>
<ul>
<li>当浏览器访问Servlet时、Tomcat会查询当前Servlet实例化对象是否存在、如果不存在则通过反射机制动态创建对象、如果存在、则直接调用service方法执行业务逻辑操作</li>
</ul>
<h3 id="Servlet生命周期中方法的执行"><a href="#Servlet生命周期中方法的执行" class="headerlink" title="Servlet生命周期中方法的执行"></a>Servlet生命周期中方法的执行</h3><blockquote>
<p>无参构造：无参构造只调用一次、创建对象<br> init：init方法只调用一次、初始化对象<br> service：service方法被调用N次、执行业务逻辑<br> destory：destory只调用一次、释放对象</p>
</blockquote>
<h3 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><blockquote>
<p>ServletConfig是一个接口、该接口用来描述Servlet基本信息</p>
</blockquote>
<h3 id="ServletConfig中使用方法"><a href="#ServletConfig中使用方法" class="headerlink" title="ServletConfig中使用方法"></a>ServletConfig中使用方法</h3><blockquote>
<p>getServletName():返回Servlet的名称、全类名<br> getInitParameter(String key):获取init参数值<br> getInitParameterNames()返回所有的InitParamter的name值、用于遍历init初始化参数  </p>
</blockquote>
<h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><blockquote>
<p>Servlet的上下文、是个Servlet的管理者</p>
</blockquote>
<h3 id="ServletConfig和ServletContext的区别"><a href="#ServletConfig和ServletContext的区别" class="headerlink" title="ServletConfig和ServletContext的区别"></a>ServletConfig和ServletContext的区别</h3><blockquote>
<p>ServletConfig:作用于某个Servlet实例、每个Servlet都有对应的ServletConfig、局部对象<br> ServletContext：作用于整个Web应用、一个Web应用对应一个ServletContext、多个Servlet实例对应一个ServletContext、全局对象</p>
</blockquote>
<h3 id="Servlet层次结构"><a href="#Servlet层次结构" class="headerlink" title="Servlet层次结构"></a>Servlet层次结构</h3><blockquote>
<p>Servlet ——&gt; GenericServlet ——&gt; HttpServlet</p>
</blockquote>
<h3 id="HTTP常见的请求类型"><a href="#HTTP常见的请求类型" class="headerlink" title="HTTP常见的请求类型"></a>HTTP常见的请求类型</h3><blockquote>
<p>GET：读取<br> POST：保存<br> PUT：修改<br> DELETE：删除</p>
</blockquote>
<h4 id="大致流程描述"><a href="#大致流程描述" class="headerlink" title="大致流程描述"></a>大致流程描述</h4><blockquote>
<p>GenenricServlet实现Servlet接口、同时为它的子类屏蔽不常用的方法、子类只需重写service方法即可<br> HttpServlet继承GenericServlet、根据请求类型进行分发处理、GET请求进入doGet方法、POST请求进入doPost方法<br> 所以我们自定义的Servlet只需调用HttpServlet即可</p>
</blockquote>
<h3 id="大致工作流程演示"><a href="#大致工作流程演示" class="headerlink" title="大致工作流程演示"></a>大致工作流程演示</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenerisServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHttpServlet</span> <span class="keyword">extends</span> <span class="title">MyGenerisServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse httpServletResponse = (HttpServletResponse) servletResponse;</span><br><span class="line">        String method = httpServletRequest.getMethod();</span><br><span class="line">        <span class="keyword">switch</span> (method)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">                doGet(httpServletRequest,httpServletResponse);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">                doPost(httpServletRequest,httpServletResponse);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        httpServletResponse.getWriter().write(<span class="string">&quot;GET请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        httpServletResponse.getWriter().write(<span class="string">&quot;POST请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/TestServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">MyHttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(<span class="string">&quot;我收到您发的GET请求了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(<span class="string">&quot;我收到您发的POST请求了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><blockquote>
<p>JSP本质就是一个Servlet、JSP主要负责与用户交互、最终将页面呈现给用户 HTML+CSS+JS+java混合的文件<br> 当服务器接受到一个后缀JSP请求、将请求交给JSP引擎去处理、每一个JSP页面第一次被访问时、JSP引擎会将它翻译成一个Servlet文件、在有Web容器调用Servlet完成响应</p>
</blockquote>
<h3 id="JSP脚本、执行Java逻辑代码"><a href="#JSP脚本、执行Java逻辑代码" class="headerlink" title="JSP脚本、执行Java逻辑代码"></a>JSP脚本、执行Java逻辑代码</h3><blockquote>
<p>&lt;% java代码 %&gt;</p>
</blockquote>
<h3 id="JSP声明：定义java方法"><a href="#JSP声明：定义java方法" class="headerlink" title="JSP声明：定义java方法"></a>JSP声明：定义java方法</h3><blockquote>
<p>&lt;%! 声明方法 %&gt;</p>
</blockquote>
<h3 id="JSP表达式：把Java对象直接输出到HTML页面中"><a href="#JSP表达式：把Java对象直接输出到HTML页面中" class="headerlink" title="JSP表达式：把Java对象直接输出到HTML页面中"></a>JSP表达式：把Java对象直接输出到HTML页面中</h3><blockquote>
<p>&lt;%= java变量 %&gt;</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJsp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyJsp</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.dream.xiaobo.jsp.MyJsp&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;小博来复习JavaWeb了&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">      &lt;h1 style=<span class="string">&quot;color: red&quot;</span>&gt;Hello Java Web&lt;/h1&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">      &lt;tr style=<span class="string">&quot;color: red&quot;</span>&gt;</span><br><span class="line">          &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;%</span><br><span class="line">        List&lt;MyJsp&gt; list = <span class="keyword">new</span> ArrayList&lt;MyJsp&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> MyJsp(<span class="number">1</span>,<span class="string">&quot;小博&quot;</span>,<span class="number">21</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> MyJsp(<span class="number">2</span>,<span class="string">&quot;小张&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> MyJsp(<span class="number">3</span>,<span class="string">&quot;小金&quot;</span>,<span class="number">24</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">      %&gt;</span><br><span class="line">      &lt;tr style=<span class="string">&quot;color: blue&quot;</span>&gt;</span><br><span class="line">          &lt;td&gt;&lt;%=list.get(i).getId()%&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;%=list.get(i).getName()%&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;%=list.get(i).getAge()%&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;%</span><br><span class="line">          &#125;</span><br><span class="line">      %&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="JSP内置对象9个"><a href="#JSP内置对象9个" class="headerlink" title="JSP内置对象9个"></a>JSP内置对象9个</h3><table>
<thead>
<tr>
<th>方法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>request</td>
<td>表示一次请求、HttpServletRequest</td>
</tr>
<tr>
<td>response</td>
<td>表示一次响应、HttpServletResponse</td>
</tr>
<tr>
<td>pageContext</td>
<td>页面上下文、获取页面信息、pageContext</td>
</tr>
<tr>
<td>session</td>
<td>表示一次会话、保存用户信息、HttpSession</td>
</tr>
<tr>
<td>appliction</td>
<td>表时当前Web应用、全局对象、保存所有用户共享信息、ServletContext</td>
</tr>
<tr>
<td>config</td>
<td>当前JSP对应的Servlet的ServletConfig对象、获取当前Servlet的信息</td>
</tr>
<tr>
<td>out</td>
<td>向浏览器输出数据、JspWriter</td>
</tr>
<tr>
<td>page</td>
<td>当前JSP对应的Servlet对象、Servlet</td>
</tr>
<tr>
<td>execption</td>
<td>表示JSP页面发生的异常、Exception</td>
</tr>
</tbody></table>
<h3 id="Request常用方法"><a href="#Request常用方法" class="headerlink" title="Request常用方法"></a>Request常用方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>String getParameter（String key）</td>
<td>获取客户端传来的参数</td>
</tr>
<tr>
<td>void setAttribute（String key,Object value）</td>
<td>通过键值对的形式保存数据</td>
</tr>
<tr>
<td>Object getAttribute（String key）</td>
<td>通过key取出value</td>
</tr>
<tr>
<td>RequestDispatcher gerRequestDispatcher（String path）</td>
<td>返回一个RequestDispatcher对象、该对象的forward方法用于请求转发</td>
</tr>
<tr>
<td>String[] getParameterValues()</td>
<td>获取客户端传来的多个同名参数</td>
</tr>
<tr>
<td>void setCharacterEncoding(String charset)</td>
<td>指定每个请求的编码</td>
</tr>
</tbody></table>
<h3 id="HTTP请求状态码"><a href="#HTTP请求状态码" class="headerlink" title="HTTP请求状态码"></a>HTTP请求状态码</h3><ul>
<li>200: 正常</li>
<li>403：无权限</li>
<li>404：资源找不到</li>
<li>400：请求类型不匹配</li>
<li>500：程序抛出异常</li>
</ul>
<h3 id="Response常用方法"><a href="#Response常用方法" class="headerlink" title="Response常用方法"></a>Response常用方法</h3><blockquote>
<p>sendRedirect（String path）重定向、页面之间的跳转</p>
</blockquote>
<h3 id="转发和重定向的区别"><a href="#转发和重定向的区别" class="headerlink" title="转发和重定向的区别"></a>转发和重定向的区别</h3><blockquote>
<p>转发是将同一个请求传给下一个页面<br>重定向是创建一个新的请求传给下一个页面、之前的请求结束生命周期<br>转发：同一个请求在服务器之间传递、地址栏不变、服务器跳转<br>重定向：由客户端发送一次新的请求来访问跳转后的目标资源、地址栏发生改变、客户端跳转  </p>
</blockquote>
<h3 id="简单实现登录模拟转发和重定向"><a href="#简单实现登录模拟转发和重定向" class="headerlink" title="简单实现登录模拟转发和重定向"></a>简单实现登录模拟转发和重定向</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;请登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 style=<span class="string">&quot;color: aqua&quot;</span>&gt;请您登陆&lt;/h1&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/testServlet&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        账号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userName&quot;</span> placeholder=<span class="string">&quot;请输入账号&quot;</span> /&gt;&lt;br&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;passWord&quot;</span> placeholder=<span class="string">&quot;请输入密码&quot;</span> /&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/testServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String userName = req.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        String passWord = req.getParameter(<span class="string">&quot;passWord&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(userName.equals(<span class="string">&quot;admin&quot;</span>) &amp;&amp; passWord.equals(<span class="string">&quot;xiaobo&quot;</span>)) &#123;</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/index.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.dream.xiaobo.jsp.MyJsp&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;小博来复习JavaWeb了&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">      &lt;h1 style=<span class="string">&quot;color: red&quot;</span>&gt;Hello Java Web&lt;/h1&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">      &lt;tr style=<span class="string">&quot;color: red&quot;</span>&gt;</span><br><span class="line">          &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;%</span><br><span class="line">        List&lt;MyJsp&gt; list = <span class="keyword">new</span> ArrayList&lt;MyJsp&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> MyJsp(<span class="number">1</span>,<span class="string">&quot;小博&quot;</span>,<span class="number">21</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> MyJsp(<span class="number">2</span>,<span class="string">&quot;小张&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> MyJsp(<span class="number">3</span>,<span class="string">&quot;小金&quot;</span>,<span class="number">24</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">      %&gt;</span><br><span class="line">      &lt;tr style=<span class="string">&quot;color: blue&quot;</span>&gt;</span><br><span class="line">          &lt;td&gt;&lt;%=list.get(i).getId()%&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;%=list.get(i).getName()%&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;%=list.get(i).getAge()%&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;%</span><br><span class="line">          &#125;</span><br><span class="line">      %&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Session（用户会话）"><a href="#Session（用户会话）" class="headerlink" title="Session（用户会话）"></a>Session（用户会话）</h2><blockquote>
<p>客户端和服务器之间发生的一系列连续的请求和响应的过程、打开浏览器进行操作到关闭浏览器的过程</p>
</blockquote>
<h3 id="会话状态"><a href="#会话状态" class="headerlink" title="会话状态"></a>会话状态</h3><blockquote>
<p>服务器和浏览器在会话过程中产生的状态信息、借助会话状态、服务器把属于同一次会话的一系列请求和响应关联系起来</p>
</blockquote>
<p><strong>实现会话的两种形式</strong></p>
<ul>
<li>Session</li>
<li>Cookie</li>
</ul>
<h3 id="Session常用的方法"><a href="#Session常用的方法" class="headerlink" title="Session常用的方法"></a>Session常用的方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>String getId()</td>
<td>获取SessionID</td>
</tr>
<tr>
<td>void setMaxInactiveInterval(int interval)</td>
<td>设置Session的失效时间、单位为秒</td>
</tr>
<tr>
<td>int getMaxInactiveInterval()</td>
<td>获取Session的失效时间</td>
</tr>
<tr>
<td>void invalldate()</td>
<td>设置Session立即失效</td>
</tr>
<tr>
<td>Object getAttribute(String key)</td>
<td>通过键获取对应的数据</td>
</tr>
<tr>
<td>void removeAttribute(String key)</td>
<td>通过键删除对应的数据</td>
</tr>
</tbody></table>
<h3 id="Session简单应用"><a href="#Session简单应用" class="headerlink" title="Session简单应用"></a>Session简单应用</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 style=<span class="string">&quot;color: red&quot;</span>&gt;请登录&lt;/h1&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;loginServlet&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table style=<span class="string">&quot;color: blue&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userName&quot;</span> placeholder=<span class="string">&quot;请输入用户用&quot;</span> /&gt;&lt;br&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;passWord&quot;</span> placeholder=<span class="string">&quot;请输入密码&quot;</span> /&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span> /&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;reset&quot;</span> value=<span class="string">&quot;重置&quot;</span> /&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String myUserName;</span><br><span class="line">    <span class="keyword">private</span> String myPassWord;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        myUserName = config.getInitParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        myPassWord = config.getInitParameter(<span class="string">&quot;passWord&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.getSession().invalidate();</span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String userName = req.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        String passWord = req.getParameter(<span class="string">&quot;passWord&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(userName.equals(myUserName) &amp;&amp; passWord.equals(myPassWord))&#123;</span><br><span class="line">            HttpSession session = req.getSession();</span><br><span class="line">            session.setAttribute(<span class="string">&quot;userName&quot;</span>, userName);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/index.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.dream.xiaobo.session.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>userName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>passWord<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>xiaobo<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/loginServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1 style=<span class="string">&quot;color: aqua&quot;</span>&gt;欢迎来到</span><br><span class="line">        &lt;%= request.getSession().getAttribute(<span class="string">&quot;userName&quot;</span>)</span><br><span class="line">        %&gt;</span><br><span class="line">        的世界&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=<span class="string">&quot;/loginServlet&quot;</span>&gt;登出&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><blockquote>
<p>Cookie是服务器端在HTTP响应中附带传给浏览器的一文本文件、一旦浏览器保存某个Cookie、在之后的请求和响应中、会将Cookie来回传递、进而通过Cookie这个载体完成客户端和服务端的数据交互</p>
</blockquote>
<h3 id="Cookie创建"><a href="#Cookie创建" class="headerlink" title="Cookie创建"></a>Cookie创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        resp.addCookie(cookie);</span><br></pre></td></tr></table></figure>

<h3 id="Cookie读取"><a href="#Cookie读取" class="headerlink" title="Cookie读取"></a>Cookie读取</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies)&#123;</span><br><span class="line">            out.write(cookie.getName() + <span class="string">&quot;\t&quot;</span> + cookie.getValue() + <span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Cookie常用方法"><a href="#Cookie常用方法" class="headerlink" title="Cookie常用方法"></a>Cookie常用方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>void setMaxAge(int age)</td>
<td>设置Cookie有效时间、单位为秒</td>
</tr>
<tr>
<td>int getMaxAge()</td>
<td>获取Cookie的有效时间</td>
</tr>
<tr>
<td>String getName()</td>
<td>获取Cookie的name</td>
</tr>
<tr>
<td>String getValue()</td>
<td>获取Cookie的value</td>
</tr>
</tbody></table>
<h2 id="Session和Cookie的区别"><a href="#Session和Cookie的区别" class="headerlink" title="Session和Cookie的区别"></a>Session和Cookie的区别</h2><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><blockquote>
<p>保存在服务器<br>保存的数据是Object<br>随着会话的结束而销毁<br>保存着重要信息   </p>
</blockquote>
<h4 id="存储用户信息"><a href="#存储用户信息" class="headerlink" title="存储用户信息"></a>存储用户信息</h4><ul>
<li>存</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaobo&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>取</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getAttribute(<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>生命周期</li>
</ul>
<blockquote>
<p>服务器端：只要Web应用程序关闭、就销毁<br>客户端：只要关闭浏览器就销毁  </p>
</blockquote>
<ul>
<li>退出登录<br><strong>invalidate()</strong></li>
</ul>
<h3 id="Cookie-1"><a href="#Cookie-1" class="headerlink" title="Cookie"></a>Cookie</h3><blockquote>
<p>保存在浏览器<br>保存的数据是String<br>可以长期保存在浏览器中、与会话无关<br>保存不重要信息</p>
</blockquote>
<h4 id="存储用户信息-1"><a href="#存储用户信息-1" class="headerlink" title="存储用户信息"></a>存储用户信息</h4><ul>
<li>存</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addCookie(<span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaobo&quot;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>取</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies)&#123;</span><br><span class="line">            out.write(cookie.getName() + <span class="string">&quot;\t&quot;</span> + cookie.getValue());</span><br></pre></td></tr></table></figure>

<ul>
<li>生命周期</li>
</ul>
<blockquote>
<p>服务器端：服务器关闭时Cookie不被销毁<br>客户端：默认时只要浏览器关闭时就销毁、但是可以通过setMaxAge()方法设置有效期、一旦设置到了有效期就有设置的时间决定什么时候销毁了</p>
</blockquote>
<ul>
<li>退出登录<br><strong>setMaxAge(0)</strong></li>
</ul>
]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>集合框架&amp;泛型</title>
    <url>/posts/29725478/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/20210612/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210611081249.5nv13ksuk5k0.png" alt="集合框架&amp;泛型"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><blockquote>
<p>一个长度可以改变、可以保持任意数据类型的动态数组</p>
</blockquote>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><table>
<thead>
<tr>
<th>接口</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Collection</td>
<td>集合框架最基础的接口、最顶层的接口</td>
</tr>
<tr>
<td>List</td>
<td>Collection的子接口、存储有序、不唯一（元素可重复）的对象、最常用的接口</td>
</tr>
<tr>
<td>Set</td>
<td>Collection的子接口、存储无序、唯一（元素不可重复）的对象</td>
</tr>
<tr>
<td>Map</td>
<td>独立于Collection的另一个接口、最顶层的接口、存储一组键值对、提供键到值的映射</td>
</tr>
<tr>
<td>lerator</td>
<td>输出集合元素的接口、一般适用于无序集合、从前往后输出</td>
</tr>
<tr>
<td>Listterator</td>
<td>lterator子接口、可以双向输出集合中的元素</td>
</tr>
<tr>
<td>Enumeration</td>
<td>传统的输出接口、已经被lterator取代</td>
</tr>
<tr>
<td>SortedSet</td>
<td>Set的子接口、可以对集合中的元素进行排序</td>
</tr>
<tr>
<td>Queue</td>
<td>队列接口</td>
</tr>
<tr>
<td>Map.Entry</td>
<td>Map的内部接口、描述Map中存储的一组键值对元素</td>
</tr>
</tbody></table>
<h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><blockquote>
<p>最基础的父接口、可以存储一组无序、不唯一的对象<br>是Lterable接口的子接口</p>
</blockquote>
<h2 id="Collection接口常用方法"><a href="#Collection接口常用方法" class="headerlink" title="Collection接口常用方法"></a>Collection接口常用方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>int size()</td>
<td>获取集合长度</td>
</tr>
<tr>
<td>boolean isEmpty()</td>
<td>判断集合中是否存在某个对象</td>
</tr>
<tr>
<td>Iterator iterator()</td>
<td>实例化Iterator接口、遍历集合</td>
</tr>
<tr>
<td>Object[] toArray()</td>
<td>将集合转换为一个Object数组</td>
</tr>
<tr>
<td>T[] toArray(T[] a)</td>
<td>将集合转换为一个指定数据类型的数组</td>
</tr>
<tr>
<td>boolean add(E e)</td>
<td>向集合中添加元素</td>
</tr>
<tr>
<td>boolean reomove(Object o)</td>
<td>从集合中删除元素</td>
</tr>
<tr>
<td>boolean containsAll(Collection c)</td>
<td>判断集合中是否存在另一个集合的所有元素</td>
</tr>
<tr>
<td>boolean addAll(Collection c)</td>
<td>向集合中添加某个集合的所有元素</td>
</tr>
<tr>
<td>boolean removeAll(Collection c)</td>
<td>从集合中删除某个集合的所有元素</td>
</tr>
<tr>
<td>void clear()</td>
<td>清除集合中的所有元素</td>
</tr>
<tr>
<td>boolean equals(Collection c)</td>
<td>判断两个集合是否相等</td>
</tr>
<tr>
<td>int hashCode()</td>
<td>返回集合的哈希值</td>
</tr>
</tbody></table>
<h2 id="Collection子接口"><a href="#Collection子接口" class="headerlink" title="Collection子接口"></a>Collection子接口</h2><blockquote>
<p>list:存放有序、不唯一的元素<br>Set:存放无序、唯一的元素<br>Queue:队列接口</p>
</blockquote>
<h2 id="List接口扩展方法"><a href="#List接口扩展方法" class="headerlink" title="List接口扩展方法"></a>List接口扩展方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>T get(int index)</td>
<td>通过下标返回集合中对应位置的元素</td>
</tr>
<tr>
<td>T Set(int index, T element</td>
<td>在集合中的指定位置存入对象</td>
</tr>
<tr>
<td>int indexOf(Object o)</td>
<td>从前向后查找某个对象在集合中的位置</td>
</tr>
<tr>
<td>int lastIndexOf(Object o)</td>
<td>从后向前查找某个对象在集合中的位置</td>
</tr>
<tr>
<td>ListLterator ListLterator()</td>
<td>实例化ListLterator接口、用来遍历List集合</td>
</tr>
<tr>
<td>List subList(int fromIndex, int toIndex)</td>
<td>通过下标截取List集合</td>
</tr>
</tbody></table>
<h2 id="List接口的实现类"><a href="#List接口的实现类" class="headerlink" title="List接口的实现类"></a>List接口的实现类</h2><blockquote>
<p>ArrayList:基于数组的实现、非线程安全、效率高、所有的方法都没有synchronized修饰<br>Vector:线程安全、效率低、实现线程安全直接通过synchronized修饰方法来完成<br>Stack:Vector的子类、实现了栈的数据结构、后进先出<br>LikedList:实现先进先出对列、采用链表形式存储</p>
</blockquote>
<h3 id="Stack操作栈的方法"><a href="#Stack操作栈的方法" class="headerlink" title="Stack操作栈的方法"></a>Stack操作栈的方法</h3><ul>
<li>push：入栈方法  </li>
<li>peek: 取出栈顶元素、将栈顶复制一份取出、去完之后栈内的数据结构不变  </li>
<li>pop: 取出栈顶元素、直接取出栈顶元素、取完之后站内数据减一  </li>
</ul>
<h3 id="ArrayList和LikedList的区别"><a href="#ArrayList和LikedList的区别" class="headerlink" title="ArrayList和LikedList的区别"></a>ArrayList和LikedList的区别</h3><blockquote>
<p>内存中存储的形式不同、ArrayList采用的是数组的方式、LikedList采用的是链表的形式<br>数组在内存中的存储空间是连续的、读取快、增删慢<br>因为数组在内存中是连续的、所以数据可以通过寻址公式很快的找到目标元素的内存地址、因为内存是连续的、所以新增或删除元素、必然需要移动数据、而且数组长度越长、需要移动的元素越多、所以操作越慢<br>链表在内存中存储空间是不连续的，读取慢，增删快<br>链表在内存中是不连续的、没有固定的公式可以使用、要读取只能从第一位开始一直遍历目标元素、数据规模越大、操作越慢<br>增删快、因为只需要重新设置目标元素前后两个结点的后置指针即可、与数据规模无关</p>
</blockquote>
<h3 id="LinkedList和Stack的pop方法区别"><a href="#LinkedList和Stack的pop方法区别" class="headerlink" title="LinkedList和Stack的pop方法区别"></a>LinkedList和Stack的pop方法区别</h3><blockquote>
<p>相同点:都是取出集合中第一个元素<br>不同点:两者的顺序是相反的、Stack是后进先出原则、所以pop方法取出的是最后一个元素、LinkedList是先进先出原则、所以pop方法取出的是第一个元素</p>
</blockquote>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote>
<p>Set是Collection的子接口、Set集合是以散列的形式存储数据、所以元素是没有顺序的、可以存储一组无序且唯一的数据</p>
</blockquote>
<h2 id="Set常用实现类"><a href="#Set常用实现类" class="headerlink" title="Set常用实现类"></a>Set常用实现类</h2><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><blockquote>
<p>存储一组无序且唯一的对象<br>无序：元素的存储顺序和遍历顺序不一致</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet hashSet = <span class="keyword">new</span> HashSet();</span><br><span class="line"></span><br><span class="line">        hashSet.add(<span class="string">&quot;Hellol&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;wyb&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(hashSet);</span><br><span class="line">        System.out.println(<span class="string">&quot;长度为：&quot;</span> + hashSet.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        Iterator iterator = hashSet.iterator();</span><br><span class="line">        <span class="comment">//游标下一个如果不为空则为真</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//移动游标</span></span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><blockquote>
<p>存储一组有序且唯一的元素<br>有序:元素的存储顺序和遍历顺序一致</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedHashSet hashSet = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line"></span><br><span class="line">        hashSet.add(<span class="string">&quot;Hellol&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;wyb&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(hashSet);</span><br><span class="line">        System.out.println(<span class="string">&quot;长度为：&quot;</span> + hashSet.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        Iterator iterator = hashSet.iterator();</span><br><span class="line">        <span class="comment">//游标下一个如果不为空则为真</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//移动游标</span></span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="LinkedHashSet-如何判断两个对象是否相等"><a href="#LinkedHashSet-如何判断两个对象是否相等" class="headerlink" title="LinkedHashSet 如何判断两个对象是否相等"></a>LinkedHashSet 如何判断两个对象是否相等</h4><blockquote>
<p>首先会判断两个对象的 hashCode 是否相等<br>如果不相等、则认为不是同一个对象<br>如果相等、在进行equals判断、equals相等、则两对象相等、否则不等</p>
</blockquote>
<h4 id="什么是HashCode"><a href="#什么是HashCode" class="headerlink" title="什么是HashCode"></a>什么是HashCode</h4><blockquote>
<p>将对象的内部信息、通过某种特定规则转换成一个散列值、就是该对象的 hashCode</p>
</blockquote>
<h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><blockquote>
<p>存储一组有序且唯一的数据<br>有序:集合内部自动对所有的元素按照升序进行排列、无论存入的顺序是什么、遍历的时候都一定按照升序输出</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeSet treeSet = <span class="keyword">new</span> TreeSet();</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Data(<span class="number">6</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Data(<span class="number">5</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Data(<span class="number">3</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Data(<span class="number">4</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Data(<span class="number">2</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Data(<span class="number">6</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> Data(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        Iterator iterator = treeSet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Data</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Data</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//instanceof判断是否是为一个类型</span></span><br><span class="line">    <span class="comment">//对象o是否为Data类型</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回值：</span></span><br><span class="line"><span class="comment">     * 1 表示A大于B</span></span><br><span class="line"><span class="comment">     * 0 表示A等于B</span></span><br><span class="line"><span class="comment">     * -1 表示A小于B</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Data)&#123;</span><br><span class="line">            Data data = (Data) o;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.num &gt; data.num)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.num == data.num)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Data&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;num=&quot;</span> + num +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><blockquote>
<p>Map 可以操作一对元素、因为 Map 存储结构是 key - value 映射/<br>Map接口定义时使用了泛型、并且定义了两个泛型K和V、K表示Key键、V表示value值</p>
</blockquote>
<h3 id="Map常用的方法"><a href="#Map常用的方法" class="headerlink" title="Map常用的方法"></a>Map常用的方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td>int size()</td>
<td align="center">获取集合长度</td>
</tr>
<tr>
<td>boolean isEmpty()</td>
<td align="center">判断集合是否为空</td>
</tr>
<tr>
<td>boolean containsKey(Object key)</td>
<td align="center">判断集合中是否存在某个 key</td>
</tr>
<tr>
<td>boolean containsValue(Object value)</td>
<td align="center">判断集合中是否存在某个 value</td>
</tr>
<tr>
<td>V get(Object key)</td>
<td align="center">取出集合中 key 对应的 value</td>
</tr>
<tr>
<td>V put(K key,V value)</td>
<td align="center">向集合中存入一组 key-value 的元素</td>
</tr>
<tr>
<td>V remove(Object key)</td>
<td align="center">删除集合中 key 对应的 value</td>
</tr>
<tr>
<td>void putAll(Map map)</td>
<td align="center">向集合中添加另外一个 Map</td>
</tr>
<tr>
<td>void clear()</td>
<td align="center">清除集合中所有的元素</td>
</tr>
<tr>
<td>Set《k》 keySet()</td>
<td align="center">取出集合中所有的 key，返回一个 Set</td>
</tr>
<tr>
<td>Collection《v》 values()</td>
<td align="center">取出集合中所有的 value，返回一个 Collection</td>
</tr>
<tr>
<td>int hashCode()</td>
<td align="center">获取集合的散列值</td>
</tr>
<tr>
<td>boolean equals(Object o)</td>
<td align="center">比较两个集合是否相等</td>
</tr>
</tbody></table>
<h3 id="Map接口的实现类"><a href="#Map接口的实现类" class="headerlink" title="Map接口的实现类"></a>Map接口的实现类</h3><h4 id="hashMap"><a href="#hashMap" class="headerlink" title="hashMap"></a>hashMap</h4><blockquote>
<p>存储一组无序、key不可以重复、value可以重复的元素<br>非线程安全的、性能高</p>
</blockquote>
<h4 id="hashtable"><a href="#hashtable" class="headerlink" title="hashtable"></a>hashtable</h4><blockquote>
<p>存储一组无序、key不可以重复、value可以重复的元素<br>线程安全的、性能低</p>
</blockquote>
<h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><blockquote>
<p>存储一组有序、key不可以重复、value可以重复的元素、可以按照key进行排序</p>
</blockquote>
<h2 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h2><blockquote>
<p>专门提供一些对集合的操纵、Collections针对集合的工具类<br>Arrays针对数组的工具类</p>
</blockquote>
<h2 id="Collection工具类的常用方法"><a href="#Collection工具类的常用方法" class="headerlink" title="Collection工具类的常用方法"></a>Collection工具类的常用方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>public static sort()</td>
<td>对集合进行排序</td>
</tr>
<tr>
<td>public static int binarySearch(List list,Object v)</td>
<td>查找 v 在 list 中的位置，集合必须是生序排列</td>
</tr>
<tr>
<td>public static get(List list,int index)</td>
<td>返回 list 中 index 位置的值</td>
</tr>
<tr>
<td>public static void reverse(List list)</td>
<td>对 list 进行反序输出</td>
</tr>
<tr>
<td>public static void swap(List list,int i,int j)</td>
<td>交换集合中指定位置的两个元素</td>
</tr>
<tr>
<td>public static void fill(List list,Object obj)</td>
<td>将集合中所有元素替换成 obj</td>
</tr>
<tr>
<td>public static Object min(List list)</td>
<td>返回集合中的最小值</td>
</tr>
<tr>
<td>public static Object max(List list)</td>
<td>返回集合中的最大值</td>
</tr>
<tr>
<td>public static boolean replaceAll(List list,Object old,Object new)</td>
<td>在 list 集合中用 new 替换 old</td>
</tr>
<tr>
<td>public static boolean addAll(List list,Object… obj)</td>
<td>向集合中添加元素</td>
</tr>
</tbody></table>
<h3 id="Object…可变参数"><a href="#Object…可变参数" class="headerlink" title="Object…可变参数"></a>Object…可变参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Object... arg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数可以是任意个数、但是类型必须匹配</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        Collections.addAll(arrayList,</span><br><span class="line">                            <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">&quot;小博&quot;</span>,<span class="number">21</span>),</span><br><span class="line">                            <span class="keyword">new</span> Student(<span class="number">2</span>,<span class="string">&quot;小张&quot;</span>,<span class="number">22</span>),</span><br><span class="line">                            <span class="keyword">new</span> Student(<span class="number">3</span>,<span class="string">&quot;小金&quot;</span>,<span class="number">24</span>)</span><br><span class="line">                );</span><br><span class="line">        Collections.sort(arrayList);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Student) &#123;</span><br><span class="line">            Student student = (Student) o;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.age &gt; student.age) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.age == student.age) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.25tpl5a324tc.png" alt="集合框架"></p>
<h2 id="泛型（Generics）"><a href="#泛型（Generics）" class="headerlink" title="泛型（Generics）"></a>泛型（Generics）</h2><blockquote>
<p>在类定义时不指定类中信息的具体数据类型、而是暂时用一个标识来替代、当外部实例化对象时再来指定具体的数据类型</p>
</blockquote>
<p><strong>直接定义</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> B b;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> C <span class="title">test</span><span class="params">(D d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> C();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>泛型定义</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="title">T</span>,<span class="title">E</span>,<span class="title">M</span>&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> T b;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">test</span><span class="params">(M m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> E;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">A&lt;B,C,D&gt; a = <span class="keyword">new</span> A();</span><br></pre></td></tr></table></figure>

<h3 id="使用泛型的优点"><a href="#使用泛型的优点" class="headerlink" title="使用泛型的优点"></a>使用泛型的优点</h3><blockquote>
<p>极大地提升程序的灵活性、提升类的扩展性<br>可以指代成员变量类型、方法的参数类型、方法的返回值类型</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Time</span>&lt;<span class="title">H</span>,<span class="title">M</span>,<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> H hour;</span><br><span class="line">    <span class="keyword">private</span> M minute;</span><br><span class="line">    <span class="keyword">private</span> S second;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> H <span class="title">getHour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHour</span><span class="params">(H hour)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hour = hour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> M <span class="title">getMinute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMinute</span><span class="params">(M minute)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.minute = minute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> S <span class="title">getSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecond</span><span class="params">(S second)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.second = second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Time&lt;Integer,Integer,Double&gt; time = <span class="keyword">new</span> Time&lt;&gt;();</span><br><span class="line">        time.setHour(<span class="number">99</span>);</span><br><span class="line">        time.setMinute(<span class="number">11</span>);</span><br><span class="line">        time.setSecond(<span class="number">16.0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在时间是：&quot;</span>+time.getHour() + <span class="string">&quot;/&quot;</span> +</span><br><span class="line">                                        time.getMinute() + <span class="string">&quot;:&quot;</span> +</span><br><span class="line">                                        time.getSecond()</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型的通配符"><a href="#泛型的通配符" class="headerlink" title="泛型的通配符"></a>泛型的通配符</h3><blockquote>
<p>?: 表示可以使用任意的泛型类型对象、使其具备通用性<br>多态在泛型中不适用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list2.add(<span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        getList(list1);</span><br><span class="line">        getList(list2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getList</span><span class="params">(ArrayList&lt;?&gt; arrayList)</span></span>&#123;</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型的上限和下限"><a href="#泛型的上限和下限" class="headerlink" title="泛型的上限和下限"></a>泛型的上限和下限</h3><h4 id="上限"><a href="#上限" class="headerlink" title="上限"></a>上限</h4><blockquote>
<p>实例化具体的数据类型、可以是上限类型的子类或者是上限类型的本身、用extends表示、 类名&lt;泛型标识 extends 上限类名&gt;</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span>&lt;<span class="title">M</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        test(<span class="keyword">new</span> T&lt;Integer&gt;());</span><br><span class="line">        test(<span class="keyword">new</span> T&lt;Float&gt;());</span><br><span class="line">        test(<span class="keyword">new</span> T&lt;Double&gt;());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(T&lt;? extends Number&gt; t)</span></span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="下限"><a href="#下限" class="headerlink" title="下限"></a>下限</h4><blockquote>
<p>实例化具体的数据类型、可以是下限类型的父类或者是下限类型的本身、用super表示  类名&lt;泛型标识 super 下限类名&gt;</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span>&lt;<span class="title">M</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        test2(<span class="keyword">new</span> T&lt;Object&gt;());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(T&lt;? <span class="keyword">super</span> String&gt; t)</span></span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现类在定义时继续使用泛型标识"><a href="#实现类在定义时继续使用泛型标识" class="headerlink" title="实现类在定义时继续使用泛型标识"></a>实现类在定义时继续使用泛型标识</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt;  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInterfaceImpl</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现类在定义时直接给出具体的数据类型"><a href="#实现类在定义时直接给出具体的数据类型" class="headerlink" title="实现类在定义时直接给出具体的数据类型"></a>实现类在定义时直接给出具体的数据类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl2</span> <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInterfaceImpl2</span><span class="params">(String obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程总结</title>
    <url>/posts/2215251221/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%B9%B6%E5%8F%91.3vjf5vr0q2g.png" alt="并发"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="生产者和消费者模式"><a href="#生产者和消费者模式" class="headerlink" title="生产者和消费者模式"></a>生产者和消费者模式</h2><blockquote>
<p>一个生产环境中、生产者和消费者在同一时间段内共享同一块缓冲区、生产者负责向缓冲区添加数据、消费者负责从缓冲区取出数据</p>
</blockquote>
<h3 id="卖汉堡"><a href="#卖汉堡" class="headerlink" title="卖汉堡"></a>卖汉堡</h3><p><strong>汉堡类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hamburger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hamburger&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hamburger</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>容器类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Hamburger[] array = <span class="keyword">new</span> Hamburger[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向容器中添加汉堡</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Hamburger hamburger)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(index == array.length)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">        array[index] = hamburger;</span><br><span class="line">        index++;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了一个汉堡&quot;</span> + hamburger);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从容器中取出汉堡</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Hamburger <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//让正在访问当前资源的线程暂停</span></span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//唤醒之前暂停的线程</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">        index--;</span><br><span class="line">        System.out.println(<span class="string">&quot;取出了一个汉堡&quot;</span> + array[index]);</span><br><span class="line">        <span class="keyword">return</span> array[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>生产者类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Container container;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Container container)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将汉堡装进去</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)&#123;</span><br><span class="line">            Hamburger hamburger = <span class="keyword">new</span> Hamburger(i);</span><br><span class="line">            <span class="keyword">this</span>.container.push(hamburger);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>消费者类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Container container;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Container container)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">this</span>.container.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Container container = <span class="keyword">new</span> Container();</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(container);</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(container);</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            producer.producer();</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            consumer.consumer();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>必须使用 while 判断，不能用 if，因为 if 会存在线程虚假唤醒的问题，虚假唤醒就是一些 wait 方法会在除了 notify 的其他情况被唤醒，不是真正的唤醒，使用 while 完成多重检测，避免这一问题</p>
<h2 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h2><h3 id="并发和并行的区别"><a href="#并发和并行的区别" class="headerlink" title="并发和并行的区别"></a>并发和并行的区别</h3><blockquote>
<p>并发（concurrency）:多线程同时操作同一个资源、但并不是真正的同时操作、而是交替操作、单核CPU的情况下、资源按时间段分配给多个线程<br>并行（parallelism）:是真正的多个线程同时执行、多核CPU、每个线程使用一个CPU资源来运行</p>
</blockquote>
<h3 id="高并发标准"><a href="#高并发标准" class="headerlink" title="高并发标准"></a>高并发标准</h3><blockquote>
<p>QPS:每秒响应的HTTP请求数量<br>吞吐量:单位时间内处理的请求数<br>平均响应时间:系统对一个请求作出响应的评价时间<br>并发用户数:同时称在正常使用系统的用户人数<br>QPS = 并发数/平均响应时间</p>
</blockquote>
<h3 id="提高系统并发能力的方式"><a href="#提高系统并发能力的方式" class="headerlink" title="提高系统并发能力的方式"></a>提高系统并发能力的方式</h3><h4 id="垂直扩展"><a href="#垂直扩展" class="headerlink" title="垂直扩展"></a>垂直扩展</h4><blockquote>
<p>提升单机的硬件设备<br>提升单机的架构性能</p>
</blockquote>
<h4 id="水平扩展"><a href="#水平扩展" class="headerlink" title="水平扩展"></a>水平扩展</h4><blockquote>
<p>集群<br>分布式<br>站点层扩展<br>服务层扩展<br>数据层扩展</p>
</blockquote>
<h2 id="并发编程-1"><a href="#并发编程-1" class="headerlink" title="并发编程"></a>并发编程</h2><blockquote>
<p>一种描述使系统允许多个任务可以在重叠的时间段内执行的设计结构、不是指多个任务在同一时间段内执行、而是指系统具备处理多个任务在同一时间段内同时执行的能力</p>
</blockquote>
<h3 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h3><blockquote>
<p>JDK提供给的一个工具包、用来帮助开发者完成Java并发编程</p>
</blockquote>
<h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p><strong>java默认线程数为2个</strong></p>
<blockquote>
<p>main主线程<br>GC垃圾回收机制</p>
</blockquote>
<p><strong>java本身无法开启线程、因为java无法操作硬件、只能通过调用本地方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="实现多线程的几种方法"><a href="#实现多线程的几种方法" class="headerlink" title="实现多线程的几种方法"></a>实现多线程的几种方法</h3><blockquote>
<p>继承Thread类<br>实现Runnable接口<br>实现Callable接口</p>
</blockquote>
<p><strong>实现Runnable接口和Callable接口的区别</strong></p>
<blockquote>
<p>Runnable的run方法没有返回值<br>Callable的call方法有返回值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是Callable&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Callable&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyCallable myCallable = <span class="keyword">new</span> MyCallable();</span><br><span class="line">        FutureTask&lt;String&gt; future = <span class="keyword">new</span> FutureTask(myCallable);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(future);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String value = future.get();</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Callable流程分析"><a href="#Callable流程分析" class="headerlink" title="Callable流程分析"></a>Callable流程分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes a result, or throws an exception if unable to do so.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> computed result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception if unable to compute a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       <span class="keyword">this</span>.callable = callable;</span><br><span class="line">       <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets this Future to the result of its computation</span></span><br><span class="line"><span class="comment">     * unless it has been cancelled.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target)</span> </span>&#123;</span><br><span class="line">        init(<span class="keyword">null</span>, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/callable%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B.6yujkl85nyo0.png" alt="callable实现过程"></p>
<h3 id="sleep和wait"><a href="#sleep和wait" class="headerlink" title="sleep和wait"></a>sleep和wait</h3><blockquote>
<p>sleep:让当前线程休眠、不会释放锁<br>wait:让访问当前对象的线程休眠、会释放锁</p>
</blockquote>
<h3 id="synchronized锁"><a href="#synchronized锁" class="headerlink" title="synchronized锁"></a>synchronized锁</h3><blockquote>
<p>synchronized修饰非静态方法、锁定方法的调用者<br>synchronized修饰静态方法、锁定的是类<br>synchronized静态方法和实例方法同时存在、静态方法锁定的是类、实例方法锁定的是对象</p>
</blockquote>
<h3 id="synchronized锁与Lock锁的区别"><a href="#synchronized锁与Lock锁的区别" class="headerlink" title="synchronized锁与Lock锁的区别"></a>synchronized锁与Lock锁的区别</h3><blockquote>
<p>synchronized 自动上锁，自动释放锁，Lock 手动上锁，手动释放锁<br>synchronized 无法判断是否获取到了锁，Lock 可以判断是否拿到了锁<br>synchronized 拿不到锁就会一直等待，Lock 不一定会一直等待<br>synchronized 是 Java 关键字，Lock 是接口<br>synchronized 是非公平锁，Lock 可以设置是否为公平锁  </p>
</blockquote>
<h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><blockquote>
<p>使用 Lock 锁、就不能通过 wait 和 notify 来暂停线程和唤醒线程、而应该使用 Condition 的 await 和 signal 来暂停和唤醒线程</p>
</blockquote>
<h3 id="ConcurrentModificationException并发访问异常"><a href="#ConcurrentModificationException并发访问异常" class="headerlink" title="ConcurrentModificationException并发访问异常"></a>ConcurrentModificationException并发访问异常</h3><p><strong>例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    list.add(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">                    System.out.println(list);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> Vector();</span><br></pre></td></tr></table></figure>

<p>List.add<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/Arraylist.20r5pera9dwg.png" alt="Arraylist"><br>vector.add<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/vector.75opbyocskw0.png" alt="vector"></p>
<h4 id="Collections-synchronizedList"><a href="#Collections-synchronizedList" class="headerlink" title="Collections.synchronizedList"></a>Collections.synchronizedList</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br></pre></td></tr></table></figure>

<h4 id="JUC：CopyOnWriteArrayList"><a href="#JUC：CopyOnWriteArrayList" class="headerlink" title="JUC：CopyOnWriteArrayList"></a>JUC：CopyOnWriteArrayList</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CopyOnwrite写时复制、当我们向一个容器中添加元素时、不直接给容器添加、而是现将容器复制一份、向新的容器中添加数据、添加完成后、再将原来的容器引用指向新的容器</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/CopyOnWriteArrayList.1zhgyo6o7xmo.png" alt="CopyOnWriteArrayList"></p>
<h2 id="JUC-工具类"><a href="#JUC-工具类" class="headerlink" title="JUC 工具类"></a>JUC 工具类</h2><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><blockquote>
<p>当两个线程同时执行时、如果要确保一个线程优先执行、可以使用计时器、让一个线程先执行、再让另一个线程执行</p>
</blockquote>
<h4 id="CountDownLatch减法计数器"><a href="#CountDownLatch减法计数器" class="headerlink" title="CountDownLatch减法计数器"></a>CountDownLatch减法计数器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;---------------xiaobo&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;wyb---------------&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>new CountDownLatch(100)、coutDown()、await()需要联合使用、必须保证计数器清零、所以coutDown() 的调用次数必须大于等于构造函数的参数值</p>
</blockquote>
<h4 id="CyclicBarrier加法计数器"><a href="#CyclicBarrier加法计数器" class="headerlink" title="CyclicBarrier加法计数器"></a>CyclicBarrier加法计数器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">100</span>,()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行完毕、允许通过&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">                <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;--&gt;&quot;</span> + temp);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        cyclicBarrier.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CyclicBarrier设置一个值、await唤醒其他线程、当await唤醒的线程数达到Cyclicbarrier指定的值时、CyclicBarrier所设置的线程被执行<br>lambda表达式里面不能去访问没有final修饰的变量</p>
</blockquote>
<h3 id="Semaphore记数信号量"><a href="#Semaphore记数信号量" class="headerlink" title="Semaphore记数信号量"></a>Semaphore记数信号量</h3><blockquote>
<p>主要使用它来完成限流操作，限制可以访问某些资源的线程数量<br>三个操作:初始化 new Semaphore(5);<br> 获取许可 semaphore.acquire();<br> 释放 semaphore.release();  </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;开始访问&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;------退出访问&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>首先获取信号量、获取到资源才可以执行、执行完毕后需要释放资源、留给下一个线程</p>
</blockquote>
<h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><blockquote>
<p>接口ReadwriteLock、实现类是ReentrantReadWriteLock<br>可以多线程同时读、但是同一时间内只能有一个线程进行写入操作<br>写入锁又称独占锁、只能被一个线程占用<br>读取锁又称共享锁、多个线程可以同时占用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Integer key,String value)</span></span>&#123;</span><br><span class="line">        readWriteLock.writeLock().lock();</span><br><span class="line">        System.out.println(key + <span class="string">&quot;开始写入&quot;</span>);</span><br><span class="line">        map.put(key,value);</span><br><span class="line">        System.out.println(key + <span class="string">&quot;写入完毕&quot;</span>);</span><br><span class="line">        readWriteLock.writeLock().unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Integer key)</span></span>&#123;</span><br><span class="line">        readWriteLock.readLock().lock();</span><br><span class="line">        System.out.println(key + <span class="string">&quot;开始读取&quot;</span>);</span><br><span class="line">        map.get(key);</span><br><span class="line">        System.out.println(key + <span class="string">&quot;读取完毕&quot;</span>);</span><br><span class="line">        readWriteLock.readLock().unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cache cache = <span class="keyword">new</span> Cache();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                cache.write(temp,String.valueOf(temp));</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                cache.read(temp);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><blockquote>
<p>预先创建好一定数量的线程对象、存入缓冲池中、需要用的时候直接从缓冲池中取出、用完之后不要销毁、还回到缓冲池中、为了提高资源的利用率</p>
</blockquote>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><blockquote>
<p>提高线程的利用率<br>提高响应速度<br>便于统一管理线程对象<br>可控制最大并发数</p>
</blockquote>
<h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><blockquote>
<p>核心池的大小<br>线程池的最大容量<br>等待队列<br>拒绝策略</p>
</blockquote>
<h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><blockquote>
<p>1、线程池初始化的时候创建一定数量的线程对象<br>2、如果缓冲池中没有空闲的线程对象、则新来的任务进入等待队列<br>3、如果缓冲池中没有空闲的线程对象、等待队列也已经填满、可以申请再创建一定数量的新线程对象、直到到达线程池的最大值、这时候如果还有新的任务进来、只能选择拒绝。</p>
</blockquote>
<h3 id="底层ThreadPoolExecutor"><a href="#底层ThreadPoolExecutor" class="headerlink" title="底层ThreadPoolExecutor"></a>底层ThreadPoolExecutor</h3><blockquote>
<p>工具类的Executors 底层都是ThreadPoolExecutor</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/ThreadPoolExecutor.5rbs8mdlg4s0.png" alt="ThreadPoolExecutor"></p>
<h3 id="ThreadPoolExecutor核心参数（7个）"><a href="#ThreadPoolExecutor核心参数（7个）" class="headerlink" title="ThreadPoolExecutor核心参数（7个）"></a>ThreadPoolExecutor核心参数（7个）</h3><blockquote>
<p>corePoolSize:核心池的大小<br>maximumPoolSize:线程池的最大容量<br>keepAliveTime:线程存活时间（在没有任务可执行的情况下）、必须是线程池中的数量大于corePoolSize、才生效<br>TimeUnit:存活时间单位<br>BlockingQueue:等待队列、存储等待执行的任务<br>ThreadFactory:线程工厂、用来创建线程对象<br>RejectedExecutionHandler:拒绝策略</p>
</blockquote>
<h3 id="4种拒绝策略"><a href="#4种拒绝策略" class="headerlink" title="4种拒绝策略"></a>4种拒绝策略</h3><blockquote>
<p>AbortPolicy：直接抛出异常<br>DiscardPolicy：放弃任务，不抛出异常<br>DiscardOldestPolicy：尝试与等待队列中最前面的任务去争夺，不抛出异常<br>CallerRunsPolicy：谁调用谁处理</p>
</blockquote>
<h3 id="JUC工具类提供的线程池"><a href="#JUC工具类提供的线程池" class="headerlink" title="JUC工具类提供的线程池"></a>JUC工具类提供的线程池</h3><h4 id="单例线程池"><a href="#单例线程池" class="headerlink" title="单例线程池"></a>单例线程池</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/newSingleThreadExecutor.3mo8czsd9de0.png" alt="newSingleThreadExecutor"></p>
<h4 id="指定数量线程池"><a href="#指定数量线程池" class="headerlink" title="指定数量线程池"></a>指定数量线程池</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/newFixedThreadPool.2hm9813vizy.png" alt="newFixedThreadPool"></p>
<h4 id="缓存线程池"><a href="#缓存线程池" class="headerlink" title="缓存线程池"></a>缓存线程池</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newCachedThreadPool();</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/newCachedThreadPool.5pplbhuy6880.png" alt="newCachedThreadPool"></p>
<h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executorService = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 自定义参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        executorService = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                <span class="number">3</span>,</span><br><span class="line">                <span class="number">1L</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            executorService.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;开始办理业务&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a>Volatile关键字</h2><blockquote>
<p>Volatile 是 JVM 提供的轻量级同步机制、可见性、主内存对象线程可见  </p>
</blockquote>
<p><strong>一个线程执行完任务之后，会把变量存回到主内存中，并且从主内存中读取当前最新的值，如果是一个空的任务，则不会重新读取主内存中的值</strong></p>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><blockquote>
<p>函数直接或者间接调用函数本身</p>
</blockquote>
<p><strong>需要满足条件</strong></p>
<blockquote>
<p>一个父问题可以拆分成若干个子问题，并且若干子问题的结果汇总起来就是父问题的答案<br>父问题和子问题，解题思路必须完全一致，只是数据规模不同<br>存在终止条件、问题在不断拆分的同时，一定要在某个节点终止拆分</p>
</blockquote>
<p><strong>正确的开始、微小的长进、然后持续、嘿、我是小博、带你一起看我目之所及的世界……</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>みんなの日本語第一課</title>
    <url>/posts/3985617401/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%97%A5%E6%9C%AC%E8%AA%9E/20210610195348.4fyolimixse0.jpg" alt="第一課"></p>
<!--sleep-->

<span id="more"></span>

<h1 id="みんなの日本語第一課"><a href="#みんなの日本語第一課" class="headerlink" title="みんなの日本語第一課"></a>みんなの日本語第一課</h1><table>
<thead>
<tr>
<th align="center"><strong>いち</strong></th>
<th align="center"><strong>一</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>に</strong></td>
<td align="center"><strong>二</strong></td>
</tr>
<tr>
<td align="center"><strong>さん</strong></td>
<td align="center"><strong>三</strong></td>
</tr>
<tr>
<td align="center"><strong>し／よん</strong></td>
<td align="center"><strong>四</strong></td>
</tr>
<tr>
<td align="center"><strong>ご</strong></td>
<td align="center"><strong>五</strong></td>
</tr>
<tr>
<td align="center"><strong>ろく</strong></td>
<td align="center"><strong>六</strong></td>
</tr>
<tr>
<td align="center"><strong>しち／なな</strong></td>
<td align="center"><strong>七</strong></td>
</tr>
<tr>
<td align="center"><strong>はち</strong></td>
<td align="center"><strong>八</strong></td>
</tr>
<tr>
<td align="center"><strong>く／きゅう</strong></td>
<td align="center"><strong>九</strong></td>
</tr>
<tr>
<td align="center"><strong>じゅう</strong></td>
<td align="center"><strong>十</strong></td>
</tr>
<tr>
<td align="center"><strong>わたし（私）</strong></td>
<td align="center"><strong>我</strong></td>
</tr>
<tr>
<td align="center"><strong>がくせい（学生）</strong></td>
<td align="center"><strong>学生</strong></td>
</tr>
<tr>
<td align="center"><strong>かいしゃいん（会社員）</strong></td>
<td align="center"><strong>公司职员</strong></td>
</tr>
<tr>
<td align="center"><strong>あなた（貴方）</strong></td>
<td align="center"><strong>那个人（礼貌的说法）</strong></td>
</tr>
<tr>
<td align="center"><strong>はい</strong></td>
<td align="center"><strong>是</strong></td>
</tr>
<tr>
<td align="center"><strong>いいえ</strong></td>
<td align="center"><strong>不是</strong></td>
</tr>
<tr>
<td align="center"><strong>ぎんこういん（銀行員）</strong></td>
<td align="center"><strong>银行职员</strong></td>
</tr>
<tr>
<td align="center"><strong>いしゃ（医者）</strong></td>
<td align="center"><strong>医生</strong></td>
</tr>
<tr>
<td align="center"><strong>あのかた（あの方）</strong></td>
<td align="center"><strong>那个人</strong></td>
</tr>
<tr>
<td align="center"><strong>どなた</strong></td>
<td align="center"><strong>哪位（谁的礼貌说法）</strong></td>
</tr>
<tr>
<td align="center"><strong>だいがく（大学）</strong></td>
<td align="center"><strong>大学</strong></td>
</tr>
<tr>
<td align="center"><strong>さくらだいがく（桜大学）</strong></td>
<td align="center"><strong>樱花大学</strong></td>
</tr>
<tr>
<td align="center"><strong>せんせい（先生）</strong></td>
<td align="center"><strong>老师</strong></td>
</tr>
<tr>
<td align="center"><strong>なんさい（何歳）</strong></td>
<td align="center"><strong>几岁</strong></td>
</tr>
<tr>
<td align="center"><strong>はじめまして（初めまして）</strong></td>
<td align="center"><strong>初次见面</strong></td>
</tr>
<tr>
<td align="center"><strong>おはようございます</strong></td>
<td align="center"><strong>早上好</strong></td>
</tr>
<tr>
<td align="center"><strong>アメリカ</strong></td>
<td align="center"><strong>美国</strong></td>
</tr>
<tr>
<td align="center"><strong>どうぞ</strong></td>
<td align="center"><strong>请</strong></td>
</tr>
<tr>
<td align="center"><strong>どうぞよろしくお願（ねが）いします</strong></td>
<td align="center"><strong>请多多关照</strong></td>
</tr>
<tr>
<td align="center"><strong>ちゅうごく（中国）</strong></td>
<td align="center"><strong>中国</strong></td>
</tr>
<tr>
<td align="center"><strong>じん（人）</strong></td>
<td align="center"><strong>人</strong></td>
</tr>
<tr>
<td align="center"><strong>きょうし（教師）</strong></td>
<td align="center"><strong>教师</strong></td>
</tr>
<tr>
<td align="center"><strong>あのひと（あの人）</strong></td>
<td align="center"><strong>那个人</strong></td>
</tr>
<tr>
<td align="center"><strong>だれ（誰）</strong></td>
<td align="center"><strong>谁</strong></td>
</tr>
<tr>
<td align="center"><strong>ブラジル</strong></td>
<td align="center"><strong>巴西</strong></td>
</tr>
<tr>
<td align="center"><strong>あいくつ</strong></td>
<td align="center"><strong>多大岁数</strong></td>
</tr>
<tr>
<td align="center"><strong>にほん（日本）</strong></td>
<td align="center"><strong>日本</strong></td>
</tr>
<tr>
<td align="center"><strong>イギリス</strong></td>
<td align="center"><strong>英国</strong></td>
</tr>
<tr>
<td align="center"><strong>タイ</strong></td>
<td align="center"><strong>泰国</strong></td>
</tr>
<tr>
<td align="center"><strong>ドイス</strong></td>
<td align="center"><strong>德国</strong></td>
</tr>
<tr>
<td align="center"><strong>けんきゅうしゃ（研究者）</strong></td>
<td align="center"><strong>研究人员</strong></td>
</tr>
<tr>
<td align="center"><strong>こうべ（神戸）</strong></td>
<td align="center"><strong>神户</strong></td>
</tr>
<tr>
<td align="center"><strong>びょういん（病院）</strong></td>
<td align="center"><strong>医院</strong></td>
</tr>
<tr>
<td align="center"><strong>インド</strong></td>
<td align="center"><strong>印度</strong></td>
</tr>
<tr>
<td align="center"><strong>かんこく（韓国）</strong></td>
<td align="center"><strong>韩国</strong></td>
</tr>
<tr>
<td align="center"><strong>しつれいですが（失礼ですが）</strong></td>
<td align="center"><strong>对不起、请问</strong></td>
</tr>
<tr>
<td align="center"><strong>おなまえは（お名前は）</strong></td>
<td align="center"><strong>您贵姓、您叫什么名字</strong></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h1 id="总结时间"><a href="#总结时间" class="headerlink" title="总结时间"></a>总结时间</h1><p>作者：小博</p>
<p>2021年6月6日11:12:30</p>
]]></content>
      <tags>
        <tag>日语</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/posts/1948455747/</url>
    <content><![CDATA[<span id="more"></span>

<p>dasdasdasddasdasdasddasdasdasd</p>
<p>dasdasdasddasdasdasddasdasdasddasdasdasd</p>
<p>dasdasdasddasdasdasddasdasdasddasdasdasd</p>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/1243066710/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><blockquote>
<p>Hello World 一切梦开始的地方</p>
</blockquote>]]></content>
  </entry>
</search>
