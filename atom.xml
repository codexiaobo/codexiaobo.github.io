<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code小博</title>
  
  
  <link href="https://codexiaobo.github.io/atom.xml" rel="self"/>
  
  <link href="https://codexiaobo.github.io/"/>
  <updated>2022-08-07T17:09:25.590Z</updated>
  <id>https://codexiaobo.github.io/</id>
  
  <author>
    <name>xiaobo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis 进阶一</title>
    <link href="https://codexiaobo.github.io/posts/1308773244/"/>
    <id>https://codexiaobo.github.io/posts/1308773244/</id>
    <published>2022-08-07T17:08:55.000Z</published>
    <updated>2022-08-07T17:09:25.590Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E7%A0%B4%E7%94%B5%E8%84%91.1t8vi7nqf4ow.webp" alt="破电脑"></p><!--sleep--><span id="more"></span><h1 id="Redis进阶"><a href="#Redis进阶" class="headerlink" title="Redis进阶"></a>Redis进阶</h1><h2 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h2><p>在redis当中，提供了两种数据持久化的方式，分别为RDB以及AOF，且Redis默认开启的数据持久化方式为RDB方式</p><h3 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h3><p>Redis会定期保存数据快照至一个rbd文件中，并在启动时自动加载rdb文件，恢复之前保存的数据</p><h4 id="手动修改"><a href="#手动修改" class="headerlink" title="手动修改"></a>手动修改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save [seconds] [changes] </span><br></pre></td></tr></table></figure><p>可通过SAVE或者BGSAVE命令手动触发RDB快照保存</p><p>在seconds秒内如果发生了changes次数据修改，则进行一次RDB快照保存</p><blockquote><p>SAVE和BGSAVE区别</p></blockquote><p><code>SAVE</code> 和 <code>BGSAVE</code> 两个命令都会调用 rdbSave 函数</p><p><code>SAVE</code> 直接调用 rdbSave ，阻塞 Redis 主进程，直到保存完成为止。在主进程阻塞期间，服务器不能处理客户端的任何请求。</p><p><code>BGSAVE</code> 则 fork 出一个子进程，子进程负责调用 rdbSave ，并在保存完成之后向主进程发送信号，通知保存已完成。 Redis 服务器在BGSAVE 执行期间仍然可以继续处理客户端的请求</p><h4 id="RDB配置文件"><a href="#RDB配置文件" class="headerlink" title="RDB配置文件"></a>RDB配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">save  900 1  </span><br><span class="line">save  300 10  </span><br><span class="line">save  60 10000  </span><br><span class="line">save 5 1  </span><br></pre></td></tr></table></figure><p>redis的配置文件默认自带的存储机制。表示每隔多少秒，有多少个key发生变化就生成一份dump.rdb文件，作为redis的快照文件</p><p>例：save 60 10000 表示在60秒内，有10000个key发生变化，就会生成一份redis的快照</p><h4 id="重新启动redis服务"><a href="#重新启动redis服务" class="headerlink" title="重新启动redis服务"></a>重新启动redis服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis  </span><br><span class="line">bin/redis-cli -h 192.168.200.131 shutdown  </span><br><span class="line">bin/redis-server redis.conf </span><br></pre></td></tr></table></figure><h3 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h3><p>AOF持久方式时，Redis会把每一个写请求都记录在一个日志文件里。在Redis重启时，会把AOF文件中记录的所有写操作顺序执行一遍，确保数据恢复到最新</p><h4 id="开启AOF"><a href="#开启AOF" class="headerlink" title="开启AOF"></a>开启AOF</h4><p>AOF默认是关闭的，要开启，进行配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly  yes </span><br></pre></td></tr></table></figure><h4 id="AOF配置"><a href="#AOF配置" class="headerlink" title="AOF配置"></a>AOF配置</h4><p><code>appendfsync no</code>：不进行fsync，将flush文件的时机交给OS决定，速度最快</p><p><code>appendfsync always</code>：每写入一条日志就进行一次fsync操作，数据安全性最高，但速度最慢</p><p><code>appendfsync everysec</code>：折中的做法，交由后台线程每秒fsync一次</p><h4 id="AOF-rewrite"><a href="#AOF-rewrite" class="headerlink" title="AOF rewrite"></a>AOF rewrite</h4><p>可以重写AOF文件，只保留能够把数据恢复到最新状态的最小写操作集</p><p>AOF rewrite可以通过BGREWRITEAOF命令触发，也可以配置Redis定期自动进行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100  </span><br><span class="line">auto-aof-rewrite-min-size 64mb  </span><br></pre></td></tr></table></figure><p>Redis在每次AOF rewrite时，会记录完成rewrite后的AOF日志大小，当AOF日志大小在该基础上增长了100%后，自动进行AOF rewrite</p><p>auto-aof-rewrite-min-size最开始的AOF文件必须要触发这个文件才触发，后面的每次重写就不会根据这个变量了。该变量仅初始化启动Redis有效</p><h4 id="AOF优点"><a href="#AOF优点" class="headerlink" title="AOF优点"></a>AOF优点</h4><ul><li><p>安全 启用appendfsync为always时，任何已写入的数据都不会丢失，使用在启用appendfsync everysec也至多只会丢失1秒的数据</p></li><li><p>AOF文件在发生断电等问题时也不会损坏，即使出现了某条日志只写入了一半的情况，也可以使用redis-check-aof工具轻松修复</p></li><li><p>AOF文件易读，可修改，在进行某些错误的数据清除操作后，只要AOF文件没有rewrite，就可以把AOF文件备份出来，把错误的命令删除，然后恢复数据</p></li></ul><h4 id="AOF的缺点"><a href="#AOF的缺点" class="headerlink" title="AOF的缺点"></a>AOF的缺点</h4><ul><li><p>AOF文件比RDB文件更大</p></li><li><p>性能消耗比RDB高</p></li><li><p>数据恢复速度比RDB慢</p></li></ul><h4 id="制定合理的持久化策略："><a href="#制定合理的持久化策略：" class="headerlink" title="制定合理的持久化策略："></a>制定合理的持久化策略：</h4><p>AOF + fsync always的设置虽然能够绝对确保数据安全，但每个操作都会触发一次fsync，会对Redis的性能有比较明显的影响</p><p>AOF + fsync every second是比较好的折中方案，每秒fsync一次</p><p>AOF + fsync never会提供AOF持久化方案下的最优性能</p><p>使用RDB持久化通常会提供比使用AOF更高的性能，但需要注意RDB的策略配置</p><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><p>Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中</p><p><strong>Redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令</strong></p><h3 id="Redis事务没有隔离级别的概念"><a href="#Redis事务没有隔离级别的概念" class="headerlink" title="Redis事务没有隔离级别的概念"></a>Redis事务没有隔离级别的概念</h3><p>批量操作在发送 EXEC 命令前被放入队列缓存，并不会被实际执行，也就不存在事务内的查询要看到事务里的更新，事务外查询不能看到</p><h3 id="Redis不保证原子性"><a href="#Redis不保证原子性" class="headerlink" title="Redis不保证原子性"></a>Redis不保证原子性</h3><p>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行</p><h3 id="一个事务执行的阶段"><a href="#一个事务执行的阶段" class="headerlink" title="一个事务执行的阶段"></a>一个事务执行的阶段</h3><ul><li><p>第一阶段：开始事务</p></li><li><p>第二阶段：命令入队</p></li><li><p>第三阶段：执行事务</p></li></ul><h4 id="Redis事务相关命令"><a href="#Redis事务相关命令" class="headerlink" title="Redis事务相关命令"></a>Redis事务相关命令</h4><ul><li>MULTI</li></ul><p>开启事务，redis会将后续的命令逐个放入队列中，然后使用EXEC命令来原子化执行这个命令队列</p><ul><li>EXEC</li></ul><p>执行事务中的所有操作命令</p><ul><li>DISCARD</li></ul><p>取消事务，放弃执行事务块中的所有命令</p><ul><li>WATCH</li></ul><p>监视一个或多个key，如果事务在执行前，这个key（或多个key）被其他命令修改，则事务被中断，不会执行事务中的任何命令</p><ul><li>UNWATCH</li></ul><p>取消WATCH对所有key的监视</p><h3 id="Redis不支持事务回滚"><a href="#Redis不支持事务回滚" class="headerlink" title="Redis不支持事务回滚"></a>Redis不支持事务回滚</h3><p>Redis之所以保持这样简易的事务，完全是为了保证高并发下的核心问题——性能</p><h2 id="数据删除与淘汰策略"><a href="#数据删除与淘汰策略" class="headerlink" title="数据删除与淘汰策略"></a>数据删除与淘汰策略</h2><h3 id="过期数据"><a href="#过期数据" class="headerlink" title="过期数据"></a>过期数据</h3><h4 id="Redis中的数据特征"><a href="#Redis中的数据特征" class="headerlink" title="Redis中的数据特征"></a>Redis中的数据特征</h4><p>Redis是一种内存级数据库，所有数据均存放在内存中，内存中的数据可以通过TTL指令获取其状态</p><p>TTL返回的值有三种情况：正数，-1，-2</p><p><code>正数</code>：代表该数据在内存中还能存活的时间</p><p><code>-1</code>：永久有效的数据</p><p><code>-2</code> ：已经过期的数据 或被删除的数据 或 未定义的数据</p><p>删除策略就是针对已过期数据的处理策略</p><h4 id="时效性数据的存储"><a href="#时效性数据的存储" class="headerlink" title="时效性数据的存储"></a>时效性数据的存储</h4><p>过期数据是一块独立的存储空间，Hash结构，field是内存地址，value是过期时间，保存了所有key的过期描述，在最终进行过期处理的时候，对该空间的数据进行检测， 当时间到期之后通过field找到内存该地址处的数据，然后进行相关操作</p><h3 id="数据删除策略"><a href="#数据删除策略" class="headerlink" title="数据删除策略"></a>数据删除策略</h3><h4 id="数据删除策略的目标"><a href="#数据删除策略的目标" class="headerlink" title="数据删除策略的目标"></a>数据删除策略的目标</h4><p>在内存占用与CPU占用之间寻找一种平衡，顾此失彼都会造成整体redis性能的下降，甚至引发服务器宕机或 内存泄露</p><h4 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h4><p>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作</p><blockquote><p>优点</p></blockquote><p>节约内存，到时就删除，快速释放掉不必要的内存占用</p><blockquote><p>缺点</p></blockquote><p>CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量</p><blockquote><p>总结<br>用处理器性能换取存储空间（拿时间换空间）</p></blockquote><h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><p>数据到达过期时间，不做处理。等下次访问该数据时，我们需要判断，如果未过期，返回数据，发现已过期，删除，返回不存在</p><blockquote><p>优点</p></blockquote><p>节约CPU性能，发现必须删除的时候才删除</p><blockquote><p>缺点</p></blockquote><p>内存压力很大，出现长期占用内存的数据</p><blockquote><p>总结</p></blockquote><p>用存储空间换取处理器性能（拿空间换时间）</p><h4 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h4><p>周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</p><blockquote><p>定期删除策略</p></blockquote><ul><li><p>Redis启动服务器初始化时，读取配置server.hz的值，默认为10</p></li><li><p>每秒钟执行server.hz次serverCron()——–&gt;databasesCron()———&gt;activeExpireCycle()</p></li><li><p>activeExpireCycle()对每个expires[*]逐一进行检测，每次执行耗时：250ms/server.hz</p></li><li><p>对某个expires[*]检测时，随机挑选W个key检测</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果key超时，删除key</span><br><span class="line"></span><br><span class="line">如果一轮中删除的key的数量&gt;W*25%，循环该过程</span><br><span class="line"></span><br><span class="line">如果一轮中删除的key的数量≤W*25%，检查下一个expires[*]，0-15循环</span><br></pre></td></tr></table></figure><ul><li><p>W取值=ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值参数current_db用于记录activeExpireCycle() 进入哪个expires[*] 执行</p></li><li><p>如果activeExpireCycle()执行时间到期，下次从current_db继续向下执行</p></li></ul><blockquote><p>特点</p></blockquote><p>CPU性能占用设置有峰值，检测频度可自定义设置</p><p>内存压力不是很大，长期占用内存的冷数据会被持续清理</p><blockquote><p>总结</p></blockquote><p>周期性抽查存储空间（随机抽查，重点抽查）</p><h3 id="数据淘汰策略（逐出算法）"><a href="#数据淘汰策略（逐出算法）" class="headerlink" title="数据淘汰策略（逐出算法）"></a>数据淘汰策略（逐出算法）</h3><p>简单明了，内存不够了，redis要临时删除一些数据为当前指令清理存储空间。清理数据的策略称为逐出算法</p><h4 id="策略配置"><a href="#策略配置" class="headerlink" title="策略配置"></a>策略配置</h4><ul><li>最大可使用内存，即占用物理内存的比例，默认值为0，表示不限制。生产环境中根据需求设定，通常设置在50%以上</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory ?mb</span><br></pre></td></tr></table></figure><ul><li>每次选取待删除数据的个数，采用随机获取数据的方式作为待检测删除数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-samples count</span><br></pre></td></tr></table></figure><ul><li>对数据进行删除的选择策略</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-policy policy</span><br></pre></td></tr></table></figure><p>policy策略一共3类8种</p><blockquote><p>第一类 检测易失数据（可能会过期的数据集server.db[i].expires ） 同一个库</p></blockquote><p><code>volatile-lru</code>：挑选最近最少使用的数据淘汰      least recently used</p><p><code>volatile-lfu</code>：挑选最近使用次数最少的数据淘汰   least frequently used</p><p><code>volatile-ttl</code>：挑选将要过期的数据淘汰</p><p><code>volatile-random</code>：任意选择数据淘汰</p><p><img src="https://git.poker/codexiaobo/image/blob/main/java/redis-policy%E7%AD%96%E7%95%A5.4j4eqs30cf40.webp?raw=true" alt="redis-policy策略"></p><blockquote><p>第二类：检测全库数据（所有数据集server.db[i].dict ）</p></blockquote><p><code>allkeys-lru</code>：挑选最近最少使用的数据淘汰</p><p><code>allkeLyRs-lfu</code>：挑选最近使用次数最少的数据淘汰</p><p><code>allkeys-random</code>：任意选择数据淘汰，相当于随机</p><blockquote><p>第三类：放弃数据驱逐</p></blockquote><p><code>no-enviction（驱逐）</code>：禁止驱逐数据(redis4.0中默认策略)，会引发OOM(Out Of Memory)</p><p>淘汰策略配置到这个属性上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-policy volatile-lru</span><br></pre></td></tr></table></figure><h2 id="Redis的主从复制架构"><a href="#Redis的主从复制架构" class="headerlink" title="Redis的主从复制架构"></a>Redis的主从复制架构</h2><h3 id="当今互联网的三高架构"><a href="#当今互联网的三高架构" class="headerlink" title="当今互联网的三高架构"></a>当今互联网的三高架构</h3><p>不是高血糖，高血压，和高血脂呦</p><h4 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h4><p>应用要提供某一业务要能支持很多客户端同时访问的能力</p><h4 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h4><p>性能带给我们最直观的感受就是：速度快，时间短</p><h4 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h4><p>一年中应用服务正常运行的时间占全年时间的百分比</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4小时27分15秒+11分36秒+2分16秒=4小时41分7秒=16867秒</span><br><span class="line"></span><br><span class="line">1年=3652460*60=31536000秒</span><br><span class="line"></span><br><span class="line">可用性=（31536000-16867）/31536000*100%=99.9465151%</span><br></pre></td></tr></table></figure><p>业界可用性目标5个9，即99.999%，即服务器年宕机时长低于315秒，约5.25分钟</p><h3 id="单点Redis可能出现的问题"><a href="#单点Redis可能出现的问题" class="headerlink" title="单点Redis可能出现的问题"></a>单点Redis可能出现的问题</h3><h4 id="机器故障"><a href="#机器故障" class="headerlink" title="机器故障"></a>机器故障</h4><ul><li>问题</li></ul><p>硬盘故障、系统崩溃</p><ul><li>实质</li></ul><p>数据丢失，很可能对业务造成灾难性打击</p><h4 id="容量瓶颈"><a href="#容量瓶颈" class="headerlink" title="容量瓶颈"></a>容量瓶颈</h4><ul><li>问题</li></ul><p>内存不足</p><ul><li>本质</li></ul><p>硬件条件跟不上</p><ul><li>解决思路</li></ul><p>为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服务器上，连接在一起，并保证数据是同步的。即使有其中一台服务器宕机，其他服务器依然可以继续提供服务，实现Redis的高可用，同时实现数据冗余备份</p><p><img src="https://git.poker/codexiaobo/image/blob/main/java/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.3fet6my2c4w0.webp?raw=true" alt="主从复制"></p><p><code>master</code> 提供数据方，主服务器，主节点，主库主客户端</p><p><code>slave</code> 接收数据方，从服务器，从节点，从库</p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>主从复制即将master中的数据即时、有效的复制到slave中</p><ul><li>特点</li></ul><p>一个master可以拥有多个slave，一个slave只对应一个master</p><ul><li>职责</li></ul><p><strong>master</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">写数据</span><br><span class="line">执行写操作时，将出现变化的数据自动同步到slave</span><br><span class="line">读数据（可忽略）</span><br></pre></td></tr></table></figure><p><strong>slave</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">读数据</span><br><span class="line">写数据（禁止）</span><br></pre></td></tr></table></figure><p><img src="https://git.poker/codexiaobo/image/blob/main/java/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%A6%82%E5%BF%B5.7elp2wpuay80.webp?raw=true" alt="主从复制概念"></p><h4 id="主从复制的作用"><a href="#主从复制的作用" class="headerlink" title="主从复制的作用"></a>主从复制的作用</h4><p><code>读写分离</code>：master写、slave读，提高服务器的读写负载能力</p><p><code>负载均衡</code>：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数 量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量</p><p><code>故障恢复</code>：当master出现问题时，由slave提供服务，实现快速的故障恢复</p><p><code>数据冗余</code>：实现数据热备份，是持久化之外的一种数据冗余方式</p><p><code>高可用基石</code>：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案</p><h3 id="主从复制工作流程"><a href="#主从复制工作流程" class="headerlink" title="主从复制工作流程"></a>主从复制工作流程</h3><ul><li><p>建立连接阶段（即准备阶段）</p></li><li><p>数据同步阶段</p></li><li><p>命令传播阶段（反复同步）<br><img src="https://git.poker/codexiaobo/image/blob/main/java/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%A4%A7%E8%87%B4%E6%B5%81%E7%A8%8B.27orjksfiakg.webp?raw=true" alt="主从复制大致流程"></p></li></ul><h4 id="阶段一：建立连接"><a href="#阶段一：建立连接" class="headerlink" title="阶段一：建立连接"></a>阶段一：建立连接</h4><p><img src="https://git.poker/codexiaobo/image/blob/main/java/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B.3a8t8kr9yuq0.webp?raw=true" alt="主从复制建立连接过程"></p><p>当前状态：</p><p>slave：保存master的地址与端口</p><p>master：保存slave的端口</p><p>总体：之间创建了socket 连接</p><blockquote><p>master与slave互联 命令</p></blockquote><ul><li>方式一：客户端发送命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof masterip masterport</span><br></pre></td></tr></table></figure><ul><li>方式二：启动服务器参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server --slaveof masterip masterport</span><br></pre></td></tr></table></figure><ul><li>方式三：服务器配置（主流方式）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof masterip masterport</span><br></pre></td></tr></table></figure><ul><li>slave系统信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">master_link_down_since_seconds</span><br><span class="line">masterhost &amp; masterport</span><br></pre></td></tr></table></figure><ul><li>master系统信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uslave_listening_port(多个)</span><br></pre></td></tr></table></figure><blockquote><p>master与slave断开连接 命令</p></blockquote><p>断开slave与master的连接，slave断开连接后，不会删除已有数据，只是不再接受master发送的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof no one</span><br></pre></td></tr></table></figure><blockquote><p>授权访问</p></blockquote><ul><li>master客户端发送命令设置密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass password</span><br></pre></td></tr></table></figure><ul><li>master配置文件设置密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config set requirepass password</span><br><span class="line">config get requirepass</span><br></pre></td></tr></table></figure><ul><li>slave客户端发送命令设置密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth password</span><br></pre></td></tr></table></figure><ul><li>slave配置文件设置密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterauth password</span><br></pre></td></tr></table></figure><ul><li>slave启动服务器设置密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server –a password</span><br></pre></td></tr></table></figure><h4 id="阶段二：数据同步"><a href="#阶段二：数据同步" class="headerlink" title="阶段二：数据同步"></a>阶段二：数据同步</h4><p><img src="https://git.poker/codexiaobo/image/blob/main/java/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E8%BF%87%E7%A8%8B.5s41kyyrys00.webp?raw=true" alt="主从复制数据同步过程"></p><p>当前状态：</p><p>slave：具有master端全部数据，包含RDB过程接收的数据</p><p>master：保存slave当前数据同步的位置</p><p>总体：之间完成了数据克隆</p><p><strong>数据同步阶段master说明</strong></p><ul><li><p>如果master数据量巨大，数据同步阶段应避开流量高峰期，避免造成master阻塞，影响业务正常执行</p></li><li><p>复制缓冲区大小设定不合理，会导致数据溢出。如进行全量复制周期太长，进行部分复制时发现数据已经存在丢失的情况，必须进行第二次全量复制，致使slave陷入死循环状态。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-backlog-size ?mb</span><br></pre></td></tr></table></figure><ul><li>master单机内存占用主机内存的比例不应过大，建议使用50%-70%的内存，留下30%-50%的内存用于执 行bgsave命令和创建复制缓冲区</li></ul><p><strong>数据同步阶段slave说明</strong></p><ul><li>为避免slave进行全量复制、部分复制时服务器响应阻塞或数据不同步，建议关闭此期间的对外服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slave-serve-stale-data yes|no</span><br></pre></td></tr></table></figure><ul><li><p>数据同步阶段，master发送给slave信息可以理解master是slave的一个客户端，主动向slave发送命令</p></li><li><p>多个slave同时对master请求数据同步，master发送的RDB文件增多，会对带宽造成巨大冲击，如果master带宽不足，因此数据同步需要根据业务需求，适量错峰</p></li><li><p>slave过多时，建议调整拓扑结构，由一主多从结构变为树状结构，中间的节点既是master，也是 slave。注意使用树状结构时，由于层级深度，导致深度越高的slave与最顶层master间数据同步延迟较大，数据一致性变差，应谨慎选择</p></li></ul><p><strong>小提示</strong></p><p>设计Redis架构时，一开始就要想好了用几主几从，然后把他们启动其起来</p><h4 id="阶段三：命令传播"><a href="#阶段三：命令传播" class="headerlink" title="阶段三：命令传播"></a>阶段三：命令传播</h4><p>当master数据库状态被修改后，导致主从服务器数据库状态不一致，此时需要让主从数据同步到一致的状态，同步的动作称为命令传播</p><p>master将接收到的数据变更命令发送给slave，slave接收命令后执行命令</p><p><strong>部分复制</strong><br>介绍一下三个核心要素</p><ul><li>服务器的运行 id（run id）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">服务器运行ID（runid）</span><br><span class="line"></span><br><span class="line">概念：服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id</span><br><span class="line"></span><br><span class="line">组成：运行id由40位字符组成，是一个随机的十六进制字符</span><br><span class="line">例如：fdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce</span><br><span class="line"></span><br><span class="line">作用：运行id被用于在服务器间进行传输，识别身份</span><br><span class="line">如果想两次操作均对同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别</span><br><span class="line"></span><br><span class="line">实现方式：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行ID发送给slave，</span><br><span class="line">slave保存此ID，通过info Server命令，可以查看节点的runid</span><br></pre></td></tr></table></figure><ul><li>主服务器的复制积压缓冲区</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">复制缓冲区</span><br><span class="line"></span><br><span class="line">概念：复制缓冲区，又名复制积压缓冲区，是一个先进先出（FIFO）的队列，用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区</span><br><span class="line">复制缓冲区默认数据存储空间大小是1M</span><br><span class="line">当入队元素的数量大于队列长度时，最先入队的元素会被弹出，而新元素会被放入队列</span><br><span class="line">作用：用于保存master收到的所有指令（仅影响数据变更的指令，例如set，select）</span><br><span class="line"></span><br><span class="line">数据来源：当master接收到主客户端的指令时，除了将指令执行，会将该指令存储到缓冲区中</span><br></pre></td></tr></table></figure><ul><li>主从服务器的复制偏移量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">偏移量</span><br><span class="line"></span><br><span class="line">概念：一个数字，描述复制缓冲区中的指令字节位置</span><br><span class="line"></span><br><span class="line">分类：</span><br><span class="line"></span><br><span class="line">master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个）</span><br><span class="line">slave复制偏移量：记录slave接收master发送过来的指令字节对应的位置（一个）</span><br><span class="line">作用：同步信息，比对master与slave的差异，当slave断线后，恢复数据使用</span><br><span class="line"></span><br><span class="line">数据来源：</span><br><span class="line"></span><br><span class="line">master端：发送一次记录一次</span><br><span class="line">slave端：接收一次记录一次</span><br></pre></td></tr></table></figure><p><strong>字节值工作原理</strong></p><ul><li><p>通过offset区分不同的slave当前数据传播的差异</p></li><li><p>master记录已发送的信息对应的offset</p></li><li><p>slave记录已接收的信息对应的offset</p></li></ul><p><img src="https://git.poker/codexiaobo/image/blob/main/java/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%91%BD%E4%BB%A4%E4%BC%A0%E6%92%AD%E8%BF%87%E7%A8%8B.54pe05pq3400.webp?raw=true" alt="主从复制部分复制"></p><h4 id="三个阶段整体工作流程"><a href="#三个阶段整体工作流程" class="headerlink" title="三个阶段整体工作流程"></a>三个阶段整体工作流程</h4><p><img src="https://git.poker/codexiaobo/image/blob/main/java/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B.7509l07k3dw.webp?raw=true" alt="主从复制更新流程"></p><h3 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h3><p>进入命令传播阶段候，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线</p><h4 id="master心跳任务"><a href="#master心跳任务" class="headerlink" title="master心跳任务"></a>master心跳任务</h4><p><code>内部指令</code>：PING</p><p><code>周期</code>：由repl-ping-slave-period决定，默认10秒</p><p><code>作用</code>：判断slave是否在线</p><p><code>查询</code>：INFO replication 获取slave最后一次连接时间间隔，lag项维持在0或1视为正常</p><h4 id="slave心跳任务"><a href="#slave心跳任务" class="headerlink" title="slave心跳任务"></a>slave心跳任务</h4><p><code>内部指令</code>：REPLCONF ACK {offset}</p><p><code>周期</code>：1秒</p><p><code>作用1</code>：汇报slave自己的复制偏移量，获取最新的数据变更指令</p><p><code>作用2</code>：判断master是否在线</p><h4 id="心跳阶段可能发生的问题"><a href="#心跳阶段可能发生的问题" class="headerlink" title="心跳阶段可能发生的问题"></a>心跳阶段可能发生的问题</h4><p>当slave多数掉线，或延迟过高时，master为保障数据稳定性，将拒绝所有信息同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-slaves-to-write 2</span><br><span class="line">min-slaves-max-lag 8</span><br></pre></td></tr></table></figure><p>slave数量少于2个，或者所有slave的延迟都大于等于8秒时，强制关闭master写功能，停止数据同步</p><ul><li><p>slave数量由slave发送REPLCONF ACK命令做确认</p></li><li><p>slave延迟由slave发送REPLCONF ACK命令做确认</p></li></ul><p><img src="https://git.poker/codexiaobo/image/blob/main/java/%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6.4lzzrtg1ky00.webp?raw=true" alt="心跳机制"></p><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E7%A0%B4%E7%94%B5%E8%84%91.1t8vi7nqf4ow.webp&quot; alt=&quot;破电脑&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="redis" scheme="https://codexiaobo.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 复习一</title>
    <link href="https://codexiaobo.github.io/posts/2950641035/"/>
    <id>https://codexiaobo.github.io/posts/2950641035/</id>
    <published>2022-08-04T16:32:00.000Z</published>
    <updated>2022-08-04T16:38:06.567Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://git.poker/codexiaobo/image/blob/main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220805003622.30fiu87806s0.webp?raw=true" alt="微信图片_20220805003622"></p><!--sleep--><span id="more"></span><h1 id="Redis-复习一"><a href="#Redis-复习一" class="headerlink" title="Redis 复习一"></a>Redis 复习一</h1><h2 id="NoSql发展史"><a href="#NoSql发展史" class="headerlink" title="NoSql发展史"></a>NoSql发展史</h2><h3 id="Web1-0时代"><a href="#Web1-0时代" class="headerlink" title="Web1.0时代"></a>Web1.0时代</h3><p>主要是编辑特征</p><p>网站到用户 “单向行为”</p><p>Web1.0代表者： 新浪，搜狐，网易</p><p><strong>性能要求</strong></p><p>简单的静态页面渲染，功能简单单一</p><h3 id="Web2-0时代"><a href="#Web2-0时代" class="headerlink" title="Web2.0时代"></a>Web2.0时代</h3><p>注重用户交互作用，用户即是网站的浏览者，也是网站内容的创造者</p><p>加强网站于用户之间的互动，大数据推荐</p><p>实现了网站与用户双向的交流与参与</p><p><strong>性能要求</strong></p><p>数据库压力越来越大</p><p>用Redis当成缓存，来缓解数据库的压力</p><h3 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h3><ul><li><p>NoSQL（non-relational） 也称 Not Only SQL</p></li><li><p>NoSQL仅仅是一个概念，泛指非关系行数据库</p></li><li><p>区别于关系型数据库他们不保证关系数据库的ACID特征</p></li></ul><h3 id="NoSQl特点"><a href="#NoSQl特点" class="headerlink" title="NoSQl特点"></a>NoSQl特点</h3><ul><li>关系型数据库的一个补充</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li><p>高并发的读写</p></li><li><p>海量数据读写</p></li><li><p>高可扩展性    不限制语言 lua脚本增强</p></li><li><p>速度快</p></li></ul><h4 id="不适合的场景"><a href="#不适合的场景" class="headerlink" title="不适合的场景"></a>不适合的场景</h4><ul><li><p>需要事务支持时</p></li><li><p>基于SQL的结构化查询存储，处理复杂关系，需要即席查询(用户自定义查询条件查询)</p></li></ul><h3 id="几种NoSQL数据库简单介绍"><a href="#几种NoSQL数据库简单介绍" class="headerlink" title="几种NoSQL数据库简单介绍"></a>几种NoSQL数据库简单介绍</h3><h4 id="memcache-现在有点过时了"><a href="#memcache-现在有点过时了" class="headerlink" title="memcache(现在有点过时了)"></a>memcache(现在有点过时了)</h4><ul><li><p>很早出现的NoSQL数据库</p></li><li><p>数据都在内存中，不支持持久化</p></li><li><p>支持简单的key-value模式</p></li><li><p>作为缓存数据库辅助持久化的数据库</p></li></ul><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><ul><li><p>几乎覆盖了memcache的绝大部分功能</p></li><li><p>数据存储在内存中，支持持久化，主要用作备份恢复</p></li><li><p>支持简单的key-value模式，支持多种数据结构存储，例：list、set、hash、zset等</p></li><li><p>作为缓存数据库辅助持久化的数据库</p></li></ul><h4 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h4><ul><li><p>高性能、开源、模式自由的文档型数据库</p></li><li><p>数据存储在内存中，内存不足，把不常用的数据保存在硬盘中</p></li><li><p>key-value模式，对value(尤其json)提供丰富的查询功能</p></li><li><p>支持二进制数据及大型对象</p></li><li><p>根据数据特点替代RDBMS，成为独立的数据库，或者配合RDBMS，存储特定的数据</p></li></ul><h4 id="列式存储HBase"><a href="#列式存储HBase" class="headerlink" title="列式存储HBase"></a>列式存储HBase</h4><p>HBase是Hadoop项目中的数据库，对大量数据进行随机、实时读写操作，目标是处理数据量非常庞大的表，普通计算机处理超过10亿行数据，还可以处理数百万列的数据表，用于大数据</p><h2 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h2><p>一个开源的、使用ANSI C语言编写的key-value存储系统（区别于MySQL的二维表格形式存储）</p><h3 id="Redis应用场景"><a href="#Redis应用场景" class="headerlink" title="Redis应用场景"></a>Redis应用场景</h3><h4 id="取最新N个数据的操作"><a href="#取最新N个数据的操作" class="headerlink" title="取最新N个数据的操作"></a>取最新N个数据的操作</h4><p>取网站最新文章，可以将最新的5000条评论ID放在Redis的List集合中，并将超出集合部分从数据库获取</p><h4 id="排行榜，取TOP-N操作"><a href="#排行榜，取TOP-N操作" class="headerlink" title="排行榜，取TOP N操作"></a>排行榜，取TOP N操作</h4><p>按顶的次数排序，可以使用Redis的sorted set，将要排序的值设置成sorted set的score，将具体的数据设置成相应的value，每次只需要执行一条ZADD命令即可</p><h4 id="精准设定过期时间的应用"><a href="#精准设定过期时间的应用" class="headerlink" title="精准设定过期时间的应用"></a>精准设定过期时间的应用</h4><p>sorted set的score值设置成过期时间的时间戳，那么就可以简单地通过过期时间排序，定时清除过期数据了，不仅是清除Redis中的过期数据，你完全可以把Redis里这个过期时间当成是对数据库中数据的索引，用Redis来找出哪些数据需要过期删除，然后再精准地从数据库中删除相应的记录。</p><h4 id="计数器应用"><a href="#计数器应用" class="headerlink" title="计数器应用"></a>计数器应用</h4><p>Redis的命令都是原子性的，可以利用INCR，DECR命令来构建计数器系统</p><h4 id="Uniq操作，获取某段时间所有数据排重值"><a href="#Uniq操作，获取某段时间所有数据排重值" class="headerlink" title="Uniq操作，获取某段时间所有数据排重值"></a>Uniq操作，获取某段时间所有数据排重值</h4><p>使用Redis的set数据结构最合适了，只需要不断地将数据往set中扔就行了，set意为集合，所以会自动排重。</p><h4 id="实时系统，反垃圾系统"><a href="#实时系统，反垃圾系统" class="headerlink" title="实时系统，反垃圾系统"></a>实时系统，反垃圾系统</h4><p>set功能可以知道一个终端用户是否进行了某个操作，可以找到其操作的集合并进行分析统计对比等</p><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>将数据直接存放到内存中</p><h3 id="Redis特点"><a href="#Redis特点" class="headerlink" title="Redis特点"></a>Redis特点</h3><ul><li><p>高效性 （内存）</p></li><li><p>Redis读取的速度是30w次/s，写的速度是10w次/s<br>原子性 (主逻辑线程是单线程)</p></li><li><p>Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。 pipline<br>支持多种数据结构</p></li><li><p>string（字符串） a-&gt;b 配置 name–&gt; xiaobo<br>e</p></li><li><p>list（列表） a-&gt;list 消息队列 msg—&gt;[“hello”,”name”,”xiaobo”]</p></li><li><p>hash（哈希） a-&gt;map 购物车 1—–&gt;[“1”=&gt;”手机”，“2”=&gt;“电脑”]</p></li><li><p>set（集合） a-&gt;set 去重 quchong–&gt;[“北京”，“上海”，“深圳“]</p></li><li><p>zset(有序集合) a-&gt;sorted set 排行榜 top10-&gt;[”xxx,xxx“,”xxx,xxx”]</p></li><li><p>稳定性：持久化，主从复制（集群）</p></li><li><p>其他特性：支持过期时间，支持事务，消息订阅。</p></li></ul><h3 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h3><h4 id="windows版本"><a href="#windows版本" class="headerlink" title="windows版本"></a>windows版本</h4><p>解压即可</p><h4 id="Linux版本"><a href="#Linux版本" class="headerlink" title="Linux版本"></a>Linux版本</h4><p>解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-6.2.6.tar.gz -C </span><br></pre></td></tr></table></figure><p>C程序运行环境 因为下载的是源码 需要编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum  -y install gcc-c++  </span><br></pre></td></tr></table></figure><p>tcl</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y   install tcl </span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/redis-6.2.6/  </span><br><span class="line">#或者使用命令 make 进行编译  </span><br><span class="line">make MALLOC=libc     </span><br><span class="line">make test &amp;&amp; make install PREFIX=/export/server/redis-7.0.4  </span><br></pre></td></tr></table></figure><p>创建对应的目录 以及配置对应的conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd  /export/server/redis-7.0.4/  </span><br><span class="line">mkdir  -p /export/server/redis-7.0.4/log  </span><br><span class="line">mkdir  -p /export/server/redis-7.0.4/data     </span><br><span class="line"></span><br><span class="line">vim  redis.conf  </span><br><span class="line">#  修改第61行  </span><br><span class="line">bind  localhost  </span><br><span class="line">#  修改第128行  后台 </span><br><span class="line">daemonize  yes  </span><br><span class="line">#  修改第163行  </span><br><span class="line">logfile  &quot;/export/server/redis-7.0.4/log/redis.log&quot;  </span><br><span class="line">#  修改第247行  </span><br><span class="line">dir  /export/server/redis-7.0.4/data  </span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/redis-7.0.4/  </span><br><span class="line">bin/redis-server redis.conf  </span><br></pre></td></tr></table></figure><p>关闭</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/redis-cli  -h localhost shutdown  </span><br></pre></td></tr></table></figure><p>连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/redis-cli -h localhost</span><br></pre></td></tr></table></figure><p>查看是否已经启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antp|grep 6379</span><br></pre></td></tr></table></figure><h3 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h3><h4 id="对字符串string的操作"><a href="#对字符串string的操作" class="headerlink" title="对字符串string的操作"></a>对字符串string的操作</h4><table><thead><tr><th>序号</th><th>命令及描述</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>SET key value 设置指定 key 的值</td><td>示例：SET hello world</td></tr><tr><td>2</td><td>GET key 获取指定 key 的值。</td><td>示例：GET hello</td></tr><tr><td>4</td><td>GETSET key value 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td><td>示例：GETSET hello world2</td></tr><tr><td>5</td><td>MGET key1 [key2..] 获取所有(一个或多个)给定 key 的值。</td><td>示例：MGET hello world</td></tr><tr><td>6</td><td>SETEX key seconds value 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td><td>示例：SETEX hello 10 world3</td></tr><tr><td>7</td><td>SETNX key value 只有在 key 不存在时设置 key 的值。</td><td>示例：SETNX name xiaobo</td></tr><tr><td>9</td><td>STRLEN key 返回 key 所储存的字符串值的长度。</td><td>示例：STRLEN xiaobo</td></tr><tr><td>10</td><td>MSET key value [key value ] 同时设置一个或多个 key-value 对。</td><td>示例：MSET name1 name2 name3 name4</td></tr><tr><td>12</td><td>MSETNX key value key value 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td><td>示例：MSETNX name1 name2 name3 name4</td></tr><tr><td>13</td><td>PSETEX key milliseconds value这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td><td>示例：PSETEX money 6000 value</td></tr><tr><td>14</td><td>INCR key 将 key 中储存的数字值增一。</td><td>示例： set number 1 INCR number GET ydlclass7</td></tr><tr><td>15</td><td>INCRBY key increment 将 key 所储存的值加上给定的增量值（increment）</td><td>示例：INCRBY number 2 get number</td></tr><tr><td>16</td><td>INCRBYFLOAT key increment 将 key 所储存的值加上给定的浮点增量值（increment）</td><td>示例：INCRBYFLOAT number 0.8</td></tr><tr><td>17</td><td>DECR key 将 key 中储存的数字值减一。</td><td>示例： set number 1 DECR number GET number</td></tr><tr><td>18</td><td>DECRBY key decrement key 所储存的值减去给定的减量值（decrement）</td><td>示例：DECRBY number 3</td></tr><tr><td>19</td><td>APPEND key value 如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</td><td>示例：APPEND number hello</td></tr></tbody></table><h4 id="对hash列表的操作"><a href="#对hash列表的操作" class="headerlink" title="对hash列表的操作"></a>对hash列表的操作</h4><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>Redis 中每个 hash 可以存储 2的32 - 1 键值对（40多亿）</p><table><thead><tr><th>序号</th><th>命令及描述</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>HSET key field value 将哈希表 key 中的字段 field 的值设为 value 。</td><td>示例：HSET key1 field1 value1</td></tr><tr><td>2</td><td>HSETNX key field value 只有在字段 field 不存在时，设置哈希表字段的值。</td><td>示例：HSETNX key1 field2 value2</td></tr><tr><td>3</td><td>HMSET key field1 value1 [field2 value2 ] 同时将多个 field-value (域-值)对设置到哈希表 key 中。</td><td>示例：HMSET key1 field3 value3 field4 value4</td></tr><tr><td>4</td><td>HEXISTS key field 查看哈希表 key 中，指定的字段是否存在。</td><td>示例： HEXISTS key1 field4 HEXISTS key1 field6</td></tr><tr><td>5</td><td>HGET key field 获取存储在哈希表中指定字段的值。</td><td>示例：HGET key1 field4</td></tr><tr><td>6</td><td>HGETALL key 获取在哈希表中指定 key 的所有字段和值</td><td>示例：HGETALL key1</td></tr><tr><td>7</td><td>HKEYS key 获取所有哈希表中的字段</td><td>示例：HKEYS key1</td></tr><tr><td>8</td><td>HLEN key 获取哈希表中字段的数量</td><td>示例：HLEN key1</td></tr><tr><td>9</td><td>HMGET key field1 [field2] 获取所有给定字段的值</td><td>示例：HMGET key1 field3 field4</td></tr><tr><td>10</td><td>HINCRBY key field increment 为哈希表 key 中的指定字段的整数值加上增量 increment 。</td><td>示例： HSET key2 field1 1 HINCRBY key2 field1 1 HGET key2 field1</td></tr><tr><td>11</td><td>HINCRBYFLOAT key field increment 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td><td>示例：HINCRBYFLOAT key2 field1 0.8</td></tr><tr><td>12</td><td>HVALS key 获取哈希表中所有值</td><td>示例：HVALS key1</td></tr><tr><td>13</td><td>HDEL key field1 [field2] 删除一个或多个哈希表字段</td><td>示例： HDEL key1 field3 HVALS key1</td></tr></tbody></table><h4 id="对list列表的操作"><a href="#对list列表的操作" class="headerlink" title="对list列表的操作"></a>对list列表的操作</h4><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>一个列表最多可以包含 2的32 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p><table><thead><tr><th><strong>序号</strong></th><th><strong>命令及描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>LPUSH key value1 [value2]</strong> 将一个或多个值插入到列表头部</td><td>示例：LPUSH list1 value1 value2</td></tr><tr><td>2</td><td><strong>LRANGE key start stop</strong> 查看list当中所有的数据</td><td>示例：LRANGE list1 0 -1</td></tr><tr><td>3</td><td>LPUSHX key value 将一个值插入到已存在的列表头部</td><td>示例：LPUSHX list1 value3 LINDEX list1 0</td></tr><tr><td>4</td><td>RPUSH key value1 [value2] 在列表中添加一个或多个值到尾部</td><td>示例： RPUSH list1 value4 value5 LRANGE list1 0 -1</td></tr><tr><td>5</td><td>RPUSHX key value 为已存在的列表添加单个值到尾部</td><td>示例：RPUSHX list1 value6</td></tr><tr><td>6</td><td>LINSERT key BEFORE|AFTER pivot value 在列表的元素前或者后插入元素</td><td>示例：LINSERT list1 BEFORE value3 beforevalue3</td></tr><tr><td>7</td><td>LINDEX key index 通过索引获取列表中的元素</td><td>示例：LINDEX list1 0</td></tr><tr><td>8</td><td>LSET key index value 通过索引设置列表元素的值</td><td>示例：LSET list1 0 hello</td></tr><tr><td>9</td><td>LLEN key 获取列表长度</td><td>示例：LLEN list1</td></tr><tr><td>10</td><td>LPOP key 移出并获取列表的第一个元素</td><td>示例：LPOP list1</td></tr><tr><td>11</td><td>RPOP key 移除列表的最后一个元素，返回值为移除的元素。</td><td>示例：RPOP list1</td></tr><tr><td>12</td><td>BLPOP key1 [key2 ] timeout 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td><td>示例：BLPOP list1 2000</td></tr><tr><td>13</td><td>BRPOP key1 [key2 ] timeout 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td><td>示例：BRPOP list1 2000</td></tr><tr><td>14</td><td>RPOPLPUSH source destination 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td><td>示例：RPOPLPUSH list1 list2</td></tr><tr><td>15</td><td>BRPOPLPUSH source destination timeout 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td><td>示例：BRPOPLPUSH list1 list2 2000</td></tr><tr><td>16</td><td>LTRIM key start stop 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td><td>示例：LTRIM list1 0 2</td></tr><tr><td>17</td><td>DEL key1 key2 删除指定key的列表</td><td>示例：DEL list2</td></tr></tbody></table><h4 id="对set集合的操作"><a href="#对set集合的操作" class="headerlink" title="对set集合的操作"></a>对set集合的操作</h4><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据</p><p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><p>集合中最大的成员数为 2的32 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p><table><thead><tr><th><strong>序号</strong></th><th><strong>命令及描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>1</td><td>SADD key member1 [member2] 向集合添加一个或多个成员</td><td>示例：SADD set1 setvalue1 setvalue2</td></tr><tr><td>2</td><td>SMEMBERS key 返回集合中的所有成员</td><td>示例：SMEMBERS set1</td></tr><tr><td>3</td><td>SCARD key 获取集合的成员数</td><td>示例：SCARD set1</td></tr><tr><td>4</td><td>SDIFF key1 [key2] 返回给定所有集合的差集</td><td>示例： SADD set2 setvalue2 setvalue3 SDIFF set1 set2</td></tr><tr><td>5</td><td>SDIFFSTORE destination key1 [key2] 返回给定所有集合的差集并存储在 destination 中</td><td>示例：SDIFFSTORE set3 set1 set2</td></tr><tr><td>6</td><td>SINTER key1 [key2] 返回给定所有集合的交集</td><td>示例：SINTER set1 set2</td></tr><tr><td>7</td><td>SINTERSTORE destination key1 [key2] 返回给定所有集合的交集并存储在 destination 中</td><td>示例：SINTERSTORE set4 set1 set2</td></tr><tr><td>8</td><td>SISMEMBER key member 判断 member 元素是否是集合 key 的成员</td><td>示例：SISMEMBER set1 setvalue1</td></tr><tr><td>9</td><td>SMOVE source destination member 将 member 元素从 source 集合移动到 destination 集合</td><td>示例：SMOVE set1 set2 setvalue1</td></tr><tr><td>10</td><td>SPOP key 移除并返回集合中的一个随机元素</td><td>示例：SPOP set2</td></tr><tr><td>11</td><td>SRANDMEMBER key [count] 返回集合中一个或多个随机数</td><td>示例：SRANDMEMBER set2 2</td></tr><tr><td>12</td><td>SREM key member1 [member2] 移除集合中一个或多个成员</td><td>示例：SREM set2 setvalue1</td></tr><tr><td>13</td><td>SUNION key1 [key2]] 返回所有给定集合的并集</td><td>示例：SUNION set1 set2</td></tr><tr><td>14</td><td>SUNIONSTORE destination key1 [key2] 所有给定集合的并集存储在 destination 集合中</td><td>示例：SUNIONSTORE set5 set1 set2</td></tr></tbody></table><h4 id="对key的操作"><a href="#对key的操作" class="headerlink" title="对key的操作"></a>对key的操作</h4><table><thead><tr><th>序号</th><th>命令及描述</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>DEL key 该命令用于在 key 存在时删除 key。</td><td>示例：del number</td></tr><tr><td>2</td><td>DUMP key 序列化给定 key ，并返回被序列化的值。</td><td>示例：DUMP key1</td></tr><tr><td>3</td><td>EXISTS key 检查给定 key 是否存在。</td><td>示例：exists number</td></tr><tr><td>4</td><td>EXPIRE key seconds 为给定 key 设置过期时间，以秒计。</td><td>示例：expire number 5</td></tr><tr><td>6</td><td>PEXPIRE key milliseconds 设置 key 的过期时间以毫秒计。</td><td>示例：PEXPIRE set3 3000</td></tr><tr><td>8</td><td>KEYS pattern 查找所有符合给定模式( pattern)的 key 。</td><td>示例：keys *</td></tr><tr><td>10</td><td>PERSIST key 移除 key 的过期时间，key 将持久保持。</td><td>示例：persist set2</td></tr><tr><td>11</td><td>PTTL key 以毫秒为单位返回 key 的剩余的过期时间。</td><td>示例：pttl set2</td></tr><tr><td>12</td><td>TTL key 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td><td>示例：ttl set2</td></tr><tr><td>13</td><td>RANDOMKEY 从当前数据库中随机返回一个 key 。</td><td>示例： randomkey</td></tr><tr><td>14</td><td>RENAME key newkey 修改 key 的名称</td><td>示例：rename set5 set8</td></tr><tr><td>15</td><td>RENAMENX key newkey 仅当 newkey 不存在时，将 key 改名为 newkey 。</td><td>示例：renamenx set8 set10</td></tr><tr><td>16</td><td>TYPE key 返回 key 所储存的值的类型。</td><td>示例：type set10</td></tr></tbody></table><h4 id="对ZSet的操作-重要"><a href="#对ZSet的操作-重要" class="headerlink" title="对ZSet的操作-重要"></a>对ZSet的操作-重要</h4><p>典型例子：互联网，微博热搜，最热新闻，统计网站pv</p><p>Redis有序集合和集合一样也是string类型元素的集合,且不允许重复的成员</p><p>它用来保存需要排序的数据，例如排行榜，一个班的语文成绩，一个公司的员工工资，一个论坛的帖子等。</p><p>有序集合中，每个元素都带有score（权重），以此来对元素进行排序</p><p>它有三个元素：key、member和score。以语文成绩为例，key是考试名称（期中考试、期末考试等），member是学生名字，score是成绩。</p><table><thead><tr><th><strong>#</strong></th><th><strong>命令及描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>1</td><td>ZADD key score1 member1 [score2 member2] 向有序集合添加一个或多个成员，或者更新已存在成员的分数</td><td>向ZSet中添加页面的PV值 ZADD pv_zset 120 page1.html 100 page2.html 140 page3.html</td></tr><tr><td>2</td><td>ZCARD key 获取有序集合的成员数</td><td>获取所有的统计PV页面数量 ZCARD pv_zset</td></tr><tr><td>3</td><td>ZCOUNT key min max 计算在有序集合中指定区间分数的成员数</td><td>获取PV在120-140在之间的页面数量 ZCOUNT pv_zset 120 140</td></tr><tr><td>4</td><td>ZINCRBY key increment member 有序集合中对指定成员的分数加上增量 increment</td><td>给page1.html的PV值+1 ZINCRBY pv_zset 1 page1.html</td></tr><tr><td>5</td><td>ZINTERSTORE destination numkeys key [key …] 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td><td>创建两个保存PV的ZSET： ZADD pv_zset1 10 page1.html 20 page2.html ZADD pv_zset2 5 page1.html 10 page2.html ZINTERSTORE pv_zset_result 2 pv_zset1 pv_zset2</td></tr><tr><td>7</td><td>ZRANGE key start stop [WITHSCORES] 通过索引区间返回有序集合指定区间内的成员</td><td>获取所有的元素，并可以返回每个key对一个的score ZRANGE pv_zset_result 0 -1 WITHSCORES</td></tr><tr><td>9</td><td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] 通过分数返回有序集合指定区间内的成员</td><td>获取ZSET中120-140之间的所有元素 ZRANGEBYSCORE pv_zset 120 140</td></tr><tr><td>10</td><td>ZRANK key member 返回有序集合中指定成员的索引</td><td>获取page1.html的pv排名（升序） ZRANK pv_zset page3.html</td></tr><tr><td>11</td><td>ZREM key member [member …] 移除有序集合中的一个或多个成员</td><td>移除page1.html ZREM pv_zset page1.html</td></tr><tr><td>15</td><td>ZREVRANGE key start stop [WITHSCORES] 返回有序集中指定区间内的成员，通过索引，分数从高到低</td><td>按照PV降序获取页面 ZREVRANGE pv_zset 0 -1</td></tr><tr><td>17</td><td>ZREVRANK key member 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td><td>获取page2.html的pv排名（降序） ZREVRANK pv_zset page2.html</td></tr><tr><td>18</td><td>ZSCORE key member 返回有序集中，成员的分数值</td><td>获取page3.html的分数值 ZSCORE pv_zset page3.html</td></tr></tbody></table><h4 id="对位图BitMaps的操作"><a href="#对位图BitMaps的操作" class="headerlink" title="对位图BitMaps的操作"></a>对位图BitMaps的操作</h4><p>计算机最小的存储单位是位bit，Bitmaps是针对位的操作的，相较于String、Hash、Set等存储方式更加节省空间</p><p>Bitmaps不是一种数据结构，操作是基于String结构的，一个String最大可以存储512M，那么一个Bitmaps则可以设置2^32个位</p><p>Bitmaps单独提供了一套命令，所以在Redis中使用Bitmaps和使用字符串的方法不太相同。可以把Bitmaps想象成一个以位为单位的数组，数组的每个单元只能存储0和1，数组的下标在Bitmaps中叫做偏移量offset</p><p>itMaps 命令说明：将每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id 。</p><p>设置值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SETBIT key offset value  </span><br><span class="line"></span><br><span class="line">setbit unique:users:2022-08-04 0  1</span><br><span class="line"></span><br><span class="line">setbit unique:users:2022-08-04 5  1 </span><br><span class="line"></span><br><span class="line">setbit unique:users:2022-08-04 10  1 </span><br></pre></td></tr></table></figure><p>获取值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GETBIT key offset</span><br></pre></td></tr></table></figure><p>获取Bitmaps指定范围值为1的个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITCOUNT key [start end] </span><br></pre></td></tr></table></figure><p>Bitmaps间的运算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITOP operation destkey key [key, …] </span><br></pre></td></tr></table></figure><p>bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bitop and unique:users:and:2022-08-04_05  unique:users:2022-08-03 unique:users:2022-08-04  </span><br><span class="line">bitcount unique:users:and:2022-04-04_05</span><br></pre></td></tr></table></figure><h4 id="对HyperLogLog结构的操作"><a href="#对HyperLogLog结构的操作" class="headerlink" title="对HyperLogLog结构的操作"></a>对HyperLogLog结构的操作</h4><p>HyperLogLog常用于大数据量的统计，比如页面访问量统计或者用户访问量统计。</p><p>要统计一个页面的访问量（PV），可以直接用redis计数器或者直接存数据库都可以实现，如果要统计一个页面的用户访问量（UV），一个用户一天内如果访问多次的话，也只能算一次，这样，我们可以使用SET集合来做，因为SET集合是有<strong>去重</strong>功能的，key存储页面对应的关键字，value存储对应的userid，这种方法是可行的。但如果访问量较多，假如有几千万的访问量，这就麻烦了。为了统计访问量，要频繁创建SET集合对象。</p><p>uv: 一个页面被多少个用户访问</p><p>pv：一个页面的访问量</p><p>Redis实现HyperLogLog算法，HyperLogLog 这个数据结构的发明人 是Philippe Flajolet（菲利普·弗拉若莱）教授。Redis 在 2.8.9 版本添加了 HyperLogLog 结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">help @hyperloglog  </span><br><span class="line"></span><br><span class="line">PFADD  key element [element ...]   </span><br><span class="line">summary:  Adds the specified elements to the specified HyperLogLog.   </span><br><span class="line">since:  2.8.9      </span><br><span class="line"></span><br><span class="line">PFCOUNT  key [key ...]   </span><br><span class="line">summary:  Return the approximated cardinality（基数） of the set(s) observed by the HyperLogLog at  key(s).   </span><br><span class="line">since:  2.8.9      </span><br><span class="line"></span><br><span class="line">PFMERGE  destkey sourcekey [sourcekey ...]   </span><br><span class="line">summary:  Merge N different HyperLogLogs into a single one.   </span><br><span class="line">since:  2.8.9  </span><br></pre></td></tr></table></figure><p>Redis集成的HyperLogLog使用语法主要有pfadd和pfcount，顾名思义，一个是来添加数据，一个是来统计的。</p><p>HyperLogLog算法标准误差是 0.81%</p><p>pfadd和pfcount常用于统计，需求：假如两个页面很相近，现在想统计这两个页面的用户访问量呢？这里就可以用pfmerge合并统计了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pfadd page1 user1 user2  user3 user4 user5  </span><br><span class="line"> </span><br><span class="line">pfadd page2 user1 user2  user3 user6 user7  </span><br><span class="line"> </span><br><span class="line">pfmerge page1+page2  page1 page2  </span><br><span class="line"></span><br><span class="line">pfcount page1+page2 </span><br></pre></td></tr></table></figure><blockquote><p>HyperLogLog为什么适合做大量数据的统计</p></blockquote><p>Redis HyperLogLog 是用来做基数统计的算法</p><h2 id="Redis-Java-API操作"><a href="#Redis-Java-API操作" class="headerlink" title="Redis Java API操作"></a>Redis Java API操作</h2><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.14.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--    &lt;verbal&gt;true&lt;/verbal&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义JedisPoll</span></span><br><span class="line">    <span class="keyword">private</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeTest</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        配置对象</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        最大空闲连接</span></span><br><span class="line">        config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//        最小空闲连接</span></span><br><span class="line">        config.setMinIdle(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        连接时最大等待时间</span></span><br><span class="line">        config.setMaxWaitMillis(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        最大连接数</span></span><br><span class="line">        config.setMaxTotal(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config,<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keysTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取jedis连接池连接</span></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        命令</span></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        添加一个string类型数据，key为pv，用于保存pv的值，初始值为0</span></span><br><span class="line"></span><br><span class="line">        jedis.set(<span class="string">&quot;pv&quot;</span>,<span class="string">&quot;22&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        查询该key对应的数据</span></span><br><span class="line"></span><br><span class="line">        String pv = jedis.get(<span class="string">&quot;pv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(pv);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        修改pv为1000</span></span><br><span class="line"></span><br><span class="line">        jedis.set(<span class="string">&quot;pv&quot;</span>, <span class="string">&quot;53&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        实现整形数据原子自增操作 +1</span></span><br><span class="line"></span><br><span class="line">        Long pv1 = jedis.incr(<span class="string">&quot;pv&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(pv1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        实现整形该数据原子自增操作 +1000</span></span><br><span class="line"></span><br><span class="line">        Long pv2 = jedis.incrBy(<span class="string">&quot;pv&quot;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(pv2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        关闭jedis连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hashTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        往Hash结构中添加以下商品库存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        a) iphone11 =&gt; 10000</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        b) macbookpro =&gt; 9000</span></span><br><span class="line"></span><br><span class="line">        jedis.hset(<span class="string">&quot;goods&quot;</span>,<span class="string">&quot;iphone11&quot;</span>,<span class="string">&quot;10000&quot;</span>);</span><br><span class="line"></span><br><span class="line">        jedis.hset(<span class="string">&quot;goods&quot;</span>,<span class="string">&quot;macbookpro&quot;</span>,<span class="string">&quot;9000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取Hash中所有的商品</span></span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; goods = jedis.hkeys(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String good : goods) &#123;</span><br><span class="line">            System.out.println(good);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        新增3000个macbookpro库存</span></span><br><span class="line"></span><br><span class="line">        jedis.hincrBy(<span class="string">&quot;goods&quot;</span>,<span class="string">&quot;macbookpro&quot;</span>,<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        String hget = jedis.hget(<span class="string">&quot;goods&quot;</span>, <span class="string">&quot;macbookpro&quot;</span>);</span><br><span class="line">        System.out.println(hget);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        删除整个Hash的数据</span></span><br><span class="line"></span><br><span class="line">        jedis.del(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        关闭jedis连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        向list的左边插入以下三个手机号码：15841018742、17612484531、13439275383</span></span><br><span class="line"></span><br><span class="line">        jedis.lpush(<span class="string">&quot;numbers&quot;</span>,<span class="string">&quot;15841018742&quot;</span>,<span class="string">&quot;17612484531&quot;</span>,<span class="string">&quot;13439275383&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; numbers = jedis.lrange(<span class="string">&quot;numbers&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String number : numbers) &#123;</span><br><span class="line">            System.out.println(number);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        从右边移除一个手机号码</span></span><br><span class="line"></span><br><span class="line">        jedis.rpop(<span class="string">&quot;numbers&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取list所有的值</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; numbers1 = jedis.lrange(<span class="string">&quot;numbers&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : numbers1) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        清除numbers中数据</span></span><br><span class="line">        jedis.del(<span class="string">&quot;numbers&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        关闭jedis连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        求UV就是求独立有多少个（不重复）</span></span><br><span class="line"><span class="comment">//        往一个set中添加页面 page1 的uv，用户user1访问一次该页面</span></span><br><span class="line"></span><br><span class="line">        jedis.sadd(<span class="string">&quot;uv&quot;</span>,<span class="string">&quot;user1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        user2访问一次该页面</span></span><br><span class="line"></span><br><span class="line">        jedis.sadd(<span class="string">&quot;uv&quot;</span>,<span class="string">&quot;user2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        user1再次访问一次该页面</span></span><br><span class="line"></span><br><span class="line">        jedis.sadd(<span class="string">&quot;uv&quot;</span>,<span class="string">&quot;user1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        最后获取 page1的uv值</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;uv:&quot;</span> + jedis.scard(<span class="string">&quot;uv&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        关闭jedis连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterTest</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        关闭jedisPool连接</span></span><br><span class="line">        jedisPool.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://git.poker/codexiaobo/image/blob/main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220805003622.30fiu87806s0.webp?raw=true&quot; alt=&quot;微信图片_20220805003622&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="redis" scheme="https://codexiaobo.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>408 &amp; 计算机组成原理 &amp; 计算机系统概述</title>
    <link href="https://codexiaobo.github.io/posts/810959033/"/>
    <id>https://codexiaobo.github.io/posts/810959033/</id>
    <published>2022-07-06T09:45:48.000Z</published>
    <updated>2022-07-06T09:48:37.540Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A.5hy5gld489c0.webp" alt="加载更多"></p><!--sleep--><span id="more"></span><h1 id="408-amp-计算机组成原理-amp-计算机系统概述"><a href="#408-amp-计算机组成原理-amp-计算机系统概述" class="headerlink" title="408 &amp; 计算机组成原理 &amp; 计算机系统概述"></a>408 &amp; 计算机组成原理 &amp; 计算机系统概述</h1><h2 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h2><p>由硬件和软件组成</p><ul><li>硬件</li></ul><p>组成计算机的各种设备实体 是物质基础</p><ul><li>软件</li></ul><p>指各种程序和文件</p><h3 id="计算机的基本功能"><a href="#计算机的基本功能" class="headerlink" title="计算机的基本功能"></a>计算机的基本功能</h3><p>数据加工</p><p>数据保存</p><p>数据传送</p><p>操作控制</p><p>……</p><h3 id="计算机硬件有哪些"><a href="#计算机硬件有哪些" class="headerlink" title="计算机硬件有哪些"></a>计算机硬件有哪些</h3><h4 id="五大功能部件"><a href="#五大功能部件" class="headerlink" title="五大功能部件"></a>五大功能部件</h4><ul><li>运算器(ALU)</li></ul><p>进行加减乘除等算术运算，逻辑运算</p><p>计算机中采用二进制数</p><p>位数越多，计算精度越高</p><p>目前计算机位数一般为 8位、16位、32位、64位</p><ul><li>控制器</li></ul><p>计算机中发号施令的部件，他控制计算机的所有部件有条不絮地进行工作</p><p>控制器的任务是从内存中取出解题步骤加以分析，然后执行某种操作</p><p><strong>步骤</strong></p><p>取指令 –&gt; 分析指令 –&gt; 执行指令</p><p>保证指令按规定序列自动连续地执行</p><p>对各种异常情况和请求及时响应和处理</p><ul><li>存储器</li></ul><p>保存或记忆解题的程序(指令)和数据</p><p>在运算前把参加运算的数据和解题步骤通过输入输出设备送到存储器中保存起来</p><p>存储的是0或1表示的二进制代码</p><p>采用半导体器件作为存储器 一个半导体触发器可以记忆一位二进制代码</p><p><strong>存储元</strong></p><p>保存一个二进制位的触发器</p><p><strong>存储单元</strong></p><p>若干个存储元构成一个存储单元</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%98%E5%82%A8%E5%99%A8.622qxsnjq3c0.webp" alt="计算机系统的存储器"></p><p><strong>地址</strong></p><p>存储器是由许多存储单元组成，每个存储单元的编号称为地址</p><p><strong>存储容量</strong></p><p>存储器所有存储单元的总数 单位 KB、MB、GB、TB 存储容量越大 计算机记忆存储存的信息越多</p><p><strong>外存储器</strong></p><p>磁盘存储器、光盘存储器等</p><p>高速缓存，主存储器，虚拟存储器组成多级存储器系统，是计算机存储程序和数据的部件</p><p>存储器可存放二进制码形式的指令，称为代码区</p><p>存储器可存放二进制码形式的数据，称为数据区</p><p>一般将指令和数据分开存</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/408/%E5%AD%98%E5%82%A8%E5%99%A8%E5%AD%98%E6%94%BE%E5%8C%BA%E5%9F%9F.5xbf5j06etg0.webp" alt="存储器存放区域"></p><ul><li>输入设备</li></ul><p>把人们所熟悉的某种信息形式变换为机器内部所能接受和识别的二进制信息形式</p><ul><li>输出设备</li></ul><p>把计算机处理的结果变换为人和其他机器所能接收和识别的信息形式</p><p>输入/输出设备称为外围设备，简称外设，不能直接与主机（运算器、控制器、内存）相连，通过适配器部件与主机相连</p><p><img src="https://git.poker/codexiaobo/image/blob/main/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90.359b8p3l3s80.webp?raw=true" alt="计算机系统的硬件组成"></p><h4 id="现在认为的五大组成部分"><a href="#现在认为的五大组成部分" class="headerlink" title="现在认为的五大组成部分"></a>现在认为的五大组成部分</h4><ul><li>cpu</li></ul><p>运算器，控制器</p><ul><li>存储器</li><li>输入设备</li><li>输出设备</li><li>总线</li></ul><h3 id="计算机怎么工作的"><a href="#计算机怎么工作的" class="headerlink" title="计算机怎么工作的"></a>计算机怎么工作的</h3><p>设备通过总线和接口连接在一起 构成一台完整的计算机</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="计算程序"><a href="#计算程序" class="headerlink" title="计算程序"></a>计算程序</h3><p>每一个基本操作就叫做一条指令，解算某一问题的一串指令序列叫做计算程序 简称程序</p><h3 id="指令的形式"><a href="#指令的形式" class="headerlink" title="指令的形式"></a>指令的形式</h3><p>由两部分组成，操作码 + 地址码 <img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/408/%E6%8C%87%E4%BB%A4%E7%9A%84%E5%BD%A2%E5%BC%8F.3ltt24wfuu00.webp" alt="指令的形式"></p><ul><li>操作码</li></ul><p>不同的指令操作码不同，操作码唯一</p><p>指出指令所进行的操作 加、减、乘、除、取数、存数等</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/408/%E6%8C%87%E4%BB%A4%E7%9A%84%E6%93%8D%E4%BD%9C%E7%A0%81.2zdpo7e0gnc0.webp" alt="指令的操作码"></p><ul><li>地址码</li></ul><p>参加运算的数据应从存储器的哪个单元取，运算的结果应存到哪个单元</p><h3 id="存储程序"><a href="#存储程序" class="headerlink" title="存储程序"></a>存储程序</h3><p>指令存放到存储器中</p><h3 id="程序控制"><a href="#程序控制" class="headerlink" title="程序控制"></a>程序控制</h3><p>控制器依靠存储的程序来控制全机协调地完成计算任务</p><h3 id="冯-诺依曼设计思想"><a href="#冯-诺依曼设计思想" class="headerlink" title="冯.诺依曼设计思想"></a>冯.诺依曼设计思想</h3><p>存储程序并按地址执行</p><h4 id="冯-诺依曼思想的基本要点"><a href="#冯-诺依曼思想的基本要点" class="headerlink" title="冯.诺依曼思想的基本要点"></a>冯.诺依曼思想的基本要点</h4><ul><li>采用二进制形式表示数据和指令</li><li>有输入设备、输出设备、运算器、存储器和控制器五大部件组成</li><li>采用存储程序方式（核心思想）</li><li>指令和数据以同等地位存于存储器、可按地址寻访，程序和数据统一存储</li><li>指令由操作码和地址码组成</li></ul><h3 id="指令周期"><a href="#指令周期" class="headerlink" title="指令周期"></a>指令周期</h3><p>一条指令从存储器中取出开始到达执行结束的总时间</p><p>由取指周期和执行周期组成</p><ul><li>取指周期</li></ul><p>取指令的一段时间</p><ul><li>执行周期</li></ul><p>执行指令的一段时间</p><h2 id="计算机软件组成"><a href="#计算机软件组成" class="headerlink" title="计算机软件组成"></a>计算机软件组成</h2><h3 id="目的程序"><a href="#目的程序" class="headerlink" title="目的程序"></a>目的程序</h3><p>用计算机语言编写的程序，计算机可以完全识别并能执行的</p><h3 id="汇编程序"><a href="#汇编程序" class="headerlink" title="汇编程序"></a>汇编程序</h3><p>约定的文字、符号和数字按规定的格式来表示各种不同的指令，再用特殊符号表示指令来编写程序</p><h3 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h3><p>用算法语言编写的程序 识别需进行编译</p><h2 id="计算机的性能指标"><a href="#计算机的性能指标" class="headerlink" title="计算机的性能指标"></a>计算机的性能指标</h2><h3 id="机器字长"><a href="#机器字长" class="headerlink" title="机器字长"></a>机器字长</h3><p>处理机运算器中一次能够完成二进制运算的位数</p><p>字长越长 计算精度越高 与cpu中的寄存器位数有关</p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>一台计算机在某一时间间隔内能够处理的信息量，单位是字节/秒(B/S)</p><h3 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h3><p>从输入有效到系统产生响应之间的时间度量例 微秒(10^-6 S)、纳秒(10^-9 S)</p><h3 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h3><p>在给定时间间隔内 系统实际使用的时间所占的比率，一般用百分比表示</p><h3 id="总线宽度"><a href="#总线宽度" class="headerlink" title="总线宽度"></a>总线宽度</h3><p>一般指cpu中运算器与存储器之间进行互连的内部总线二进制位数</p><h3 id="存储器容量"><a href="#存储器容量" class="headerlink" title="存储器容量"></a>存储器容量</h3><p>存储器中所有存储单元的总数目 KB、MB、GB、TB </p><p>存储器容量越大 记忆的二进制数越多</p><h3 id="存储器带宽"><a href="#存储器带宽" class="headerlink" title="存储器带宽"></a>存储器带宽</h3><p>存储器的速度指标 单位时间内从存储器读出的二进制数信息量 一般用字节数/秒表示</p><h3 id="主频-时钟周期"><a href="#主频-时钟周期" class="headerlink" title="主频/时钟周期"></a>主频/时钟周期</h3><h4 id="主频"><a href="#主频" class="headerlink" title="主频"></a>主频</h4><p>cpu工作节拍受主时钟控制，主时钟不断产生固定频率的时钟，主时钟的频率(f)，叫cpu主频，度量单位是MHz（兆赫兹）、GHz（吉赫兹）</p><p>1KHz = 10^3</p><p>1MHz = 10^6</p><h4 id="时钟周期"><a href="#时钟周期" class="headerlink" title="时钟周期"></a>时钟周期</h4><p>主频的倒数称为cput的时钟周期（T），T=1/f，度量单位是微秒、纳秒</p><h3 id="cpu执行时间"><a href="#cpu执行时间" class="headerlink" title="cpu执行时间"></a>cpu执行时间</h3><p>表示cpu执行一段程序所占用的cpu时间</p><p>cpu执行时间 = cpu时钟周期数 * cpu时钟周期长</p><h4 id="CPI"><a href="#CPI" class="headerlink" title="CPI"></a>CPI</h4><p>表示每条指令周期数，执行一条指令所需的平均时钟周期数</p><p>CPI = 执行某段程序所需的CPU时钟周期数 / 该程序包含的指令条数</p><h4 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h4><p>一个平均时钟周期所执行的指令数</p><h4 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h4><p>每秒百万条指令数</p><p>MIPS = 指令条数 / 程序执行时间 * 10^6</p><p>MIPS值越大 机器速度越快</p><h4 id="MFLOPS"><a href="#MFLOPS" class="headerlink" title="MFLOPS"></a>MFLOPS</h4><p>每秒百万次浮点操作数</p><p>MFLOPS = 程序中给的浮点操作次数 / 程序执行时间 * 10^6</p><p>只用来衡量机器浮点操作的性能，不能体现机器的整体性能</p><h4 id="TFLOPS"><a href="#TFLOPS" class="headerlink" title="TFLOPS"></a>TFLOPS</h4><p>表示每秒万亿次浮点操作次数，该技术指标一般在超级计算机中使用</p><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A.5hy5gld489c0.webp&quot; alt=&quot;加载更多&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="计算机组成原理" scheme="https://codexiaobo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    <category term="408" scheme="https://codexiaobo.github.io/tags/408/"/>
    
  </entry>
  
  <entry>
    <title>spring mvc复习整理三</title>
    <link href="https://codexiaobo.github.io/posts/120786435/"/>
    <id>https://codexiaobo.github.io/posts/120786435/</id>
    <published>2022-05-29T11:57:30.000Z</published>
    <updated>2022-05-29T11:58:21.661Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%82%9F%E7%A9%BA.33nm1kre12k0.webp" alt="悟空"></p><!--sleep--><span id="more"></span><h1 id="spring-mvc-复习整理三（仗剑走天涯）"><a href="#spring-mvc-复习整理三（仗剑走天涯）" class="headerlink" title="spring mvc 复习整理三（仗剑走天涯）"></a>spring mvc 复习整理三（仗剑走天涯）</h1><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同时，就会产生跨域 </p><p>这里先写点spring mvc相关的跨域吧 剩下的知识等学完的在写点吧</p><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）</p><h3 id="跨域的案例"><a href="#跨域的案例" class="headerlink" title="跨域的案例"></a>跨域的案例</h3><table><thead><tr><th>当前页面url</th><th>被请求页面url</th><th>是否跨域</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://www.codexb.cn/">http://www.codexb.cn</a></td><td><a href="http://www.codexb.cn/index.html">http://www.codexb.cn/index.html</a></td><td>不跨域</td><td>同源（协议、域名、端口号相同）</td></tr><tr><td><a href="http://www.codexb.cn/">http://www.codexb.cn</a></td><td><a href="https://www.codexb.cn/">https://www.codexb.cn</a></td><td>跨域</td><td>协议不同(http/https)</td></tr><tr><td><a href="http://www.codexb.cn/">http://www.codexb.cn</a></td><td><a href="http://www.baidu.com/">http://www.baidu.com</a></td><td>跨域</td><td>主域名不同(codexb/baidu)</td></tr><tr><td><a href="http://www.codexb.cn/">http://www.codexb.cn</a></td><td><a href="http://bolg.codexb.cn/">http://bolg.codexb.cn</a></td><td>跨域</td><td>子域名不同(www/bolg)</td></tr><tr><td><a href="http://www.codexb.cn/">http://www.codexb.cn:80</a></td><td>http:<a href="http://www.codexb.cn:8080/">www.codexb.cn:8080</a></td><td>跨域</td><td>端口号不同(80/8080)</td></tr></tbody></table><h3 id="非同源限制"><a href="#非同源限制" class="headerlink" title="非同源限制"></a>非同源限制</h3><p>无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB。</p><p>无法接触非同源网页的 DOM</p><p>无法向非同源地址发送 AJAX 请求</p><h3 id="两种请求"><a href="#两种请求" class="headerlink" title="两种请求"></a>两种请求</h3><p>跨域资源共享”(Cross-origin resource sharing)</p><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>请求方法是下面的其中一个：<code>HEAD</code> <code>GET</code> <code>POST</code></p><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段</p><p>HTTP的头信息不超出以下几种字段：<code>Accept</code> <code>Accept-Language</code> <code>Content-Language</code> <code>Last-Event-ID</code> <code>Content-Type</code></p><p><code>Content-Type</code>：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</p><p>对于简单请求，浏览器直接发出CORS请求。就是在头信息之中，增加一个Origin字段 Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/cors</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://127.0.0.1:8848</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.ydlclass.com</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0...</span><br></pre></td></tr></table></figure><p>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段，就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获</p><p>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段 </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>http://127.0.0.1:8848</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br><span class="line"><span class="attribute">Access-Control-Expose-Headers</span><span class="punctuation">: </span>FooBar</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br></pre></td></tr></table></figure><p><code>Access-Control-Allow-Origin</code>:该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求</p><p><code>Access-Control-Allow-Credentials</code>: 该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可</p><p><code>Access-Control-Expose-Headers</code>:该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定</p><p><code>withCredentials 属性</code>:CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段 为true 另一方面，必须在AJAX请求中打开withCredentials属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理 但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.withCredentials = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie</p><h4 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h4><blockquote><p>预检请求</p></blockquote><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。OPTIONS</p><p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错</p><p>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/cors</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://127.0.0.1:8848</span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span><span class="punctuation">: </span>PUT</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span><span class="punctuation">: </span>X-Custom-Header</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.ydlclass.com</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0...</span><br></pre></td></tr></table></figure><p>预检请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源</p><p><code>Access-Control-Request-Method</code>:该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT</p><p><code>Access-Control-Request-Headers</code>:该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header</p><blockquote><p>预检请求的响应</p></blockquote><p>服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应</p><p>如果服务器否定了预检请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。</p><p>服务器回应的其他CORS相关字段</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Methods</span><span class="punctuation">: </span>GET, POST, PUT</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span><span class="punctuation">: </span>X-Custom-Header</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br><span class="line"><span class="attribute">Access-Control-Max-Age</span><span class="punctuation">: </span>1728000</span><br></pre></td></tr></table></figure><p><code>Access-Control-Allow-Methods</code>:该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p><p><code>Access-Control-Allow-Headers</code>:如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在预检中请求的字段。</p><p><code>Access-Control-Allow-Credentials</code>:该字段与简单请求时的含义相同。</p><p><code>Access-Control-Max-Age</code>:该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求</p><h3 id="跨域案例"><a href="#跨域案例" class="headerlink" title="跨域案例"></a>跨域案例</h3><ul><li>html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>商品页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// const instance = axios.create(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// baseURL:&#x27;http://127.0.0.1:8080&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="comment">//    // 为给定 ID 的 user 创建请求</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//    instance.get(&#x27;/goods/findAll&#x27;)</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        .then(function (response) &#123;</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//            console.log(response);</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        &#125;)</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        .catch(function (error) &#123;</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//            console.log(error);</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        &#125;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="comment">//    // 上面的请求也可以这样做</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//    instance.get(&#x27;/goods/findAll&#x27;, &#123;</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        params: &#123;</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//            id: 1</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        &#125;</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//    &#125;)</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        .then(function (response) &#123;</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//            console.log(response);</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        &#125;)</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        .catch(function (error) &#123;</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//            console.log(error);</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        &#125;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="comment">//    instance.post(&#x27;/goods/save&#x27;, &#123;</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        name: &#x27;电脑&#x27;,</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        price: 10000</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//    &#125;)</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        .then(function (response) &#123;</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//            console.log(response);</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        &#125;)</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        .catch(function (error) &#123;</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//            console.log(error);</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">//        &#125;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">$.ajax( &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span> : <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span> : <span class="string">&quot;http://localhost:8080/goods/findAll&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">dataType</span> : <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;get请求！---------------------&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $.ajax( &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span> : <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span> : <span class="string">&quot;http://localhost:8080/goods/findAll/1&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">dataType</span> : <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;get请求！---------------------&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    $.ajax( &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span> : <span class="string">&quot;DELETE&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span> : <span class="string">&quot;http://localhost:8080/goods/delete/1&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">dataType</span> : <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;delete请求！---------------------&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    $.ajax( &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span> : <span class="string">&quot;put&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span> : <span class="string">&quot;http://localhost:8080/goods/update&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">dataType</span> : <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;<span class="attr">name</span>:<span class="string">&quot;电脑&quot;</span>,<span class="attr">price</span>:<span class="number">123</span>&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;get请求！---------------------&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    $.ajax( &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span> : <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span> : <span class="string">&quot;http://localhost:8080/goods/save&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">dataType</span> : <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;<span class="attr">name</span>:<span class="string">&quot;电脑&quot;</span>,<span class="attr">price</span>:<span class="number">123</span>&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;get请求！---------------------&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/goods&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;http://127.0.0.1:8848&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Goods&gt; goods = List.of(</span><br><span class="line">                <span class="keyword">new</span> Goods(<span class="string">&quot;电脑&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="string">&quot;20000&quot;</span>)),</span><br><span class="line">                <span class="keyword">new</span> Goods(<span class="string">&quot;电话&quot;</span>,<span class="keyword">new</span> BigDecimal(<span class="string">&quot;4000&quot;</span>))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(goods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findAll/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">findAllById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods(<span class="string">&quot;电话&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="string">&quot;4000&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> R.success(goods);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">insert</span><span class="params">(<span class="meta">@RequestBody</span> Goods goods)</span></span>&#123;</span><br><span class="line">        Goods goodss = <span class="keyword">new</span> Goods(goods.getName(), goods.getPrice());</span><br><span class="line">        <span class="keyword">return</span> R.success(goodss);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(value = &quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">update</span><span class="params">(Goods goods)</span></span>&#123;</span><br><span class="line">        Goods goods1 = <span class="keyword">new</span> Goods(goods.getName(), goods.getPrice());</span><br><span class="line">        <span class="keyword">return</span> R.success(goods1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>MultipartResolver用于处理文件上传。当收到请求时，DispatcherServlet 的 checkMultipart() 方法会调用 MultipartResolver 的 isMultipart() 方法判断请求中 是否包含文件。如果请求数据中包含文件，则调用 MultipartResolver 的 resolveMultipart() 方法对请求的数据进行解析，然后将文件数据解析成 MultipartFile 并封装在 MultipartHttpServletRequest (继承了 HttpServletRequest) 对象中，最后传递给 Controller</p><p>MultipartResolver 默认不开启，需要手动开启</p><h3 id="文件上传前端表单的要求"><a href="#文件上传前端表单的要求" class="headerlink" title="文件上传前端表单的要求"></a>文件上传前端表单的要求</h3><p>表单 必须 将 method设置为POST 并将enctype设置为 multipart/form-data 只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器</p><p><code>application/x-www-form-urlencoded</code>：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式</p><p><code>multipart/form-data</code>：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码</p><h3 id="文件上床操作"><a href="#文件上床操作" class="headerlink" title="文件上床操作"></a>文件上床操作</h3><p>需要两个依赖 <code>commons-fileupload</code> <code>commons-io</code></p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spring-mvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/file/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">fileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile multipartFile)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String originalFilename = multipartFile.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        String s = UUID.randomUUID().toString() + originalFilename.substring(originalFilename.indexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        MyFile myFile = <span class="keyword">new</span> MyFile();</span><br><span class="line"></span><br><span class="line">        myFile.setOriginalFileName(multipartFile.getOriginalFilename());</span><br><span class="line">        myFile.setNewFileName(s);</span><br><span class="line">        myFile.setSize(multipartFile.getSize());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            multipartFile.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;D://&quot;</span> + s));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CommonsMultipartFile常用方法</p></blockquote><p><code>String getOriginalFilename()</code>：获取上传文件的原名</p><p><code>InputStream getInputStream()</code>：获取文件流</p><p><code>void transferTo(File dest)</code>：将上传文件保存到一个目录文件中</p><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><h4 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h4><blockquote><p>传统方式</p></blockquote><ul><li>pom</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">download1</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">    ServletOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这个文件名是前端传给你的要下载的图片的id</span></span><br><span class="line">        <span class="comment">// 然后根据id去数据库查询出对应的文件的相关信息，包括url，文件名等</span></span><br><span class="line">        String  fileName = <span class="string">&quot;小博.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、设置response 响应头，处理中文名字乱码问题</span></span><br><span class="line">        response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//字符编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">        <span class="comment">//设置响应头，就是当用户想把请求所得的内容存为一个文件的时候提供一个默认的文件名。</span></span><br><span class="line">        <span class="comment">//Content-Disposition属性有两种类型：inline 和 attachment </span></span><br><span class="line">        <span class="comment">//inline ：将文件内容直接显示在页面 </span></span><br><span class="line">        <span class="comment">//attachment：弹出对话框让用户下载具体例子：</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">                           <span class="string">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过url获取文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/upload/&quot;</span>+fileName);</span><br><span class="line">        fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        outputStream = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fileInputStream.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> R.fail();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( fileInputStream != <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( outputStream != <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接向response的输出流中写入对应的文件流</p><blockquote><p>使用ResponseEntity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; download2()&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String fileName = <span class="string">&quot;小博.jpg&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = FileUtils.readFileToByteArray(<span class="keyword">new</span> File(<span class="string">&quot;D:/upload/&quot;</span>+fileName));</span><br><span class="line">        HttpHeaders headers=<span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        <span class="comment">// Content-Disposition就是当用户想把请求所得的内容存为一个文件的时候提供一个默认的文件名。</span></span><br><span class="line">        headers.set(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        headers.set(<span class="string">&quot;charsetEncoding&quot;</span>,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        headers.set(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line">        ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; entity=<span class="keyword">new</span> ResponseEntity&lt;&gt;(bytes,headers, HttpStatus.OK);</span><br><span class="line">        <span class="keyword">return</span> entity;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 ResponseEntity&lt;byte[]&gt;来向前端返回文件</p><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>ebSocket 协议提供了一种标准化方式，可通过单个 TCP 连接在客户端和服务器之间建立全双工、双向通信通道。它是与 HTTP 不同的 TCP 协议，但旨在通过 HTTP 工作，使用端口 80 和 443</p><h3 id="Http与WebSocket区别"><a href="#Http与WebSocket区别" class="headerlink" title="Http与WebSocket区别"></a>Http与WebSocket区别</h3><h4 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h4><p>在 HTTP 和 REST 中，一个应用程序被建模为多个 URL。为了与应用程序交互，客户端访问这些 URL，请求-响应样式。服务器根据 HTTP URL、方法和请求头将请求路由到适当的处理程序</p><h4 id="WebSocket-1"><a href="#WebSocket-1" class="headerlink" title="WebSocket"></a>WebSocket</h4><p>WebSocket中，通常只有一个 URL 用于初始连接。随后，所有应用程序消息都在同一个 TCP 连接上流动</p><h3 id="短轮询"><a href="#短轮询" class="headerlink" title="短轮询"></a>短轮询</h3><p>用JS写个死循环（setInterval），不停的去请求服务器中的库存量是多少，然后刷新到这个页面当中，这其实就是所谓的短轮询。</p><p>短轮询有明显的坏处，那就是你很浪费服务器和客户端的资源。如果有1000个人停留在某个商品详情页面，那就是说会有1000个客户端不停的去请求服务器获取库存量，这显然是不合理的</p><h3 id="长轮询"><a href="#长轮询" class="headerlink" title="长轮询"></a>长轮询</h3><p>长轮询中，服务器如果检测到库存量没有变化的话，将会把当前请求挂起一段时间（这个时间也叫作超时时间，一般是几十秒）。在这个时间里，服务器会去检测库存量有没有变化，检测到变化就立即返回，否则就一直等到超时为止</p><p>长轮询的坏处：因为把请求挂起同样会导致资源的浪费，假设还是1000个人停留在某个商品详情页面，那就很有可能服务器这边挂着1000个线程，在不停检测库存量，这依然是有问题的</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>如果消息量相对较低（例如监控网络故障，新闻、邮件和社交提要需要动态更新，但每隔几分钟更新一次可能也完全没问题），HTTP轮询可以提供有效的解决方案。低延迟、高频率和高容量的组合是使用 WebSocket 的最佳案例</p><h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        websocket--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-messaging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>websocket调试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float: left; padding: 20px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>location:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;serverUrl&quot;</span> <span class="attr">size</span>=<span class="string">&quot;35&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;connect()&quot;</span>&gt;</span>connect<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;wsclose()&quot;</span>&gt;</span>disConnect<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span>message:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;txtMsg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendEvent()&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float: left; margin-left: 20px; padding-left: 20px; width: 350px; border-left: solid 1px #cccccc;&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span>消息记录<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: solid 1px #999999;border-top-color: #CCCCCC;border-left-color: #CCCCCC; padding: 5px;width: 100%;height: 172px;overflow-y: scroll;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;echo-log&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clearLog()&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: relative; top: 3px;&quot;</span>&gt;</span>清除消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下面是h5原生websocket js写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> output ;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> websocket;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span>&#123; <span class="comment">//初始化连接</span></span></span><br><span class="line"><span class="javascript">        output = <span class="built_in">document</span>.getElementById(<span class="string">&quot;echo-log&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> inputNode = <span class="built_in">document</span>.getElementById(<span class="string">&quot;serverUrl&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> wsUri = inputNode.value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="javascript">            websocket = <span class="keyword">new</span> WebSocket(wsUri);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">catch</span>(ex)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(ex)</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;对不起websocket连接异常&quot;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        connecting();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.addEventListener(<span class="string">&quot;load&quot;</span>, connecting, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">connecting</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        websocket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123; onOpen(evt) &#125;;</span></span><br><span class="line"><span class="javascript">        websocket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123; onClose(evt) &#125;;</span></span><br><span class="line"><span class="javascript">        websocket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123; onMessage(evt) &#125;;</span></span><br><span class="line"><span class="javascript">        websocket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123; onError(evt) &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sendEvent</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> msg = <span class="built_in">document</span>.getElementById(<span class="string">&quot;txtMsg&quot;</span>).value</span></span><br><span class="line"><span class="javascript">        doSend(msg);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//连接上事件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">onOpen</span>(<span class="params">evt</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        writeToScreen(<span class="string">&quot;CONNECTED&quot;</span>);</span></span><br><span class="line"><span class="javascript">        doSend(<span class="string">&quot;WebSocket 已经连接成功！&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//关闭事件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">onClose</span>(<span class="params">evt</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        writeToScreen(<span class="string">&quot;连接已经断开！&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//后端推送事件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">onMessage</span>(<span class="params">evt</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        writeToScreen(<span class="string">&#x27;&lt;span style=&quot;color: blue;&quot;&gt;服务器: &#x27;</span> + evt.data+<span class="string">&#x27;&lt;/span&gt;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">onError</span>(<span class="params">evt</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        writeToScreen(<span class="string">&#x27;&lt;span style=&quot;color: red;&quot;&gt;异常信息:&lt;/span&gt; &#x27;</span> + evt.data);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">doSend</span>(<span class="params">message</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        writeToScreen(<span class="string">&quot;客户端A: &quot;</span> + message);</span></span><br><span class="line"><span class="javascript">        websocket.send(message);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//清除div的内容</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">clearLog</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        output.innerHTML = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//浏览器主动断开连接</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">wsclose</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        websocket.close();</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">writeToScreen</span>(<span class="params">message</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> pre = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="javascript">        pre.innerHTML = message;</span></span><br><span class="line"><span class="javascript">        output.appendChild(pre);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>config</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addHandler(<span class="keyword">new</span> MessageHandler(), <span class="string">&quot;/message&quot;</span>)</span><br><span class="line">                .addInterceptors(<span class="keyword">new</span> HttpSessionHandshakeInterceptor())</span><br><span class="line">                .setAllowedOrigins(<span class="string">&quot;*&quot;</span>); <span class="comment">//允许跨域访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageHandler</span> <span class="keyword">extends</span> <span class="title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger log = LoggerFactory.getLogger(MessageHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来保存连接进来session</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;WebSocketSession&gt; sessions = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接进入这个方法处理，将session从 list中删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sessions.remove(session);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125; 连接已经关闭，现从list中删除 ,状态信息&#123;&#125;&quot;</span>, session, status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 三次握手成功，进入这个方法处理，将session 加入list 中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sessions.add(session);</span><br><span class="line">        log.info(<span class="string">&quot;用户&#123;&#125;连接成功.... &quot;</span>,session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理客户发送的信息，将客户发送的信息转给其他用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(WebSocketSession session, WebSocketMessage&lt;?&gt; message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;收到来自客户端的信息: &#123;&#125;&quot;</span>,message.getPayload());</span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(<span class="string">&quot;当前时间：&quot;</span>+</span><br><span class="line">                LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>)) +<span class="string">&quot;,收到来自客户端的信息!&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span>(WebSocketSession wss : sessions)</span><br><span class="line">            <span class="keyword">if</span>(!wss.getId().equals(session.getId()))&#123;</span><br><span class="line">                wss.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%82%9F%E7%A9%BA.33nm1kre12k0.webp&quot; alt=&quot;悟空&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="框架" scheme="https://codexiaobo.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring mvc" scheme="https://codexiaobo.github.io/tags/spring-mvc/"/>
    
  </entry>
  
  <entry>
    <title>spting mvc复习整理二</title>
    <link href="https://codexiaobo.github.io/posts/2829445748/"/>
    <id>https://codexiaobo.github.io/posts/2829445748/</id>
    <published>2022-05-23T11:16:12.000Z</published>
    <updated>2022-05-23T11:17:46.673Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E8%84%91%E6%AE%8B.2onc92i9z7k0.webp" alt="脑残"></p><!--sleep--><span id="more"></span><h1 id="spring-mvc-复习整理二（仗剑走天涯）"><a href="#spring-mvc-复习整理二（仗剑走天涯）" class="headerlink" title="spring mvc 复习整理二（仗剑走天涯）"></a>spring mvc 复习整理二（仗剑走天涯）</h1><h2 id="Spring-Mvc-核心技术"><a href="#Spring-Mvc-核心技术" class="headerlink" title="Spring Mvc 核心技术"></a>Spring Mvc 核心技术</h2><h3 id="设定字符集"><a href="#设定字符集" class="headerlink" title="设定字符集"></a>设定字符集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">encoding</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">utf</span>-8&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><h3 id="返回JSON数据-序列化"><a href="#返回JSON数据-序列化" class="headerlink" title="返回JSON数据(序列化)"></a>返回JSON数据(序列化)</h3><p>ajax请求后台获取数据，而不需要访问任何的页面，这种场景在前后分离的项目当中尤其重要</p><p>将我们的对象转化为json字符串。</p><p>将返回的内容直接写入响应体，不走视图解析器。</p><p>然后将Content-Type设置为application/json即可</p><h4 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h4><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        fastjson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.80<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spring-mvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;fastjson&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 这里顺序不能反，一定先写text/html,不然ie下会出现下载提示 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">json1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;() &#123;&#123;</span><br><span class="line">            add(<span class="keyword">new</span> User(<span class="string">&quot;xiaobo&quot;</span>, <span class="string">&quot;xiaobo&quot;</span>));</span><br><span class="line">            add(<span class="keyword">new</span> User(<span class="string">&quot;wangyibo&quot;</span>, <span class="keyword">null</span>));</span><br><span class="line">        &#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h4><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jackson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spring-mvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 自定义Jackson的objectMapper --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;customObjectMapper&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入我们写的对jackson的配置的bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;customObjectMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.config.CustomObjectMapper&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stringToDateConverter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.config.DateConvertor&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>config</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomObjectMapper</span> <span class="keyword">extends</span> <span class="title">ObjectMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomObjectMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">//去掉默认的时间戳格式</span></span><br><span class="line">        configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//设置为东八区</span></span><br><span class="line">        setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;GMT+8&quot;</span>));</span><br><span class="line">        <span class="comment">//设置日期转换yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">        setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置输入:禁止把POJO中值为null的字段映射到json字符串中</span></span><br><span class="line">        configure(SerializationFeature.WRITE_NULL_MAP_VALUES, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 空值不序列化</span></span><br><span class="line">        setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        <span class="comment">// 反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line">        <span class="comment">// 序列化枚举是以toString()来输出，默认false，即默认以name()来输出</span></span><br><span class="line">        configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(<span class="meta">@RequestBody</span> UserVO user)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><h4 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h4><ul><li>config</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConvertor</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Date parse = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            parse = simpleDateFormat.parse(source);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>spring-mvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stringToDateConverter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.config.DateConvertor&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h4><p>@DateTimeFormat：当从requestParam中获取string参数并需要转化为Date类型时，会根据此注解的参数pattern的格式进行转化 springmvc提供的</p><p>@JsonFormat：当从请求体中获取json字符序列，需要反序列化为对象时，时间类型会按照这个注解的属性内容进行处理 jackson提供的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(</span></span><br><span class="line"><span class="meta">            pattern = &quot;yyyy-MM-dd&quot;,</span></span><br><span class="line"><span class="meta">            timezone = &quot;GMT-8&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br></pre></td></tr></table></figure><h4 id="大致处理过程"><a href="#大致处理过程" class="headerlink" title="大致处理过程"></a>大致处理过程</h4><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2.3wa1der4px00.webp" alt="数据转换"></p><h3 id="数据检验"><a href="#数据检验" class="headerlink" title="数据检验"></a>数据检验</h3><p>JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架</p><table><thead><tr><th>Constraint</th><th>详细信息</th></tr></thead><tbody><tr><td>@Null</td><td>被注解的元素必须为 null</td></tr><tr><td>@NotNull</td><td>被注解的元素必须不为 null</td></tr><tr><td>@AssertTrue</td><td>被注解的元素必须为 true</td></tr><tr><td>@AssertFalse</td><td>被注解的元素必须为 false</td></tr><tr><td>@Min(value)</td><td>被注解的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@Max(value)</td><td>被注解的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@DecimalMin(value)</td><td>被注解的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMax(value)</td><td>被注解的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Size(max, min)</td><td>被注解的元素的大小必须在指定的范围内</td></tr><tr><td>@Digits (integer, fraction)</td><td>被注解的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td>被注解的元素必须是一个过去的日期</td></tr><tr><td>@Future</td><td>被注解的元素必须是一个将来的日期</td></tr><tr><td>@Pattern(value)</td><td>被注解的元素必须符合指定的正则表达式</td></tr><tr><td>@Email</td><td>被注解的元素必须是电子邮箱地址</td></tr><tr><td>@Length</td><td>被注解的字符串的大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>被注解的字符串的必须非空</td></tr><tr><td>@Range</td><td>被注解的元素必须在合适的范围内</td></tr></tbody></table><h4 id="spring-mvc-数据校验"><a href="#spring-mvc-数据校验" class="headerlink" title="spring mvc 数据校验"></a>spring mvc 数据校验</h4><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        数据检验--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.9.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>data</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1([358][0-9]|4[579]|66|7[0135678]|9[89])[0-9]&#123;8&#125;$&quot;, message = &quot;手机号码不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(value = 1,message = &quot;年龄不能小于&#123;value&#125;岁&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 120,message = &quot;年龄不能大于&#123;value&#125;岁&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@Past(message = &quot;必须是一个之前的时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>spring-mvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;localValidator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;providerClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.hibernate.validator.HibernateValidator&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">&quot;localValidator&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><h4 id="默认视图解析器"><a href="#默认视图解析器" class="headerlink" title="默认视图解析器"></a>默认视图解析器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/page/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>想要添加新的视图解析器可以删除之前的也可以添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>order表示视图解析的 优先级 ,数字越小优先级越大（即：0为优先级最高，所以优先进行处理视图）</p><p>就是 order为0时，modelandview最先到达，然后返回到前端浏览器，然后才往order大的走</p><h4 id="配置Thymeleaf视图解析器模板"><a href="#配置Thymeleaf视图解析器模板" class="headerlink" title="配置Thymeleaf视图解析器模板"></a>配置Thymeleaf视图解析器模板</h4><ul><li>spring-mvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf的视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;templateResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:/thymeleafs/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cacheable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里要设置编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--thymeleaf的模板引擎配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;templateEngine&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring4.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;templateResolver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSpringELCompiler&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring4.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;templateEngine&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        thymeleaf模板--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>命名空间</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><h3 id="全局异常捕获"><a href="#全局异常捕获" class="headerlink" title="全局异常捕获"></a>全局异常捕获</h3><h4 id="HandlerExceptionResolver"><a href="#HandlerExceptionResolver" class="headerlink" title="HandlerExceptionResolver"></a>HandlerExceptionResolver</h4><ul><li>异常处理的两种形式</li></ul><p>一种是当前方法捕获处理（try-catch），这种处理方式会造成业务代码和异常处理代码的耦合</p><p>另一种是自己不处理，而是抛给调用者处理（throws），调用者再抛给它的调用者，也就是一直向上抛，指导传递给浏览器</p><p>所以我们可以用HandlerExceptionResolver统一进行处理</p><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/HandlerExcpetionRsoulver%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.53ypdxvw0ig0.webp" alt="HandlerExcpetionRsoulver统一异常处理"></p><p>service层尽量不要处理异常，如果自己捕获并处理了，异常就不生效了。特别是不要生吞异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> ArithmeticException) &#123;</span><br><span class="line">            <span class="keyword">return</span> ArithmeticExceptionResolver();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> modelAndView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">ArithmeticExceptionResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line"></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;exception&quot;</span>, <span class="string">&quot;系统维护中&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.handler.GlobalExceptionResolver&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h4><p>该注解同样能实现异常的全局统一处理</p><h4 id="ControllerAdvice三个功能"><a href="#ControllerAdvice三个功能" class="headerlink" title="@ControllerAdvice三个功能"></a>@ControllerAdvice三个功能</h4><ul><li><p>处理全局异常</p></li><li><p>预设全局数据</p></li><li><p>请求参数预处理</p></li></ul><p><strong>@ControllerAdvice 配合 @ExceptionHandler 实现全局异常处理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionResovlerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">processGrithmeticException</span><span class="params">(ArithmeticException exception, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;exception&quot;</span>,<span class="string">&quot;系统繁忙，请稍后重试&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.error(<span class="string">&quot;发生了数学类的异常&quot;</span>,exception);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;exception&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">processBusinessException</span><span class="params">(BusinessException exception,Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;exception&quot;</span>,<span class="string">&quot;系统繁忙，请稍后重试&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        log.error(<span class="string">&quot;发生了业务类的异常&quot;</span>,exception);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;exception&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">processException</span><span class="params">(Exception exception,Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;exception&quot;</span>,<span class="string">&quot;系统繁忙，请稍后重试&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        log.error(<span class="string">&quot;发生了普通类的异常&quot;</span>,exception);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;exception&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="资源处理"><a href="#资源处理" class="headerlink" title="资源处理"></a>资源处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    静态资源处理 放行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;classpath:/static/js/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;classpath:/static/css/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/image/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;classpath:/static/image/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>SpringMVC提供的拦截器类似于JavaWeb中的过滤器，只不过SpringMVC拦截器只拦截被前端控制器拦截的请求，而过滤器拦截从前端发送的【任意】请求</p><p><strong>spring mvc拦截器常见的应用场景</strong></p><p>登录认证拦截器</p><p>字符过滤器</p><p>日志操作拦截器</p><p><img src="https://raw.githubusercontent.com/codexiaobo/image/main/java/springmvc%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8.59r92jk8mb40.webp" alt="springmvc过滤器和拦截器"></p><h4 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;session&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/thymeleaf/login&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;========preHandler&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        true放行 false不放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========postHandler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>spring-mvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                mvc:mapping：拦截的路径</span></span><br><span class="line"><span class="comment">                /**：是指所有文件夹及其子孙文件夹</span></span><br><span class="line"><span class="comment">                /*：是指所有文件夹，但不包含子孙文件夹</span></span><br><span class="line"><span class="comment">                /：Web项目的根目录</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                    mvc:exclude-mapping：不拦截的路径,不拦截登录路径</span></span><br><span class="line"><span class="comment">                    /toLogin：跳转到登录页面</span></span><br><span class="line"><span class="comment">                    /login：登录操作</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/thymeleaf/toLogin&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/thymeleaf/login&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--class属性就是我们自定义的拦截器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loginInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.interceptor.LoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="拦截器规则"><a href="#拦截器规则" class="headerlink" title="拦截器规则"></a>拦截器规则</h4><p><code>preHandle</code>：Controller方法处理请求前执行，根据拦截器定义的顺序，正向执行</p><p><code>postHandle</code>：Controller方法处理请求后执行，根据拦截器定义的顺序，逆向执行。需要所有的preHandle方法都返回true时才会调用</p><p><code>afterCompletion</code>：View视图渲染后处理方法：根据拦截器定义的顺序，逆向执行。preHandle返回true也会调用</p><h4 id="spring-mvc拦截器流程"><a href="#spring-mvc拦截器流程" class="headerlink" title="spring mvc拦截器流程"></a>spring mvc拦截器流程</h4><p><img src="https://raw.githubusercontent.com/codexiaobo/image/main/java/%E6%8B%A6%E6%88%AA%E5%99%A8%E6%B5%81%E7%A8%8B%E5%9B%BE.mmidmwma474.webp" alt="拦截器流程图"></p><h3 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h3><p>restful是一种编程风格</p><p>利用@RequestMapping 指定要处理请求的URI模板和HTTP请求的动作类型</p><p>利用@PathVariable讲URI请求模板中的变量映射到处理方法参数上</p><p>利用Ajax,在客户端发出PUT、DELETE动作的请求</p><ul><li>RestfulController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Goods&gt; goods = List.of(</span><br><span class="line">                <span class="keyword">new</span> Goods(<span class="string">&quot;电脑&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="string">&quot;20000&quot;</span>)),</span><br><span class="line">                <span class="keyword">new</span> Goods(<span class="string">&quot;电话&quot;</span>,<span class="keyword">new</span> BigDecimal(<span class="string">&quot;4000&quot;</span>))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(goods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findAll/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">findAllById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods(<span class="string">&quot;电话&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="string">&quot;4000&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> R.success(goods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">insert</span><span class="params">(<span class="meta">@RequestBody</span> Goods goods)</span></span>&#123;</span><br><span class="line">        Goods goodss = <span class="keyword">new</span> Goods(goods.getName(), goods.getPrice());</span><br><span class="line">        <span class="keyword">return</span> R.success(goodss);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(value = &quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">update</span><span class="params">(Goods goods)</span></span>&#123;</span><br><span class="line">        Goods goods1 = <span class="keyword">new</span> Goods(goods.getName(), goods.getPrice());</span><br><span class="line">        <span class="keyword">return</span> R.success(goods1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Goods</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>common</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer CODE_SUCCESS = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer CODE_ERROR = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MESSAGE_SUCCESS = <span class="string">&quot;操作成功&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MESSAGE_ERROR = <span class="string">&quot;操作失败&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">success</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.builder().code(CODE_SUCCESS)</span><br><span class="line">                .message(MESSAGE_SUCCESS).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">success</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.builder().code(CODE_SUCCESS)</span><br><span class="line">                .message(MESSAGE_SUCCESS).data(data).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">error</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.builder().code(CODE_ERROR)</span><br><span class="line">                .message(MESSAGE_ERROR).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>goods.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>商品页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 为给定 ID 的 user 创建请求</span></span></span><br><span class="line"><span class="javascript">    axios.get(<span class="string">&#x27;/goods/findAll&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 上面的请求也可以这样做</span></span></span><br><span class="line"><span class="javascript">    axios.get(<span class="string">&#x27;/goods/findAll&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">params</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">id</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    axios.post(<span class="string">&#x27;/goods/save&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;电脑&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">price</span>: <span class="number">10000</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// $.ajax( &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     type : &quot;GET&quot;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     url : &quot;http://localhost:8080/goods/findAll/1&quot;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     dataType : &quot;json&quot;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     success : function(data) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         console.log(&quot;get请求！---------------------&quot;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         console.log(data)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// $.ajax( &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     type : &quot;DELETE&quot;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     url : &quot;http://localhost:8080/goods/delete/1&quot;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     dataType : &quot;json&quot;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     success : function(data) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         console.log(&quot;delete请求！---------------------&quot;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         console.log(data)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// $.ajax( &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     type : &quot;put&quot;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     url : &quot;http://localhost:8080/goods/update&quot;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     dataType : &quot;json&quot;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     data: &#123;name:&quot;电脑&quot;,price:123&#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     success : function(data) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         console.log(&quot;get请求！---------------------&quot;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         console.log(data)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// $.ajax( &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     type : &quot;post&quot;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     url : &quot;http://localhost:8080/goods/save&quot;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     dataType : &quot;json&quot;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     data: &#123;name:&quot;电脑&quot;,price:123&#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     success : function(data) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         console.log(&quot;get请求！---------------------&quot;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         console.log(data)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/toGoods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toGoods</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;goods&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E8%84%91%E6%AE%8B.2onc92i9z7k0.webp&quot; alt=&quot;脑残&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="框架" scheme="https://codexiaobo.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring mvc" scheme="https://codexiaobo.github.io/tags/spring-mvc/"/>
    
  </entry>
  
  <entry>
    <title>spring mvc复习整理一</title>
    <link href="https://codexiaobo.github.io/posts/2129639079/"/>
    <id>https://codexiaobo.github.io/posts/2129639079/</id>
    <published>2022-05-22T12:28:46.000Z</published>
    <updated>2022-05-22T12:37:43.874Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%9C%80%E5%90%8E10%E5%A4%A9.5sfd7ymc8mg0.webp" alt="最后10天"></p><!--sleep--><span id="more"></span><p> spring mvc 复习整理一（仗剑走天涯）</p><h2 id="什么是Spring-Mvc"><a href="#什么是Spring-Mvc" class="headerlink" title="什么是Spring Mvc"></a>什么是Spring Mvc</h2><p>Spring Web MVC 是最初建立在 Servlet API 之上的 Web 框架，从一开始就包含在 Spring Framework 中。正式名称 Spring Web MVC 来自其源模块的名称 spring-webmvc ，但它更常被称为 Spring MVC</p><h2 id="Spring-Mvc-发展"><a href="#Spring-Mvc-发展" class="headerlink" title="Spring Mvc 发展"></a>Spring Mvc 发展</h2><h3 id="先来说一下MVC软件设计思想"><a href="#先来说一下MVC软件设计思想" class="headerlink" title="先来说一下MVC软件设计思想"></a>先来说一下MVC软件设计思想</h3><p>M(Model 模型层):完成具体的业务，进行数据的查询 JavaBean</p><p>V(View 视图层):用来做展示的 JSP</p><p>C(Controller 控制层): 控制器的作用就是搜集页面传来的原始数据，或者调用模型获得数据交给视图层处理 Servlet</p><p>jsp –&gt; Servlet –&gt; javaBean</p><h3 id="Spring-Mvc"><a href="#Spring-Mvc" class="headerlink" title="Spring Mvc"></a>Spring Mvc</h3><p>分成了几块 视图和数据渲染页面 –&gt; Controller –&gt; Servler –&gt; dao –&gt;数据库</p><h4 id="Spring-Mvc特点"><a href="#Spring-Mvc特点" class="headerlink" title="Spring Mvc特点"></a>Spring Mvc特点</h4><ul><li><p>结构松散，几乎可以在 Spring MVC 中使用各类视图，不仅仅是jsp</p></li><li><p>松耦合，各个模块分离</p></li><li><p>与 Spring 无缝集成</p></li></ul><h2 id="Spring-Mvc基本搭建"><a href="#Spring-Mvc基本搭建" class="headerlink" title="Spring Mvc基本搭建"></a>Spring Mvc基本搭建</h2><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc-review<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>web.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置一个ContextLoaderListener，他会在servlet容器启动时帮我们初始化spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定启动spring容器的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册DispatcherServlet，这是springmvc的核心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载时先启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>jsp</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>spring-mvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    扫包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dream.xiaobo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    让spring mvc 不处理静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    让spring mvc 自带注解生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 处理映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 处理器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/page/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/springMvc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.controller.SpringMvcController&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMvcController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;spring-mvc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ModelAndView&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">基于注解式</span><br><span class="line"></span><br><span class="line">- controller</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/xiaobo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;spring-mvc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;annotation&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Mvc核心组件"><a href="#Spring-Mvc核心组件" class="headerlink" title="Spring Mvc核心组件"></a>Spring Mvc核心组件</h2><h3 id="DispatcherServlet：中央处理器，前端控制器"><a href="#DispatcherServlet：中央处理器，前端控制器" class="headerlink" title="DispatcherServlet：中央处理器，前端控制器"></a>DispatcherServlet：中央处理器，前端控制器</h3><p>用户请求到达前端控制器（dispatcherServlet），他是整个流程控制的中心，由它负责调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</p><p>这玩意可以理解成一个 咨询处，你去某个地方办事，先去咨询处问问我们应该先干什么，等第一件事做完了，可以接着去咨询处咨询，你的下一步工作应该是什么</p><h3 id="Handler：处理器"><a href="#Handler：处理器" class="headerlink" title="Handler：处理器"></a>Handler：处理器</h3><p>Handler也叫后端控制器，在DispatcherServlet的控制下Handler对 具体的用户请求 进行处理，Handler涉及到 具体的用户业务请求 这玩意就是你写的controller</p><h3 id="View：视图"><a href="#View：视图" class="headerlink" title="View：视图"></a>View：视图</h3><p>一般情况下，需要通过 页面标签或页面模版技术 将模型数据通过页面展示给用户</p><p>视图技术：jsp thymeleaf freenmarker</p><h3 id="HandlerMapping：处理器映射器"><a href="#HandlerMapping：处理器映射器" class="headerlink" title="HandlerMapping：处理器映射器"></a>HandlerMapping：处理器映射器</h3><p>HandlerMapping负责根据 用户请求url 找到 Handler 即处理器，springmvc提供了不同的 处理器映射器 实现，如配置文件方式，实现接口方式，注解方式等</p><h3 id="Handleadapter-处理器适配器"><a href="#Handleadapter-处理器适配器" class="headerlink" title="Handleadapter: 处理器适配器"></a>Handleadapter: 处理器适配器</h3><p>HandlerAdapter负责调用具体的处理器，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。我们写的controller中的方法，将来就是会由处理器适配器调用</p><h3 id="ViewResolver：视图解析器"><a href="#ViewResolver：视图解析器" class="headerlink" title="ViewResolver：视图解析器"></a>ViewResolver：视图解析器</h3><p>View Resolver负责将处理结果生成View视图，View Resolver首先根据 逻辑视图名 解析成 物理视图名 即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户</p><h2 id="Spring-Mvc执行流程"><a href="#Spring-Mvc执行流程" class="headerlink" title="Spring Mvc执行流程"></a>Spring Mvc执行流程</h2><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/SpringMvc%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.6rtos5s5mt40.webp" alt="SpringMvc执行流程图"></p><h2 id="三个上下文"><a href="#三个上下文" class="headerlink" title="三个上下文"></a>三个上下文</h2><h3 id="ServletController"><a href="#ServletController" class="headerlink" title="ServletController"></a>ServletController</h3><p>对于一个web应用，其部署在web容器中，web容器提供其一个全局的上下文环境，这个上下文就是我们的ServletContext，其为后面的spring IoC容器提供一个宿主环境</p><h3 id="Spring上下文"><a href="#Spring上下文" class="headerlink" title="Spring上下文"></a>Spring上下文</h3><p>在web.xml的配置中，我们需要提供一个监听器 ContextLoaderListener 。在web容器启动时，会触发 容器初始化 事件，此时contextLoaderListener会监听到这个事件，其contextInitialized方法会被调用</p><p>在这个方法中，spring会初始化一个 上下文 ，这个上下文被称为 根上下文 ，即 WebApplicationContext ，这是一个接口类，其实际的实现类是XmlWebApplicationContext。这个就是spring的IoC容器，其对应的Bean定义的配置由web.xml中的 context-param 配置指定，默认配置文件为 /WEB-INF/applicationContext.xml </p><p>在这个IoC容器初始化完毕后，spring以 WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE 为属性Key，将其存储到ServletContext中，便于将来获取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一个ContextLoaderListener，他会在servlet容器启动时帮我们初始化spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定启动spring容器的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-Mvc上下文"><a href="#Spring-Mvc上下文" class="headerlink" title="Spring Mvc上下文"></a>Spring Mvc上下文</h3><p>DispatcherServlet在初始化的时候会建立自己的IoC上下文，用以持有 spring mvc相关的bean 。在建立DispatcherServlet自己的IoC上下文时，会利用WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE先从ServletContext中获取之前的 根上下文 作为自己上下文的 parent上下文。有了这个parent上下文之后，再初始化自己持有的上下文，这个上下文本质上也是XmlWebApplicationContext，默认读取的配置文件是 /WEB-INF/springmvc-servlet.xml ，当然我们也可以使用init-param标签的 contextConfigLocation属性 进行配置</p><p><strong>注意</strong></p><p>springMVC容器只负责创建Controller对象，不会创建service和dao，并且他是一个子容器。而spring的容器只负责Service和dao对象，是一个父容器。子容器可以看见父容器的对象，而父容器看不见子容器的对象，这样各司其职</p><h2 id="Spring-Mvc核心技术"><a href="#Spring-Mvc核心技术" class="headerlink" title="Spring Mvc核心技术"></a>Spring Mvc核心技术</h2><h3 id="视图和模型"><a href="#视图和模型" class="headerlink" title="视图和模型"></a>视图和模型</h3><p>Model会在调用handler时通过参数的形式传入</p><p>View可以简化为字符串形式返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello Spring MVC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;spring-mvc&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="重定向和转发"><a href="#重定向和转发" class="headerlink" title="重定向和转发"></a>重定向和转发</h3><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>返回视图字符串加前缀redirect就可以进行重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirect:https:<span class="comment">//www.baidu.com</span></span><br></pre></td></tr></table></figure><h4 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h4><p>返回视图字符串加前缀forward就可以进行请求转发，而不走视图解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forward:/xiaobo/userDemo1</span><br></pre></td></tr></table></figure><h3 id="RequestMapping和衍生注解"><a href="#RequestMapping和衍生注解" class="headerlink" title="RequestMapping和衍生注解"></a>RequestMapping和衍生注解</h3><p>是一个方法级的注解，还是一个类级注解</p><p>如果放在类上，相当于给每个方法默认都加上一个前缀url</p><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><p>一个类一般处理一类业务，可以统一加上前缀，好区分</p><p>简化书写复杂度</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p><code>value</code>： 指定请求的实际地址，指定的地址可以是URI Template</p><p><code>method</code>： 指定请求的method类型， GET、POST、PUT、DELETE等</p><p><code>consumes</code>：指定处理中的请求的内容类型（Content-Type） 例如application/json</p><p><code>produces</code>：指定返回响应的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回</p><p><code>params</code>： 指定request中必须包含某些参数值处理器才会继续执行</p><p><code>headers</code>： 指定request中必须包含某些指定的header值处理器才会继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test2&quot;,method = RequestMethod.POST,</span></span><br><span class="line"><span class="meta">    consumes = &quot;application/json&quot;,produces = &quot;text/html;charset=utf-8&quot;,</span></span><br><span class="line"><span class="meta">    headers = &quot;name&quot;,params = &#123;&quot;age&quot;,&quot;sex&quot;&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="衍生注解"><a href="#衍生注解" class="headerlink" title="衍生注解"></a>衍生注解</h4><p><code>@GetMapping</code></p><p><code>@PostMapping</code></p><p><code>@PutMapping</code></p><p><code>@DeleteMapping</code></p><h3 id="url模式匹配"><a href="#url模式匹配" class="headerlink" title="url模式匹配"></a>url模式匹配</h3><table><thead><tr><th>匹配方式</th><th>优先级</th></tr></thead><tbody><tr><td>全路径匹配，例如：配置路由/a/b/c</td><td>第一优先级</td></tr><tr><td>带有{}路径的匹配，例如：/a/{b}/c</td><td>第二优先级</td></tr><tr><td>正则匹配，例如：/a/{regex:\d{3}}/c</td><td>第三优先级</td></tr><tr><td>带有<em>路径的匹配，例如：/a/b/</em></td><td>第四优先级</td></tr><tr><td>带有<strong>路径的匹配，例如：/a/b/</strong></td><td>第五优先级</td></tr></tbody></table><p>|<br>仅仅是双通配符：/**   |  最低优先级   |</p><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><h4 id="默认传参"><a href="#默认传参" class="headerlink" title="默认传参"></a>默认传参</h4><p>当参数和表单中input中的name属性相同时 Spring Mvc自动映射</p><h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><p>@RequestParam注解将 请求参数 （即查询参数或表单数据）绑定到控制器中的方法参数</p><p>默认情况下，使用此注解的方法参数是必需的，但我们可以通过将@RequestParam注解的 required标志设置 为 false来指定方法参数是可选的。如果目标方法参数类型不是String，则应用会自动进行类型转换</p><p>使用@RequestParam是可选的。默认情况下，任何属于简单值类型且未被任何其他参数解析器解析的参数都被视为使用 @RequestParam </p><h4 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h4><p>@RequestHeader注解将请求的首部信息绑定到控制器中的方法参数中</p><h4 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h4><p>@CookieValue注解将请求中的 cookie 的值绑定到控制器中的方法参数</p><h4 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h4><p>@ModelAttribute注解在方法参数上来访问【模型中的属性】，或者在不存在的情况下对其进行实例化</p><h4 id="SessionAttribute"><a href="#SessionAttribute" class="headerlink" title="@SessionAttribute"></a>@SessionAttribute</h4><p>如果您需要访问全局管理的预先存在的会话属性，并且可能存在或可能不存在，可以@SessionAttribute在方法参数上使用注解</p><h4 id="RequestAttribute"><a href="#RequestAttribute" class="headerlink" title="@RequestAttribute"></a>@RequestAttribute</h4><p>和@SessionAttribute一样，您可以使用@RequestAttribute注解来访问先前创建的存在与请求中的属性</p><h4 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h4><p>@SessionAttributes注解应用到Controller上面，可以将Model中的属性同步到session当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/xiaobo&quot;)</span></span><br><span class="line"><span class="meta">@SessionAttributes(value = &#123;&quot;now&quot;,&quot;date&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">forward</span><span class="params">(HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">                          HttpSession session,</span></span></span><br><span class="line"><span class="params"><span class="function">                          HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                          Model model</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;sessionName&quot;</span>,<span class="string">&quot;session&quot;</span>);</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">&quot;requestName&quot;</span>,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;now&quot;</span>,<span class="string">&quot;now&quot;</span>);</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;date&quot;</span>,<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/xiaobo/userDemo1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/userDemo1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userDemo1</span><span class="params">(<span class="meta">@RequestParam(value = &quot;userName&quot;,required = false)</span>  String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="meta">@RequestParam(value = &quot;passWord&quot;,required = false)</span> String password,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="meta">@RequestHeader(required = false)</span> String age,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="meta">@CookieValue(&quot;name&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="meta">@SessionAttribute(value = &quot;sessionName&quot;,required = false)</span> String sessionName,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="meta">@RequestAttribute(value = &quot;requestName&quot;,required = false)</span> String requestName,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="meta">@SessionAttribute(value = &quot;now&quot;,required = false)</span> String now,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="meta">@SessionAttribute(value = &quot;date&quot;,required = false)</span> Date date</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + username);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;password = &quot;</span> + password);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(&quot;age = &quot; + age);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;sessionName = &quot;</span> + sessionName);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;requestName = &quot;</span> + requestName);</span><br><span class="line"></span><br><span class="line">        System.out.println(now + <span class="string">&quot;: &quot;</span> + date);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组的传递"><a href="#数组的传递" class="headerlink" title="数组的传递"></a>数组的传递</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span>Long[] ids)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Arrays.toString(ids) = &quot;</span> + Arrays.toString(ids));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:8080/xiaobo/test3</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">ids=5,2,1</span><br><span class="line"></span><br><span class="line">POST http://localhost:8080/xiaobo/test3</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">ids=5&amp;ids=2&amp;ids=1</span><br></pre></td></tr></table></figure><h4 id="复杂参数的传递"><a href="#复杂参数的传递" class="headerlink" title="复杂参数的传递"></a>复杂参数的传递</h4><ul><li>jsp</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;user/queryParam&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    排序字段：&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;sortField&quot;</span>&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    数组：&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;ids[0]&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;ids[1]&quot;</span>&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    user对象：&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user.username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user.password&quot;</span> placeholder=<span class="string">&quot;密码&quot;</span>&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    list集合&lt;br&gt;</span><br><span class="line">    第一个元素：&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].password&quot;</span> placeholder=<span class="string">&quot;密码&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    第二个元素： &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].password&quot;</span> placeholder=<span class="string">&quot;密码&quot;</span>&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    map集合&lt;br&gt;</span><br><span class="line">    第一个元素：&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userMap[&#x27;user1&#x27;].username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userMap[&#x27;user1&#x27;].password&quot;</span> placeholder=<span class="string">&quot;密码&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    第二个元素：&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userMap[&#x27;user2&#x27;].username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userMap[&#x27;user2&#x27;].password&quot;</span> placeholder=<span class="string">&quot;密码&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ul><li>QueryVO</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sortField;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> Long[] ids;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; userMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/queryParam&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryParam</span><span class="params">(QueryVO queryVo)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;queryVo = &quot;</span> + queryVo);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="VO、DTO、DO、PO-概念"><a href="#VO、DTO、DO、PO-概念" class="headerlink" title="VO、DTO、DO、PO 概念"></a>VO、DTO、DO、PO 概念</h3><h4 id="VO-（View-Object）视图对象"><a href="#VO-（View-Object）视图对象" class="headerlink" title="VO （View Object）视图对象"></a>VO （View Object）视图对象</h4><p>主要用于展示层与服务层之间的数据传输对象</p><h4 id="DTO（Data-Transfer-Object）数据传输对象"><a href="#DTO（Data-Transfer-Object）数据传输对象" class="headerlink" title="DTO（Data Transfer Object）数据传输对象"></a>DTO（Data Transfer Object）数据传输对象</h4><p>就是从现实世界中抽象出来的有形或无形的业务实体。</p><h4 id="DO（Domain-Object）领域对象"><a href="#DO（Domain-Object）领域对象" class="headerlink" title="DO（Domain Object）领域对象"></a>DO（Domain Object）领域对象</h4><p>它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段就对应PO的一个属性。</p><h4 id="PO（Persistent-Object）：持久化对象"><a href="#PO（Persistent-Object）：持久化对象" class="headerlink" title="PO（Persistent Object）：持久化对象"></a>PO（Persistent Object）：持久化对象</h4><p>DTO 和 VO 的属性值基本是一致的，而且他们通常都是 POJO,但两者存在本质上的区别；DTO 代表服务层需要接收的数据和返回的数据，而<br>VO 代表展示层需要显示的数据</p><h3 id="VO、DTO、DO、PO大致流程"><a href="#VO、DTO、DO、PO大致流程" class="headerlink" title="VO、DTO、DO、PO大致流程"></a>VO、DTO、DO、PO大致流程</h3><p>用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO</p><p>展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层</p><p>服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务</p><p>服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作</p><p>数据传输顺序：VO ===&gt; DTO ===&gt; DO ===&gt; PO</p><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%9C%80%E5%90%8E10%E5%A4%A9.5sfd7ymc8mg0.webp&quot; alt=&quot;最后10天&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="框架" scheme="https://codexiaobo.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring mvc" scheme="https://codexiaobo.github.io/tags/spring-mvc/"/>
    
  </entry>
  
  <entry>
    <title>spring 复习整理四</title>
    <link href="https://codexiaobo.github.io/posts/2740706963/"/>
    <id>https://codexiaobo.github.io/posts/2740706963/</id>
    <published>2022-05-11T09:22:02.000Z</published>
    <updated>2022-05-11T10:37:19.778Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/11%E5%8F%B7%E6%A5%BC.1imxlg5ts8tc.webp" alt="11号楼"></p><!--sleep--><span id="more"></span><h1 id="spring-复习整理四（仗剑走天涯）"><a href="#spring-复习整理四（仗剑走天涯）" class="headerlink" title="spring 复习整理四（仗剑走天涯）"></a>spring 复习整理四（仗剑走天涯）</h1><h2 id="spring-框架的事务抽象"><a href="#spring-框架的事务抽象" class="headerlink" title="spring 框架的事务抽象"></a>spring 框架的事务抽象</h2><h3 id="三个关键类"><a href="#三个关键类" class="headerlink" title="三个关键类"></a>三个关键类</h3><h4 id="TransactionManager"><a href="#TransactionManager" class="headerlink" title="TransactionManager"></a>TransactionManager</h4><p><code>org.springframework.transaction.PlatformTransactionManager</code>接口用于为不同平台提供统一抽象的事务管理器，重要</p><p><code>org.springframework.transaction.ReactiveTransactionManager</code>接口用于响应式事务管理，这个不重要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlatformTransactionManager</span> <span class="keyword">extends</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>任何PlatformTransactionManager接口实现类的方法抛出的TransactionException是未检查的 它继承了java.lang.RuntimeException的类</p><h4 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h4><p><code>TransactionDefinition</code> 接口指定了当前事务的相关配置</p><ul><li>配置</li></ul><p><code>Propagation</code>：通常情况下，事务范围内的所有代码都在该事务中运行。 但是，如果事务方法在 已经存在事务的上下文中运行，则可以指定事务的传播行为</p><p><code>Isolation</code>：该事务与其他事务的工作隔离的程度。 例如，这个事务可以看到其他事务未提交的写入吗 隔离级</p><p><code>Timeout</code>：该事务在超时并被底层事务基础设施自动回滚之前运行多长时间</p><p><code>只读状态</code>：当代码读取但不修改数据时，可以使用只读事务。 在某些情况下，如使用Hibernate时，只读事务可能是一种有用的优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionDefinition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PROPAGATION_REQUIRED = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PROPAGATION_SUPPORTS = <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">int</span> PROPAGATION_MANDATORY = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PROPAGATION_REQUIRES_NEW = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PROPAGATION_NOT_SUPPORTED = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PROPAGATION_NEVER = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PROPAGATION_NESTED = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ISOLATION_DEFAULT = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ISOLATION_READ_UNCOMMITTED = <span class="number">1</span>;  <span class="comment">// same as java.sql.Connection.TRANSACTION_READ_UNCOMMITTED;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ISOLATION_READ_COMMITTED = <span class="number">2</span>;  <span class="comment">// same as java.sql.Connection.TRANSACTION_READ_COMMITTED;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ISOLATION_REPEATABLE_READ = <span class="number">4</span>;  <span class="comment">// same as java.sql.Connection.TRANSACTION_REPEATABLE_READ;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ISOLATION_SERIALIZABLE = <span class="number">8</span>;  <span class="comment">// same as java.sql.Connection.TRANSACTION_SERIALIZABLE;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> TIMEOUT_DEFAULT = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">getPropagationBehavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> PROPAGATION_REQUIRED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">getIsolationLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ISOLATION_DEFAULT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> TIMEOUT_DEFAULT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> TransactionDefinition <span class="title">withDefaults</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> StaticTransactionDefinition.INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h4><p><code>TransactionStatus</code>接口为事务代码提供了一种简单的方法来控制事务执行和查询事务状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionStatus</span> <span class="keyword">extends</span> <span class="title">TransactionExecution</span>， <span class="title">SavepointManager</span>， <span class="title">Flushable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//返回当前事务是否是新的; 否则将参与现有事务，或者可能从一开始就不在实际事务中运行。</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNewTransaction</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasSavepoint</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 只设置事务回滚。 这指示事务管理器，事务的唯一可能结果可能是回滚，而不是抛出异常，从而触发回滚。 </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRollbackOnly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 返回事务是否被标记为仅回滚(由应用程序或事务基础设施)。  </span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRollbackOnly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 返回该事务是否已完成，即是否已提交或回滚。  </span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCompleted</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编程式事务管理"><a href="#编程式事务管理" class="headerlink" title="编程式事务管理"></a>编程式事务管理</h2><h3 id="使用-TransactionManager"><a href="#使用-TransactionManager" class="headerlink" title="使用 TransactionManager"></a>使用 TransactionManager</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/db_mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">xiaobo</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    引入配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    扫包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dream.xiaobo.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    注入事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClass&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String from, String to, Integer money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        默认的事务配置</span></span><br><span class="line">        TransactionDefinition definition = <span class="keyword">new</span> DefaultTransactionDefinition();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        进行事务管理</span></span><br><span class="line">        TransactionStatus transaction = transactionManager.getTransaction(definition);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String fromSql = <span class="string">&quot;UPDATE account SET money = money - ? WHERE name = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>/ <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            String toSql = <span class="string">&quot;UPDATE account SET money = money + ? WHERE name = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">            jdbcTemplate.update(fromSql,<span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                    money,</span><br><span class="line">                    from</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            jdbcTemplate.update(toSql,<span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                    money,</span><br><span class="line">                    to</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RuntimeException exception)&#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">            <span class="comment">//            回滚</span></span><br><span class="line">            transactionManager.rollback(transaction);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//            提交</span></span><br><span class="line">        transactionManager.commit(transaction);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用TransactionTemplate"><a href="#使用TransactionTemplate" class="headerlink" title="使用TransactionTemplate"></a>使用TransactionTemplate</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.transaction.support.TransactionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl2</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String from, String to, Integer money)</span> </span>&#123;</span><br><span class="line">        transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span> </span>&#123;</span><br><span class="line">                String fromSql = <span class="string">&quot;UPDATE account SET money = money - ? WHERE name = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">1</span>/ <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                String toSql = <span class="string">&quot;UPDATE account SET money = money + ? WHERE name = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">                jdbcTemplate.update(fromSql,<span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                        money,</span><br><span class="line">                        from</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                jdbcTemplate.update(toSql,<span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                        money,</span><br><span class="line">                        to</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>new TransactionCallback&lt;Object&gt;() &#123;&#125;</code> 带返回值</p><p><code>new TransactionCallbackWithoutResult()&#123;&#125;</code> 不带返回值</p><h2 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h2><p> Spring Framework的TransactionInterceptor为命令式和响应式编程模型提供了事务管理  拦截器通过检查方法返回类型来检测所需的事务管理风格 事务管理风格会影响需要哪个事务管理器 命令式事务需要PlatformTransactionManager 而响应式事务使用 ReactiveTransactionManager 实现</p><p>@Transactional 通常用于PlatformTransactionManager 管理的 线程绑定事务 将事务暴露给当前执行线程中的所有数据访问操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;interceptor&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- other methods use the default transaction settings (see below) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public * com.dream.xiaobo.service..*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;interceptor&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxAdvice</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTransactionManager</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transactionManager = transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation methodInvocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        默认的事务配置</span></span><br><span class="line">        TransactionDefinition definition = <span class="keyword">new</span> DefaultTransactionDefinition();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        进行事务管理</span></span><br><span class="line">        TransactionStatus transaction = transactionManager.getTransaction(definition);</span><br><span class="line"></span><br><span class="line">        Object invoke = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            invoke = methodInvocation.getMethod().invoke(</span><br><span class="line">                    methodInvocation.getThis(),</span><br><span class="line">                    methodInvocation.getArguments()</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (RuntimeException exception)&#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">            transactionManager.rollback(transaction);</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">&quot;出现异常了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        transactionManager.commit(transaction);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer2</span><span class="params">(String from, String to, Integer money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String fromSql = <span class="string">&quot;UPDATE account SET money = money - ? WHERE name = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/ <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        String toSql = <span class="string">&quot;UPDATE account SET money = money + ? WHERE name = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        jdbcTemplate.update(fromSql,<span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                money,</span><br><span class="line">                from</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        jdbcTemplate.update(toSql,<span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                money,</span><br><span class="line">                to</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="事务回滚"><a href="#事务回滚" class="headerlink" title="事务回滚"></a>事务回滚</h3><p>在其默认配置中，Spring框架的事务基础结构代码只在运行时、未检查的异常情况下标记事务进行回滚。 也就是说，当抛出的异常是 RuntimeException 的实例或子类时 (默认情况下，Error 实例也会导致回滚) 事务方法抛出的已检查异常不会导致默认配置的回滚</p><h4 id="指定回滚规则"><a href="#指定回滚规则" class="headerlink" title="指定回滚规则"></a>指定回滚规则</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;txManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;NoProductInStockException&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="指定无回滚规则"><a href="#指定无回滚规则" class="headerlink" title="指定无回滚规则"></a>指定无回滚规则</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;updateStock&quot;</span> <span class="attr">no-rollback-for</span>=<span class="string">&quot;InstrumentNotFoundException&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="tx-advice-设置"><a href="#tx-advice-设置" class="headerlink" title="tx:advice/ 设置"></a><a href="tx:advice/">tx:advice/</a> 设置</h3><h4 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h4><ul><li><p>传播行为是REQUIRED </p></li><li><p>隔离级别为 DEFAULT </p></li><li><p>事务处于可读写状态 </p></li><li><p>事务超时默认为底层事务系统的默认超时，如果不支持超时，则为none</p></li><li><p>任何RuntimeException触发回滚，而任何选中的Exception不会</p></li></ul><h4 id="属性介绍"><a href="#属性介绍" class="headerlink" title="属性介绍"></a>属性介绍</h4><p>嵌套在<a href="tx:advice/">tx:advice/</a><code>和</code><a href="tx:attributes/">tx:attributes/</a>标签中的<a href="tx:method/">tx:method/</a>标签的各种属性如下</p><table><thead><tr><th>属性</th><th>Required？</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>Yes</td><td>要与事务属性相关联的方法名</td><td>通配符()字符可用于将相同的事务属性设置与许多方法相关联(例如，’ get ‘、’ handle* ‘、’ on*Event ‘等等)</td></tr><tr><td>propagation</td><td>No</td><td>REQUIRED</td><td>事务传播行为</td></tr><tr><td>isolation</td><td>No</td><td>DEFAULT    事务隔离级别</td><td>仅适用于’ REQUIRED ‘或’ REQUIRES_NEW ‘的传播设置</td></tr><tr><td>timeout</td><td>No</td><td>-1    事务超时(秒)</td><td>仅适用于传播’ REQUIRED ‘或’ REQUIRES_NEW ‘</td></tr><tr><td>read-only</td><td>No</td><td>false    读写事务与只读事务</td><td>只适用于’ REQUIRED ‘或’ REQUIRES_NEW ‘</td></tr><tr><td>rollback-for</td><td>No</td><td></td><td>触发回滚的“Exception”实例的逗号分隔列表例如,“com.foo.MyBusinessException, ServletException”</td></tr><tr><td>no-rollback-for</td><td>No</td><td></td><td>不触发回滚的“Exception”实例的逗号分隔列表例如,“com.foo.MyBusinessException, ServletException”</td></tr></tbody></table><h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h3><p><code>@Transactional</code> 注解是元数据，它指定接口、类或方法必须具有事务性语义</p><ul><li>开启Transactional的注解方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br></pre></td></tr></table></figure><ul><li>xml开启Transactional的方式</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;txManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如果要连接的TransactionManager 的bean名称为 TransactionManager  则可以省略 tx:annotation-driven 标记中的 transaction-manager 属性</p><h2 id="事务传播"><a href="#事务传播" class="headerlink" title="事务传播"></a>事务传播</h2><p>事务的传播通常发生在【一个service层中的方法】调用【其他service层中的方法】，虽然我们并不推荐这么做，但是的确会存在一个【大的业务】包含多个【小业务】，大业务和小业务都可独立运行的场景</p><table><thead><tr><th>传播行为</th><th>含义</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常</td></tr><tr><td>PROPAGATION_REQUIRED_NEW</td><td>表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</td></tr><tr><td>PROPAGATION_NEVER</td><td>表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常</td></tr><tr><td>PROPAGATION_NESTED</td><td>表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。</td></tr></tbody></table><table><thead><tr><th>隔离级别</th><th>含义</th></tr></thead><tbody><tr><td>ISOLATION_DEFAULT</td><td>使用后端数据库默认的隔离级别</td></tr><tr><td>ISOLATION_READ_UNCOMMITTED</td><td>最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读</td></tr><tr><td>ISOLATION_READ_COMMITTED</td><td>允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生</td></tr><tr><td>ISOLATION_REPEATABLE_READ</td><td>对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生</td></tr><tr><td>ISOLATION_SERIALIZABLE</td><td>最高的隔离级别，完全服从ACID的隔离级别，确保阻止脏读、不可重复读以及幻读，也是最慢的事务隔离级别，因为它通常是通过完全锁定事务相关的数据库表来实现的</td></tr></tbody></table><h2 id="spring简单整合mybatis"><a href="#spring简单整合mybatis" class="headerlink" title="spring简单整合mybatis"></a>spring简单整合mybatis</h2><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        spring上下文 Spring提供在基础IoC功能上的扩展服务，此外还提供许多企业级服务的支持，如邮件服务、任务调度、JNDI定位、EJB集成、远程访问、缓存以及各种视图层框架的封装等--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        logback依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spring.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mybatis</span>=<span class="string">&quot;http://mybatis.org/schema/mybatis-spring&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://mybatis.org/schema/mybatis-spring</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://mybatis.org/schema/mybatis-spring.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    引入配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    扫包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dream.xiaobo&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    扫描mapper文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis:scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dream.xiaobo.dao&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath*:mapper/**/*.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    注入事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClass&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mybatis-config.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 开启懒加载配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        设置日志打印格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SLF4J&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logPrefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mybatis.sql.&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        驼峰式命名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    别名配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.dream.xiaobo.entity.User&quot; alias=&quot;user&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.dream.xiaobo.datasources.DruidDatasourcesFactory&quot; alias=&quot;DRUID&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.dream.xiaobo.entity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>jdbc.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/db_mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">xiaobo</span></span><br></pre></td></tr></table></figure><ul><li>userMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--映射地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dream.xiaobo.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;sql&quot;</span>&gt;</span></span><br><span class="line">        id,username,password</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;sql&quot;</span> /&gt;</span></span><br><span class="line">        FROM `user`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/11%E5%8F%B7%E6%A5%BC.1imxlg5ts8tc.webp&quot; alt=&quot;11号楼&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="spring" scheme="https://codexiaobo.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>sprig 复习整理三</title>
    <link href="https://codexiaobo.github.io/posts/1035062990/"/>
    <id>https://codexiaobo.github.io/posts/1035062990/</id>
    <published>2022-05-09T08:24:00.000Z</published>
    <updated>2022-05-09T08:25:08.104Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220426221048.4t46bgqd4yi.webp" alt="微信截图_20220426221048"></p><!--sleep--><span id="more"></span><h1 id="spring-复习整理三（仗剑走天涯）"><a href="#spring-复习整理三（仗剑走天涯）" class="headerlink" title="spring 复习整理三（仗剑走天涯）"></a>spring 复习整理三（仗剑走天涯）</h1><h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><h3 id="Resource接口"><a href="#Resource接口" class="headerlink" title="Resource接口"></a>Resource接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resource</span> <span class="keyword">extends</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isReadable</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">URL <span class="title">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function">URI <span class="title">getURI</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function">File <span class="title">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function">ReadableByteChannel <span class="title">readableChannel</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function">Resource <span class="title">createRelative</span><span class="params">(String relativePath)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function">String <span class="title">getFilename</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内置的Resource实现"><a href="#内置的Resource实现" class="headerlink" title="内置的Resource实现"></a>内置的Resource实现</h3><h4 id="UrlResource"><a href="#UrlResource" class="headerlink" title="UrlResource"></a>UrlResource</h4><p>包装了java.net.URL，可以用来访问任何需要通过URL访问的对象，例如文件、HTTPS目标、FTP目标等。 所有URL都用一个标准化的“String”表示，这样就可以使用适当的标准化前缀来表示不同类型的URL。 这包括用于访问文件系统路径的’ file: ‘，用于通过https协议访问资源的’ https: ‘，用于通过ftp访问资源的’ ftp: ‘等</p><h4 id="ClassPathResource"><a href="#ClassPathResource" class="headerlink" title="ClassPathResource"></a>ClassPathResource</h4><p>该类表示应该从【类路径】中获取的资源。 它使用线程上下文类装入器、给定的类装入器或给定的类装入资源</p><h4 id="FileSystemResource"><a href="#FileSystemResource" class="headerlink" title="FileSystemResource"></a>FileSystemResource</h4><p>java.io的【Resource】实现</p><h4 id="PathResource"><a href="#PathResource" class="headerlink" title="PathResource"></a>PathResource</h4><p>java.nio.file 的【资源】实现</p><h4 id="ServletContextResource"><a href="#ServletContextResource" class="headerlink" title="ServletContextResource"></a>ServletContextResource</h4><p>ServletContext 资源的【Resource】实现，它解释了相关web应用程序根目录中的相对路径</p><h4 id="InputStreamResource"><a href="#InputStreamResource" class="headerlink" title="InputStreamResource"></a>InputStreamResource</h4><p>一个【InputStreamResource】是一个给定的【InputStream】的【Resource】实现。 只有当没有特定的【资源】实现适用时，才应该使用它。 特别是，如果可能的话，最好使用【ByteArrayResource】或任何基于文件的【Resource】实现</p><h4 id="ByteArrayResource"><a href="#ByteArrayResource" class="headerlink" title="ByteArrayResource"></a>ByteArrayResource</h4><p>这是一个给定字节数组的【资源】实现。 它为给定的字节数组创建一个ByteArrayInputStream</p><p>它可以从任何给定的字节数组加载内容，而不需要求助于一次性使用的InputStreamResource</p><h3 id="ResourceLoader接口"><a href="#ResourceLoader接口" class="headerlink" title="ResourceLoader接口"></a>ResourceLoader接口</h3><p>ResourceLoader 接口定义了加载资源的基本能力和方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResourceLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Resource <span class="title">getResource</span><span class="params">(String location)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有应用程序上下文（applicationContext）都实现了【ResourceLoader】接口。 因此，可以所有的【应用程序上下文实现（ClassPathXmlA…）】都拥有加载资源的能力</p><h4 id="getResource-参数前缀"><a href="#getResource-参数前缀" class="headerlink" title="getResource()参数前缀"></a>getResource()参数前缀</h4><table><thead><tr><th>前缀</th><th>举例</th><th>说明</th></tr></thead><tbody><tr><td>classpath:</td><td>classpath:com/dream/xiaobo/config.xml</td><td>从类路径加载</td></tr><tr><td>file:</td><td>file:///data/config.xml</td><td>作为一个“URL”从文件系统加载。 请参见’ FileSystemResource ‘ Caveats</td></tr><tr><td>https:</td><td><a href="https://myserver/logo.png">https://myserver/logo.png</a></td><td>作为一个 URL加载</td></tr><tr><td>(none)</td><td>/data/config.xml</td><td>依赖于底层的 ApplicationContext</td></tr></tbody></table><h3 id="应用环境和资源路径"><a href="#应用环境和资源路径" class="headerlink" title="应用环境和资源路径"></a>应用环境和资源路径</h3><p>应用程序上下文构造函数通常采用【字符串或字符串数组】作为资源的位置路径 例如组成上下文定义的XML文件</p><h4 id="源路径中的通配符"><a href="#源路径中的通配符" class="headerlink" title="源路径中的通配符"></a>源路径中的通配符</h4><p><strong>Ant-style的匹配原则</strong><br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/ant-style%E5%8C%B9%E9%85%8D%E5%8E%9F%E5%88%99.7evcgig9yog0.webp" alt="ant-style匹配原则"></p><p><strong>例</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">/WEB-INF/*-context.xml</span></span><br><span class="line"><span class="attr">com/mycompany/**/applicationContext.xml</span></span><br><span class="line"><span class="attr">file</span>:<span class="string">C:/some/path/*-context.xml</span></span><br><span class="line"><span class="attr">classpath</span>:<span class="string">com/mycompany/**/applicationContext.xml</span></span><br></pre></td></tr></table></figure><h4 id="classpath-和classpath-的区别"><a href="#classpath-和classpath-的区别" class="headerlink" title="classpath:和classpath*:的区别"></a>classpath:和classpath*:的区别</h4><p><code>classpath:</code> ：表示从该工程中的类路径中加载资源，classpath:和classpath:/是等价的，都是相对于类的根路径。资源文件库标准的在文件系统中，也可以在JAR或ZIP的类包中</p><p><code>classpath*：</code>假设多个JAR包或文件系统类路径都有一个相同的配置文件，classpath:只会在第一个加载的类路径下查找，而【classpath*:】会扫描所有这些JAR包及类路径下出现的同名文件</p><h2 id="验证、数据绑定和类型转换"><a href="#验证、数据绑定和类型转换" class="headerlink" title="验证、数据绑定和类型转换"></a>验证、数据绑定和类型转换</h2><h3 id="BeanWrapper"><a href="#BeanWrapper" class="headerlink" title="BeanWrapper"></a>BeanWrapper</h3><p> bean包中一个非常重要的类是【BeanWrappe】接口及其相应的实现(【BeanWrapperImpl】)。 正如在javadoc中引用的，【BeanWrapper】提供了【设置和获取属性值】、【获取属性描述符】等功能。 此外，【BeanWrapper】提供了对嵌套属性的支持，允许对子属性进行无限深度的检索。 说的简单一点，就是这个类能帮助我对使用更简单的api通过反射操作一个bean的属性</p><h4 id="BeanWrapper属性操作"><a href="#BeanWrapper属性操作" class="headerlink" title="BeanWrapper属性操作"></a>BeanWrapper属性操作</h4><p>设置和获取属性是通过【BeanWrapper】的’ setPropertyValue ‘和’ getPropertyValue ‘重载方法变体来完成的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        BeanWrapper wrapper = <span class="keyword">new</span> BeanWrapperImpl(<span class="keyword">new</span> Person());</span><br><span class="line"></span><br><span class="line">        wrapper.setPropertyValue(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        wrapper.setPropertyValue(<span class="string">&quot;student&quot;</span>,<span class="keyword">new</span> Student());</span><br><span class="line"></span><br><span class="line">        wrapper.setPropertyValue(<span class="string">&quot;student.name&quot;</span>,<span class="string">&quot;wangyibo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        wrapper.setPropertyValue(<span class="string">&quot;student.age&quot;</span>,<span class="string">&quot;22&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(wrapper.getWrappedInstance());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="PropertyEditor属性编辑器"><a href="#PropertyEditor属性编辑器" class="headerlink" title="PropertyEditor属性编辑器"></a>PropertyEditor属性编辑器</h3><p>Spring使用【PropertyEditor】的概念来实现【对象】和【字符串】之间的转换</p><h4 id="propertyEditor-的实现"><a href="#propertyEditor-的实现" class="headerlink" title="propertyEditor 的实现"></a>propertyEditor 的实现</h4><table><thead><tr><th>分类</th><th>释义</th></tr></thead><tbody><tr><td>ClassEditor</td><td>将表示类的字符串解析为实际类，反之亦然。 当未找到类时，将抛出一个’ IllegalArgumentException ‘。 默认情况下，由’ BeanWrapperImpl ‘注册</td></tr><tr><td>CustomBooleanEditor</td><td>布尔属性 的属性编辑器。完成字符串和布尔值的转化。 默认情况下，由’ BeanWrapperImpl ‘注册</td></tr><tr><td>CustomCollectionEditor</td><td>集合的属性编辑器，将给定的描述集合的字符串转化为目标 集合类型</td></tr><tr><td>CustomDateEditor</td><td>可自定义的属性编辑器，支持自定义【日期格式】。 默认未注册。 必须根据需要使用适当的格式进行用户注册</td></tr><tr><td>ByteArrayPropertyEditor</td><td>字节数组的编辑器， 将字符串转换为对应的字节表示形式。 默认情况下由’ BeanWrapperImpl ‘注册</td></tr><tr><td>CustomNumberEditor</td><td>可自定义任何【数字类】的属性编辑器，如“整数”、“长”、“Float”或“Double”。 默认情况下，由’ BeanWrapperImpl ‘注册，但可以通过将其自定义实例注册为自定义编辑器来覆盖</td></tr><tr><td>FileEditor</td><td>将字符串解析为【java.io.file】的对象。 默认情况下，由’ BeanWrapperImpl ‘注册</td></tr><tr><td>LocaleEditor</td><td>可以将字符串解析为’ Locale ‘对象，默认情况下，由’ BeanWrapperImpl ‘注册</td></tr><tr><td>PatternEditor</td><td>可以将字符串解析为’ java.util.regex。 模式的对象，反之亦然</td></tr><tr><td>PropertiesEditor</td><td>可以转换字符串到’ Properties ‘对象。 默认情况下，由’ BeanWrapperImpl ‘注册</td></tr><tr><td>StringTrimmerEditor</td><td>修剪字符串的属性编辑器。 允许将空字符串转换为’ null ‘值。 默认情况下未注册-必须是用户注册的</td></tr><tr><td>URLEditor</td><td>可以将URL的字符串表示形式解析为实际的’ URL ‘对象。 默认情况下，由’ BeanWrapperImpl ‘注册</td></tr></tbody></table><p>当将bean属性设置为【字符串值】时，Spring IoC容器最终使用标准JavaBeans的PropertyEditor实现将这些字符串转换为属性的复杂类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//set,get</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//set,get</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setName(text);</span><br><span class="line">        student.setAge(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.setValue(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangyibo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;customEditors&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.dream.xiaobo.editor.PersonEditor&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;editor.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Person bean = applicationContext.getBean(Person.class);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;&#123;&#125;&quot;</span>,bean);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Spring 3核心包提供了一个【通用类型转换系统】。 在Spring容器中，您可以使用此系统作为【PropertyEditor】的替代方案，将外部化bean属性值字符串转换为所需的属性类型</p><h4 id="Converter"><a href="#Converter" class="headerlink" title="Converter"></a>Converter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.core.convert.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">S</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(S source)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 创建你自己的转换器，需要实现【转换器】接口，并使用泛型“S”作为你要转换的【原始类型】，“T”作为你要转换的【目标类型】</p><h4 id="ConversionService"><a href="#ConversionService" class="headerlink" title="ConversionService"></a>ConversionService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.core.convert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConversionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(Class&lt;?&gt; sourceType， Class&lt;?&gt; targetType)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">convert</span><span class="params">(Object source， Class&lt;T&gt; targetType)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(TypeDescriptor sourceType， TypeDescriptor targetType)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">convert</span><span class="params">(Object source， TypeDescriptor sourceType， TypeDescriptor targetType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大多数<code>ConversionService</code>实现也实现<code>ConverterRegistry</code>，它提供了一个用于注册转换器的API。</p><p>spring提供了一个强大的<code>ConversionService</code>实现，即 <code>GenericConversionService</code> ，他是适合在大多数环境中使用的通用实现。Spring会选择 <code>ConversionService</code>，并在框架需要执行类型转换时使用它。</p><p>要在Spring中注册默认的<code>conververService</code> ，请添加以下带有<code>converversionservice</code> <code>id</code> <code>的beanDifination</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//set,get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDataConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>,<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String path = <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> simpleDateFormat.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">&quot;类型转换失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2001-04-06&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.converter.StringToDataConverter&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;editor.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Student bean = applicationContext.getBean(Student.class);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;&#123;&#125;&quot;</span>,bean);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="DataBinder数据验证"><a href="#DataBinder数据验证" class="headerlink" title="DataBinder数据验证"></a>DataBinder数据验证</h3><p>从Spring 3开始，你就可以用一个【Validator】配置一个【DataBinder】实例。 一旦配置完成，您就可以通过调用【binder.validate() 】来调用【 Validator】。 任何验证’ Errors ‘都会自动添加到绑定的’ BindingResult ‘中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Student.class == clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object target, Errors errors)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) target;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (student.getAge() &lt; <span class="number">25</span>)&#123;</span><br><span class="line">            errors.rejectValue(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;1001&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;我们招聘的是三年工作经验的，而您只有&quot;</span> + student.getAge() + <span class="string">&quot;岁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        student.setAge(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        DataBinder dataBinder = <span class="keyword">new</span> DataBinder(student);</span><br><span class="line"></span><br><span class="line">        dataBinder.addValidators(<span class="keyword">new</span> MyValidator());</span><br><span class="line"></span><br><span class="line">        dataBinder.validate();</span><br><span class="line"></span><br><span class="line">        BindingResult bindingResult = dataBinder.getBindingResult();</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;&#123;&#125;&quot;</span>,bindingResult);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="spring表达式-（SpEL）"><a href="#spring表达式-（SpEL）" class="headerlink" title="spring表达式 （SpEL）"></a>spring表达式 （SpEL）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">        Expression expression = parser.parseExpression(<span class="string">&quot;&#x27;xiaobo&#x27;.toUpperCase()&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;&#123;&#125;&quot;</span>,expression.getValue());</span><br><span class="line">        </span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setName(<span class="string">&quot;小博&quot;</span>);</span><br><span class="line"></span><br><span class="line">        expression = parser.parseExpression(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;&#123;&#125;&quot;</span>,expression.getValue(student));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>【ExpressionParser】接口【负责解析表达式字符串】。 在前面的示例中，表达式字符串是由单引号表示的字符串字面量。 【Expression】接口负责计算前面定义的表达式字符串。 当调用parser 时，可以抛出ParseException和EvaluationException两个异常</p><h3 id="Bean-定义中的表达式"><a href="#Bean-定义中的表达式" class="headerlink" title="Bean 定义中的表达式"></a>Bean 定义中的表达式</h3><p>您可以使用SpEL表达式和基于xml或基于注解的配置元数据来定义【BeanDefinition】实例。 在这两种情况下，定义表达式的语法形式都是#{}</p><p>应用程序上下文中的所有bean都可以作为具有公共bean名称的预定义变量使用。 这包括用于访问运行时环境的标准上下文bean，如environment(类型为’ org.springframework.core.env.Environment ‘)，以及systemProperties和systemEnvironment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;person&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.dream.xiaobo.entity.Student&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;#&#123;systemProperties[&#x27;java.home&#x27;]&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;#&#123;T(java.lang.Math).random() * 100&#125;&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;java.home&#x27;]&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;T(java.lang.Math).random() * 100&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//set,get</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h2><p>面向切面编程(AOP)通过提供另一种考虑程序结构的方法对面向对象编程(OOP)进行了补充</p><p>OOP中模块化的关键单元是类，而AOP中模块化的关键单元是aspect（切面）</p><h3 id="AOP关键点"><a href="#AOP关键点" class="headerlink" title="AOP关键点"></a>AOP关键点</h3><h4 id="Aspect（切面）"><a href="#Aspect（切面）" class="headerlink" title="Aspect（切面）"></a>Aspect（切面）</h4><p>一个关注点的模块化 这个关注点可能会横切多个对象</p><h4 id="Join-point（连接点）"><a href="#Join-point（连接点）" class="headerlink" title="Join point（连接点）"></a>Join point（连接点）</h4><p>在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候</p><h4 id="Advice-通知"><a href="#Advice-通知" class="headerlink" title="Advice(通知)"></a>Advice(通知)</h4><p>在切面的某个特定的连接点（Joinpoint）上执行的动作。通知有各种类型，其中包括“around”、“before”和“after”等通知</p><h4 id="Pointcut（切入点）"><a href="#Pointcut（切入点）" class="headerlink" title="Pointcut（切入点）"></a>Pointcut（切入点）</h4><p>匹配连接点（Joinpoint）的断言。通知和一个【切入点表】达式关联，并在满足这个切入点的连接点上运行</p><h4 id="Introduction（引入）"><a href="#Introduction（引入）" class="headerlink" title="Introduction（引入）"></a>Introduction（引入）</h4><p>Spring允许引入新的接口（以及一个对应的实现）到任何被代理的对象</p><h4 id="Target-object（目标对象）"><a href="#Target-object（目标对象）" class="headerlink" title="Target object（目标对象）"></a>Target object（目标对象）</h4><p>被一个或者多个切面（aspect）所通知（advise）的对象。也有人把它叫做 被通知（advised） 对象。 既然Spring AOP是通过运行时代理实现的，这个对象永远是一个 被代理（proxied） 对象。</p><h4 id="AOP代理-AOP-proxy"><a href="#AOP代理-AOP-proxy" class="headerlink" title="AOP代理 AOP proxy"></a>AOP代理 AOP proxy</h4><p>在Spring中，AOP代理可以是JDK动态(默认)代理或者CGLIB代理</p><h4 id="Weaving（织入）"><a href="#Weaving（织入）" class="headerlink" title="Weaving（织入）"></a>Weaving（织入）</h4><p>把切面（aspect）连接到其它的应用程序类型或者对象上，并创建一个被通知（advised）的对象，这个过程叫织入。 这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成</p><h3 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h3><p><code>Before advice</code>:在连接点之前运行的通知，但不能阻止执行流继续执行到连接点(除非它抛出异常)</p><p><code>After returning advice</code>:在连接点正常完成后运行的通知(例如，如果方法返回而不引发异常)</p><p><code>After throwing advice</code>:在方法通过抛出异常退出时运行的通知</p><p><code>After (finally) advice</code>:不管连接点以何种方式退出(正常或异常返回)，都要运行的通知</p><p><code>Around advice</code>:围绕连接点(如方法调用)的通知。 这是最有力的建议。 Around通知可以在方法调用前后执行自定义行为。 它还负责选择是继续到连接点，还是通过返回自己的返回值或抛出异常来简化被通知的方法执行。</p><h3 id="AspectJ的支持"><a href="#AspectJ的支持" class="headerlink" title="@AspectJ的支持"></a>@AspectJ的支持</h3><h4 id="开启-AspectJ的两种方式"><a href="#开启-AspectJ的两种方式" class="headerlink" title="开启@AspectJ的两种方式"></a>开启@AspectJ的两种方式</h4><ul><li>配合文件式</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--    开启@AspectJ的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注解式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.dream.xiaobo&quot;)</span></span><br><span class="line"><span class="comment">//开启@AspectJ的支持</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明切入点"><a href="#声明切入点" class="headerlink" title="声明切入点"></a>声明切入点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(public * com.dream.xiaobo.service..*.*())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforePointcut</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>execution</code>: （常用）用于匹配方法执行的连接点，这是在使用Spring AOP时使用的主要切入点指示符</p><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/execution.679xf3sac240.webp" alt="execution"></p><p><code>within</code>: 用于匹配指定类型内的方法执行。（匹配整个类）<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/within.2lblw327eee0.webp" alt="within"></p><p><code>this</code>: 用于匹配当前【AOP代理对象】类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能【包括引入接口】也进行类型匹配。（配置整个类）<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/this.53flppmia1c0.webp" alt="this"><br><code>target</code>: 用于匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就【不包括引入接口】也进行类型匹配。（配置整个类）<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/target.n2r95vlhq2o.webp" alt="target"><br><code>args</code>: 限制匹配连接点(使用Spring AOP时的方法执行)，其中参数是给定类型的实例。 （参数类型匹配）<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/args.26sgvm0fck00.webp" alt="args"><br><code>@target</code>: 用于匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解 。（类上的注解）<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/@target.7bc88ut4t6o0.webp" alt="@target"><br>@args: 用于匹配当前执行的方法传入的参数持有指定注解的执行。（参数上的注解）<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/@args.ovqrc0qjink.webp" alt="@args"><br><code>@within</code>: 用于匹配所有持有指定注解类型内的方法。（类上的注解）<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/@within.56jcybn5yo00.webp" alt="@within"><br><code>@annotation</code>: （常用）于匹配当前执行方法持有指定注解的方法。（方法上的注解）<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/@annotation.4ldchkg8jsi0.webp" alt="@annotation"></p><h3 id="声明通知"><a href="#声明通知" class="headerlink" title="声明通知"></a>声明通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeclareParents(value = &quot;com.dream.xiaobo.service.impl.OrderServiceImpl&quot;,defaultImpl = GiveServiceImpl.class)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GiveService giveService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.dream.xiaobo.service..*.*())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforePointcut</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.dream.xiaobo.service..*.*())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPointcut</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;beforePointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置处理器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    后置通知</span></span><br><span class="line">    <span class="meta">@After(&quot;beforePointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置处理器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    后置返回通知</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;beforePointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is afterReturning&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(public * com.dream.xiaobo.service..*.*())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ProceedingJoinPoint point 环绕通知用到的参数&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object proceed = point.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;this is around 2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    后置异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;afterPointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is afterThrowing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Around advice</code>环绕匹配的方法执行 它有机会在方法运行之前和之后进行工作，并确定方法何时、如何运行，甚至是否真正运行。 如果您需要在方法执行之前和之后以线程安全的方式共享状态（例如，启动和停止计时器），经常使用Around通知</p><p>Around通知是通过使用【@Around】注解声明的。 advice方法的第一个参数必须是【ProceedingJoinPoint】类型。 在通知体中，在【ProceedingJoinPoint】上调用【proceed()】会导致底层方法运行。 【proceed】方法也可以传入【Object[] 】。 当方法执行时，数组中的值被用作方法执行的参数</p><h3 id="通知的参数"><a href="#通知的参数" class="headerlink" title="通知的参数"></a>通知的参数</h3><p>任何通知方法都可以声明一个类型为<code>org.aspectj.lang.JoinPoint</code>的参数作为它的<code>第一个参数</code>（注意，around通知需要声明类型为’ <code>ProceedingJoinPoint</code> ）的第一个参数，它是<code>oinPoint</code>的一个子类</p><h4 id="JoinPoint接口提供的方法"><a href="#JoinPoint接口提供的方法" class="headerlink" title="JoinPoint接口提供的方法"></a>JoinPoint接口提供的方法</h4><p><code>getArgs()</code>: 返回方法参数</p><p><code>getThis()</code>: 返回代理对象</p><p><code>getTarget()</code>: 返回目标对象</p><p><code>getSignature()</code>: 返回被通知的方法的签名</p><p><code>toString()</code>: 打印被建议的方法的有用描述</p><h3 id="引入Introduction"><a href="#引入Introduction" class="headerlink" title="引入Introduction"></a>引入Introduction</h3><p>引入使切面能够声明被通知的对象【实现给定的接口】，也就是让代理对象实现新的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeclareParents(value = &quot;com.dream.xiaobo.service.impl.OrderServiceImpl&quot;,defaultImpl = GiveServiceImpl.class)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GiveService giveService;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GiveServiceImpl</span> <span class="keyword">implements</span> <span class="title">GiveService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">give</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是下单送您的礼物&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于schema的AOP支持"><a href="#基于schema的AOP支持" class="headerlink" title="基于schema的AOP支持"></a>基于schema的AOP支持</h3><p>就是用xml方式来进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:p=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;myAop&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.dream.xiaobo.aspect.MyAop&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;orderService&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.dream.xiaobo.service.impl.OrderServiceImpl&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.dream.xiaobo.service.impl.UserServiceImpl&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line"></span><br><span class="line">        &lt;aop:aspect id=<span class="string">&quot;aop&quot;</span> ref=<span class="string">&quot;myAop&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;aop:pointcut id=<span class="string">&quot;pointcut&quot;</span> expression=<span class="string">&quot;execution(public * com.dream.xiaobo.service..*.*())&quot;</span>/&gt;</span><br><span class="line">&lt;!--            &lt;aop:after pointcut-ref=<span class="string">&quot;pointcut&quot;</span> method=<span class="string">&quot;after&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;aop:before pointcut-ref=<span class="string">&quot;pointcut&quot;</span> method=<span class="string">&quot;before&quot;</span>/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--            &lt;aop:after-returning method=<span class="string">&quot;afterReturning&quot;</span> pointcut-ref=<span class="string">&quot;pointcut&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;aop:after-throwing method=<span class="string">&quot;afterThread&quot;</span> pointcut-ref=<span class="string">&quot;pointcut&quot;</span>/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">            &lt;aop:around pointcut-ref=<span class="string">&quot;pointcut&quot;</span> method=<span class="string">&quot;around&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="编程方式创建Aspect"><a href="#编程方式创建Aspect" class="headerlink" title="编程方式创建Aspect"></a>编程方式创建Aspect</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    AspectJProxyFactory aspectJProxyFactory = <span class="keyword">new</span> AspectJProxyFactory(<span class="keyword">new</span> OrderService());</span><br><span class="line">    aspectJProxyFactory.addAspect(MyAspect.class);</span><br><span class="line">    IOrderService proxy = (IOrderService)aspectJProxyFactory.getProxy();</span><br><span class="line">    proxy.order(<span class="number">111</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220426221048.4t46bgqd4yi.webp&quot; alt=&quot;微信截图_20220426221048&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="spring" scheme="https://codexiaobo.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring 复习整理二</title>
    <link href="https://codexiaobo.github.io/posts/2916426880/"/>
    <id>https://codexiaobo.github.io/posts/2916426880/</id>
    <published>2022-04-26T14:12:45.000Z</published>
    <updated>2022-04-26T14:13:44.861Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220426220935.2mt2ny4ewq00.webp" alt="微信截图_20220426220935"></p><!--sleep--><span id="more"></span><h1 id="spring-复习整理二（仗剑走天涯）"><a href="#spring-复习整理二（仗剑走天涯）" class="headerlink" title="spring 复习整理二（仗剑走天涯）"></a>spring 复习整理二（仗剑走天涯）</h1><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><table><thead><tr><th>scope</th><th>描述</th></tr></thead><tbody><tr><td>singleto</td><td>每个bean在ioc容器中都是独一无二的单例形式</td></tr><tr><td>prototype</td><td>将单个beanDifination定义为，spring容器可以【实例化任意数量】的对象实例</td></tr><tr><td>request</td><td>将单个beanDifination限定为单个HTTP请求的生命周期。 也就是说，每个HTTP请求都有自己的bean实例，它是在单个beanDifination的后面创建的。 仅在web环境中的Spring【ApplicationContext】的上下文中有效</td></tr><tr><td>session</td><td>将单个beanDifination定义为HTTP 【Session】的生命周期。 仅在web环境中的Spring 【ApplicationContext】的上下文中有效</td></tr><tr><td>application</td><td>将单个beanDifination定义为【ServletContext】的生命周期。 仅在web环境中的Spring 【ApplicationContext】的上下文中有效</td></tr><tr><td>websocket</td><td>将单个beanDifination作用域定义为【WebSocket】的生命周期。 仅在web环境中的Spring【ApplicationContext】的上下文中有效</td></tr></tbody></table><h2 id="生命周期回调"><a href="#生命周期回调" class="headerlink" title="生命周期回调"></a>生命周期回调</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li>接口形式(不建议使用)</li></ul><p>org.springframework.beans.factory.InitializingBean.InitializingBean的接口允许bean在容器设置了bean上的所有必要属性之后执行【初始化工作】。【InitializingBean】接口指定了一个方法 这种接口形式将你的代码与Spring的代码耦合在一起 所以不建议使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><ul><li>xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.A&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><code>init-method=&quot;init&quot;</code>:为这个Bean的init方法设置为初始化功能</p><ul><li>注解形式<br>jdk8自带<code>@PostConstruct</code></li></ul><p>jdk8以上 引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意 在spring中要想使用注解需要先开启注解功能 在Bean中引入相应的规范文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">        https://www.springframework.org/schema/context/spring-context.xsd</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    开启spring注解 自动装载到容器当中 需要引入命名空间以及规范文档--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><ul><li>接口形式</li></ul><p>实现org.springframework.beans.factory.DisposableBean接口可以让bean在管理它的容器被销毁时获得回调。 ‘ DisposableBean ‘接口指定了一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><ul><li>xml形式</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.A&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>destroy-method=&quot;destroy&quot;</code>:为这个Bean的destroy方法设置销毁功能</p><ul><li>注解形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="默认初始化和销毁方法"><a href="#默认初始化和销毁方法" class="headerlink" title="默认初始化和销毁方法"></a>默认初始化和销毁方法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">default-init-method</span>=<span class="string">&quot;init&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>规定方法名为init和destory</p><h3 id="ApplicationContextAware-和-BeanNameAware"><a href="#ApplicationContextAware-和-BeanNameAware" class="headerlink" title="ApplicationContextAware 和 BeanNameAware"></a>ApplicationContextAware 和 BeanNameAware</h3><ul><li>ApplicationContextAware</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContextAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BeanNameAware</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanNameAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-Aware-Interfaces"><a href="#Other-Aware-Interfaces" class="headerlink" title="Other Aware Interfaces"></a>Other Aware Interfaces</h3><table><thead><tr><th>命名</th><th>依赖注入</th></tr></thead><tbody><tr><td>ApplicationContextAware</td><td>将ApplicationContext注入bean当中</td></tr><tr><td>ApplicationEventPublisherAware</td><td>将ApplicationEventPublisherAware注入bean当中</td></tr><tr><td>BeanClassLoaderAware</td><td>将类加载器用于装入bean类</td></tr><tr><td>BeanFactoryAware</td><td>将BeanFactory注入bean当中</td></tr><tr><td>BeanNameAware</td><td>将bean的名称注入bean中</td></tr><tr><td>ResourceLoaderAware</td><td>配置了用于访问资源的加载器</td></tr><tr><td>ServletConfigAware</td><td>当前的’ ServletConfig ‘容器运行。 仅在web感知的Spring ‘ ApplicationContext ‘中有效</td></tr><tr><td>ServletContextAware</td><td>当前运行容器的“ServletContext”。 仅在web感知的Spring ‘ ApplicationContext ‘中有效</td></tr></tbody></table><h2 id="基于注解的容器配置"><a href="#基于注解的容器配置" class="headerlink" title="基于注解的容器配置"></a>基于注解的容器配置</h2><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>自动装配，有byType的语义</p><h3 id="Autowired使用场所"><a href="#Autowired使用场所" class="headerlink" title="@Autowired使用场所"></a>@Autowired使用场所</h3><p>可以将@Autowired注解应用到传统的 setter方法</p><p>可以将注解应用到具有任意名称和多个参数的方法</p><p>可以将 @Autowired 应用到字段上（<strong>常用</strong>），甚至可以将它与构造函数混合使用</p><p>可以将 @Autowired 应用到数组、list、set集合上</p><p>可以将@Autowired 应用到Map集合上 只要期望的键类型是“String”，也可以自动连接。 映射值包含预期类型的所有bean，键包含相应的bean名</p><p><strong>注意</strong></p><p>默认情况下，当给定注入点没有可用的匹配候选bean时，自动装配将失败。 对于声明的数组、集合或映射，至少需要一个匹配元素</p><p>通过将<code>@Autowired</code>中的 required 属性设置为 false 来让框架跳过它</p><h3 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h3><p><code>@Primary</code>表示当多个bean可以作为一个依赖项的候选bean时，应该优先考虑某个特定bean。 如果在候选bean中恰好存在一个主要的bean，那么它将成为自动连接的值</p><h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p>通过使用 @Qualifier 注解，我们可以消除需要注入哪个 bean 的问题</p><h3 id="Resouse"><a href="#Resouse" class="headerlink" title="@Resouse"></a>@Resouse</h3><p>JSR-250的 【@Resource】注解(‘ javax.annotation.Resource ‘)来支持注入</p><p>@Resource 带有一个name属性 默认情况下，Spring将该值解释为要注入的bean名 换句话说，它遵循by-name语义</p><p>如果没有显式指定名称，则默认名称为【字段名或setter方法的参数名】。 对于字段，它接受字段名。 对于setter方法，它采用bean属性名</p><p>先根据by-name进行注入 如果根据by-name没有找到 会根据by-type继续注入</p><h2 id="ClassPath扫描"><a href="#ClassPath扫描" class="headerlink" title="ClassPath扫描"></a>ClassPath扫描</h2><h3 id="xml方式扫描"><a href="#xml方式扫描" class="headerlink" title="xml方式扫描"></a>xml方式扫描</h3><p>XML来指定配置元数据 这些元数据在Spring容器启动时被扫描，每一个bean的元数据对应生成一个“BeanDefinition”</p><p>前面介绍到的都是这种xml方式的扫描</p><h3 id="注解方式扫描"><a href="#注解方式扫描" class="headerlink" title="注解方式扫描"></a>注解方式扫描</h3><p>使用注解 通过扫描筛选并在容器中注册了相应beanDifination的类。 这样就不需要使用XML来执行bean注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.dream.xiaobo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    开启扫描 开启scan 也 意味着开启了annotation-config --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dream.xiaobo&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="context:component-scan">context:component-scan</a> 的使用会隐式启用 <a href="context:annotation-config">context:annotation-config</a>，当使用 <a href="context:component-scan">context:component-scan</a>时，通常不需要包含<a href="context:annotation-config">context:annotation-config</a>元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestIoc</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        AnnotationConfigApplicationContext appConfig = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line"></span><br><span class="line">        OrderService bean = appConfig.getBean(OrderService.class);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;&#123;&#125;&quot;</span>,bean);</span><br><span class="line"></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;scan.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        OrderService orderService = context.getBean(OrderService.class);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;&#123;&#125;&quot;</span>,orderService);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>@Component</code> 是任何spring管理组件的通用注解</p><p><code>@Repository</code>、<code>@Service</code>和<code>@Controller</code>是 <code>@Component</code> 用于更具体用例的注解（分别在持久性、服务和表示层中）。这些注解对于我们对特定bean进行批量处理时是有帮助的</p><p><code>@Configuration</code> 可以理解为等同于xml配置</p><p><code>ComponentScan</code> 要扫描的包</p><h3 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h3><p>当组件作为扫描过程的一部分被自动检测时，它的bean名是由该扫描器所知道的“BeanNameGenerator”策略生成的</p><h3 id="自动检测组件提供scope"><a href="#自动检测组件提供scope" class="headerlink" title="自动检测组件提供scope"></a>自动检测组件提供scope</h3><p>与spring管理的组件一样，自动检测组件的默认和最常见的作用域是“单例”。 然而，有时您需要一个不同的范围，可以由’ @Scope ‘注解指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用过滤器自定义扫描"><a href="#使用过滤器自定义扫描" class="headerlink" title="使用过滤器自定义扫描"></a>使用过滤器自定义扫描</h3><p>默认情况下，带有@Component、@Repository、@Service、@Controller、@Configuration注解的类是一定能被筛选器选中并进行注册的候选组件。 但是，您可以通过应用自定义过滤器来修改和扩展此行为，自由定制筛选哪些或不包含那些组件。 将它们作为@ComponentScan注解的includeFilters 或 excludeFilters 属性添加 每个筛选器元素都需要’ type ‘和’ expression ‘属性</p><table><thead><tr><th>过滤方式</th><th>示例表达式</th><th>描述</th></tr></thead><tbody><tr><td>annotation (默认)</td><td>org.example.SomeAnnotation</td><td>要在目标组件的类型级别上“存在”或“元注解存在”的注解</td></tr><tr><td>assignable</td><td>org.example.SomeClass</td><td>指定要排除的bean的类</td></tr><tr><td>aspectj</td><td>org.example..*Service+</td><td>要被目标组件匹配的AspectJ类型表达式</td></tr><tr><td>regex</td><td>org.example.Default.*</td><td>由目标组件的类名匹配的正则表达式</td></tr><tr><td>custom</td><td>org.example.MyTypeFilter</td><td>org.springframework.core.type的自定义实现，TypeFilter”接口</td></tr></tbody></table><ul><li>注解形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration()</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.dream.xiaobo&quot;,</span></span><br><span class="line"><span class="meta">        includeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION),</span></span><br><span class="line"><span class="meta">        excludeFilters = @ComponentScan.Filter(Repository.class)</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>xml形式</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dream.xiaobo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bean和-Configuration"><a href="#Bean和-Configuration" class="headerlink" title="@Bean和@Configuration"></a>@Bean和@Configuration</h3><p>@Bean注解用于指示一个方法，该方法负责 实例化、配置和初始化 一个由Spring IoC容器管理的新对象</p><p>@Configuration注解的一个类表明它的主要目的是作为beanDifination的源，我们通常称之为 配置类。 此外，@Configuration 类允许通过调用同一类中的其他 @Bean 方法来 定义bean间的依赖关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;orders&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Orders <span class="title">orders</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Orders();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">(<span class="meta">@Qualifier(&quot;orders&quot;)</span> Orders orders)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">        user.setOrders(orders);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestIoc</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        AnnotationConfigApplicationContext appConfig = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line"></span><br><span class="line">        MyConfiguration bean = appConfig.getBean(MyConfiguration.class);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;&#123;&#125;&quot;</span>,bean.user(bean.orders()));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="生命周期回调-1"><a href="#生命周期回调-1" class="headerlink" title="生命周期回调"></a>生命周期回调</h3><p>如果一个bean实现了’ InitializingBean ‘、’ DisposableBean ‘或’ Lifecycle ‘，则容器会调用它们各自的方法</p><p>@Bean注解支持指定任意的初始化和销毁回调方法，就像Spring XML在’ bean ‘元素上的’ init-method ‘和’ destroy-method ‘属性一样</p><h3 id="指定Bean的范围"><a href="#指定Bean的范围" class="headerlink" title="指定Bean的范围"></a>指定Bean的范围</h3><p>Spring包含了【@Scope】注解，可以指定bean的范围</p><p>默认的作用域是 singleton ，可以用 @Scope 注解来覆盖它</p><h3 id="Bean别名"><a href="#Bean别名" class="headerlink" title="Bean别名"></a>Bean别名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(&#123;&quot;dataSource&quot;， &quot;A-dataSource&quot;， &quot;B-dataSource&quot;&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="Bean描述"><a href="#Bean描述" class="headerlink" title="Bean描述"></a>Bean描述</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Description(&quot;Provides a basic example of a bean&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p>@Configuration 是一个类级注解，指示一个对象是beanDifination的源。@Configuration类通过@Bean带注解的方法声明bean</p><p>当@Bean方法在没有标注@Configuration的类中声明时，它们被认为是在【lite】模式下处理的。 在【@Component】中声明的Bean方法甚至在一个普通的类中声明的Bean方法都被认为是【lite】。在这样的场景中，【@Bean】方法是一种通用工厂方法机制。</p><p>与@Configuration 不同，【lite】模式下 【@Bean】方法不能【声明bean】间的【依赖关系】。 因此，这样的【@Bean】方法不应该调用其他【@Bean】下的方法。 每个这样的方法实际上只是特定bean引用的工厂方法，没有任何特殊的运行时语义。</p><p>在一般情况下，@Bean方法要在【@Configuration】类中声明，这种功能情况下，会使用【full】模式，因此交叉方法引用会被重定向到容器的生命周期管理。 这可以防止通过常规Java调用意外调用相同的Bean，这有助于减少在【lite】模式下操作时难以跟踪的微妙错误</p><h3 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h3><p>引用另一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigImportA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImportA <span class="title">testImport</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ImportA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(ConfigImportA.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">configImportB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> configImportB <span class="title">testImport</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> configImportB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java结合xml"><a href="#java结合xml" class="headerlink" title="java结合xml"></a>java结合xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;classpath:/com/acme/jdbc.properties&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p><code>context:property-placeholder</code>:引入配置文件</p><h3 id="BeanFactory和FactoryBean"><a href="#BeanFactory和FactoryBean" class="headerlink" title="BeanFactory和FactoryBean"></a>BeanFactory和FactoryBean</h3><h4 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h4><p>Bean工厂 负责管理我们的Bean 通过他我们可以从容器中去检索Bean</p><h4 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h4><p>工厂Bean 可以创建复杂对象 他拥有三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Nullable</span></span><br><span class="line"><span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getobject</code> 拿到对应的类</p><p><code>getObjectType</code> 拿到对应类的类型</p><p><code>isSingleton</code> 判断是否为单例</p><h3 id="环境抽象"><a href="#环境抽象" class="headerlink" title="环境抽象"></a>环境抽象</h3><p>接口是一个抽象，集成在容器中，它模拟了应用程序环境的两个关键方面:profiles and properties</p><h4 id="profiles"><a href="#profiles" class="headerlink" title="profiles"></a>profiles</h4><p>Profiles在核心容器中提供了一种机制，允许在不同环境中注册不同的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.dream.xiaobo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;prod&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">proDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;生产环境&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProDatabase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">devDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开发环境&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DevDatasource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevDatasource</span> <span class="keyword">implements</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line">    <span class="comment">//此处为实现的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProDatabase</span> <span class="keyword">implements</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line">   <span class="comment">//此处为实现的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestIoc</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        激活环境</span></span><br><span class="line">        applicationContext.getEnvironment().setActiveProfiles(<span class="string">&quot;prod&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        扫包</span></span><br><span class="line">        applicationContext.scan(<span class="string">&quot;com.dream.xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        刷新</span></span><br><span class="line">        applicationContext.refresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        使用</span></span><br><span class="line">        DataSource bean = applicationContext.getBean(DataSource.class);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;&#123;&#125;&quot;</span>, bean);</span><br></pre></td></tr></table></figure><p><strong>虚拟机参数方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspring.profiles.active=dev</span><br></pre></td></tr></table></figure><p><strong>编程式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">applicationContext.getEnvironment().setActiveProfiles(<span class="string">&quot;prod&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h4><p>Spring的【环境抽象】提供了对【属性】的搜索操作</p><p><strong>编程对象式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPropertySource</span> <span class="keyword">extends</span> <span class="title">PropertySource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPropertySource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        properties.put(<span class="string">&quot;xiaobo&quot;</span>,<span class="string">&quot;properties&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProperty</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> properties.get(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestIoc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ConfigurableEnvironment environment = applicationContext.getEnvironment();</span><br><span class="line"></span><br><span class="line">        MutablePropertySources propertySources = environment.getPropertySources();</span><br><span class="line">        propertySources.addFirst(<span class="keyword">new</span> MyPropertySource(<span class="string">&quot;my&quot;</span>));</span><br><span class="line"></span><br><span class="line">        applicationContext.refresh();</span><br><span class="line"></span><br><span class="line">        String xiaobo = environment.getProperty(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(xiaobo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@PropertySource</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:myconfig.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;path=&#x27;&quot;</span> + path + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestIoc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AConfig.class);</span><br><span class="line"></span><br><span class="line">        AConfig bean = applicationContext.getBean(AConfig.class);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;&#123;&#125;&quot;</span>,bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220426220935.2mt2ny4ewq00.webp&quot; alt=&quot;微信截图_20220426220935&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="spring" scheme="https://codexiaobo.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring 复习整理一</title>
    <link href="https://codexiaobo.github.io/posts/2522155561/"/>
    <id>https://codexiaobo.github.io/posts/2522155561/</id>
    <published>2022-04-20T11:28:20.000Z</published>
    <updated>2022-04-20T12:23:37.820Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%95%85%E4%BA%8B%E7%9A%84%E5%BC%80%E5%A4%B4.62a18swt4s00.webp" alt="故事的开头"></p><!--sleep--><span id="more"></span><h1 id="spring-复习整理一（仗剑走天涯）"><a href="#spring-复习整理一（仗剑走天涯）" class="headerlink" title="spring 复习整理一（仗剑走天涯）"></a>spring 复习整理一（仗剑走天涯）</h1><h2 id="小科普"><a href="#小科普" class="headerlink" title="小科普"></a>小科普</h2><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>DTD(Document Type Definition)即文档类型定义，是一种XML约束模式语言，是XML文件的验证机制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DTD声明始终以!DOCTYPE开头，空一格后跟着文档根元素的名称。</p><p>根元素名：configuration。所以每一个标签库定义文件都是以taglib为根元素的，否则就不会验证通过。</p><p>PUBLIC “-//mybatis.org//DTD Config 3.0//EN，这是一个公共DTD的名称（私有的使用SYSTEM表示）。这个东西命名是有些讲究的。首先它是以”-“开头的，表示这个DTD不是一个标准组织制定的。（如果是ISO标准化组织批准的，以“ISO”开头）。接着就是双斜杠“//”，跟着的是DTD所有者的名字，很明显这个DTD是MyBatis公司定的。接着又是双斜杠“//”，然后跟着的是DTD描述的文档类型，可以看出这份DTD描述的是DTD Config 3.0的格式。再跟着的就是“//”和ISO 639语言标识符。</p><p>绿色的字”<a href="http://mybatis.org/dtd/mybatis-3-config.dtd&quot;%EF%BC%8C%E8%A1%A8%E7%A4%BA%E8%BF%99%E4%B8%AADTD%E7%9A%84%E4%BD%8D%E7%BD%AE">http://mybatis.org/dtd/mybatis-3-config.dtd&quot;，表示这个DTD的位置</a></p><h3 id="XSD"><a href="#XSD" class="headerlink" title="XSD"></a>XSD</h3><p>文档结构描述XML Schema Definition 缩写，这种文件同样可以用来定义我们xml文件的结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第一行的xmlns代表了一个xml文件中的一个命名空间，通常是一个唯一的字符串，一般使用一个url</p><p><code>xmlns:xsi</code>=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;">http://www.w3.org/2001/XMLSchema-instance&quot;</a> 冒号后面的为命名</p><p>xmlns:xsi 定义了一个命名空间前缀 xsi 对应的唯一字符串 <a href="http://www.w3.org/2001/XMLSchema-instance%E3%80%82%E4%BD%86%E8%BF%99%E4%B8%AA">http://www.w3.org/2001/XMLSchema-instance。但这个</a> xmlns:xsi 在不同的 xml 文档中似乎都会出现。 这是因为， xsi 已经成为了一个业界默认的用于 XSD(（XML Schema Definition) 文件的命名空间。 而 XSD 文件（也常常称为 Schema 文件）是用来定义 xml 文档结构的。剩余两行的目的在于为我们的命名空间指定对应的xsd文件</p><h2 id="Why-spring"><a href="#Why-spring" class="headerlink" title="Why spring?"></a>Why spring?</h2><p>更快、更容易、更安全</p><h2 id="spring特性"><a href="#spring特性" class="headerlink" title="spring特性"></a>spring特性</h2><p><code>Core technologies</code>: dependency injection， events， resources， i18n， validation， data binding， type conversion， SpEL， AOP.</p><p>核心技术：包括依赖注入、事件模型、资源处理、国际化、数据绑定和验证、类型转化、spring表达式、面向切面编程。核心技术是一切的关键，后边衍生的多个特性都是依托于核心技术。</p><p><code>Testing</code>: mock objects， TestContext framework， Spring MVC Test， WebTestClient.</p><p><code>Data Access</code>: transactions， DAO support， JDBC， ORM， Marshalling XML.</p><p><code>Spring MVC and Spring WebFlux web frameworks</code>.</p><p><code>Integration</code>: remoting， JMS， JCA， JMX， email， tasks， scheduling， cache.</p><p><code>Languages</code>: Kotlin， Groovy， dynamic languages</p><h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><p>可以管理对象的生命周期、对象与对象之间的依赖关系</p><h3 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h3><p>简单java对象</p><h4 id="POJO的含义"><a href="#POJO的含义" class="headerlink" title="POJO的含义"></a>POJO的含义</h4><p>没有继承任何类、也没有实现任何接口，更没有被其它框架侵入的java对象。不允许有业务方法，也不能携带connection之类的方法，实际就是普通JavaBeans</p><h3 id="javaBean"><a href="#javaBean" class="headerlink" title="javaBean"></a>javaBean</h3><p>JavaBean是一种JAVA语言写成的可重用组件。JavaBean符合一定规范编写的Java类，不是一种技术，而是一种规范</p><h4 id="javaBean的约定"><a href="#javaBean的约定" class="headerlink" title="javaBean的约定"></a>javaBean的约定</h4><ul><li><p>所有属性为private。</p></li><li><p>这个类必须有一个公共的缺省构造函数。即是提供无参数的构造器。</p></li><li><p>这个类的属性使用getter和setter来访问，其他方法遵从标准命名规范。</p></li><li><p>这个类应是可序列化的。实现serializable接口</p></li></ul><h3 id="POJO和javaBean的区别"><a href="#POJO和javaBean的区别" class="headerlink" title="POJO和javaBean的区别"></a>POJO和javaBean的区别</h3><table><thead><tr><th>POJO</th><th>JAVABean</th></tr></thead><tbody><tr><td>除了Java语言强加的限制外，它没有其他特殊限制</td><td>这是一个特殊的POJO，它有一些限制</td></tr><tr><td>它没有对成员提供太多控制</td><td>它提供对成员的完全控制</td></tr><tr><td>它可以实现Serializable接口</td><td>它应该实现可序列化的接口</td></tr><tr><td>可以通过字段名称访问字段</td><td>字段只能由getter和setter访问</td></tr><tr><td>字段可以具有任何可见性</td><td>字段只有私人可见性</td></tr><tr><td>可能/可能没有no-arg构造函数</td><td>它必须具有无参数构造函数</td></tr><tr><td>当您不想限制成员并让用户完全访问您的实体时使用它</td><td>当您要向用户提供您的实体，但仅向实体的一部分提供服务时，将使用它</td></tr></tbody></table><p>POJO类和Bean均用于定义Java对象，以提高其可读性和可重用性。POJO没有其他限制，而bean是具有某些限制的特殊POJO</p><h3 id="SpringBean"><a href="#SpringBean" class="headerlink" title="SpringBean"></a>SpringBean</h3><p>SpringBean是受Spring管理的对象，所有能受Spring容器管理的对象都可以成为SpringBean。Spring中的bean，是通过配置文件、javaconfig等的设置，由Spring自动实例化，用完后自动销毁的对象</p><h3 id="SpringBean和JavaBean的区别"><a href="#SpringBean和JavaBean的区别" class="headerlink" title="SpringBean和JavaBean的区别"></a>SpringBean和JavaBean的区别</h3><ul><li><p>用处不同：传统javabean更多地作为值传递参数，而spring中的bean用处几乎无处不在，任何组件都可以被称为bean。</p></li><li><p>写法不同：传统javabean作为值对象，要求每个属性都提供getter和setter方法；但spring中的bean只需为接受设值注入的属性提供setter方法。</p></li><li><p>生命周期不同：传统javabean作为值对象传递，不接受任何容器管理其生命周期；spring中的bean有spring管理其生命周期行为。</p></li></ul><h3 id="Entity-Bean"><a href="#Entity-Bean" class="headerlink" title="Entity Bean"></a>Entity Bean</h3><p>Entity Bean是域模型对象，用于实现O/R映射，负责将数据库中的表记录映射为内存中的Entity对象，事实上，创建一个Entity Bean对象相当于新建一条记录，删除一个 Entity Bean会同时从数据库中删除对应记录，修改一个Entity Bean时，容器会自动将Entity Bean的状态和数据库同步</p><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>加入有个user对象 它与数据库字段一一对应 那么这个user对象就是一个<code>Entity Bean</code> 也是一个<code>POJO</code> 还是一个<code>javaBean</code> 你要是再把它放到Spring中 那么它还是一个<code>SpringBean</code></p><h2 id="spring的两个主要接口"><a href="#spring的两个主要接口" class="headerlink" title="spring的两个主要接口"></a>spring的两个主要接口</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        spring核心--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        springIOC(依赖注入)相关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        spring上下文 Spring提供在基础IoC功能上的扩展服务，此外还提供许多企业级服务的支持，如邮件服务、任务调度、JNDI定位、EJB集成、远程访问、缓存以及各种视图层框架的封装等--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>提供了一种高级的配置机制，能够管理任何类型的对象。 ApplicationContext是BeanFactory的子接口</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> <span class="keyword">extends</span> <span class="title">EnvironmentCapable</span>， <span class="title">ListableBeanFactory</span>， <span class="title">HierarchicalBeanFactory</span>， <span class="title">MessageSource</span>， <span class="title">ApplicationEventPublisher</span>， <span class="title">ResourcePatternResolver</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>BeanFactory提供了容器的基本功能，而ApplicationContext添加了更多特定于企业的功能</p><ul><li><p>更容易与Spring的AOP特性集成</p></li><li><p>消息资源处理(用于国际化) 解析消息的能力 支持国际化 继承自MessageSource接口</p></li><li><p>事件发布 向注册侦听器发布事件的能力 继承自ApplicationEventPublisher接口</p></li><li><p>应用程序层特定的上下文，如WebApplicationContext用于web应用程序</p></li><li><p>以通用方式加载文件资源的能力 继承自org.springframe .core.io.ResourceLoader接口</p></li></ul><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><p>传统上以简单而直观的XML格式提供 要告诉Spring容器如何去【实例化、配置和组装】应用程序中的对象</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.dao.UserDao&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;create&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userService&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.service.UserService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean概述"><a href="#Bean概述" class="headerlink" title="Bean概述"></a>Bean概述</h2><p>Spring IoC容器管理一个或多个bean。 这些bean是使用您提供给容器的配置元数据创建的</p><h3 id="Bean的命名"><a href="#Bean的命名" class="headerlink" title="Bean的命名"></a>Bean的命名</h3><p>每个bean都有【一个或多个】标识符。 这些标识符在承载bean的容器（ioc容器）中必须是唯一的。 bean通常只有一个标识符。 但是，如果需要多个，则可以考虑使用别名</p><p><code>id</code>属性允许您指定一个id</p><p><code>name</code>属性可以多个 用逗号空格分开</p><h3 id="Bean别名"><a href="#Bean别名" class="headerlink" title="Bean别名"></a>Bean别名</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userDao2&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实例化Bean"><a href="#实例化Bean" class="headerlink" title="实例化Bean"></a>实例化Bean</h3><p>beanDifination本质上是描述了一个bean是如何被创建的。 当被请求时，容器会查看指定bean的定义，并使用由该beanDifination封装的配置元数据来创建（或获取）实际对象</p><h4 id="使用构造函数实例化"><a href="#使用构造函数实例化" class="headerlink" title="使用构造函数实例化"></a>使用构造函数实例化</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用静态工厂实例化"><a href="#使用静态工厂实例化" class="headerlink" title="使用静态工厂实例化"></a>使用静态工厂实例化</h4><p>在使用【静态工厂方法】创建的bean时，使用【class】属性指定包含【一个静态工厂方法】的类，并使用名为【factory-method】的属性指定工厂方法本身的名称</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.dao.UserDao&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;create&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用实例工厂实例化"><a href="#使用实例工厂实例化" class="headerlink" title="使用实例工厂实例化"></a>使用实例工厂实例化</h4><p>该方法类似于通过（静态工厂方法）实例化所需的bean，容器同样可以使用【实例工厂方法】调用【非静态方法】创建一个新的bean。 要使用这种机制，请将【class】属性保留为空，并在【factory-bean】属性中指定当前容器中包含要调用的实例方法的bean的名称。 使用“factory-method”属性设置工厂方法本身的名称</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.dao.UserDao&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;create&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userService&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.service.UserService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="依赖注入（Dependency-Injection）"><a href="#依赖注入（Dependency-Injection）" class="headerlink" title="依赖注入（Dependency Injection）"></a>依赖注入（Dependency Injection）</h2><p>依赖注入（DI）是一个【过程】在此过程中，对象仅通过【构造函数参数】、【工厂方法参数】等来确定它们的依赖项。 然后容器在创建bean时注入这些依赖项。 从根本上说，这个过程与bean本身相反(因此得名”控制反转”)</p><p>大大实现了解耦</p><p><strong>举个例子</strong></p><p>就好比对象A依赖于B 但是B依赖于C 正常的话就是 在B类先new一个C 然后在A类new一个B然后将放入A的有参构造中 顺序是c–&gt;b–&gt;a 但是spring容器不知道先后依赖顺序 他是a依赖于b 就在容器中找b创建 然后b依赖c 就在容器中找c 顺序是 a–&gt;b–&gt;c 这也就是另一种称呼的来源 控制反转 就像反转了一样</p><h3 id="DI的主要两种方式"><a href="#DI的主要两种方式" class="headerlink" title="DI的主要两种方式"></a>DI的主要两种方式</h3><h4 id="基于构造函数的依赖注入"><a href="#基于构造函数的依赖注入" class="headerlink" title="基于构造函数的依赖注入"></a>基于构造函数的依赖注入</h4><p>通过容器调用带有许多参数的构造器来实现的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.dao.UserDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;addressDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.dao.AddressDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.service.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;addressDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于setter的注入"><a href="#基于setter的注入" class="headerlink" title="基于setter的注入"></a>基于setter的注入</h4><p>通过容器在【调用无参数构造函数】或【无参数“静态”工厂方法】实例化bean后调用bean上的setter方法来实现的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.dao.UserDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;addressDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.dao.AddressDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.service.UserService&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addressDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;addressDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="直接值"><a href="#直接值" class="headerlink" title="直接值"></a>直接值</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>code<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>music<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;friends&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>胖子<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>铭<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;father&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wanghongbo&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;mother&quot;</span> <span class="attr">value</span>=<span class="string">&quot;guofengrong&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="null值和空字符串"><a href="#null值和空字符串" class="headerlink" title="null值和空字符串"></a>null值和空字符串</h3><ul><li>空字符串</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;ExampleBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>null</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;ExampleBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="延迟初始化的-Bean"><a href="#延迟初始化的-Bean" class="headerlink" title="延迟初始化的 Bean"></a>延迟初始化的 Bean</h3><p>延迟初始化的bean告诉IoC容器在【第一次请求】时创建bean实例，而不是在启动时</p><p>在XML中，这种行为是由<bean/> 元素上的【lazy-init】属性控制的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.dao.UserDao&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>当一个【延迟初始化的bean】是一个没有延迟初始化的单例bean的依赖时，ApplicationContext会在启动时创建这个延迟初始化的bean，因为它必须满足单例bean的依赖， 延迟初始化的bean会被注入到没有延迟初始化的其他单例bean中</p><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><p>当使用基于xml的配置元数据时，您可以使用<bean/>元素的【autowire】属性为beanDifination指定自动装配模式</p><h3 id="自动装配的四种模式"><a href="#自动装配的四种模式" class="headerlink" title="自动装配的四种模式"></a>自动装配的四种模式</h3><table><thead><tr><th>运行方式</th><th>解释</th></tr></thead><tbody><tr><td>no</td><td>(默认)没有自动装配。 Bean引用必须由【ref】元素定义。 对于较大的部署，不建议更改默认设置，因为【明确指定协作者】可以提供更大的控制和清晰度。 在某种程度上，它记录了系统的结构</td></tr><tr><td>byName</td><td>通过属性名自动装配。 Spring寻找与需要自动连接的属性同名的bean。 例如，如果一个beanDifination被设置为按名称自动装配，并且它包含一个“master”属性（也就是说，它有一个“setMaster(..)”方法），Spring会寻找一个名为“master”的beanDifination并使用它来设置属性</td></tr><tr><td>byType</td><td>如果容器中恰好有一个属性类型的bean，则允许自动连接属性。 如果存在多个，则抛出异常，这表明您不能对该bean使用’ byType ‘自动装配。 如果没有匹配的bean，则不会发生任何事情(没有设置属性)</td></tr><tr><td>constructor</td><td>类似于’ byType ‘，但适用于构造函数参数。 如果容器中没有一个构造函数参数类型的bean，则会引发致命错误</td></tr></tbody></table><h3 id="自动装配的优点"><a href="#自动装配的优点" class="headerlink" title="自动装配的优点"></a>自动装配的优点</h3><p>自动装配可以显著减少指定属性或构造函数参数的需要</p><p>自动装配可以随着对象的发展更新配置</p><h3 id="从自动装配中排除Bean"><a href="#从自动装配中排除Bean" class="headerlink" title="从自动装配中排除Bean"></a>从自动装配中排除Bean</h3><p>在每个bean的基础上，您可以将一个bean排除在自动装配之外。 在Spring的XML格式中，将<bean/>元素的【autowire-candidate】属性设置为’ false ‘</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] like;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; friends;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; family;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AddressDao addressDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;AddressDao&gt; addressDaoList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.dao.AddressDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;addressDao&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>code<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>music<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;friends&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>胖子<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>铭<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;father&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wanghongbo&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;mother&quot;</span> <span class="attr">value</span>=<span class="string">&quot;guofengrong&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h2><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.7dyupf4980c0.webp" alt="循环依赖"></p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>创建A时发现成员变量依赖B 首先去一级缓存中查找 如果有直接填充 没有 再去二级缓存中去查找 二级缓存中有 填充 没有 在去容器中查找 容器中如果有 直接进行填充 如果没有创建B 然后B同理A</p><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%95%85%E4%BA%8B%E7%9A%84%E5%BC%80%E5%A4%B4.62a18swt4s00.webp&quot; alt=&quot;故事的开头&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="spring" scheme="https://codexiaobo.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>mybatis 复习整理</title>
    <link href="https://codexiaobo.github.io/posts/3309767855/"/>
    <id>https://codexiaobo.github.io/posts/3309767855/</id>
    <published>2022-03-29T13:03:57.000Z</published>
    <updated>2022-03-29T13:07:30.463Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/siri.4h57x2tiwqy0.webp" alt="siri"></p><!--sleep--><span id="more"></span><h1 id="mybatis-复习整理（仗剑走天涯）"><a href="#mybatis-复习整理（仗剑走天涯）" class="headerlink" title="mybatis 复习整理（仗剑走天涯）"></a>mybatis 复习整理（仗剑走天涯）</h1><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>持久化是将程序数据在持久状态和瞬时状态间转换的机制。通俗的讲，就是瞬时数据（比如内存中的数据，是不能永久保存的）持久化为持久数据（比如持久化至数据库中，能够长久保存）</p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>将操作数据库的代码统一抽离出来，形成了介于业务层和数据库中间的独立的层</p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>ORM，即Object-Relational Mapping（对象关系映射），它的作用是在关系型数据库和业务实体对象之间作一个映射，这样，我们在具体的操作业务对象的时候，就不需要再去和复杂的SQL语句打交道，只需简单的操作对象的属性和方法</p><ul><li>hibernate</li></ul><p>全自动的框架，强大、复杂、笨重、学习成本较高，不够灵活，实现了jpa规范。Java Persistence API（Java 持久层 API）</p><ul><li>mybatis</li></ul><p>半自动的框架(懂数据库的人 才能操作) 必须要自己写sql，不是依照的jpa规范实现的</p><h2 id="mybatis的优点和缺点"><a href="#mybatis的优点和缺点" class="headerlink" title="mybatis的优点和缺点"></a>mybatis的优点和缺点</h2><h3 id="sql语句与代码分离，存放于xml配置文件中"><a href="#sql语句与代码分离，存放于xml配置文件中" class="headerlink" title="sql语句与代码分离，存放于xml配置文件中"></a>sql语句与代码分离，存放于xml配置文件中</h3><p><code>优点</code>：便于维护管理，不用在java代码中找这些语句</p><p><code>缺点</code>： JDBC方式可以用打断点的方式调试，但是MyBatis调试比较复杂，一般要通过log4j日志输出日志信息帮助调试，然后在配置文件中修改</p><h3 id="用逻辑标签控制动态SQL的拼接"><a href="#用逻辑标签控制动态SQL的拼接" class="headerlink" title="用逻辑标签控制动态SQL的拼接"></a>用逻辑标签控制动态SQL的拼接</h3><p><code>优点</code>：用标签代替编写逻辑代码</p><p><code>缺点</code>：拼接复杂SQL语句时，没有代码灵活，拼写比较复杂。不要使用变通的手段来应对这种复杂的语句。</p><h3 id="查询的结果集与java对象自动映射"><a href="#查询的结果集与java对象自动映射" class="headerlink" title="查询的结果集与java对象自动映射"></a>查询的结果集与java对象自动映射</h3><p><code>优点</code>：保证名称相同，配置好映射关系即可自动映射或者，不配置映射关系，通过配置列名=字段名也可完成自动映射</p><p><code>缺点</code>：对开发人员所写的SQL依赖很强。</p><h3 id="编写原生SQL"><a href="#编写原生SQL" class="headerlink" title="编写原生SQL"></a>编写原生SQL</h3><p><code>优点</code>：接近JDBC，比较灵活。</p><p><code>缺点</code>：对SQL语句依赖程度很高；并且属于半自动，数据库移植比较麻烦，比如MySQL数据库编程Oracle数据库，部分的SQL语句需要调整。</p><h2 id="mybatis入门配置"><a href="#mybatis入门配置" class="headerlink" title="mybatis入门配置"></a>mybatis入门配置</h2><p>先创建一个表<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E8%A1%A8%E7%BB%93%E6%9E%84.2x563nc1xjy0.webp" alt="表结构"></p><h3 id="maven项目"><a href="#maven项目" class="headerlink" title="maven项目"></a>maven项目</h3><ul><li>父工程 pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>review_mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    子模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    声明聚合工程 pom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    统一设置版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql-connector-java.version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">mysql-connector-java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logback.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">logback.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    父工程依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        依赖集--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            测试单元juit依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            mybatis依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            mysql驱动依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-java.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            lombok依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--            loback日志实现依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--            druid数据源依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子工程 pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>review_mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span> <span class="comment">&lt;!-- 源代码使用的JDK版本 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span> <span class="comment">&lt;!-- 需要生成的目标class文件的编译版本 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span><span class="comment">&lt;!-- 字符集编码 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        sources集--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            配置项目读取的路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mybatis-config.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    声明--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaobo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置日志打印格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SLF4J&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logPrefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mybatis.sql.&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    别名配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.dream.xiaobo.entity.User&quot; alias=&quot;user&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.dream.xiaobo.datasources.DruidDatasourcesFactory&quot; alias=&quot;DRUID&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.dream.xiaobo.entity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    设置默认读取哪个环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        id 多环境的名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            数据源--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            数据源 这里的type可以使用别名 或者使用全类名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;com.dream.xiaobo.datasources.DruidDatasourcesFactory&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;druid.driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;druid.url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;druid.username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;druid.password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    映射Mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper class=&quot;com.dream.xiaobo.dao.UserMapper&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.dao.AdminMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>User实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Data注解 lombok自动生成set get方法</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//自动生成有参构造</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//自动生成无参构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//声明别名</span></span><br><span class="line"><span class="comment">//@Alias(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer isDelete;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gmtCreate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gmtUpdate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户Id查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数查询 传入的参数要用<span class="doctag">@Param</span>注解标注参数名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByIdAndUsername</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id,<span class="meta">@Param(&quot;username&quot;)</span> String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入用户对象进行查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入Map集合进行查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入用户 插入操作要进行事务的提交 可以手动提交 也可以自动提交</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">delete</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>userMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--映射地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dream.xiaobo.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO `t_user`(username,age,version,is_delete,gmt_create,gmt_update)</span><br><span class="line">        values(#&#123;username&#125;,#&#123;age&#125;,#&#123;version&#125;,#&#123;isDelete&#125;,#&#123;gmtCreate&#125;,#&#123;gmtUpdate&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        UPDATE `t_user` SET username = #&#123;username&#125;,age = #&#123;age&#125;,gmt_update = #&#123;gmtUpdate&#125; WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM t_user WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM t_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    resultType返回结果类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_user WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    参数这个#&#123;&#125;里面可以是任意定义参数 需要在接口处用@Param注解标注--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByIdAndUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_user WHERE id = #&#123;id&#125; AND username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    用户对象这里的参数必须是对应的字段名 因为要通过反射拿到具体的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_user WHERE id = #&#123;id&#125; AND username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_user WHERE id = #&#123;id&#125; AND username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_user WHERE username LIKE #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>resultType</code>：指定返回类型，查询是有结果的，结果啥类型</p><p><code>parameterType</code>：指定参数类型，查询是有参数的，参数啥类型</p><p><code>id</code>：指定对应的方法映射关系，就是告诉我你这sql对应的是哪个方法</p><p><code>#&#123;id&#125;</code>：sql中的变量，要保证大括号的变量必须在User对象里有</p><p><code>#&#123;&#125;</code>：占位符，其实就是咱们的【PreparedStatement】处理这个变量，mybatis会将它替换成 <code>?</code></p><h4 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#和$的区别"></a>#和$的区别</h4><p><code>#&#123;&#125;</code> 的作用主要是替换预编译语句(PrepareStatement)中的占位符 <code>?</code></p><p><code>$&#123;&#125;</code> 的作用是直接进行字符串替换</p><ul><li>test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明slf4j日志</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlSessionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义mybatis配置文件位置</span></span><br><span class="line">        String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建SqlSessionFactory工厂 通过SqlSessionFactoryBuilder 这里面用到两个设计模式 一个是工厂模式 一个是创建者模式</span></span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMybatis</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿到工厂中具体的对象 SqlSession</span></span><br><span class="line">        <span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            <span class="comment">//读取配置文件的Sql</span></span><br><span class="line">            Object o = session.selectList(<span class="string">&quot;user.select&quot;</span>);</span><br><span class="line">            <span class="comment">//日志框架打印 使用给的是Logback</span></span><br><span class="line">            log.debug(<span class="string">&quot;user 的 信息内容[&#123;&#125;]&quot;</span>,o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapper</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿到工厂中具体的对象 SqlSession</span></span><br><span class="line">        <span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿到mapper mybatis使用JDK的proxy类动态代理方式 代理对象实现了UserMapper接口</span></span><br><span class="line">            UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">            List&lt;User&gt; list = mapper.selectAll();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//日志框架打印 使用给的是Logback</span></span><br><span class="line">            log.debug(<span class="string">&quot;user 的 信息内容[&#123;&#125;]&quot;</span>,list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession())&#123;</span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            User userById = mapper.findUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,userById);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByIdAndUsername</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession())&#123;</span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            User tr = mapper.findUserByIdAndUsername(<span class="number">4</span>, <span class="string">&quot;tr&quot;</span>);</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,tr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUser</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession())&#123;</span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(<span class="number">1</span>);</span><br><span class="line">            user.setUsername(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">            User userByUser = mapper.findUserByUser(user);</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,userByUser);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindMap</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession())&#123;</span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;(<span class="number">2</span>);</span><br><span class="line">            map.put(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">            map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">            User userByMap = mapper.findUserByMap(map);</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,userByMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUsername</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession())&#123;</span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">            User userByUsername = mapper.findUserByUsername(<span class="string">&quot;%x%&quot;</span>);</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,userByUsername);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession())&#123;</span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 时间处理</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Date date = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM--dd HH:mm:ss&quot;</span>);</span><br><span class="line">            String format = simpleDateFormat.format(date);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 创建User对象赋值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUsername(<span class="string">&quot;爱要怎么说出口&quot;</span>);</span><br><span class="line">            user.setAge(<span class="number">22</span>);</span><br><span class="line">            user.setVersion(<span class="number">0</span>);</span><br><span class="line">            user.setIsDelete(<span class="number">0</span>);</span><br><span class="line">            user.setGmtCreate(format);</span><br><span class="line">            user.setGmtUpdate(format);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Integer insert = mapper.insert(user);</span><br><span class="line">                <span class="keyword">if</span> (insert &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,insert);</span><br><span class="line">                    <span class="comment">//手动提交事务</span></span><br><span class="line">                    sqlSession.commit();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    log.error(<span class="string">&quot;插入失败&quot;</span>);</span><br><span class="line">                    <span class="comment">//事务回滚</span></span><br><span class="line">                    sqlSession.rollback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                log.error(<span class="string">&quot;发生异常 插入失败&quot;</span>,e);</span><br><span class="line">                <span class="comment">//事务回滚</span></span><br><span class="line">                sqlSession.rollback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sqlSessionFactory.openSession() 参数  true 自动提交事务 默认手动提交</span></span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>))&#123;</span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 时间处理</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Date date = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM--dd HH:mm:ss&quot;</span>);</span><br><span class="line">            String format = simpleDateFormat.format(date);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 创建User对象赋值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(<span class="number">6</span>);</span><br><span class="line">            user.setUsername(<span class="string">&quot;爱要怎么说出口&quot;</span>);</span><br><span class="line">            user.setAge(<span class="number">24</span>);</span><br><span class="line">            user.setGmtUpdate(format);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//                int result = 1/0;</span></span><br><span class="line">                Integer update = mapper.update(user);</span><br><span class="line">                <span class="keyword">if</span> (update &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,update);</span><br><span class="line">                    <span class="comment">//手动提交事务</span></span><br><span class="line"><span class="comment">//                    sqlSession.commit();</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    log.error(<span class="string">&quot;插入失败&quot;</span>);</span><br><span class="line">                    <span class="comment">//事务回滚</span></span><br><span class="line"><span class="comment">//                    sqlSession.rollback();</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                log.error(<span class="string">&quot;发生异常 插入失败&quot;</span>,e);</span><br><span class="line">                <span class="comment">//事务回滚</span></span><br><span class="line"><span class="comment">//                sqlSession.rollback();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sqlSessionFactory.openSession() 参数  true 自动提交事务 默认手动提交</span></span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>))&#123;</span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 创建User对象赋值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//                int result = 1/0;</span></span><br><span class="line">                Integer delete = mapper.delete(user);</span><br><span class="line">                <span class="keyword">if</span> (delete &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,delete);</span><br><span class="line">                    <span class="comment">//手动提交事务</span></span><br><span class="line"><span class="comment">//                    sqlSession.commit();</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    log.error(<span class="string">&quot;插入失败&quot;</span>);</span><br><span class="line">                    <span class="comment">//事务回滚</span></span><br><span class="line"><span class="comment">//                    sqlSession.rollback();</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                log.error(<span class="string">&quot;发生异常 插入失败&quot;</span>,e);</span><br><span class="line">                <span class="comment">//事务回滚</span></span><br><span class="line"><span class="comment">//                sqlSession.rollback();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sqlSession.getMapper(UserMapper.class);帮我们生成一个代理对象，该对象实现了这个接口的方法 这里使用了动态代理的方式</p><p>增、删、改操作需要提交事务！在默认情况下MySQL的事务是自动提交的，而框架却默认设置成了手动提交，我们开启了事务，又没有去提交事务，结束后自然会回滚啊</p><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p>1、创建一个SqlSessionFactory的 建造者 ，用于创建SqlSessionFactory</p><p>2、使用builder构建一个sqlSessionFactory，此处我们基于一个xml配置文件</p><p>3、通过sqlSessionFactory获取另一个session，此处使用【工厂设计模式】</p><p>4、一个sqlsession就是一个会话，可以使用sqlsession对数据库进行操作</p><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例</p><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，最简单的就是使用单例模式</p><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><p>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  <span class="comment">// 逻辑代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mybatis注解配置"><a href="#mybatis注解配置" class="headerlink" title="mybatis注解配置"></a>mybatis注解配置</h2><ul><li>admin</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer isDelete;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gmtCreate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gmtUpdate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AdminMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdminMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(value = &quot;SELECT * FROM `t_admin`&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Admin&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(value = &quot;SELECT * FROM `t_admin` WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Admin&gt; <span class="title">findUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(value = &quot;INSERT INTO t_admin(username,password,version,is_delete,gmt_create,gmt_update) values(#&#123;username&#125;,#&#123;password&#125;,#&#123;version&#125;,#&#123;isDelete&#125;,#&#123;gmtCreate&#125;,#&#123;gmtUpdate&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insert</span><span class="params">(Admin admin)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(value = &quot;UPDATE `t_admin` SET username = #&#123;username&#125;,password=#&#123;password&#125;,version=#&#123;version&#125;,is_delete=#&#123;isDelete&#125;,gmt_create = #&#123;gmtCreate&#125;,gmt_update=#&#123;gmtUpdate&#125; WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">update</span><span class="params">(Admin admin)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(value = &quot;DELETE FROM `t_admin` WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">delete</span><span class="params">(Admin admin)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mybatis-config.xml</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span><br><span class="line">        &lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.dream.xiaobo.dao.AdminMapper&quot;</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInterpretation</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>))&#123;</span><br><span class="line"></span><br><span class="line">            String format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">            AdminMapper mapper = sqlSession.getMapper(AdminMapper.class);</span><br><span class="line"></span><br><span class="line">            List&lt;Admin&gt; userById = mapper.findUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            List&lt;Admin&gt; all = mapper.findAll();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 创建Admin对象赋值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Admin admin = <span class="keyword">new</span> Admin();</span><br><span class="line"></span><br><span class="line">            admin.setId(<span class="number">2</span>);</span><br><span class="line">            admin.setUsername(<span class="string">&quot;哑巴&quot;</span>);</span><br><span class="line">            admin.setPassword(<span class="string">&quot;哑巴&quot;</span>);</span><br><span class="line">            admin.setVersion(<span class="number">0</span>);</span><br><span class="line">            admin.setIsDelete(<span class="number">0</span>);</span><br><span class="line">            admin.setGmtCreate(format);</span><br><span class="line">            admin.setGmtUpdate(format);</span><br><span class="line"></span><br><span class="line">            Integer insert = mapper.insert(admin);</span><br><span class="line"></span><br><span class="line">            Integer update = mapper.update(admin);</span><br><span class="line"></span><br><span class="line">            Integer delete = mapper.delete(admin);</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,userById);</span><br><span class="line">            log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,all);</span><br><span class="line">            log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,insert);</span><br><span class="line">            log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,update);</span><br><span class="line">            log.debug(<span class="string">&quot;[&#123;&#125;]&quot;</span>,delete);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/siri.4h57x2tiwqy0.webp&quot; alt=&quot;siri&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="mybatis" scheme="https://codexiaobo.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>常用的设计模式</title>
    <link href="https://codexiaobo.github.io/posts/4099381251/"/>
    <id>https://codexiaobo.github.io/posts/4099381251/</id>
    <published>2022-03-25T06:51:28.000Z</published>
    <updated>2022-03-25T06:53:22.860Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%97%A0%E6%9C%9B.2bzqwjlplv8k.webp" alt="无望"></p><!--sleep--><span id="more"></span><h1 id="设计模式-复习整理（仗剑走天涯）"><a href="#设计模式-复习整理（仗剑走天涯）" class="headerlink" title="设计模式 复习整理（仗剑走天涯）"></a>设计模式 复习整理（仗剑走天涯）</h1><h2 id="常用的简单设计模式"><a href="#常用的简单设计模式" class="headerlink" title="常用的简单设计模式"></a>常用的简单设计模式</h2><h3 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h3><p>工厂模式分为简单工厂模式，工厂方法模式和抽象工厂模式，它们都属于设计模式中的创建型模式。其主要功能都是帮助我们把对象的实例化部分抽取了出来，目的是降低系统中代码耦合度，并且增强了系统的扩展性。</p><p>还有一个很重要的原因，就是对象的创建过程比较复杂，使用工厂模式进行封装，同时可以屏蔽掉对象的复杂的创建过程</p><h4 id="简单工厂设计模式"><a href="#简单工厂设计模式" class="headerlink" title="简单工厂设计模式"></a>简单工厂设计模式</h4><p>简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责，但是其最大的缺点在于工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂</p><ul><li>Factory 工厂角色</li></ul><p>工厂角色负责实现创建所有实例的内部逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FriendFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Friend <span class="title">friendName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name.contentEquals(<span class="string">&quot;胖子&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FattyFriend();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (name.contentEquals(<span class="string">&quot;SB铭&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SBFriend();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;没有此朋友&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Product 抽象产品角色</li></ul><p>抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ConcreteProduct 具体产品角色</li></ul><p>具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FattyFriend</span> <span class="keyword">implements</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;胖子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SBFriend</span> <span class="keyword">implements</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>client</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FriendFactory friendFactory = <span class="keyword">new</span> FriendFactory();</span><br><span class="line">        Friend friend = friendFactory.friendName(<span class="string">&quot;SB铭&quot;</span>);</span><br><span class="line">        friend.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.4lgzn2biqa60.webp" alt="简单工厂设计模式"></p><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><ul><li>factory 抽象工厂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Friend <span class="title">Friend</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ConcreteFactory 具体工厂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FattyFriendFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FattyFriend <span class="title">Friend</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FattyFriend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SBFriendFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Friend <span class="title">Friend</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SBFriend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Product 抽象产品</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ConcreteProduct 具体产品</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FattyFriend</span> <span class="keyword">implements</span>  <span class="title">Friend</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;胖子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SBFriend</span> <span class="keyword">implements</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>client</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Factory factory = <span class="keyword">new</span> SBFriendFactory();</span><br><span class="line">        Friend friend = factory.Friend();</span><br><span class="line">        friend.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.3lr1syl2sym0.webp" alt="工厂方法模式"><br><strong>好处</strong></p><p>此模式中，通过定义一个抽象的核心工厂类，并定义创建产品对象的接口，创建具体产品实例的工作延迟到其工厂子类去完成。这样做的好处是核心类只关注工厂类的接口定义，而具体的产品实例交给具体的工厂子类去创建。当系统需要新增一个产品是，无需修改现有系统代码，只需要添加一个具体产品类和其对应的工厂子类，使系统的扩展性变得很好，符合面向对象编程的开闭原则</p><p><strong>缺点</strong></p><p>工厂方法模式虽然扩展性好，但是增加了编码难度，大量增加了类的数量，所以怎么选择还是看实际的需求</p><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>在有多个业务品种、业务、分类时，通过抽象工厂模式产生需要的对象是一种非常好的解决方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractManFriend <span class="title">manFriend</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractGiriFriend <span class="title">giriFriend</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractGiriFriend</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractManFriend</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AFriendFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractManFriend <span class="title">manFriend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AManFriend();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractGiriFriend <span class="title">giriFriend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AGiriFriend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AGiriFriend</span> <span class="keyword">extends</span> <span class="title">AbstractGiriFriend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AManFriend</span> <span class="keyword">extends</span> <span class="title">AbstractManFriend</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BFriendFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractManFriend <span class="title">manFriend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BManFriend();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractGiriFriend <span class="title">giriFriend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BGiriFriend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BGiriFriend</span> <span class="keyword">extends</span> <span class="title">AbstractGiriFriend</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BManFriend</span> <span class="keyword">extends</span> <span class="title">AbstractManFriend</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        AbstractFactory abstractFactory = <span class="keyword">new</span> AFriendFactory();</span><br><span class="line">        AbstractManFriend abstractManFriend = abstractFactory.manFriend();</span><br><span class="line"></span><br><span class="line">        System.out.println(abstractManFriend);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h3><p>分离对象子组件的单独构造（由Buider来负责）和装配（由Director负责）。从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况下使用。</p><p>由于实现构造和装配的解耦。不同的构造器，相同的装配，也可以做出不同的对象；相同的构造器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。</p><p>最典型的就是我们的StringBuilder和StringBuffer。</p><ul><li><p>Builder：抽象建造者</p></li><li><p>ConcreteBuilder：具体建造者</p></li><li><p>Director：指挥者</p></li><li><p>Product：产品角色<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F.1zndnjtev9kw.webp" alt="创建者模式"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String work;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String marriage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String die;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(String birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSchool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(String school)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> work;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWork</span><span class="params">(String work)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.work = work;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMarriage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> marriage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMarriage</span><span class="params">(String marriage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.marriage = marriage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> die;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDie</span><span class="params">(String die)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.die = die;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Lifecycle lifecycle = <span class="keyword">new</span> Lifecycle();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">builderBirth</span><span class="params">(String birth)</span></span>&#123;</span><br><span class="line">            lifecycle.setBirth(birth + <span class="string">&quot;我来到了这世间&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">builderSchool</span><span class="params">(String school)</span></span>&#123;</span><br><span class="line">            lifecycle.setSchool(school + <span class="string">&quot;开始上学&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">builderWork</span><span class="params">(String work)</span></span>&#123;</span><br><span class="line">            lifecycle.setWork(work + <span class="string">&quot;毕业开始工作&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">builderMarriage</span><span class="params">(String marriage)</span></span>&#123;</span><br><span class="line">            lifecycle.setMarriage(marriage + <span class="string">&quot;***&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">builderDie</span><span class="params">(String die)</span></span>&#123;</span><br><span class="line">            lifecycle.setDie(die + <span class="string">&quot;死去&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">builder</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lifecycle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Lifecycle&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;birth=&#x27;&quot;</span> + birth + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, school=&#x27;&quot;</span> + school + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, work=&#x27;&quot;</span> + work + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, marriage=&#x27;&quot;</span> + marriage + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, die=&#x27;&quot;</span> + die + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Lifecycle lifecycle = <span class="keyword">new</span> Lifecycle.Builder().builderBirth(<span class="string">&quot;2001-04-06&quot;</span>)</span><br><span class="line">                .builderSchool(<span class="string">&quot;2006-09-01&quot;</span>)</span><br><span class="line">                .builderWork(<span class="string">&quot;2023-07-01&quot;</span>)</span><br><span class="line">                .builderMarriage(<span class="string">&quot;****&quot;</span>)</span><br><span class="line">                .builderDie(<span class="string">&quot;某年某月某日&quot;</span>)</span><br><span class="line">                .builder();</span><br><span class="line"></span><br><span class="line">        System.out.println(lifecycle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建者模式是一个对对象的构建过程“精细化”的构建过程，每个部分的构建可能是变化的，但是对象的组织过程是固定的，通过这种统一的创建方式，无疑增加了我们设计上的灵活性，当我们在构建复杂对象的时候，我们如果发现每个部分可能都是变化的，并且是多个不同的构建步骤的时候，我们可以考虑使用创建者模式</p><h3 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h3><p>代理的核心功能是方法增强</p><h4 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h4><p>抽象角色 : 一般使用接口或者抽象类来实现</p><p>真实角色 : 被代理的角色</p><p>代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作</p><p>客户 : 使用代理角色来进行一些操作</p><p><strong>静态代理的两种方式</strong></p><ul><li><strong>实现接口</strong></li></ul><p>不同对象实现相同接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bossinterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">project</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> <span class="keyword">implements</span> <span class="title">Bossinterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boss</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">project</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;要做个项目&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Bossinterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boss boss;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Boss boss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boss = boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">project</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;项目经理给我想法子&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;策划给我设计&quot;</span>);</span><br><span class="line">        boss.project();</span><br><span class="line">        System.out.println(<span class="string">&quot;程序员给我写&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;运维给我善后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Bossinterface bossinterface = <span class="keyword">new</span> Proxy(<span class="keyword">new</span> Boss(<span class="string">&quot;Boss&quot;</span>));</span><br><span class="line">        bossinterface.project();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>继承父类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">project</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老板一个大饼我要做个新项目&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">extends</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">project</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;项目经理给我想法子&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;策划给我设计&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.project();</span><br><span class="line">        System.out.println(<span class="string">&quot;程序员给我写&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;运维给我善后&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line">        proxy.project();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><p>公共的统一问题交给代理处理</p><p>公共业务进行扩展或变更时，可以更加方便</p><p><strong>缺点</strong></p><p>每个类都写个代理</p><h4 id="动态代理模式"><a href="#动态代理模式" class="headerlink" title="动态代理模式"></a>动态代理模式</h4><p>动态代理的代理类是动态生成的 ，静态代理的代理类是我们写的</p><p>动态代理分为两类 : 一类是基于接口动态代理 , 一类是基于类的动态代理</p><p>基于接口的动态代理—-JDK动态代理</p><p>基于类的动态代理–cglib</p><h5 id="JDK源生动态代理"><a href="#JDK源生动态代理" class="headerlink" title="JDK源生动态代理"></a>JDK源生动态代理</h5><p><strong>jdk动态代理的两个核心类</strong></p><ul><li><strong>InvocationHandler</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Invoke the given method with the args and return the result.</span></span><br><span class="line"><span class="comment">     *  This may result in a remote invocation.</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span> proxy The proxy used for this class (null if not using java.lang.reflect.Proxy)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">( Object proxy, <span class="keyword">final</span> Method method,</span></span></span><br><span class="line"><span class="params"><span class="function">        Object[] args )</span> <span class="keyword">throws</span> Throwable</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>proxy</code> 调用该方法的代理实例</p><p><code>method</code> 所述方法对应于调用代理实例上的接口方法的实例。方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。</p><p><code>args</code> 包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean 。</p><ul><li><strong>Proxy</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          InvocationHandler h)</span><span class="keyword">throws</span> IllegalArgumentException</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>loader</code> 加载路径</p><p><code>interfaces</code> 接口类 是个数组 可以是多个</p><p><code>InvocationHandler</code> invocationHandler接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bossinterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">project</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">project</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老板一个大饼我要做个新项目&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">Bossinterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boss boss;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Boss boss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boss = boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">project</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;项目经理给我想法子&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;策划给我设计&quot;</span>);</span><br><span class="line">        boss.project();</span><br><span class="line">        System.out.println(<span class="string">&quot;程序员给我写&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;运维给我善后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkDynamicProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该设置用于输出jdk动态代理产生的类</span></span><br><span class="line">System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class="string">&quot;true&quot;</span>);  </span><br><span class="line"></span><br><span class="line">        Bossinterface proxy = (Bossinterface)Proxy.newProxyInstance(</span><br><span class="line">                Thread.currentThread().getContextClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Bossinterface.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> myInvocationHandler(<span class="keyword">new</span> DynamicProxy(<span class="keyword">new</span> Boss())));</span><br><span class="line">        proxy.project();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义invocationHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">myInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Bossinterface bossinterface;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">myInvocationHandler</span><span class="params">(Bossinterface bossinterface)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.bossinterface = bossinterface;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">            method.invoke(bossinterface);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Enhancer enhancer=<span class="keyword">new</span> Enhancer();</span><br><span class="line">    enhancer.setSuperclass(MaleSinger.class);</span><br><span class="line">    enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">            Object invoke = methodProxy.invokeSuper(o,objects);</span><br><span class="line">            System.out.println(<span class="string">&quot;++++++++++&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> invoke;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    MaleSinger maleSinger = (MaleSinger)enhancer.create();</span><br><span class="line">    maleSinger.sing();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java动态代理只能够对接口进行代理，不能对普通的类进行代理（因为所有生成的代理类的父类为Proxy，Java类继承机制不允许多重继承）</p><p>CGLIB能够代理普通类</p><p>Java动态代理使用Java原生的反射API进行操作，在生成类上比较高效；CGLIB使用ASM框架直接对字节码进行操作，在类的执行过程中比较高效</p><h3 id="ASM动态代理的本质"><a href="#ASM动态代理的本质" class="headerlink" title="ASM动态代理的本质"></a>ASM动态代理的本质</h3><p>ASM是一个java字节码操纵和分析框架，它可以直接以二进制的形式修改class或动态生成class</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ow2.asm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asm-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ow2.asm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%97%A0%E6%9C%9B.2bzqwjlplv8k.webp&quot; alt=&quot;无望&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="-java -设计模式" scheme="https://codexiaobo.github.io/tags/java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>日志框架 log4j2</title>
    <link href="https://codexiaobo.github.io/posts/3717802320/"/>
    <id>https://codexiaobo.github.io/posts/3717802320/</id>
    <published>2022-03-24T11:31:56.000Z</published>
    <updated>2022-03-24T11:33:39.439Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220324192841.2yuewnp34ok0.webp" alt="微信图片_20220324192841"></p><!--sleep--><span id="more"></span><h1 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h1><h2 id="lo4j2"><a href="#lo4j2" class="headerlink" title="lo4j2"></a>lo4j2</h2><h3 id="log4j-api日志门面"><a href="#log4j-api日志门面" class="headerlink" title="log4j-api日志门面"></a>log4j-api日志门面</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Log4j2 门面API--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Log4j2 日志实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="最流行的日志配置"><a href="#最流行的日志配置" class="headerlink" title="最流行的日志配置"></a>最流行的日志配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Log4j2 门面API--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Log4j2 日志实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用slf4j作为日志的门面,使用log4j2来记录日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--为slf4j绑定日志实现 log4j2的适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Web项目在web.xml中配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfiguration<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/conf/log4j2.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.apache.logging.log4j.web.Log4jServletContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="log4j2-xml配置"><a href="#log4j2-xml配置" class="headerlink" title="log4j2.xml配置"></a>log4j2.xml配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span>&gt;</span>D:/logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] [%-5level] %c&#123;36&#125;:%L -</span></span></span><br><span class="line"><span class="string"><span class="tag">                                    -- %m%n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/myfile.log&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l</span></span></span><br><span class="line"><span class="string"><span class="tag">                                    %c&#123;36&#125; - %m%n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RandomAccessFile</span> <span class="attr">name</span>=<span class="string">&quot;accessFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/myAcclog.log&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l</span></span></span><br><span class="line"><span class="string"><span class="tag">                                    %c&#123;36&#125; - %m%n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RandomAccessFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;rollingFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/myrollog.log&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">&quot;D:/logs/$$&#123;date:yyyy-MM-dd&#125;/myrollog-%d&#123;yyyyMM-dd-HH-mm&#125;-%i.log&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l</span></span></span><br><span class="line"><span class="string"><span class="tag">                                    %c&#123;36&#125; - %msg%n&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">OnStartupTriggeringPolicy</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;10 MB&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">&quot;MyFile&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">fileName</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/$&#123;FILE_NAME&#125;.log&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">filePattern</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/$$&#123;date:yyyy-MM&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd HH-mm&#125;-%i.log&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PatternLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;10 MB&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;mylog&quot;</span> <span class="attr">level</span>=<span class="string">&quot;trace&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;MyFile&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="log4j2异步日志"><a href="#log4j2异步日志" class="headerlink" title="log4j2异步日志"></a>log4j2异步日志</h3><ul><li>log4j2异步依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--异步日志依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lmax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disruptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="AsyncAppender"><a href="#AsyncAppender" class="headerlink" title="AsyncAppender"></a>AsyncAppender</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;warn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span>&gt;</span>D:/logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/myfile.log&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Async</span> <span class="attr">name</span>=<span class="string">&quot;Async&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Async</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Async&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>全局异步</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Log4jContextSelector</span>=<span class="string">org.apache.logging.log4j.core.async.AsyncLoggerContextSelector</span></span><br></pre></td></tr></table></figure><p>添加log4j2.component.properties即可</p><ul><li>混合异步</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span>&gt;</span>D:/logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/myfile.log&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Async</span> <span class="attr">name</span>=<span class="string">&quot;Async&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Async</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AsyncLogger</span> <span class="attr">name</span>=<span class="string">&quot;com.deam.xiaobo&quot;</span> <span class="attr">level</span>=<span class="string">&quot;trace&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">includeLocation</span>=<span class="string">&quot;false&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AsyncLogger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>com.dream.xiaobo</code>异步 <code>root</code> 同步</p><h2 id="项目打日志"><a href="#项目打日志" class="headerlink" title="项目打日志"></a>项目打日志</h2><blockquote><p>基本格式</p></blockquote><p>必须使用参数化信息的方式</p><p>不要进行字符串拼接,那样会产生很多String对象，占用空间，影响性能</p><p>使用[]进行参数变量隔离，如有参数变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;Processing trade with id:[&#123;&#125;] and symbol : [&#123;&#125;] &quot;</span>, id, symbol);</span><br></pre></td></tr></table></figure><blockquote><p>ERROR，影响到程序正常运行、当前请求正常运行的异常情况</p></blockquote><p>打开配置文件失败</p><p>所有第三方对接的异常(包括第三方返回错误码)</p><p>所有影响功能使用的异常，包括:SQLException和除了业务异常之外的所有异常(RuntimeException和Exception)</p><p>不应该出现的情况，比如要使用阿里云传图片，但是未响应</p><p>如果有Throwable信息，需要记录完成的堆栈信息</p><blockquote><p>WARN，不应该出现但是不影响程序、当前请求正常运行的异常情况</p></blockquote><p>有容错机制的时候出现的错误情况</p><p>找不到配置文件，但是系统能自动创建配置文件</p><p>即将接近临界值的时候，例如：缓存池占用达到警告线，业务异常的记录，比如:用户锁定异常</p><blockquote><p>INFO，系统运行信息</p></blockquote><p>Service方法中对于系统/业务状态的变更</p><p>主要逻辑中的分步骤：1，初始化什么 2、加载什么</p><p>外部接口部分</p><p>客户端请求参数(REST/WS)</p><p>调用第三方时的调用参数和调用结果</p><p>对于复杂的业务逻辑，需要进行日志打点，以及埋点记录，比如电商系统中的下订单逻辑，以及OrderAction操作(业务状态变更)。</p><p>调用其他第三方服务时，所有的出参和入参是必须要记录的(因为你很难追溯第三方模块发生的问题)</p><blockquote><p>DEBUG，可以填写所有的想知道的相关信息(但不代表可以随便写，debug信息要有意义,最好有相关参数)</p></blockquote><p>生产环境需要关闭DEBUG信息</p><p>如果在生产情况下需要开启DEBUG,需要使用开关进行管理，不能一直开启</p><blockquote><p>TRACE，特别详细的系统运行完成信息，业务代码中，不要使用.(除非有特殊用意，否则请使用DEBUG级别替代)</p></blockquote><p>系统一般不用特别详细打印日志</p><p><strong>本篇文章 仅供自己学习整理 方便阅读 参考b站某UP主 如有侵权 通知即删</strong></p><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220324192841.2yuewnp34ok0.webp&quot; alt=&quot;微信图片_20220324192841&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="日志框架" scheme="https://codexiaobo.github.io/tags/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>日志框架 logback</title>
    <link href="https://codexiaobo.github.io/posts/575097866/"/>
    <id>https://codexiaobo.github.io/posts/575097866/</id>
    <published>2022-03-22T13:09:14.000Z</published>
    <updated>2022-03-22T13:11:33.374Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E4%B8%89%E8%9B%9B%E5%90%8C%E6%A1%86.1vlr1bgrtsww.webp" alt="三蛛同框"></p><!--sleep--><span id="more"></span><h1 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h1><h2 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h2><h3 id="SPI-机制"><a href="#SPI-机制" class="headerlink" title="SPI 机制"></a>SPI 机制</h3><p>SPI 全称 Service Provider Interface，是 Java 提供的一套用来被第三方实现或者扩展的 API，它可以用来启用框架扩展和替换组件。他是一种服务发现机制。它通过在 ClassPath 路径下的 META-INF/services 文件夹查找文件，自动加载文件里所定义的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service, ClassLoader loader)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServiceLoader&lt;&gt;(service, loader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="手动模拟-SPI-机制"><a href="#手动模拟-SPI-机制" class="headerlink" title="手动模拟 SPI 机制"></a>手动模拟 SPI 机制</h4><ul><li>Driver</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MyDriver</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDriver</span> <span class="keyword">implements</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SPI 机制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>META-INF.services.com.dream.driver.Driver</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.dream.mydriver.MyDriver</span><br></pre></td></tr></table></figure><p>然后将改项目打包 加入 Logback 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServiceLoader&lt;Driver&gt; load = ServiceLoader.load(Driver.class);</span><br><span class="line">        <span class="comment">//寻找Driver对象 找到了就调用getConneciton方法</span></span><br><span class="line">        load.forEach(Driver::getConnection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个时候就会通过 SPI 机制读取到配置文件中的类实现</p><h3 id="logback-编程式配置"><a href="#logback-编程式配置" class="headerlink" title="logback 编程式配置"></a>logback 编程式配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myconfigurator</span> <span class="keyword">extends</span> <span class="title">ContextAwareBase</span> <span class="keyword">implements</span> <span class="title">Configurator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Myconfigurator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(LoggerContext lc)</span> </span>&#123;</span><br><span class="line">        addInfo(<span class="string">&quot;Setting up default configuration.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//控制台Appender</span></span><br><span class="line">        ConsoleAppender&lt;ILoggingEvent&gt; ca = <span class="keyword">new</span> ConsoleAppender&lt;ILoggingEvent&gt;();</span><br><span class="line">        <span class="comment">//添加上下文</span></span><br><span class="line">        ca.setContext(lc);</span><br><span class="line">        <span class="comment">//名字</span></span><br><span class="line">        ca.setName(<span class="string">&quot;console&quot;</span>);</span><br><span class="line">        <span class="comment">//layout样式</span></span><br><span class="line">        LayoutWrappingEncoder&lt;ILoggingEvent&gt; encoder = <span class="keyword">new</span> LayoutWrappingEncoder&lt;ILoggingEvent&gt;();</span><br><span class="line">        <span class="comment">//添加上下文</span></span><br><span class="line">        encoder.setContext(lc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件Appender</span></span><br><span class="line">        FileAppender&lt;ILoggingEvent&gt; fileAppender = <span class="keyword">new</span> FileAppender&lt;&gt;();</span><br><span class="line">        fileAppender.setContext(lc);</span><br><span class="line">        fileAppender.setName(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        fileAppender.setFile(<span class="string">&quot;D://logs/logback.log&quot;</span>);</span><br><span class="line">        PatternLayout patternLayout = <span class="keyword">new</span> PatternLayout();</span><br><span class="line">        patternLayout.setContext(lc);</span><br><span class="line">        patternLayout.setPattern(<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>);</span><br><span class="line">        <span class="comment">//画板执行</span></span><br><span class="line">        patternLayout.start();</span><br><span class="line">        fileAppender.setEncoder(encoder);</span><br><span class="line">        <span class="comment">//文件Appender执行</span></span><br><span class="line">        fileAppender.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// same as</span></span><br><span class="line">         PatternLayout layout = <span class="keyword">new</span> PatternLayout();</span><br><span class="line">         layout.setPattern(<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>);</span><br><span class="line"><span class="comment">//        TTLLLayout layout = new TTLLLayout();</span></span><br><span class="line"></span><br><span class="line">        layout.setContext(lc);</span><br><span class="line">        layout.start();</span><br><span class="line">        encoder.setLayout(layout);</span><br><span class="line"></span><br><span class="line">        ca.setEncoder(encoder);</span><br><span class="line">        ca.start();</span><br><span class="line"></span><br><span class="line">        Logger rootLogger = lc.getLogger(Logger.ROOT_LOGGER_NAME);</span><br><span class="line">        rootLogger.addAppender(ca);</span><br><span class="line">        rootLogger.addAppender(fileAppender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(LogbackTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLogback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        LOGGER.warn(<span class="string">&quot;warn&quot;</span>);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        LOGGER.debug(<span class="string">&quot;debug&quot;</span>);</span><br><span class="line">        LOGGER.trace(<span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="三大组件"><a href="#三大组件" class="headerlink" title="三大组件"></a>三大组件</h4><blockquote><p>1、appender，输出源，一个日志可以后好几个输出源</p></blockquote><blockquote><p>2、encoder，一个 appender 有一个 encoder，负责将一个 event 事件转换成一组 byte 数组，并将转换后的字节数据输出到文件中。</p></blockquote><blockquote><p>Encoder 负责把事件转换为字节数组，并把字节数组写到合适的输出流。因此，encoder 可以控制在什么时候、把什么样的字节数组写入到其拥有者维护的输出流中。Encoder 接口有两个实现类，LayoutWrappingEncoder 与 PatternLayoutEncoder。<br>注意：在 logback 0.9.19 版之前没有 encoder。<br>在之前的版本里，多数 appender 依靠 layout 来把事件转换成字符串并用 java.io.Writer 把字符串输出。在之前的版本里，用户需要在 FileAppender 里嵌入一个 PatternLayout。</p></blockquote><blockquote><p>3、layout，格式化数据将 event 事件转化为字符串，解析的过程</p></blockquote><blockquote><p>4、filter 过滤器</p></blockquote><h4 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h4><p><code>%-5level</code> 级别</p><p><code>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</code> 日期</p><p><code>%c</code> 类的完整名称</p><p><code>%M</code>为 method</p><p><code>%L</code>为 行号</p><p><code>%thread</code> 线程名称</p><p><code>%m</code>或者<code>%msg</code>为 信息</p><p><code>%n</code> 换行</p><h3 id="logback-配置文件配置"><a href="#logback-配置文件配置" class="headerlink" title="logback 配置文件配置"></a>logback 配置文件配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用slf4j作为日志的门面,使用log4j2来记录日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jmxConfigurator</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%date [%thread] %-5level %logger&#123;25&#125; - %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.FileAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        文件log打印路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>D://logs/lobackconfig.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        模板--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%date [%thread] %-5level %logger&#123;25&#125; - %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    手动权限自定义配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.dream.xiaobo.LogbackTest&quot;</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        不继承父类配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">additive</span>&gt;</span>false<span class="tag">&lt;/<span class="name">additive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    根配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        执行哪个appender ref映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;appender-ref ref=&quot;file&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="logback日志拆分与滚动"><a href="#logback日志拆分与滚动" class="headerlink" title="logback日志拆分与滚动"></a>logback日志拆分与滚动</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = &quot;1.0&quot; encoding = &quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置集中管理属性，可以直接修改属性的value值</span></span><br><span class="line"><span class="comment">        格式 $&#123;name&#125;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志输出格式：</span></span><br><span class="line"><span class="comment">                   [%-5level]</span></span><br><span class="line"><span class="comment">                   %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; : 日期</span></span><br><span class="line"><span class="comment">                   %c : 类的完整名称</span></span><br><span class="line"><span class="comment">                   %M : 为method</span></span><br><span class="line"><span class="comment">                   %L : 为行号</span></span><br><span class="line"><span class="comment">                   %thread : 线程名称</span></span><br><span class="line"><span class="comment">                   %m 或者 %msg : 为信息</span></span><br><span class="line"><span class="comment">                   %n : 换行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第一种方式:</span></span><br><span class="line"><span class="comment">    &lt;property name=&quot;pattern&quot; value=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %c %M %L %thread %m%n&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二种方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;[ %-5level ] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %c %M %L [%thread] %m%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--格式化输出：</span></span><br><span class="line"><span class="comment">            %d表示日期，</span></span><br><span class="line"><span class="comment">            %thread表示线程名，</span></span><br><span class="line"><span class="comment">            %-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">            %msg：日志消息，</span></span><br><span class="line"><span class="comment">            %n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Appender: 设置日志信息的去向,常用的有以下几个</span></span><br><span class="line"><span class="comment">        ch.qos.logback.core.ConsoleAppender (控制台)</span></span><br><span class="line"><span class="comment">        ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)</span></span><br><span class="line"><span class="comment">        ch.qos.logback.core.FileAppender (文件)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出流对象 默认 System.out 改为 System.err--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>System.err<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志消息格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志文件保存路径  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log_dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;D://logs&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span></span><br><span class="line"><span class="comment">            &lt;loger&gt;仅有一个name属性，一个可选的level和一个可选的addtivity属性 name:用来指定受此logger约束的某一个包或者具体的某一个类。 level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF， 如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class="line"><span class="comment">            additivity: 是否向上级loger传递打印信息。默认是true。</span></span><br><span class="line"><span class="comment">            &lt;logger&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个appender将会添加到这个 logger</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        也是&lt;logger&gt;元素，但是它是根logger。默认debug level:用来设置打印级别，</span></span><br><span class="line"><span class="comment">        大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span></span><br><span class="line"><span class="comment">        &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，</span></span><br><span class="line"><span class="comment">        标识这个appender将会添加到这个 logger。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件拆分和归档的appender对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;rollFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志输出路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log_dir&#125;/roll_logback.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志格式配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定日志文件拆分和压缩规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通过指定压缩文件名称，来确定分割文件方式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log_dir&#125;/rolling.%d&#123;yyyy-MM- dd&#125;.log%i.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>3<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--文件拆分大小--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>1MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--root logger 配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">lever</span>=<span class="string">&quot;ALL&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">appender-ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;rollFile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">appender-ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="logback异步日志配置"><a href="#logback异步日志配置" class="headerlink" title="logback异步日志配置"></a>logback异步日志配置</h3><ul><li>myconfigurator</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        异步日志</span></span><br><span class="line">        AsyncAppender asyncAppender = <span class="keyword">new</span> AsyncAppender();</span><br><span class="line">        asyncAppender.addAppender(ca);</span><br><span class="line">        asyncAppender.addAppender(fileAppender);</span><br></pre></td></tr></table></figure><ul><li>xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = &quot;1.0&quot; encoding = &quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置集中管理属性，可以直接修改属性的value值</span></span><br><span class="line"><span class="comment">        格式 $&#123;name&#125;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志输出格式：</span></span><br><span class="line"><span class="comment">                   [%-5level]</span></span><br><span class="line"><span class="comment">                   %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; : 日期</span></span><br><span class="line"><span class="comment">                   %c : 类的完整名称</span></span><br><span class="line"><span class="comment">                   %M : 为method</span></span><br><span class="line"><span class="comment">                   %L : 为行号</span></span><br><span class="line"><span class="comment">                   %thread : 线程名称</span></span><br><span class="line"><span class="comment">                   %m 或者 %msg : 为信息</span></span><br><span class="line"><span class="comment">                   %n : 换行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第一种方式:</span></span><br><span class="line"><span class="comment">    &lt;property name=&quot;pattern&quot; value=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %c %M %L %thread %m%n&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二种方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;[ %-5level ] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %c %M %L [%thread] %m%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--格式化输出：</span></span><br><span class="line"><span class="comment">            %d表示日期，</span></span><br><span class="line"><span class="comment">            %thread表示线程名，</span></span><br><span class="line"><span class="comment">            %-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">            %msg：日志消息，</span></span><br><span class="line"><span class="comment">            %n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Appender: 设置日志信息的去向,常用的有以下几个</span></span><br><span class="line"><span class="comment">        ch.qos.logback.core.ConsoleAppender (控制台)</span></span><br><span class="line"><span class="comment">        ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)</span></span><br><span class="line"><span class="comment">        ch.qos.logback.core.FileAppender (文件)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出流对象 默认 System.out 改为 System.err--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>System.err<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志消息格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志文件保存路径  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log_dir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;D://logs&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span></span><br><span class="line"><span class="comment">            &lt;loger&gt;仅有一个name属性，一个可选的level和一个可选的addtivity属性 name:用来指定受此logger约束的某一个包或者具体的某一个类。 level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF， 如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class="line"><span class="comment">            additivity: 是否向上级loger传递打印信息。默认是true。</span></span><br><span class="line"><span class="comment">            &lt;logger&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个appender将会添加到这个 logger</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        也是&lt;logger&gt;元素，但是它是根logger。默认debug level:用来设置打印级别，</span></span><br><span class="line"><span class="comment">        大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span></span><br><span class="line"><span class="comment">        &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，</span></span><br><span class="line"><span class="comment">        标识这个appender将会添加到这个 logger。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件拆分和归档的appender对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;rollFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志输出路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log_dir&#125;/roll_logback.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志格式配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定日志文件拆分和压缩规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通过指定压缩文件名称，来确定分割文件方式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log_dir&#125;/rolling.%d&#123;yyyy-MM- dd&#125;.log%i.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>3<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--文件拆分大小--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>1MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    异步日志配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ASYNC&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;rollFile&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--root logger 配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">lever</span>=<span class="string">&quot;ALL&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;appender-ref ref=&quot;console&quot;&gt;&lt;/appender-ref&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;appender-ref ref=&quot;rollFile&quot;&gt;&lt;/appender-ref&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        将异步日志添加进Logger--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ASYNC&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="logback-access的使用"><a href="#logback-access的使用" class="headerlink" title="logback-access的使用"></a>logback-access的使用</h3><p>logback-access模块与Servlet容器（如Tomcat和Jetty）集成，以提供HTTP访问日志功能。我们可以使 用logback-access模块来替换tomcat的访问日志</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li>1、现将tomcat的config文件添加如下内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span>  <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span> <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log.&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span>  <span class="attr">pattern</span>=<span class="string">&quot;common&quot;</span> <span class="attr">resolveHosts</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>catalina 日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;ch.qos.logback.access.tomcat.LogbackValve&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>logback.access 日志</p><p>这两个二选一</p><p><strong>参数介绍</strong></p><table><thead><tr><th>className</th><th>想配置访问日志？这就必须得写成这样。</th></tr></thead><tbody><tr><td>directory</td><td>这个东西是日志文件放置的目录，在tomcat下面有个logs文件夹，那里面是专门放置日志文件的，当然你也可以修改，我就给改成了D:\</td></tr><tr><td>prefix</td><td>这个是日志文件的名称前缀，我的日志名称为localhost_access_log.2007-09-22.txt，前面的前缀就是这个localhost_access_log</td></tr><tr><td>suffix</td><td>这就是后缀名啦，可以改成别的</td></tr><tr><td>pattern</td><td>这个是最主要的参数了，具体的咱们下面讲，这个参数的内容比较丰富</td></tr><tr><td>resolveHosts</td><td>如果这个值是true的话，tomcat会将这个服务器IP地址通过DNS转换为主机名，如果是false，就直接写服务器IP地址啦</td></tr></tbody></table><ul><li><p>2、将logback-access.jar与logback-core.jar复制到$TOMCAT_HOME/lib/目录下</p></li><li><p>3、在config目录下创建新的配置文件 logback-access.xml</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- always a good activate OnConsoleStatusListener --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">statusListener</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.status.OnConsoleStatusListener&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_DIR&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;catalina.base&#125;/logs&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_DIR&#125;/access.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>access.%d&#123;yyyy-MM-dd&#125;.log.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 访问日志的格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>combined<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>本篇文章 仅供自己学习整理 方便阅读 参考b站某UP主 如有侵权 通知即删</strong></p><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E4%B8%89%E8%9B%9B%E5%90%8C%E6%A1%86.1vlr1bgrtsww.webp&quot; alt=&quot;三蛛同框&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="日志框架" scheme="https://codexiaobo.github.io/tags/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>日志框架 JCL slf4j</title>
    <link href="https://codexiaobo.github.io/posts/1217569774/"/>
    <id>https://codexiaobo.github.io/posts/1217569774/</id>
    <published>2022-03-21T12:13:08.000Z</published>
    <updated>2022-03-21T12:14:18.987Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%87%BA%E8%87%AA%E6%9C%AC%E5%BF%83.4mwolyvi7pk0.webp" alt="出自本心"></p><!--sleep--><span id="more"></span><h1 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h1><h2 id="日志门面"><a href="#日志门面" class="headerlink" title="日志门面"></a>日志门面</h2><p>日志门面就是为了解决这个问题而出现的一种技术，日志门面是规范，其他的实现按照规范实现各自的日志框架即可，我们基于日志门面编程即可</p><p>常见的日志门面： JCL、slf4j</p><p>常见的日志实现： JUL、log4j、logback、log4j2</p><p>日志框架出现的历史顺序：</p><p>log4j –&gt;JUL–&gt;JCL–&gt; slf4j –&gt; logback –&gt; log4j2</p><h2 id="slf4j-日志门面"><a href="#slf4j-日志门面" class="headerlink" title="slf4j 日志门面"></a>slf4j 日志门面</h2><p>简单日志门面(Simple Logging Facade For Java) SLF4J 主要是为了给 Java 日志访问提供一套标准、规范的 API 框架，其主要意义在于提供接口，具体的实现可以交由其他日志框架</p><p>SLF4J 是目前市面上最流行的日志门面</p><h3 id="slf4j-的两个功能"><a href="#slf4j-的两个功能" class="headerlink" title="slf4j 的两个功能"></a>slf4j 的两个功能</h3><ul><li><p>日志框架的绑定</p></li><li><p>日志框架的桥接</p></li></ul><h3 id="阿里日志规约"><a href="#阿里日志规约" class="headerlink" title="阿里日志规约"></a>阿里日志规约</h3><p>应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架 SLF4J 中的 API。使用门面模式的日志框架，有利于维护和各个类的日志处理方法统一。</p><p>日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。</p><p>应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：appName_logType_logName.log。logType 为日志类型，推荐分类有 stats/monitor/visit 等；</p><p>logName 为日志描述。这种命名的好处：通过文件名就可以知道日志文件属于哪个应用，哪种类型，有什么目的，这也有利于归类查找。</p><p>对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者占位符的方式。</p><p>避免重复打印日志，否则会浪费磁盘空间。务必在日志配置文件中设置 additivity=false。</p><p>异常信息应该包括两类：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字向上抛出。</p><p>谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用 warn 记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免吧服务器磁盘撑爆，并及时删除这些观察日志。</p><p>可以使用 warn 日志级别记录用户输入参数错误的情况，避免当用户投诉时无所适从</p><h3 id="slf4j-简单使用"><a href="#slf4j-简单使用" class="headerlink" title="slf4j 简单使用"></a>slf4j 简单使用</h3><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        slf4j日志门面依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        slf4j简单的日志实现依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Slf4jTest.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSlf4j</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        LOGGER.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        LOGGER.warn(<span class="string">&quot;warn&quot;</span>);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        LOGGER.debug(<span class="string">&quot;debug&quot;</span>);</span><br><span class="line">        LOGGER.trace(<span class="string">&quot;trace&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用占位符输出日志信息</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;&#123;&#125;今年&#123;&#125;岁了！&quot;</span>, <span class="string">&quot;xiaobo&quot;</span>, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Integer result = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;这是异常&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="slf4j-绑定其他日志实现"><a href="#slf4j-绑定其他日志实现" class="headerlink" title="slf4j 绑定其他日志实现"></a>slf4j 绑定其他日志实现</h3><h4 id="绑定-JUL-实现"><a href="#绑定-JUL-实现" class="headerlink" title="绑定 JUL 实现"></a>绑定 JUL 实现</h4><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        slf4j日志门面依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        slf4j绑定log4j日志实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-jdk14<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绑定-log4j-实现"><a href="#绑定-log4j-实现" class="headerlink" title="绑定 log4j 实现"></a>绑定 log4j 实现</h4><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--slf4j core 使用slf4j必須添加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        slf4j绑定log4j日志实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        log4j日志实现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="slf4-桥接其他日志框架"><a href="#slf4-桥接其他日志框架" class="headerlink" title="slf4 桥接其他日志框架"></a>slf4 桥接其他日志框架</h3><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E7%9A%84%E6%A1%A5%E6%8E%A5.4mk2vyzql8g0.webp" alt="日志框架的桥接"></p><p>您依赖的某些组件依赖于 SLF4J 以外的日志记录 API。您也可以假设这些组件在不久的将来不会切换到 SLF4J。为了解决这种情况，SLF4J 附带了几个桥接模块，这些模块将对 log4j，JCL 和 java.util.logging API 的调用重定向</p><p>还用 log4j 的 api 写代码，但是具体的实现给你抽离了，我们依赖了一个中间层，这个层其实是用旧的 api 操作 slf4j，而不是操作具体的实现</p><h4 id="桥接步骤"><a href="#桥接步骤" class="headerlink" title="桥接步骤"></a>桥接步骤</h4><ul><li><p>1、先去除之前老的日志框架的依赖，必须去掉</p></li><li><p>2、添加 SLF4J 提供的桥接组件，这个组件就是模仿之前老的日志写了一套相同的 api，只不过这个 api 是在调用 slf4j 的 api</p></li><li><p>3、为项目添加 SLF4J 的具体实现</p></li></ul><p><strong>示例</strong></p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 桥接的组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>之前名字叫 log4j 之后修改为 log4j_back</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4j_back</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log4j</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;log4j&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>slf4j</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Slf4j</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myLog</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>slf4jimpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Slf4j_JUL</span> <span class="keyword">implements</span> <span class="title">Slf4j</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;slf4j&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>log4j</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4j</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log4j</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Slf4j_JUL slf4j_jul = <span class="keyword">new</span> Slf4j_JUL();</span><br><span class="line"></span><br><span class="line">        slf4j_jul.myLog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>client</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Log4j log4j = <span class="keyword">new</span> Log4j();</span><br><span class="line">        log4j.log4j();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="slf4j-提供的桥接器"><a href="#slf4j-提供的桥接器" class="headerlink" title="slf4j 提供的桥接器"></a>slf4j 提供的桥接器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jul --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jul-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jcl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>1、jcl-over-slf4j.jar 和 slf4j-jcl.jar 不能同时部署。前一个 jar 文件将导致 JCL 将日志系统的选择委托给 SLF4J，后一个 jar 文件将导致 SLF4J 将日志系统的选择委托给 JCL，从而导致无限循环。</p></li><li><p>2、log4j-over-slf4j.jar 和 slf4j-log4j12.jar 不能同时出现</p></li><li><p>3、jul-to-slf4j.jar 和 slf4j-jdk14.jar 不能同时出现</p></li><li><p>4、所有的桥接都只对 Logger 日志记录器对象有效，如果程序中调用了内部的配置类或者是 Appender,Filter 等对象，将无法产生效果。</p></li></ul><h2 id="JCL-日志门面"><a href="#JCL-日志门面" class="headerlink" title="JCL 日志门面"></a>JCL 日志门面</h2><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%97%A5%E5%BF%97%E9%97%A8%E9%9D%A2%E4%B8%8E%E6%97%A5%E5%BF%97%E5%AE%9E%E7%8E%B0.5k6auhhwfjg0.webp" alt="日志门面与日志实现"></p><p>全称为 Jakarta Commons Logging，是 Apache 提供的一个通用日志 API</p><p>JCL 有两个基本的抽象类：Log(基本记录器)和 LogFactory(负责创建 Log 实例)</p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的<code>LoggerFactory.getLogger</code>依赖的是 log4j 的日志实现</p><h3 id="为什么要使用日志门面"><a href="#为什么要使用日志门面" class="headerlink" title="为什么要使用日志门面"></a>为什么要使用日志门面</h3><p>面向接口开发，不再依赖具体的实现类。减少代码的耦合</p><p>项目通过导入不同的日志实现类，可以灵活的切换日志框架</p><p>统一 API，方便开发者学习和使用</p><p>统一配置便于项目日志的管理</p><blockquote><p>本篇文章 仅供自己学习整理 方便阅读 参考b站某UP主 如有侵权 通知即删</p></blockquote><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%87%BA%E8%87%AA%E6%9C%AC%E5%BF%83.4mwolyvi7pk0.webp&quot; alt=&quot;出自本心&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="-java -日志框架" scheme="https://codexiaobo.github.io/tags/java-%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>日志框架 JUL</title>
    <link href="https://codexiaobo.github.io/posts/626247823/"/>
    <id>https://codexiaobo.github.io/posts/626247823/</id>
    <published>2022-03-16T11:48:03.000Z</published>
    <updated>2022-03-16T11:49:41.445Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220316194438.603k442et1o0.webp" alt="微信图片_20220316194438"></p><!--sleep--><span id="more"></span><h1 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h1><p>日志文件是用于记录系统操作事件的文件集合，可分为事件日志和消息日志。具有处理历史数据、诊断问题的追踪以及理解系统的活动等重要作用</p><p>在计算机中，日志文件是记录在操作系统或其他软件运行中发生的事件或在通信软件的不同用户之间的消息的文件。记录是保持日志的行为。在最简单的情况下，消息被写入单个日志文件</p><p><strong>日志的作用</strong></p><ul><li>调试</li></ul><p>在Java项目调试时，查看栈信息可以方便地知道当前程序的运行状态，输出的日志便于记录程序在之前的运行结果。如果你大量使用System.out或者System.err，这是一种最方便最有效的方法，但显得不够专业</p><ul><li>错误定位</li></ul><p>不要以为项目能正确跑起来就可以高枕无忧，项目在运行一段时候后，可能由于数据问题，网络问题，内存问题等出现异常。这时日志可以帮助开发或者运维人员快速定位错误位置，提出解决方案</p><ul><li>数据分析</li></ul><p>大数据的兴起，使得大量的日志分析成为可能，ELK也让日志分析门槛降低了很多。日志中蕴含了大量的用户数据，包括点击行为，兴趣偏好等，用户画像对于公司下一步的战略方向有一定指引作用</p><p><strong>最常见的普通日志</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.err.println();</span><br></pre></td></tr></table></figure><h3 id="主流的日志框架"><a href="#主流的日志框架" class="headerlink" title="主流的日志框架"></a>主流的日志框架</h3><p>日志实现（具体干活的）：JUL（java util logging）、logback、log4j、log4j2</p><p>日志门面（指定规则的）：JCL（Jakarta Commons Logging）、slf4j（ Simple Logging Facade for Java）</p><h2 id="JUL-日志框架"><a href="#JUL-日志框架" class="headerlink" title="JUL 日志框架"></a>JUL 日志框架</h2><p>JUL全称Java util Logging是java原生的日志框架，使用时不需要另外引用第三方类库，相对其他日志框 架使用方便，学习简单，能够在小型应用中灵活使用</p><p><code>Loggers</code> 被称为记录器，应用程序通过获取Logger对象，调用其API来发布日志信息。Logger 通常时应用程序访问日志系统的入口程序</p><p><code>Appenders</code> 也被称为Handlers，每个Logger都会关联一组Handlers，Logger会将日志交给关联 Handlers处理，由Handlers负责将日志做记录。Handlers在此是一个抽象，其具体的实现决定了 日志记录的位置可以是控制台、文件、网络上的其他日志服务或操作系统日志等</p><p><code>Layouts</code> 也被称为Formatters，它负责对日志事件中的数据进行转换和格式化。Layouts决定了 数据在一条日志记录中的最终形式</p><p><code>Level</code> 每条日志消息都有一个关联的日志级别。该级别粗略指导了日志消息的重要性和紧迫，我 可以将Level和Loggers，Appenders做关联以便于我们过滤消息</p><p><code>Filters</code> 过滤器，根据需要定制哪些信息会被记录，哪些信息会被放过</p><p><strong>总结</strong></p><p>用户使用Logger来进行日志记录，Logger持有若干个Handler，日志的输出操作是由Handler完成的。 在Handler在输出日志前，会经过Filter的过滤，判断哪些日志级别过滤放行哪些拦截，Handler会将日志内容输出到指定位置（日志文件、控制台等）。Handler在输出日志时会使用Layout，将输出内容进行排版</p><h3 id="日志的级别"><a href="#日志的级别" class="headerlink" title="日志的级别"></a>日志的级别</h3><p>jul中定义的日志级别，从上述例子中我们也看到使用info和warning打印出的日志有不同的前缀，通过给日志设置不同的级别可以清晰的从日志中区分出哪些是基本信息，哪些是调试信息，哪些是严重的异常</p><ul><li>java.util.logging.Level中定义了日志的级别</li></ul><p><code>server</code> 最高值</p><p><code>warning</code> </p><p><code>info</code> 默认级别</p><p><code>config</code></p><p><code>fine</code></p><p><code>finer</code></p><p><code>finest</code> 最低值</p><p><code>OFF</code> 可用来关闭日志记录</p><p><code>ALL</code> 启用所有消息的日志记录</p><h3 id="Logger之间的父子关系"><a href="#Logger之间的父子关系" class="headerlink" title="Logger之间的父子关系"></a>Logger之间的父子关系</h3><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/JUL%E7%9A%84Logger%E7%9A%84%E7%88%B6%E5%AD%90%E5%85%B3%E7%B3%BB.4j2xkheea9a0.webp" alt="JUL的Logger的父子关系"></p><p>JUL中Logger之间存在父子关系，这种父子关系通过树状结构存储，JUL在初始化时会创建一个顶层 RootLogger作为所有Logger父Logger，存储上作为树状结构的根节点。并父子关系通过名称来关联。默认子Logger会继承父Logger的属性</p><h3 id="常用的转换符"><a href="#常用的转换符" class="headerlink" title="常用的转换符"></a>常用的转换符</h3><table><thead><tr><th>转换符</th><th>详细说明</th></tr></thead><tbody><tr><td><strong>%s</strong></td><td><strong>字符串类型</strong></td></tr><tr><td>%c</td><td>字符类型</td></tr><tr><td>%b</td><td>布尔类型</td></tr><tr><td><strong>%d（十进制）</strong></td><td><strong>整数类型</strong></td></tr><tr><td>%x（十六进制）</td><td>整数类型（十六进制）</td></tr><tr><td>%o</td><td>整数类型（八进制）</td></tr><tr><td><strong>%f</strong></td><td><strong>浮点类型</strong></td></tr><tr><td>%a</td><td>十六进制浮点类型</td></tr><tr><td>%e</td><td>指数类型</td></tr><tr><td>%n</td><td>换行符</td></tr><tr><td>%tx</td><td>日期与时间类型（x代表不同的日期与时间转换符)</td></tr></tbody></table><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><table><thead><tr><th>标志</th><th>说明</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>为正数或者负数添加符号，因为一般整数不会主动加符号</td><td>(“%+d”,15)</td><td>+15</td></tr><tr><td>0</td><td>数字前面补0，用于对齐</td><td>(“%04d”, 99)</td><td>0099</td></tr><tr><td>空格</td><td>在整数之前添加指定数量的空格</td><td>(“%4d”, 99)</td><td>99</td></tr><tr><td>,</td><td>以“,”对数字分组(常用显示金额)</td><td>(“%,f”, 9999.99)</td><td>9,999.990000</td></tr><tr><td>(</td><td>使用括号包含负数</td><td>(“%(f”, -99.99)</td><td>(99.990000)</td></tr></tbody></table><h3 id="日期处理"><a href="#日期处理" class="headerlink" title="日期处理"></a>日期处理</h3><table><thead><tr><th>标志</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>c</td><td>包括全部日期和时间信息</td><td>周四 10月 21 14:52:10 GMT+08:00 2021</td></tr><tr><td>F</td><td>年-月-日”格式</td><td>2021-10-21</td></tr><tr><td>D</td><td>月/日/年”格式</td><td>10/21/21</td></tr><tr><td>r</td><td>HH:MM:SS PM”格式（12时制）</td><td>02:53:20 下午</td></tr><tr><td>T</td><td>HH:MM:SS”格式（24时制）</td><td>14:53:39</td></tr><tr><td>R</td><td>HH:MM”格式（24时制）</td><td>14:53</td></tr><tr><td>b</td><td>月份本地化</td><td>0月</td></tr><tr><td>y</td><td>两位的年</td><td>21</td></tr><tr><td>Y</td><td>四位的年</td><td>2021</td></tr><tr><td>m</td><td>月</td><td>10</td></tr><tr><td>d</td><td>日</td><td>21</td></tr><tr><td>H</td><td>24小时制的时</td><td>14</td></tr><tr><td>I</td><td>12小时制的时</td><td>2</td></tr><tr><td>M</td><td>分</td><td>57</td></tr><tr><td>S</td><td>秒</td><td>46</td></tr><tr><td>s</td><td>秒为单位的时间戳</td><td>1634799527</td></tr><tr><td>p</td><td>上午还是下午</td><td>下午</td></tr></tbody></table><h3 id="JUL配置"><a href="#JUL配置" class="headerlink" title="JUL配置"></a>JUL配置</h3><ul><li>JULTest</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JULTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//类加载时读取配置文件</span></span><br><span class="line">        LogManager logManager = LogManager.getLogManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//寻找配置文件</span></span><br><span class="line">        InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="string">&quot;logger.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            将配置文件流添加至logManager中</span></span><br><span class="line">            logManager.readConfiguration(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(JULTest.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJuc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭默认配置</span></span><br><span class="line">        LOGGER.setUseParentHandlers(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动添加自己的Handler   ConsoleHandler控制台处理器</span></span><br><span class="line">        ConsoleHandler consoleHandler = <span class="keyword">new</span> ConsoleHandler();</span><br><span class="line">        consoleHandler.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        <span class="comment">//将Handler的级别设置为全部显示</span></span><br><span class="line">        consoleHandler.setLevel(Level.ALL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动添加自己的Handler   FileHandler 文件处理器</span></span><br><span class="line">        FileHandler fileHandler = <span class="keyword">new</span> FileHandler(<span class="string">&quot;D:/logs/JULTest.log&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        fileHandler.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        fileHandler.setLevel(Level.ALL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将配置的Handler添加至LOGGER</span></span><br><span class="line">        LOGGER.addHandler(consoleHandler);</span><br><span class="line"></span><br><span class="line">        LOGGER.addHandler(fileHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置日志显示级别</span></span><br><span class="line">        LOGGER.setLevel(Level.ALL);</span><br><span class="line"></span><br><span class="line">        LOGGER.severe(<span class="string">&quot;server: 严重&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.warning(<span class="string">&quot;warning: 警告&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;info: 信息&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.fine(<span class="string">&quot;fine: JUL无显示 因为Leve 低于 info JDK默认级别配置的是info及info以上&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.finer(<span class="string">&quot;finer: JUL无显示 因为Leve 低于 info JDK默认级别配置的是info及info以上&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.finest(<span class="string">&quot;finest: JUL无显示 因为Leve 低于 info JDK默认级别配置的是info及info以上&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParent</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//任何一个Logger都是单例的 名字相同的只有一个</span></span><br><span class="line">        Logger logger = Logger.getLogger(JULTest.class.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(LOGGER.getName());</span></span><br><span class="line"><span class="comment">//        System.out.println(LOGGER == logger);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////        Logger parent = logger.getParent();</span></span><br><span class="line"><span class="comment">////</span></span><br><span class="line"><span class="comment">////        System.out.println(parent);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Logger对象</span></span><br><span class="line">        Logger logger1 = Logger.getLogger(<span class="string">&quot;com.dream&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭继承的配置</span></span><br><span class="line">        logger1.setUseParentHandlers(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//控制台配置</span></span><br><span class="line">        ConsoleHandler consoleHandler = <span class="keyword">new</span> ConsoleHandler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置格式</span></span><br><span class="line">        consoleHandler.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给控制台设置级别</span></span><br><span class="line">        consoleHandler.setLevel(Level.ALL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">///将处理器添加至logger对象</span></span><br><span class="line">        logger1.addHandler(consoleHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给logger对象设置级别</span></span><br><span class="line">        logger1.setLevel(Level.ALL);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;info&quot;</span>);</span><br><span class="line"></span><br><span class="line">        logger.fine(<span class="string">&quot;fine&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        parent = logger.getParent();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(parent);</span></span><br><span class="line"><span class="comment">//        System.out.println(logger1.getParent());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readConfig</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Logger logger = Logger.getLogger(JULTest.class.getName());</span><br><span class="line"></span><br><span class="line">        logger.warning(<span class="string">&quot;warning&quot;</span>);</span><br><span class="line">        logger.finer(<span class="string">&quot;finer&quot;</span>);</span><br><span class="line">        logger.fine(<span class="string">&quot;fine&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Integer result = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.throwing(JULTest.class.getName(),<span class="string">&quot;readConfig&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Logger.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根配置</span></span><br><span class="line"><span class="attr">handlers</span>= <span class="string">java.util.logging.ConsoleHandler</span></span><br><span class="line"><span class="meta">.level</span>= <span class="string">FINE</span></span><br><span class="line"><span class="comment"># 自定义配置</span></span><br><span class="line"><span class="meta">com.dream.xiaobo.handlers</span> = <span class="string">java.util.logging.ConsoleHandler,java.util.logging.FileHandler</span></span><br><span class="line"><span class="meta">com.dream.xiaobo.level</span> = <span class="string">FINER</span></span><br><span class="line"><span class="comment"># 不继承根的配置</span></span><br><span class="line"><span class="meta">com.dream.xiaobo.useParentHandlers</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件日志配置</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.pattern</span> = <span class="string">D:/logs/java%u.log</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.limit</span> = <span class="string">50000</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.count</span> = <span class="string">1</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.maxLocks</span> = <span class="string">100</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.formatter</span> = <span class="string">java.util.logging.SimpleFormatter</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.level</span> = <span class="string">FINER</span></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.level</span> = <span class="string">FINER</span></span><br><span class="line"></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.formatter</span> = <span class="string">java.util.logging.SimpleFormatter</span></span><br></pre></td></tr></table></figure><h2 id="Log4j-日志框架"><a href="#Log4j-日志框架" class="headerlink" title="Log4j 日志框架"></a>Log4j 日志框架</h2><p>Log4j是Apache下的一款开源的日志框架</p><h3 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h3><ul><li>pom</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.13&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(Log4jTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog4j</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化默认配置</span></span><br><span class="line">        BasicConfigurator.configure();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 日志记录输出</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;hello log4j&quot;</span>);</span><br><span class="line">        <span class="comment">// 日志级别</span></span><br><span class="line">        LOGGER.fatal(<span class="string">&quot;fatal&quot;</span>); <span class="comment">// 严重错误，一般会造成系统崩溃和终止运行</span></span><br><span class="line">        LOGGER.error(<span class="string">&quot;error&quot;</span>); <span class="comment">// 错误信息，但不会影响系统运行</span></span><br><span class="line">        LOGGER.warn(<span class="string">&quot;warn&quot;</span>); <span class="comment">// 警告信息，可能会发生问题</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;info&quot;</span>); <span class="comment">// 程序运行信息，数据库的连接、网络、IO操作等</span></span><br><span class="line">        LOGGER.debug(<span class="string">&quot;debug&quot;</span>); <span class="comment">// 调试信息，一般在开发阶段使用，记录程序的变量、参数等</span></span><br><span class="line">        LOGGER.trace(<span class="string">&quot;trace&quot;</span>); <span class="comment">// 追踪信息，记录程序的所有流程信息</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>fatal</code> 指出每个严重的错误事件将会导致应用程序的退出。</p><p><code>error</code> 指出虽然发生错误事件，但仍然不影响系统的继续运行。</p><p><code>warn</code> 表明会出现潜在的错误情形。</p><p><code>info</code> 一般和在粗粒度级别上，强调应用程序的运行全程。</p><p><code>debug</code> 一般用于细粒度级别上，对调试应用程序非常有帮助。</p><p><code>trace</code> 是程序追踪，可以用于输出程序运行中的变量，显示执行的流程。</p><p>两个特殊的级别：OFF，可用来关闭日志记录。 ALL，启用所有消息的日志记录</p><p>一般情况下，我们只使用4个级别，优先级从高到低为 ERROR &gt; WARN &gt; INFO &gt; DEBUG</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>Log4J 主要由 Loggers (日志记录器)、Appenders（输出端）和 Layout（日志格式化器）组成。其中 Loggers 控制日志的输出级别与日志是否输出；Appenders 指定日志的输出方式（输出到控制台、文件 等）；Layout 控制日志信息的输出格式</p><p> Log4J 主要由 Loggers (日志记录器)、Appenders（输出端）和 Layout（日志格式化器）组成。其中 Loggers 控制日志的输出级别与日志是否输出；Appenders 指定日志的输出方式（输出到控制台、文件 等）；Layout 控制日志信息的输出格式</p><h4 id="Loggers"><a href="#Loggers" class="headerlink" title="Loggers"></a>Loggers</h4><p>日志记录器：负责收集处理日志记录，Logger的名字大小写敏感，其命名有继承机制：例如：name为com.dream.xiaobo.Log4j的logger会继承 name为com.dream.xiaobo的logger，和JUL一致。</p><p>Log4J中有一个特殊的logger叫做“root”，他是所有logger的根，也就意味着其他所有的logger都会直接 或者间接地继承自root。root logger可以用Logger.getRootLogger()方法获取。 JUL也有一个名为.的根</p><h3 id="Appenders"><a href="#Appenders" class="headerlink" title="Appenders"></a>Appenders</h3><p>Appender和JUL的Handler很像，用来指定日志输出到哪个地方，可以同时指定日志的输出目的地。Log4j 常用的输出目的地 有以下几种：</p><table><thead><tr><th>输出端类型</th><th>作用</th></tr></thead><tbody><tr><td>ConsoleAppender</td><td>将日志输出到控制台</td></tr><tr><td>FileAppender</td><td>将日志输出到文件中</td></tr><tr><td>DailyRollingFileAppender</td><td>将日志输出到一个日志文件，并且每天输出到一个新的文件</td></tr><tr><td>RollingFileAppender</td><td>将日志输出到一个日志文件，并且每天输出到一个新的文件</td></tr><tr><td>RollingFileAppender</td><td>把日志信息保存到数据库中</td></tr></tbody></table><h4 id="log4j占位符"><a href="#log4j占位符" class="headerlink" title="log4j占位符"></a>log4j占位符</h4><p>%m 输出代码中指定的日志信息</p><p>%p 输出日志级别，及 DEBUG、INFO 等</p><p>%n 换行符（Windows平台的换行符为 “\n”，Unix 平台为 “\n”）</p><p>%r 输出自应用启动到输出该 log 信息耗费的毫秒数</p><p>%c 输出打印语句所属的类的全名</p><p>%t 输出产生该日志的线程全名</p><p>%d 输出服务器当前时间，默认为 ISO8601，也可以指定格式，如：%d{yyyy年MM月dd日HH:mm:ss}</p><p>%l 输出日志时间发生的位置，包括类名、线程、及在代码中的行数。如：Test.main(Test.java:10)</p><p>%F 输出日志消息产生时所在的文件名称</p><p>%L 输出代码中的行号</p><blockquote><p>%% 输出一个 “%” 字符 可以在 % 与字符之间加上修饰符来控制最小宽度、最大宽度和文本的对其方式。如：</p></blockquote><p>%5c 输出category名称，最小宽度是5，category&lt;5，默认的情况下右对齐</p><p>%-5c 输出category名称，最小宽度是5，category&lt;5，”-“号指定左对齐,会有空格</p><p>%.5c 输出category名称，最大宽度是5，category&gt;5，就会将左边多出的字符截掉，&lt;5不会有空格</p><p>%20.30c category名称&lt;20补空格，并且右对齐，&gt;30字符，就从左边交远销出的字符截掉</p><p><strong>例</strong></p><p>%-d{yyyy-MM-dd HH:mm:ss} [%t:%r] -[%p] %m%n</p><p>打印：日期 [线程:毫秒数] - [日志级别] - 日志信息 换行</p><h3 id="log4j代码整理"><a href="#log4j代码整理" class="headerlink" title="log4j代码整理"></a>log4j代码整理</h3><ul><li>log4jTest</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4jTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(Log4jTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog4j</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化默认配置</span></span><br><span class="line"><span class="comment">//        BasicConfigurator.configure();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加源码自带配置</span></span><br><span class="line"><span class="comment">//        LOGGER.addAppender(new ConsoleAppender(new PatternLayout(&quot;%r [%t] %p %c %x - %m%n&quot;)));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //模拟源码手动添加配置</span></span><br><span class="line"><span class="comment">//        Logger rootLogger = Logger.getRootLogger();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //构建ConsoleAppender</span></span><br><span class="line"><span class="comment">//        ConsoleAppender consoleAppender = new ConsoleAppender();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //ConsoleAppender 需要一个输出流 System.out输出字节流 PrintWriter输出字符流</span></span><br><span class="line"><span class="comment">//        consoleAppender.setWriter(new PrintWriter(System.out));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //需要一个layout</span></span><br><span class="line"><span class="comment">//        Layout layout = new PatternLayout(&quot;%-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t:%r] -[%p] %m%n&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //将layout组件添加至consoleAppender</span></span><br><span class="line"><span class="comment">//        consoleAppender.setLayout(layout);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //将consoleAppender组件添加至rootLogger</span></span><br><span class="line"><span class="comment">//        rootLogger.addAppender(consoleAppender);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        JDBCAppender jdbcAppender = new JDBCAppender();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        jdbcAppender.setDriver(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="comment">//        jdbcAppender.setURL(&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&quot;);</span></span><br><span class="line"><span class="comment">//        jdbcAppender.setUser(&quot;root&quot;);</span></span><br><span class="line"><span class="comment">//        jdbcAppender.setPassword(&quot;xiaobo&quot;);</span></span><br><span class="line"><span class="comment">//        jdbcAppender.setSql(&quot;INSERT INTO log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message) values(&#x27;xiaobo&#x27;,&#x27;%d&#123;yyyy-MM-ddHH:mm:ss&#125;&#x27;,&#x27;%p&#x27;,&#x27;%c&#x27;,&#x27;%F&#x27;,&#x27;%t&#x27;,&#x27;%L&#x27;,&#x27;%l&#x27;,&#x27;%m&#x27;)&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        rootLogger.addAppender(jdbcAppender);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 日志记录输出</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;hello log4j&quot;</span>);</span><br><span class="line">        <span class="comment">// 日志级别</span></span><br><span class="line">        LOGGER.fatal(<span class="string">&quot;fatal&quot;</span>); <span class="comment">// 严重错误，一般会造成系统崩溃和终止运行</span></span><br><span class="line">        LOGGER.error(<span class="string">&quot;error&quot;</span>); <span class="comment">// 错误信息，但不会影响系统运行</span></span><br><span class="line">        LOGGER.warn(<span class="string">&quot;warn&quot;</span>); <span class="comment">// 警告信息，可能会发生问题</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;info&quot;</span>); <span class="comment">// 程序运行信息，数据库的连接、网络、IO操作等</span></span><br><span class="line">        LOGGER.debug(<span class="string">&quot;debug&quot;</span>); <span class="comment">// 调试信息，一般在开发阶段使用，记录程序的变量、参数等</span></span><br><span class="line">        LOGGER.trace(<span class="string">&quot;trace&quot;</span>); <span class="comment">// 追踪信息，记录程序的所有流程信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;hello log4j&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log4jConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 日志记录输出</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;hello log4j&quot;</span>);</span><br><span class="line">        <span class="comment">// 日志级别</span></span><br><span class="line">        LOGGER.fatal(<span class="string">&quot;fatal&quot;</span>); <span class="comment">// 严重错误，一般会造成系统崩溃和终止运行</span></span><br><span class="line">        LOGGER.error(<span class="string">&quot;error&quot;</span>); <span class="comment">// 错误信息，但不会影响系统运行</span></span><br><span class="line">        LOGGER.warn(<span class="string">&quot;warn&quot;</span>); <span class="comment">// 警告信息，可能会发生问题</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;info&quot;</span>); <span class="comment">// 程序运行信息，数据库的连接、网络、IO操作等</span></span><br><span class="line">        LOGGER.debug(<span class="string">&quot;debug&quot;</span>); <span class="comment">// 调试信息，一般在开发阶段使用，记录程序的变量、参数等</span></span><br><span class="line">        LOGGER.trace(<span class="string">&quot;trace&quot;</span>); <span class="comment">// 追踪信息，记录程序的所有流程信息</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>log4j.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set root logger level to DEBUG and its only appender to A1.</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">ALL, A1, DailyRolling</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 控制台 Appender</span></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 自定义配置</span></span><br><span class="line"><span class="meta">log4j.logger.com.dream.xiaobo</span> =<span class="string">DEBUG, A1, DailyRolling</span></span><br><span class="line"><span class="comment"># 关闭继承根结点的配置</span></span><br><span class="line"><span class="meta">log4j.additivity.com.dream.xiaobo</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># PatternLayout  布局</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">%-4r [%t] %-5p %c %x - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 文件 Appender</span></span><br><span class="line"><span class="meta">log4j.appender.FILE</span> = <span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.FILE.File</span> = <span class="string">D:/logs/log4j.log</span></span><br><span class="line"><span class="meta">log4j.appender.FILE.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.FILE.append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.FILE.layout.ConversionPattern</span>=<span class="string">%-4r [%t] %-5p %c %x - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># JDBC Appender</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC</span> = <span class="string">org.apache.log4j.jdbc.JDBCAppender</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.Driver</span> = <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.URL</span> = <span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.User</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.Password</span> = <span class="string">xiaobo</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.Sql</span> = <span class="string">INSERT INTO log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message) values(&#x27;xiaobo&#x27;,&#x27;%d&#123;yyyy-MM-ddHH:mm:ss&#125;&#x27;,&#x27;%p&#x27;,&#x27;%c&#x27;,&#x27;%F&#x27;,&#x27;%t&#x27;,&#x27;%L&#x27;,&#x27;%l&#x27;,&#x27;%m&#x27;)</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.JDBC.layout.ConversionPattern</span>=<span class="string">%-4r [%t] %-5p %c %x - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 滚动生成文件日志 Appender RollingFileAppender 通过文件大小来控制的</span></span><br><span class="line"><span class="meta">log4j.appender.RollingFile</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.RollingFile.File</span> = <span class="string">D:/logs/log4j.log</span></span><br><span class="line"><span class="meta">log4j.appender.RollingFile.append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.RollingFile.maximumFileSize</span> = <span class="string">1</span></span><br><span class="line"><span class="meta">log4j.appender.RollingFile.maxBackupIndex</span> = <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.RollingFile.layout</span> =<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.RollingFile.layout.ConversionPattern</span>=<span class="string">%-4r [%t] %-5p %c %x - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 滚动生成文件日志 Appender DailyRollingFileAppender 通过日期来控制的</span></span><br><span class="line"><span class="meta">log4j.appender.DailyRolling</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.DailyRolling.File</span> = <span class="string">D:/logs/log4j.log</span></span><br><span class="line"><span class="meta">log4j.appender.DailyRolling.append</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.DailyRolling.layout</span> =<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.DailyRolling.layout.ConversionPattern</span>=<span class="string">%-4r [%t] %-5p %c %x - %m%n</span></span><br></pre></td></tr></table></figure><p><strong>本篇文章 仅供自己学习整理 方便阅读 参考b站某UP主 如有侵权 通知即删</strong></p><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220316194438.603k442et1o0.webp&quot; alt=&quot;微信图片_20220316194438&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="日志框架" scheme="https://codexiaobo.github.io/tags/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>大话数据结构 树</title>
    <link href="https://codexiaobo.github.io/posts/1720144195/"/>
    <id>https://codexiaobo.github.io/posts/1720144195/</id>
    <published>2022-03-10T16:38:33.000Z</published>
    <updated>2022-03-21T09:45:21.359Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220310235141.2oe31pjh01m0.webp" alt="微信图片_20220310235141"></p><!--sleep--><span id="more"></span><h1 id="《大话数据结构》-阅读整理"><a href="#《大话数据结构》-阅读整理" class="headerlink" title="《大话数据结构》 阅读整理"></a>《大话数据结构》 阅读整理</h1><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><p>n(n&gt;=0)个结点的有限集</p><p>有且仅有一个特定的称为根的结点</p><p>当n &gt; 1时 其余结点可分为m(m&gt;0)个互不相交的有限集T1,T2,T3…Tm<br>其中每一个集合本身又是一棵树 并且称为根的子树</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>n&gt;0时根结点是唯一的 不可能存在多个根结点</p><p>m&gt;0时 子树的个数没有限制 但一定是互不相交的</p><h4 id="结点的分类"><a href="#结点的分类" class="headerlink" title="结点的分类"></a>结点的分类</h4><ul><li>结点的度</li></ul><p>结点拥有的子树数</p><ul><li>叶结点/终端结点</li></ul><p>度为0的结点</p><ul><li>分支结点/非终端结点/内部结点(除根结点外)</li></ul><p>度不为0的结点</p><ul><li>树的度</li></ul><p>树内各结点的度的最大值</p><h4 id="结点的关系"><a href="#结点的关系" class="headerlink" title="结点的关系"></a>结点的关系</h4><ul><li>结点的孩子/孩子的双亲</li></ul><p>结点的子树的根</p><ul><li>兄弟结点</li></ul><p>同一双亲的孩子之间</p><ul><li>结点的祖先</li></ul><p>从根到该结点所经分支上的所有结点</p><ul><li>结点的子孙</li></ul><p>以某一结点为根的子树中的任一结点</p><ul><li>结点的层次</li></ul><p>从根开始定义起 根为第一层 根的孩子为第二层</p><ul><li>堂兄弟</li></ul><p>双亲在同一层的结点</p><ul><li>树的深度/高度</li></ul><p>树中结点的最大层次</p><ul><li>有序树</li></ul><p>将树中结点的各子树看成从左至右是有次序的 不能互换的</p><ul><li>无序树</li></ul><p>将树中结点的各子树看成从左至右是有次序的 能互换的</p><ul><li>森林</li></ul><p>m(m&gt;=0)棵树互不相交的树的集合</p><p>对树中每个结点而言 子树的集合</p><h4 id="线性结构与树结构的对比"><a href="#线性结构与树结构的对比" class="headerlink" title="线性结构与树结构的对比"></a>线性结构与树结构的对比</h4><blockquote><p>线性结构</p></blockquote><ul><li>第一个数据元素</li></ul><p>无前驱</p><ul><li>最后一个数据元素</li></ul><p>无后继</p><ul><li>中间元素</li></ul><p>一个前驱一个后继</p><blockquote><p>树结构</p></blockquote><ul><li><p>根结点<br>无双亲 唯一</p></li><li><p>叶结点</p></li></ul><p>无孩子 可以多个</p><ul><li>中间结点</li></ul><p>一个双亲 多个孩子</p><h3 id="数的存储结构"><a href="#数的存储结构" class="headerlink" title="数的存储结构"></a>数的存储结构</h3><h4 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h4><p>每个结点中 附设一个指示器指示其双亲结点在数组中的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树结构数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> TElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双亲表示法 </span></span><br><span class="line"><span class="comment">//结点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PTNode</span> &#123;</span></span><br><span class="line"><span class="comment">//结点数据</span></span><br><span class="line">TElemType data;</span><br><span class="line"><span class="comment">//双亲位置</span></span><br><span class="line"><span class="keyword">int</span> parent;</span><br><span class="line">&#125;PTNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//树结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="comment">//结点数组</span></span><br><span class="line">PTNode nodes[MAX_TREE_SIZE];</span><br><span class="line"><span class="comment">//根的位置和结点数</span></span><br><span class="line"><span class="keyword">int</span> r, n;</span><br><span class="line">&#125;PTree;</span><br></pre></td></tr></table></figure><h4 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a>孩子表示法</h4><p>把每个孩子结点排列起来 以单链表做存储结构 则n个结点有n个孩子链表 如果是叶子结点则此链表为空 然后n个头指针又组成一个线性表 采用顺序存储结构 存放进一个一维数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//孩子结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//孩子结点数据</span></span><br><span class="line"><span class="keyword">int</span> child;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span>* <span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;*ChildPtr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表头结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表头数据域</span></span><br><span class="line">TElemType data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//孩子指针域</span></span><br><span class="line">ChildPtr firstchild;</span><br><span class="line"></span><br><span class="line">&#125;CTBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结点数组</span></span><br><span class="line">CTBox nodes[MAX_TREE_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">//根的位置和结点数</span></span><br><span class="line"><span class="keyword">int</span> r, n;</span><br><span class="line"></span><br><span class="line">&#125;CTree;</span><br></pre></td></tr></table></figure><ul><li>多重链表表示法</li></ul><p>每个结点有多个指针域 其中每个指针指向一课子树的根结点</p><h4 id="孩子兄弟表示法"><a href="#孩子兄弟表示法" class="headerlink" title="孩子兄弟表示法"></a>孩子兄弟表示法</h4><p>任意一棵树 他的结点的第一个孩子如果存在就是唯一的 他的右兄弟如果存在也是唯一的 因此设置两个指针 分别指向该结点的第一个孩子和此结点的右兄弟</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//孩子兄弟表示法</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据域</span></span><br><span class="line">TElemType data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//孩子结点指针域 和 兄弟结点指针域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span>* <span class="title">firstchild</span>, * <span class="title">rightsib</span>;</span></span><br><span class="line">&#125;CSNode, *CSTree;</span><br></pre></td></tr></table></figure><h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><p>n(n&gt;=0)个结点的有限集合 该集合或者为空集(称为空二叉树) 或者由一个根结点和两课互不相交的 分别称为根结点的左子树和右子树的二叉树组成</p><h4 id="二叉树的特点"><a href="#二叉树的特点" class="headerlink" title="二叉树的特点"></a>二叉树的特点</h4><p>每个结点最多有两棵子树 所以二叉树中不存在度大于2的结点</p><p>左子树和右子树是有顺序的 次序不能任意颠倒</p><p>即使树中某结点只有一棵子树 也要区分它是左子树还是右子树</p><h4 id="二叉树的五种基本形态"><a href="#二叉树的五种基本形态" class="headerlink" title="二叉树的五种基本形态"></a>二叉树的五种基本形态</h4><p>空二叉树</p><p>只有一个根结点</p><p>根结点只有左子树</p><p>根结点只有右子树</p><p>根结点即有左子树又有右子树</p><h4 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h4><blockquote><p>斜树</p></blockquote><ul><li>左斜树</li></ul><p>所有结点都只有左子树的二叉树</p><ul><li>右斜树</li></ul><p>所有结点都只有右子树的二叉树</p><blockquote><p>满二叉树</p></blockquote><p>有一棵二叉树 如果所有分支结点都存在左子树和右子树 并且所有叶子都在同一层上</p><ul><li>满二叉树的特点</li></ul><p>叶子只能出现在最下一层</p><p>非叶子结点的度一定是2</p><p>在同样深度的二叉树中 满二叉树的结点个数最多 叶子树最多</p><blockquote><p>完全二叉树</p></blockquote><p>对一棵具有n个结点的二叉树按层序编号 如果编号为i(1 &lt;= i &lt;= n) 的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同</p><ul><li>二叉树的特点</li></ul><p>叶子结点只能出现在最下两层</p><p>最下层的叶子一定集中在左部连续位置</p><p>倒数第二层 若有叶子结点 一定都在右部连续位置</p><p>如果节点度为1 则该结点只有左孩子 既不存在只有右子树的情况</p><p>同样结点数的二叉树 完全二叉树深度最小</p><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ul><li>性质1</li></ul><p>在二叉树的第i层至多有 2 ^ (i - 1)个结点(i &gt;= 1)</p><ul><li>性质2</li></ul><p>深度为k的二叉树至多有2^k - 1个结点(k &gt;= 1)</p><ul><li>性质3</li></ul><p>对任何一棵二叉树T 如果其终端结点数为N0 度为2的结点数为N2 则N0 = N2 + 1</p><ul><li>性质4</li></ul><p>具有n个结点的完全二叉树的深度为(log2 n)  + 1</p><ul><li>性质5</li></ul><p>如果一棵树有n个结点的完全二叉树的结点按层序编号 对任一结点j(1 &lt;= i &lt;= n)</p><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><h4 id="二叉树的顺序存储结构"><a href="#二叉树的顺序存储结构" class="headerlink" title="二叉树的顺序存储结构"></a>二叉树的顺序存储结构</h4><p>就是将树的结点按照根结点层次的向下 然后层次按照从左至右依次存入到数组当中</p><h4 id="二叉链表"><a href="#二叉链表" class="headerlink" title="二叉链表"></a>二叉链表</h4><p>每个结点最多有两个孩子 所以设计一个数据域和两个指针域</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> TElemType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//树的链式存储</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结点数据</span></span><br><span class="line">TElemType data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左孩子 和 右孩子指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>* <span class="title">lchild</span>, * <span class="title">rchild</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;BiTNode,*BiTree; </span><br></pre></td></tr></table></figure><h3 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h3><h4 id="二叉树遍历原理"><a href="#二叉树遍历原理" class="headerlink" title="二叉树遍历原理"></a>二叉树遍历原理</h4><p>从根结点出发 按照某种次序依次访问二叉树中的所有结点 使得每个结点被访问一次且仅被访问一次</p><h4 id="二叉树遍历方法"><a href="#二叉树遍历方法" class="headerlink" title="二叉树遍历方法"></a>二叉树遍历方法</h4><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86.2clsx0tdb78k.webp" alt="二叉树遍历"></p><ul><li>前序遍历</li></ul><p>若二叉树为空 则空操作返回 否则先访问根结点 然后前序遍历左子树 在前序遍历右子树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检验树是否为空</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == T) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示当前结点</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 遍历左子树</span></span><br><span class="line">PreOrderTraverse(T-&gt;lchild);</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 遍历右子树</span></span><br><span class="line">PreOrderTraverse(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A-&gt;B-&gt;D-&gt;G-&gt;H-&gt;C-&gt;E-&gt;I-&gt;F</p><ul><li>中序遍历</li></ul><p>若二叉树为空 则空操作返回 否则从根结点开始(注意并不是先访问根结点)中序遍历根结点的左子树 然后是访问根结点 最后中序遍历右子树</p><p>G-&gt;D-&gt;H-&gt;B-&gt;A-&gt;E-&gt;I-&gt;C-&gt;F</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检验树是否为空</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == T) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 遍历左子树</span></span><br><span class="line">InOrderTraverse(T-&gt;lchild);</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示结点数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 遍历右子树</span></span><br><span class="line">InOrderTraverse(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>后序遍历</li></ul><p>若二叉树为空 则空操作返回 否则从左到右先叶子后结点的方式遍历访问左右子树 最后是访问根结点</p><p>G-&gt;H-&gt;D-&gt;B-&gt;I-&gt;E-&gt;F-&gt;C-&gt;A</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检验树是否为空</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == T) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 遍历左子树</span></span><br><span class="line">PostOrderTraverse(T-&gt;lchild);</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 遍历右子树</span></span><br><span class="line">PostOrderTraverse(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示结点数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T-&gt;data);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>层次遍历<br>若二叉树为空 则空操作返回 否则从树的第一层 也就是根结点开始访问 从上而下逐层遍历 在同一层中 按从左到右的顺序对结点逐个访问</li></ul><p>A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F-&gt;G-&gt;H-&gt;I</p><h4 id="推导遍历结果"><a href="#推导遍历结果" class="headerlink" title="推导遍历结果"></a>推导遍历结果</h4><p>根据前序遍历 中序遍历 后序遍历原则推导即可</p><p>已知前序遍历和后序遍历 是不能确定一棵二叉树的</p><h3 id="二叉树的建立"><a href="#二叉树的建立" class="headerlink" title="二叉树的建立"></a>二叉树的建立</h3><p>先将二叉树的每个结点的空指针引入一个虚结点 其值为一个特定的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree* T)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设字符</span></span><br><span class="line">TElemType ch;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入的数据</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, ch);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符数组</span></span><br><span class="line">ch = str[index++];</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设输入为#时为空结点</span></span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">*T = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为结点开辟内存空间</span></span><br><span class="line">*T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(T));</span><br><span class="line"></span><br><span class="line"><span class="comment">//终止程序</span></span><br><span class="line"><span class="keyword">if</span> (!*T) &#123;</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符数据存入结点数据域</span></span><br><span class="line">(*T)-&gt;data = ch;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 创建左孩子</span></span><br><span class="line">CreateBiTree(&amp;(*T)-&gt;lchild);</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 创建右孩子</span></span><br><span class="line">CreateBiTree(&amp;(*T)-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><h4 id="线索二叉树的原理"><a href="#线索二叉树的原理" class="headerlink" title="线索二叉树的原理"></a>线索二叉树的原理</h4><p>指向前驱和后继的指针称为线索</p><h4 id="线索表"><a href="#线索表" class="headerlink" title="线索表"></a>线索表</h4><p>加上线索的二叉链表</p><h4 id="线索二叉树-1"><a href="#线索二叉树-1" class="headerlink" title="线索二叉树"></a>线索二叉树</h4><p>与之对应的数即是线索二叉树</p><h4 id="线索化"><a href="#线索化" class="headerlink" title="线索化"></a>线索化</h4><p>对二叉树以某种次序遍历使其变为线索二叉树的过程</p><p>线索化的过程就是在遍历的过程中修改空指针的过程</p><h4 id="给结点添加两个标识"><a href="#给结点添加两个标识" class="headerlink" title="给结点添加两个标识"></a>给结点添加两个标识</h4><ul><li>ltag</li></ul><p>为0时指向该结点的左孩子</p><p>为1时指向该结点的前驱</p><ul><li>rtag</li></ul><p>为0时指向该结点的右孩子</p><p>为1时指向该结点的后继</p><h4 id="线索二叉树的实现"><a href="#线索二叉树的实现" class="headerlink" title="线索二叉树的实现"></a>线索二叉树的实现</h4><p>线索二叉树结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="comment">//变量转换</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Link = 0 表示指向左右孩子指针 Thread = 1表示指向前驱或后继线索</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span>Link,Thread&#125; PointerTag;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉线索存储结点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据域</span></span><br><span class="line">TElemType data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结点数据 左右孩子指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span>* <span class="title">lchild</span>, * <span class="title">rchild</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//左标志</span></span><br><span class="line">PointerTag LTag;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右标志</span></span><br><span class="line">PointerTag RTag;</span><br><span class="line"></span><br><span class="line">&#125;BiThrNode,*BiThrTree;</span><br></pre></td></tr></table></figure><p>从头结点开始遍历</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局变量 始终指向刚刚访问过的结点</span></span><br><span class="line">BiThrTree pre;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历进行中序线索化 从头结点开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//p结点不为空</span></span><br><span class="line"><span class="keyword">if</span> (p) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归遍历左子结点</span></span><br><span class="line">InThreading(p-&gt;lchild);</span><br><span class="line"></span><br><span class="line"><span class="comment">//p的左下一结点不为空 就是 没有左孩子</span></span><br><span class="line"><span class="keyword">if</span> (!p-&gt;lchild) &#123;</span><br><span class="line"><span class="comment">//将标识设置为 Thread</span></span><br><span class="line">p-&gt;LTag = Thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将p的左孩子指向前驱</span></span><br><span class="line">p-&gt;lchild = pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//p的右下一结点不为空 就是 没有右孩子</span></span><br><span class="line"><span class="keyword">if</span> (!pre-&gt;rchild) &#123;</span><br><span class="line"><span class="comment">//将标识设置为Thread</span></span><br><span class="line">pre-&gt;RTag = Thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将p的右孩子指向后继</span></span><br><span class="line">pre-&gt;rchild = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让全局变量pre 始终指向p</span></span><br><span class="line">pre = p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归遍历右孩子</span></span><br><span class="line">InThreading(p-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从最后一个结点开始遍历</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序线索二叉树遍历 从最后结点开始</span></span><br><span class="line"><span class="function">Status <span class="title">InOrderTraverse_Thr</span><span class="params">(BiThrTree T)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结点p</span></span><br><span class="line">BiThrTree p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将结点p指向头结点的左孩子</span></span><br><span class="line">p = T-&gt;lchild;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左孩子不是头结点即可</span></span><br><span class="line"><span class="keyword">while</span> (p != T) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左孩子的有前驱</span></span><br><span class="line"><span class="keyword">while</span>(p-&gt;LTag == Link)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继续寻找下一个左孩子</span></span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示结点</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//p有子孩子 并且 p的右孩子后继不是头结点 </span></span><br><span class="line"><span class="keyword">while</span> (p-&gt;RTag == Thread &amp;&amp; p-&gt;rchild != T) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继续寻找下一个子孩子</span></span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;data);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将p指回头结点</span></span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树-森林-二叉树-的关系"><a href="#树-森林-二叉树-的关系" class="headerlink" title="树 森林 二叉树 的关系"></a>树 森林 二叉树 的关系</h3><h4 id="树转换为二叉树"><a href="#树转换为二叉树" class="headerlink" title="树转换为二叉树"></a>树转换为二叉树</h4><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%881%EF%BC%89.2zcfl5jim080.webp" alt="树转二叉树（1）"></p><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%882%EF%BC%89.1oqeqmcgm9c0.webp" alt="树转二叉树（2）"></p><h4 id="森林转换为二叉树"><a href="#森林转换为二叉树" class="headerlink" title="森林转换为二叉树"></a>森林转换为二叉树</h4><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A3%AE%E6%9E%97%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%881%EF%BC%89.e2bgahcr65k.webp" alt="森林转二叉树（1）"></p><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A3%AE%E6%9E%97%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%882%EF%BC%89.5g3vvddeep00.webp" alt="森林转二叉树（2）"></p><h4 id="二叉树转换为树"><a href="#二叉树转换为树" class="headerlink" title="二叉树转换为树"></a>二叉树转换为树</h4><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%A0%91%EF%BC%881%EF%BC%89.729fdcxooto0.webp" alt="二叉树转树（1）"></p><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%A0%91%EF%BC%882%EF%BC%89.6g6ffgzlpo80.webp" alt="二叉树转树（2）"></p><h4 id="二叉树转换为森林"><a href="#二叉树转换为森林" class="headerlink" title="二叉树转换为森林"></a>二叉树转换为森林</h4><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%A3%AE%E6%9E%97%EF%BC%881%EF%BC%89.2gsy1dgsmsw0.webp" alt="二叉树转森林（1）"></p><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%A3%AE%E6%9E%97%EF%BC%882%EF%BC%89.3kfhpmmxvv20.webp" alt="二叉树转森林（2）"></p><h4 id="树与森林的遍历"><a href="#树与森林的遍历" class="headerlink" title="树与森林的遍历"></a>树与森林的遍历</h4><blockquote><p>树的遍历</p></blockquote><ul><li>后根遍历</li></ul><p>先依次后根遍历每棵子树 然后在访问根结点</p><ul><li>先根遍历树</li></ul><p>先访问树的根结点 然后依次先根遍历根的每棵子树</p><p>数的先根遍历和后根遍历完全可以借用二叉树的前序遍历和中序遍历的算法来实现</p><blockquote><p>森林的遍历</p></blockquote><ul><li>前序遍历</li></ul><p>先访问森林中第一棵树的根结点 然后再依次先根遍历每棵子树 在依次用同样方式遍历除去第一棵树的剩余树构成的森林</p><ul><li>后序遍历</li></ul><p>先访问森林中第一棵树 后根遍历的方式遍历每棵子树 然后在访问根结点 再依次用同样方式遍历除去第一棵树的剩余树构成的森林</p><h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><h4 id="哈夫曼树的定义"><a href="#哈夫曼树的定义" class="headerlink" title="哈夫曼树的定义"></a>哈夫曼树的定义</h4><ul><li>路径长度</li></ul><p>从树中一个结点到另一个结点之间的分支构成两个结点之间的路径 路径上的分支目</p><ul><li>树的路径长度</li></ul><p>从树根到每一结点的路径长度之和</p><ul><li>哈夫曼树</li></ul><p>带权路径长度WPL最小的二叉树</p><p>结点带权 * 结点的路径长度<br><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%B8%A6%E6%9D%83.441obvsdwoo0.webp" alt="哈夫曼树带权"></p><ul><li>求哈夫曼树</li></ul><p>简单点说： 权值最小的依次向大的权值拼接</p><ul><li>哈夫曼编码</li></ul><p>设需要编码的字符集为{d1,d2,…dn} 各个字符在电文中出现的次数或频率集合为{w1,w2,…wn} 以d1,d2,…dn作为叶子结点 以w1,w2…wn作为相应叶子结点的权值来构造一棵哈夫曼树 规定哈夫曼树的左分支代表0 右分支代表1 则从根节点到叶子结点所经过的路径分支组成的0和1的序列便为该结点对应符的编码 </p><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220310235141.2oe31pjh01m0.webp&quot; alt=&quot;微信图片_20220310235141&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://codexiaobo.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>大话数据结构 栈和队列</title>
    <link href="https://codexiaobo.github.io/posts/2240375813/"/>
    <id>https://codexiaobo.github.io/posts/2240375813/</id>
    <published>2022-03-07T13:26:43.000Z</published>
    <updated>2022-03-07T13:27:54.924Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E8%88%B9.p0v2y8gtuz4.webp" alt="船"></p><!--sleep--><span id="more"></span><h1 id="《大话数据结构》-阅读整理"><a href="#《大话数据结构》-阅读整理" class="headerlink" title="《大话数据结构》 阅读整理"></a>《大话数据结构》 阅读整理</h1><h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><h3 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>栈是限定仅在表尾进行插入和删除操作的线性表</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>允许插入和删除的一端称为栈顶 另一端称为栈底</p><p>不含任何数据元素的栈称为空栈</p><p>后进先出 LIFO结构</p><p>栈的插入操作叫做进栈 压栈 入栈</p><p>栈的删除操作叫做 出栈 弹栈</p><h3 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h3><h4 id="顺序栈的定义"><a href="#顺序栈的定义" class="headerlink" title="顺序栈的定义"></a>顺序栈的定义</h4><p>定义一个top变量用来存放栈顶元素的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="comment">//存放的数据</span></span><br><span class="line">SElemType data[MAXSIZE];</span><br><span class="line"><span class="comment">//栈顶指针</span></span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><h4 id="顺序栈的入栈"><a href="#顺序栈的入栈" class="headerlink" title="顺序栈的入栈"></a>顺序栈的入栈</h4><p>从栈顶添加元素 头指针上移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//压栈</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack *s, SElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈满 因为栈顶指针等于了最大空间</span></span><br><span class="line"><span class="keyword">if</span> (s-&gt;top == MAXSIZE - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//返回错误状态码</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈顶指针后移</span></span><br><span class="line">s-&gt;top++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将元素插入到栈顶</span></span><br><span class="line">s-&gt;data[s-&gt;top] = e;</span><br><span class="line"><span class="comment">//返回正确状态码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="顺序栈的出栈"><a href="#顺序栈的出栈" class="headerlink" title="顺序栈的出栈"></a>顺序栈的出栈</h4><p>从栈顶元素移除元素 头指针下移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack* s, SElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈空</span></span><br><span class="line"><span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="comment">//返回错误状态码</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将删除的元素赋值给e</span></span><br><span class="line">e = s-&gt;data[s-&gt;top];</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈顶指针下移</span></span><br><span class="line">s-&gt;top--;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两栈共享空间"><a href="#两栈共享空间" class="headerlink" title="两栈共享空间"></a>两栈共享空间</h3><h4 id="出发点"><a href="#出发点" class="headerlink" title="出发点"></a>出发点</h4><p>让一个栈的栈底为数组的始端 下标为0出 另一个栈为数组的末端 下标的数组长度为n-1 增加元素 两端向中间延伸</p><ul><li>栈满</li></ul><p>栈二为空 栈一 top1 == n-1 栈一满</p><p>栈一为空 栈二 top2 == 0 栈二满</p><p>两栈见面 top1 + 1 = top2</p><h4 id="共享栈的定义"><a href="#共享栈的定义" class="headerlink" title="共享栈的定义"></a>共享栈的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//空间栈结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="comment">//栈数据</span></span><br><span class="line">SElemType data[MAXSIZE];</span><br><span class="line"><span class="comment">//栈一的栈顶指针</span></span><br><span class="line"><span class="keyword">int</span> top1;</span><br><span class="line"><span class="comment">//栈二的栈顶指针</span></span><br><span class="line"><span class="keyword">int</span> top2;</span><br><span class="line">&#125;SqDoubleStack;</span><br></pre></td></tr></table></figure><h4 id="共享栈的入栈"><a href="#共享栈的入栈" class="headerlink" title="共享栈的入栈"></a>共享栈的入栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//s链表 e操作元素 stackNumber 哪个栈 压栈</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqDoubleStack* s, SElemType e, <span class="keyword">int</span> stackNumber)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈满</span></span><br><span class="line"><span class="keyword">if</span> (s-&gt;top1 + <span class="number">1</span> == s-&gt;top2) &#123;</span><br><span class="line"><span class="comment">//返回错误状态码</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个栈插入</span></span><br><span class="line"><span class="keyword">if</span> (stackNumber == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先将栈顶指针上移后存入数据元素</span></span><br><span class="line">s-&gt;data[++s-&gt;top1] = e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二个栈插入</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (stackNumber == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//先将栈顶指针下移后存入数据元素</span></span><br><span class="line">s-&gt;data[--s-&gt;top2] = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="共享栈的出栈"><a href="#共享栈的出栈" class="headerlink" title="共享栈的出栈"></a>共享栈的出栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqDoubleStack* s, SElemType e, <span class="keyword">int</span> stackNumber)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个栈</span></span><br><span class="line"><span class="keyword">if</span> (stackNumber == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//栈空</span></span><br><span class="line"><span class="keyword">if</span> (s-&gt;top1 == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现将栈顶元素赋值给e后下移</span></span><br><span class="line">e = s-&gt;data[s-&gt;top1--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二个栈</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (stackNumber == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//栈空</span></span><br><span class="line"><span class="keyword">if</span> (s-&gt;top2 == MAXSIZE) &#123;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//现将栈顶元素赋值给e后下移</span></span><br><span class="line">e = s-&gt;data[s-&gt;top2++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>栈顶放在单链表的头部</p><p>通常情况下不存在栈满情况 除非内存已经没有可使用的空间了</p><p>top == null 说明空栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个单链表结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//链表数据域</span></span><br><span class="line">SElemType data;</span><br><span class="line"><span class="comment">//链表指针域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>* <span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;StackNode,*LinkStackPtr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个栈顶指针指向单链表头结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//栈顶指针</span></span><br><span class="line">LinkStackPtr top;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈元素数</span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">&#125;LinkStack;</span><br></pre></td></tr></table></figure><h4 id="链栈的入栈"><a href="#链栈的入栈" class="headerlink" title="链栈的入栈"></a>链栈的入栈</h4><p>开辟一块内存空间给一个新结点 将数据赋值给新节点以及头指针指向新结点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//压栈 进栈</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(LinkStack* S, SElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开辟一块内存空间赋值给s结点</span></span><br><span class="line">LinkStackPtr s = (LinkStackPtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackNode));</span><br><span class="line"></span><br><span class="line"><span class="comment">//将插入的数据存入s的数据域</span></span><br><span class="line">s-&gt;data = e;</span><br><span class="line"></span><br><span class="line"><span class="comment">//s的指针域指向栈的栈顶指针</span></span><br><span class="line">s-&gt;next = S-&gt;top;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将栈顶指针移动将s结点设置为栈顶指针</span></span><br><span class="line">S-&gt;top = s;</span><br><span class="line"><span class="comment">//栈内元素++</span></span><br><span class="line">S-&gt;count++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链栈的出栈"><a href="#链栈的出栈" class="headerlink" title="链栈的出栈"></a>链栈的出栈</h4><p>将头指针指向下一结点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹栈 出栈</span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(LinkStack* S, SElemType* e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结点p</span></span><br><span class="line">LinkStackPtr p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="keyword">if</span> (StackEmpty(*S)) &#123;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将栈顶元素赋值给e</span></span><br><span class="line">*e = S-&gt;top-&gt;data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将栈顶指针指向的结点存放到p结点中</span></span><br><span class="line">p = S-&gt;top;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将栈顶指针 指向栈顶指针的下一个结点</span></span><br><span class="line">S-&gt;top = S-&gt;top-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放之前栈顶指针向的结点</span></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈内元素 - 1</span></span><br><span class="line">S-&gt;count--;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果栈的使用过程中元素变化不可预料最好使用链栈 反之顺序栈</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h4 id="递归定义"><a href="#递归定义" class="headerlink" title="递归定义"></a>递归定义</h4><p>把一个直接调用自己或通过一系列的调用语句间接地调用自己的函数</p><p>每个递归定义必须至少有一个条件 满足时递归不再进行 不再引用自身而是返回值退出</p><h4 id="经典的菲波那切数列"><a href="#经典的菲波那切数列" class="headerlink" title="经典的菲波那切数列"></a>经典的菲波那切数列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fbi</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> i == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fbi(i - <span class="number">1</span>) + fbi(i - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;递归现实菲波那切数列\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, fbi(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的应用（四则运算表达式求值）"><a href="#栈的应用（四则运算表达式求值）" class="headerlink" title="栈的应用（四则运算表达式求值）"></a>栈的应用（四则运算表达式求值）</h3><h4 id="后缀（逆波兰）表示法"><a href="#后缀（逆波兰）表示法" class="headerlink" title="后缀（逆波兰）表示法"></a>后缀（逆波兰）表示法</h4><p>原式(中缀表达式)：9+(3 - 1) * 3 + 10 / 2</p><p>后缀表达式：9 3 1 - 3 * + 10 2 / +</p><p>所有的符号都在要运算数字的后面</p><h4 id="后缀表达式计算结果"><a href="#后缀表达式计算结果" class="headerlink" title="后缀表达式计算结果"></a>后缀表达式计算结果</h4><p>从左到右遍历表达式的每个数字和符号 遇到是数字就进栈 遇到符号就将处于站定两个数字出栈 进行计算 运算结果进栈 一直到最终获得结果</p><h4 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h4><p>从左到右遍历中缀表达式的每个数字和符号 若是数字就输出 即成为后缀表达式的一部分 若是符号 则判断其与栈顶符号的优先级 是右括号或优先级不高于栈顶符号(乘除优先加减) 则栈顶元素依次出栈并输出 并将当前符号进栈 一直到最终输出后缀表达式为止</p><h3 id="队列的定义"><a href="#队列的定义" class="headerlink" title="队列的定义"></a>队列的定义</h3><p>只允许在一端进行插入操作 而在另一端进行删除操作的线性表</p><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><p>先进先出的线性表 FIFO</p><p>允许插入的一端称为队尾 允许删除的一端称为队头</p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><h4 id="队列顺序存储的不足"><a href="#队列顺序存储的不足" class="headerlink" title="队列顺序存储的不足"></a>队列顺序存储的不足</h4><p>就是当出队是后面的都要动 时间复杂度为O(n)</p><p>当前面有空位置时后面却已经满了 无法入队<br>这种现象称作 假溢出</p><h4 id="循环队列的定义"><a href="#循环队列的定义" class="headerlink" title="循环队列的定义"></a>循环队列的定义</h4><p>头尾相接的顺序存储结构称为循环队列</p><h4 id="循环队列的判断条件"><a href="#循环队列的判断条件" class="headerlink" title="循环队列的判断条件"></a>循环队列的判断条件</h4><p>设置一个标志量flag 当front == rear 且flag = 0时为空队列<br>当front == rear  且 flag = 1时为队列满</p><p>当队列为空 条件是front == rear 队列满时 保留一个元素空间<br>队列满的条件是 (rear + 1) % QueueSize == front</p><ul><li>队列长度通用公式</li></ul><p>(rear - front + QueueSize) % QueueSize</p><h4 id="循环队列顺序结构定义"><a href="#循环队列顺序结构定义" class="headerlink" title="循环队列顺序结构定义"></a>循环队列顺序结构定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">QElemType data[MAXSIZE];<span class="comment">//队列数据</span></span><br><span class="line"><span class="keyword">int</span> front;<span class="comment">//头指针</span></span><br><span class="line"><span class="keyword">int</span> rear;<span class="comment">//尾指针</span></span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h4 id="循环队列初始化"><a href="#循环队列初始化" class="headerlink" title="循环队列初始化"></a>循环队列初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//队列初始化</span></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue* Q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头指针指向0位置</span></span><br><span class="line">Q-&gt;front = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾指针指向0位置</span></span><br><span class="line">Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环队列长度"><a href="#循环队列长度" class="headerlink" title="循环队列长度"></a>循环队列长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回队列的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(SqQueue *Q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列长度算法</span></span><br><span class="line"><span class="keyword">return</span> (Q-&gt;rear - Q-&gt;front + MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环队列入队"><a href="#循环队列入队" class="headerlink" title="循环队列入队"></a>循环队列入队</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(SqQueue *Q,QElemType e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列满</span></span><br><span class="line"><span class="keyword">if</span> ((Q-&gt;rear + <span class="number">1</span>) % MAXSIZE == Q-&gt;front) &#123;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队数据赋值</span></span><br><span class="line">Q-&gt;data[Q-&gt;rear] = e;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾指针后移一位</span></span><br><span class="line">Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确代码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环队列出队"><a href="#循环队列出队" class="headerlink" title="循环队列出队"></a>循环队列出队</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(SqQueue* Q, QElemType *e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈为空</span></span><br><span class="line"><span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear) &#123;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将出队队列赋值给e</span></span><br><span class="line">*e = Q-&gt;data[Q-&gt;front];</span><br><span class="line"></span><br><span class="line"><span class="comment">//头指针前移</span></span><br><span class="line">Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态吗</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h3><h4 id="链式队列定义"><a href="#链式队列定义" class="headerlink" title="链式队列定义"></a>链式队列定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义结点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">QElemType data;<span class="comment">//数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;QNode,*QueuePtr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义队列头尾指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">QueuePtr front, rear;<span class="comment">//头尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><h4 id="链式队列入队"><a href="#链式队列入队" class="headerlink" title="链式队列入队"></a>链式队列入队</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(LinkQueue* Q, QElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开辟内存空间</span></span><br><span class="line">QueuePtr s = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配内存空间失败</span></span><br><span class="line"><span class="keyword">if</span> (!s) &#123;</span><br><span class="line"><span class="built_in">exit</span>(_CRT_GUARDOVERFLOW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//s结点的数据</span></span><br><span class="line">s-&gt;data = e;</span><br><span class="line"></span><br><span class="line"><span class="comment">//s的下一结点为空</span></span><br><span class="line">s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头指针指向s结点</span></span><br><span class="line">Q-&gt;rear-&gt;next = s;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将s结点设置为头指针</span></span><br><span class="line">Q-&gt;rear = s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链式队列出队"><a href="#链式队列出队" class="headerlink" title="链式队列出队"></a>链式队列出队</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(LinkQueue* Q, QElemType* e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明结点p</span></span><br><span class="line">QueuePtr p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列为空</span></span><br><span class="line"><span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear) &#123;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将要删除的结点赋值给结点p</span></span><br><span class="line">p = Q-&gt;front-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将删除的数据赋值给e</span></span><br><span class="line">*e = p-&gt;data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将头结点指向出队结点的下一结点</span></span><br><span class="line">Q-&gt;front-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果出队的是最后一个元素</span></span><br><span class="line"><span class="keyword">if</span> (Q-&gt;rear == p) &#123;</span><br><span class="line"><span class="comment">//将头指针指向尾指针</span></span><br><span class="line">Q-&gt;rear = Q-&gt;front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放结点p 出队成功</span></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E8%88%B9.p0v2y8gtuz4.webp&quot; alt=&quot;船&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://codexiaobo.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>大话数据结构 线性表</title>
    <link href="https://codexiaobo.github.io/posts/227292080/"/>
    <id>https://codexiaobo.github.io/posts/227292080/</id>
    <published>2022-03-06T04:11:52.000Z</published>
    <updated>2022-03-06T04:14:02.187Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/22.6ni0lp1aar40.webp" alt="22"></p><!--sleep--><span id="more"></span><h1 id="《大话数据结构》-阅读整理"><a href="#《大话数据结构》-阅读整理" class="headerlink" title="《大话数据结构》 阅读整理"></a>《大话数据结构》 阅读整理</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><p>零个或多个数据元素的有限序列</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>一个数据元素可以由若干个数据项组成</p><p><strong>举例</strong></p><p>白羊-&gt;金牛-&gt;双子-&gt;巨蟹-&gt;狮子-&gt;处女-&gt;天秤-&gt;天蝎-&gt;射手-&gt;摩羯-&gt;水瓶-&gt;双鱼</p><p>前一个称为后一个的直接前驱</p><p>后一个称为前一个的直接后继</p><h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3><p>用一段地址连续的存储单元依次存储线性表的数据元素</p><p>存储器中每个存储单元都有自己的编号 这个编号称为地址</p><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E7%BA%BF%E6%80%A7%E8%A1%A8%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.6pfq944sf800.webp" alt="线性表顺序存储结构"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将int 用 ElemType替代了</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; </span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="comment">//存储数据元素</span></span><br><span class="line">ElemType data[MAXSIZE];</span><br><span class="line"><span class="comment">//线性表的当前长度</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><h3 id="线性表的操作"><a href="#线性表的操作" class="headerlink" title="线性表的操作"></a>线性表的操作</h3><h4 id="获取元素操作"><a href="#获取元素操作" class="headerlink" title="获取元素操作"></a>获取元素操作</h4><ul><li>思路</li></ul><p>检验要查找的元素位置是否符合</p><p>直接找到返回即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素操作 e返回L中第i个数据元素的值 i指的是位置 所以下标得 - 1</span></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(SqList L, <span class="keyword">int</span> i, ElemType* e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检验特殊情况</span></span><br><span class="line"><span class="keyword">if</span> (L.data == <span class="number">0</span> || i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回错误状态</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将查找到的元素赋值给e</span></span><br><span class="line">*e = L.data[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><ul><li>思路</li></ul><p>插入位置不合理 抛出异常</p><p>线性表长度大于等于数组长度 抛出异常或动态加容量</p><p>从最后一个元素开始向前遍历到第i个位置 分别向后移动一个位置</p><p>插入元素到指定位置</p><p>表长 + 1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入元素操作 在L中第i个位置之前插入新的元素e L长度 + 1</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义变量k</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当线性表长度等于最大空间时 说明线性表已经满了 不能再添加了</span></span><br><span class="line"><span class="keyword">if</span> (L.length == MAXSIZE) &#123;</span><br><span class="line"><span class="comment">//返回错误状态码</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当插入元素比第一位还小时或比最后一位后一位还大时 不允许插入</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//返回错误状态码</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当插入的元素不是在末尾插入时</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; L.length) &#123;</span><br><span class="line"><span class="comment">//将插入之后的所有元素向后移动一位</span></span><br><span class="line"><span class="keyword">for</span> (k = L.length - <span class="number">1</span>; k &gt;= i - <span class="number">1</span>; k--) &#123;</span><br><span class="line"><span class="comment">//向后移动</span></span><br><span class="line">L.data[k + <span class="number">1</span>] = L.data[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将新元素插入到指定位置</span></span><br><span class="line">L.data[i - <span class="number">1</span>] = e;</span><br><span class="line"><span class="comment">//线性表长度+1</span></span><br><span class="line">L.length++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><ul><li>思路</li></ul><p>删除位置不合理 抛出异常</p><p>取出删除元素</p><p>删除元素位置开始遍历到最后一个元素位置 分别将他们向前移动一个位置</p><p>表长 - 1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除元素操作 删除L的第i个元素 用e返回值 线性表长度 - 1</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(SqList L, <span class="keyword">int</span> i, ElemType *e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检验线性表是否为空 </span></span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//返回错误状态码</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检验删除元素的位置是否正确</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line"><span class="comment">//返回错误状态码</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除的元素赋值给e</span></span><br><span class="line">*e = L.data[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//检验删除的元素不是最后一个</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; L.length) &#123;</span><br><span class="line"><span class="comment">//删除一个元素 将其后面的所有元素向前移动一位</span></span><br><span class="line"><span class="keyword">for</span> (k = i; k &lt; L.length; k++) &#123;</span><br><span class="line"><span class="comment">//向前移动</span></span><br><span class="line">L.data[k - <span class="number">1</span>] = L.data[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线性表长度 - 1</span></span><br><span class="line">L.length--;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="线性表顺序存储结构的优缺点"><a href="#线性表顺序存储结构的优缺点" class="headerlink" title="线性表顺序存储结构的优缺点"></a>线性表顺序存储结构的优缺点</h4><ul><li>优点</li></ul><p>无需为表示表中元素之间的逻辑关系而增加额外的存储空间</p><p>可以快速地存取表中任一位置的元素</p><ul><li>缺点</li></ul><p>插入和删除操作需要移动大量元素</p><p>当线性表长度变化较大时 难以确定存储空间的容量</p><p>造成存储空间的碎片</p><h3 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h3><h4 id="线性表链式存储结构定义"><a href="#线性表链式存储结构定义" class="headerlink" title="线性表链式存储结构定义"></a>线性表链式存储结构定义</h4><p><code>数据域</code>存储数据元素信息</p><p><code>指针域</code>存储直接后继位置</p><p><code>指针/链</code>指针域中存储的信息</p><p><code>结点</code>数据源 + 指针域</p><p><code>单链表</code>每个结点中只包含一个指针域</p><p><code>头指针</code>链表中第一个结点的存储位置</p><p><code>头结点</code>单链表的第一个结点前附设一个结点</p><p>n个结点链接成一个链表 即为线性表的链式存储结构</p><h4 id="头指针与头结点的异同"><a href="#头指针与头结点的异同" class="headerlink" title="头指针与头结点的异同"></a>头指针与头结点的异同</h4><ul><li>头指针<br>链表指向第一个结点的指针 若链表有头结点 则是指向头结点的指针</li></ul><p>头指针具有标志作用 所以常用头指针冠以链表的名字</p><p>无论链表是否为空 头指针均不为空 头指针是链表的必要元素</p><ul><li>头结点<br>为了操作的统一和方便而设立的 放在第一元素的结点之前 其数据域一般无意义</li></ul><p>对在第一元素结点前插入节点和删除第一结点 其操作与其他结点的操作就统一了</p><p>不一定是链表的必需要素</p><h3 id="线性表链式存储结构"><a href="#线性表链式存储结构" class="headerlink" title="线性表链式存储结构"></a>线性表链式存储结构</h3><p>结点由存放数据元素的数据域和存放后地址的指针域组成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型替换</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存放数据的数据域</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="comment">//存放后继结点地址的指针域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义LinkList</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">LinkList</span>;</span></span><br></pre></td></tr></table></figure><h3 id="单链表的操作"><a href="#单链表的操作" class="headerlink" title="单链表的操作"></a>单链表的操作</h3><h4 id="单链表的读取"><a href="#单链表的读取" class="headerlink" title="单链表的读取"></a>单链表的读取</h4><ul><li>思路</li></ul><p>声明一个指针p指向链表第一个结点 初始化j从1开始</p><p>当j&lt;i 时 遍历链表 让p指针后移 j累加</p><p>若到链表末尾p为空 说明第i个结点不存在</p><p>查找成功 返回结点p的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表的读取</span></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType* e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义计数器</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//定义结点p</span></span><br><span class="line">LinkList p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将p指向链表L的下一结点</span></span><br><span class="line">p = L-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历 如果结点p不为空 并且 计数器 j(计数器) &lt; i(要查找的位置)</span></span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; i)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将p指向下一结点</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计数器++</span></span><br><span class="line">++j;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果p为空了 或者 j(计数器) &gt; i(要查找的位置)</span></span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; i) &#123;</span><br><span class="line"><span class="comment">//返回错误状态码</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将查找的数据赋值给e</span></span><br><span class="line">*e = p-&gt;data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h4><ul><li>思路</li></ul><p>声明一指针p指向链表的头结点 初始化j从1开始</p><p>当j&lt;i 时 遍历链表 让p指针后移 j累加</p><p>若到链表末尾p为空 则说明i个结点不存在</p><p>查找成功 在系统中生成一个空结点s</p><p>将数据e赋值给s-&gt;data</p><p>单链表的插入标准语句 s-&gt;next = p-&gt;next; p-&gt;next = s;</p><p>返回成功</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表的插入</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType* e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计数器</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//定义结点p,s</span></span><br><span class="line">LinkList p, s;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将p指向L结点</span></span><br><span class="line">p = L;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历寻找</span></span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; i) &#123;</span><br><span class="line"><span class="comment">//p指针移动</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="comment">//计数器++</span></span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验</span></span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; i) &#123;</span><br><span class="line"><span class="comment">//返回错误状态码</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自动分配内存空间生成新结点</span></span><br><span class="line">s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"></span><br><span class="line"><span class="comment">//将插入的数据放入新结点的数据域中</span></span><br><span class="line">s-&gt;data = e;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将新结点的指针域指向p的下一结点</span></span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将p的指针域指向新结点</span></span><br><span class="line">p-&gt;next = s;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h4><ul><li>思路<br>声明一指针p指向链表头结点 初始化j从1开始</li></ul><p>当j&lt;i 时 遍历链表 让p指针后移 j累加</p><p>若到链表末尾p为空 则说明i个结点不存在</p><p>查找成功 将要删除的结点p-&gt;next赋值给q</p><p>单链表的删除标准语句p-&gt;next = q-&gt;next</p><p>将q结点中的数据赋值给e 作为返回</p><p>释放q结点</p><p>返回成功</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表的删除</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType* e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//定义新结点 p, q</span></span><br><span class="line">LinkList p, q;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将结点p指向头结点</span></span><br><span class="line">p = L;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历检验</span></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i) &#123;</span><br><span class="line"><span class="comment">//将p指向p的指针域</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="comment">//计数器++</span></span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检验</span></span><br><span class="line"><span class="keyword">if</span> (!p-&gt;next || j &gt; i) &#123;</span><br><span class="line"><span class="comment">//返回错误状态码</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将q指向p的指针域</span></span><br><span class="line">q = p-&gt;next;</span><br><span class="line"><span class="comment">//将p的指针域指向q的指针域</span></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="comment">//将q的数据域赋值给e</span></span><br><span class="line">*e = q-&gt;data;</span><br><span class="line"><span class="comment">//释放q</span></span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回正确状态码</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表结构与顺序存储结构的优缺点"><a href="#单链表结构与顺序存储结构的优缺点" class="headerlink" title="单链表结构与顺序存储结构的优缺点"></a>单链表结构与顺序存储结构的优缺点</h3><h4 id="存储分配方式"><a href="#存储分配方式" class="headerlink" title="存储分配方式"></a>存储分配方式</h4><p>顺序存储结构用一段连续的存储单元依次存储线性表的数据元素</p><p>单链表采用链式存储结构 用一组任意的存储单元存放线性表的元素</p><h4 id="时间性能"><a href="#时间性能" class="headerlink" title="时间性能"></a>时间性能</h4><ul><li>查找</li></ul><p>顺序存储结构O(1)</p><p>单链表O(n)</p><ul><li>查找和删除</li></ul><p>顺序存储结构需要平均移动表长一半的元素 时间复杂度O(n)</p><p>单链表在找出位置的指针后 插入和删除时间复杂度仅为O(1)</p><h4 id="空间性能"><a href="#空间性能" class="headerlink" title="空间性能"></a>空间性能</h4><p>顺序存储结构需要预分配存储空间 分大了浪费 分小了 易发生上溢</p><p>单链表不需要分配存储空间 只要有就可以分配 元素个数也不受限制</p><p><strong>注意</strong></p><p>线性表需要频繁查找 很少进行插入和删除操作 宜采用顺序存储结构</p><p>当线性表中的元素个数变化较大或者根本不知道有多大时 采用单链表结构</p><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><p>用数组描述的链表叫做静态链表</p><p>静态链表和单链表其实很相像</p><h4 id="静态链表结构的定义"><a href="#静态链表结构的定义" class="headerlink" title="静态链表结构的定义"></a>静态链表结构的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线性表的静态链表存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="comment">//游标 为0时表示无指向</span></span><br><span class="line"><span class="keyword">int</span> cur;</span><br><span class="line">&#125;Component,StaticLinkList[MAXSIZE];</span><br></pre></td></tr></table></figure><h4 id="静态链表的初始化"><a href="#静态链表的初始化" class="headerlink" title="静态链表的初始化"></a>静态链表的初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化静态数组链表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(StaticLinkList space)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义静态变量</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置循环</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXSIZE - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">//space[0].cur头指针 0表示空指针</span></span><br><span class="line">space[i].cur = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态链表为空 最后一个元素的cur为0</span></span><br><span class="line">space[MAXSIZE - <span class="number">1</span>].cur = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态链表的优缺点"><a href="#静态链表的优缺点" class="headerlink" title="静态链表的优缺点"></a>静态链表的优缺点</h4><ul><li>优点</li></ul><p>在插入和删除时 只需要修改游标 不需要移动元素 从而改进了顺序存储结构中插入和删除操作需要移动大量元素的缺点</p><ul><li>缺点</li></ul><p>没有解决连续存储分配带来的表长难以确定的问题</p><p>失去了顺序存储结构随机存取的特性</p><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>将单链表的终端结点的指针端有空指针改为指向头结点 就使整个单链表形成一个环 这种头尾相连的单链表称为循环链表</p><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><p>在终端结点设置尾指针 方便查找终端结点以及头结点</p><p>查找上一结点时耗时较大 时间复杂度为O(n)</p><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>在单链表的每个结点中 在设置一个指向其前驱结点的指针域</p><h4 id="双向链表结构的定义"><a href="#双向链表结构的定义" class="headerlink" title="双向链表结构的定义"></a>双向链表结构的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">ElemType data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接前驱指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span>* <span class="title">prior</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接后继指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span>* <span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;DulNode,*DuLinkList;</span><br></pre></td></tr></table></figure><p>插入和删除和单链表相同 只不过多了个前驱指针域 </p><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/22.6ni0lp1aar40.webp&quot; alt=&quot;22&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://codexiaobo.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>大话数据结构 绪论 算法</title>
    <link href="https://codexiaobo.github.io/posts/1863985833/"/>
    <id>https://codexiaobo.github.io/posts/1863985833/</id>
    <published>2022-03-05T13:46:03.000Z</published>
    <updated>2022-03-05T13:48:37.847Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E7%8B%97%E7%8B%97.cat496pgk1s.webp" alt="狗狗"></p><!--sleep--><span id="more"></span><h1 id="《大话数据结构》-阅读整理"><a href="#《大话数据结构》-阅读整理" class="headerlink" title="《大话数据结构》 阅读整理"></a>《大话数据结构》 阅读整理</h1><h1 id="数据结构绪论"><a href="#数据结构绪论" class="headerlink" title="数据结构绪论"></a>数据结构绪论</h1><h2 id="数据结构的起源"><a href="#数据结构的起源" class="headerlink" title="数据结构的起源"></a>数据结构的起源</h2><p>数据结构是相互之间存在一种或多种特定关系的数据元素的集合</p><h2 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>描述客观事物的符号 是计算机中可以操作的对象 是能被计算机识别 并输入给计算机处理的符号集合</p><h3 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h3><p>组成数据的 有一定意义的基本单位 通常被作为整体处理</p><h3 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h3><p>一个数据元素可以由若干个数据项组成</p><p>数据不可分割的最小单元</p><h3 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h3><p>性质相同的数据元素的集合 数据的子集</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>不同数据元素之间不是独立的 存在特定的关系 这些关系称为结构</p><h2 id="逻辑结构与物理结构"><a href="#逻辑结构与物理结构" class="headerlink" title="逻辑结构与物理结构"></a>逻辑结构与物理结构</h2><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>数据对象中数据元素之间的相互关系</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>集合结构</li></ul><p>数据元素除了同属于一个集合外 之间没有其他关系</p><ul><li>线性结构</li></ul><p>数据元素之间是一对一的关系</p><ul><li>树形结构</li></ul><p>数据元素之间存在一种 一对多的关系</p><ul><li>图形结构</li></ul><p>数据元素是多对多的关系</p><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><p>数据的逻辑结构在计算机中的存储形式</p><h4 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h4><ul><li>顺序存储结构 数据元素存放在地址连续的存储单元里 数据间的逻辑关系和物理关系是一致的</li><li>链式存储结构 数据元素存放在任意的存储单元里 这组存储单元可以是连续的 也可以是不连续的</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型定义"><a href="#数据类型定义" class="headerlink" title="数据类型定义"></a>数据类型定义</h3><h4 id="原子类型"><a href="#原子类型" class="headerlink" title="原子类型"></a>原子类型</h4><p>不可以再分解的基本类型</p><p>整型 实型 字符型 ……</p><h4 id="结构类型"><a href="#结构类型" class="headerlink" title="结构类型"></a>结构类型</h4><p>由若干个类型组合而成 可以再分解</p><p>整形数组由若干整型数据组成……</p><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>抽取出事物具有的普遍性的本质</p><h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><p>一个数学模型及定义在该模型上的一组操作</p><p>体现了程序设计中问题分解 抽象和信息隐藏的特性</p><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA.4afe4hlb69m0.webp" alt="数据结构绪论"></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h2><p>解决特定问题求解步骤的描述 在计算机中表现为指令的有限序列 并且每条指令表示一个或多个操作</p><h2 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>算法具有零个或多个输入</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>算法至少有一个或多个输出</p><h3 id="有穷性"><a href="#有穷性" class="headerlink" title="有穷性"></a>有穷性</h3><p>算法在执行有限步骤后 自动结束而不会出现无限循环 并且每一个步骤在可接受的时间内完成</p><h3 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h3><p>算法的每一步骤都具有确定的含义 不会出现二义性</p><h3 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h3><p>算法的每一步都必须是可行的 每一步都能够通过执行有限次数完成</p><h2 id="算法设计要求"><a href="#算法设计要求" class="headerlink" title="算法设计要求"></a>算法设计要求</h2><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><p>算法至少应该具有输入 输出和加工处理无歧义性 能正确反映问题的需求 能够得到问题的正确答案</p><h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><p>算法设计的另一目的是为了便于阅读 理解和交流</p><h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><p>输入数据不合法时 算法也能做出相关处理 不是产生异常或莫名其妙的结果</p><h3 id="时间效率高和存储量低"><a href="#时间效率高和存储量低" class="headerlink" title="时间效率高和存储量低"></a>时间效率高和存储量低</h3><p>尽量满足时间效率高和存储量低的需求</p><h2 id="算法效率的度量方法"><a href="#算法效率的度量方法" class="headerlink" title="算法效率的度量方法"></a>算法效率的度量方法</h2><h3 id="事后统计方法"><a href="#事后统计方法" class="headerlink" title="事后统计方法"></a>事后统计方法</h3><p>通过设计好的测试程序和数据 利用计算机计时器对不同算法编制的程序的运行时间进行比较 从而确定算法效率的高低</p><h3 id="事前分析估算方法"><a href="#事前分析估算方法" class="headerlink" title="事前分析估算方法"></a>事前分析估算方法</h3><p>在计算机编制前 依据统计方法对计算机进行估算</p><h3 id="高级语言所消耗的时间取决于"><a href="#高级语言所消耗的时间取决于" class="headerlink" title="高级语言所消耗的时间取决于"></a>高级语言所消耗的时间取决于</h3><ul><li>算法采用的策略 方法</li></ul><p>算法好坏的根本</p><ul><li>编译产生的代码质量</li></ul><p>软件问题</p><ul><li>问题的输入规模（输入量）</li></ul><p>程序运行时间的关键</p><ul><li>机器执行指令的速度</li></ul><p>硬件问题</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="T-n-O-f-n"><a href="#T-n-O-f-n" class="headerlink" title="T(n) = O(f(n))"></a>T(n) = O(f(n))</h3><p>随问题规模n的增大 算法执行时间的增长率和f(n)的增长率相同</p><p>n表示数据规模 ； O( f(n) )表示运行算法所需要执行的指令数，和f(n)成正比</p><p>f(n) 问题规模n的某个函数</p><h3 id="推导大O阶方法"><a href="#推导大O阶方法" class="headerlink" title="推导大O阶方法"></a>推导大O阶方法</h3><p>用常数1取代运行时间中的所有加法常数</p><p>在修改后的运行次数函数中 只保留最高阶项</p><p>如果最高阶项存在且其系数不是1 则去除与这个项相乘的系数 得到结果就是大O阶</p><h3 id="常见时间复杂度"><a href="#常见时间复杂度" class="headerlink" title="常见时间复杂度"></a>常见时间复杂度</h3><ul><li>O(1)</li></ul><p>常数阶</p><ul><li>O(n)</li></ul><p>线性阶</p><ul><li>O(n^2)</li></ul><p>平方阶</p><ul><li>O(log n)</li></ul><p>对数阶</p><ul><li>O(n * log n)</li></ul><p>n log n阶</p><ul><li>O(n ^ 3)</li></ul><p>立方阶</p><ul><li>O(2 ^ n)</li></ul><p>指数阶</p><h3 id="所耗费的时间"><a href="#所耗费的时间" class="headerlink" title="所耗费的时间"></a>所耗费的时间</h3><p>O(1)&lt;O(log n)&lt;O(n)&lt;O(nlog n)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</p><h2 id="最坏情况与平均情况"><a href="#最坏情况与平均情况" class="headerlink" title="最坏情况与平均情况"></a>最坏情况与平均情况</h2><p>平均运行时间是期望的运行时间</p><p>没有特殊情况下默认是平均运行时间</p><p><img src="https://cdn.jsdelivr.net/gh/codexiaobo/image@main/java/%E7%AE%97%E6%B3%95.61mp5c2yjdw0.webp" alt="算法"></p><p><strong>你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E7%8B%97%E7%8B%97.cat496pgk1s.webp&quot; alt=&quot;狗狗&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://codexiaobo.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
