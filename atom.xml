<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code小博</title>
  
  
  <link href="https://codexiaobo.github.io/atom.xml" rel="self"/>
  
  <link href="https://codexiaobo.github.io/"/>
  <updated>2022-12-07T17:17:01.975Z</updated>
  <id>https://codexiaobo.github.io/</id>
  
  <author>
    <name>xiaobo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQl高级进阶四</title>
    <link href="https://codexiaobo.github.io/posts/691987327/"/>
    <id>https://codexiaobo.github.io/posts/691987327/</id>
    <published>2022-12-07T17:14:11.000Z</published>
    <updated>2022-12-07T17:17:01.975Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221208005212.4jdrhszoy6w0.webp" alt="微信图片_20221208005212"></p><!--sleep--><span id="more"></span><h1 id="MySQL高级进阶"><a href="#MySQL高级进阶" class="headerlink" title="MySQL高级进阶"></a>MySQL高级进阶</h1><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>explain关键字可以模拟MySQL优化器执行SQL语句，可以很好的分析SQL语句或表结构的性能瓶颈</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` </span><br></pre></td></tr></table></figure><table><thead><tr><th>列</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</td></tr><tr><td>select_type</td><td>查询类型</td></tr><tr><td>table</td><td>正在访问哪个表</td></tr><tr><td>partitions</td><td>匹配的分区</td></tr><tr><td>type</td><td>访问的类型</td></tr><tr><td>possible_keys</td><td>显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到</td></tr><tr><td>key</td><td>实际使用到的索引，如果为NULL，则没有使用索引</td></tr><tr><td>key_len</td><td>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度</td></tr><tr><td>ref</td><td>显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值</td></tr><tr><td>rows</td><td>根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数 filtered 查询的表行占表的百分比</td></tr><tr><td>filtered</td><td>查询的表行占表的百分比</td></tr><tr><td>Extra</td><td>包含不适合在其它列中显示但十分重要的额外信息</td></tr></tbody></table><h4 id="id字段"><a href="#id字段" class="headerlink" title="id字段"></a>id字段</h4><p>select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</p><ul><li>id如果相同，可以认为是一组，执行顺序从上至下</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student s, scores sc <span class="keyword">where</span> s.id <span class="operator">=</span> sc.s_id</span><br></pre></td></tr></table></figure><ul><li> 如果是子查询，id的序号会递增，id的值越大优先级越高，越先被执行例子</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">select</span> age <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xiaobo&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>id如果相同，可以认为是一组，从上往下顺序执行在所有组中，id值越大，优先级越高，越先执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">explain </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student s, score sc <span class="keyword">where</span> s.id <span class="operator">=</span> sc.s_id</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student s, score sc <span class="keyword">where</span> s.id <span class="operator">=</span> sc.s_id;</span><br></pre></td></tr></table></figure><h4 id="select-type字段"><a href="#select-type字段" class="headerlink" title="select_type字段"></a>select_type字段</h4><ul><li>SIMPLE</li></ul><p>简单查询，不包含子查询或Union查询的sql语句</p><ul><li>PRIMARY</li></ul><p>查询中若包含任何复杂的子部分，最外层查询则被标记为主查询</p><ul><li>SUBQUERY</li></ul><p>在select或where中包含子查询</p><ul><li>UNION</li></ul><p>若第二个select出现在uion之后，则被标记为UNION</p><ul><li>UNION RESULT</li></ul><p>从UNION表获取结果的合并操作</p><h4 id="type字段"><a href="#type字段" class="headerlink" title="type字段"></a>type字段</h4><ul><li>NULL</li></ul><p>MySQL能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="built_in">min</span>(id) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><ul><li>system</li></ul><p>表只有一行记录（等于系统表），这是const类型的特列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.proxies_priv</span><br></pre></td></tr></table></figure><ul><li>const</li></ul><p>const用于比较primary key或uique索引，因为只匹配一行数据，所以很快，如主键置于where列表中，MySQL就能将该查询转换为一个常量例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>eq_ref</li></ul><p>唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见于主键或唯一索引扫描</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> scores sc <span class="keyword">left</span> <span class="keyword">join</span> student s <span class="keyword">on</span> s.id <span class="operator">=</span> sc.s_id</span><br></pre></td></tr></table></figure><ul><li>ref</li></ul><p>非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问，返回所有匹配某个单独值的行，然而可能会找到多个符合条件的行，应该属于查找和扫描的混合体</p><ul><li>ref_or_null</li></ul><p>类似ref，但是可以搜索值为NULL的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student s <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xiaobo&#x27;</span> <span class="keyword">or</span> name <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><ul><li>index_merge</li></ul><p>表示使用了索引合并的优化方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> name <span class="operator">=</span><span class="string">&#x27;xiaobo&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>range</li></ul><p>检索给定范围的行，使用一个索引来选择行，key列显示使用了哪个索引一般就是在你的where语句中出现between、&lt;&gt;、in等的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><ul><li>index（全索引扫描）</li></ul><p>Full index Scan，Index与All区别：index只遍历索引树，通常比All快因为索引文件通常比数据文件小，也就是虽然all和index都是读全表，但index是从索引中读取的，而all是从硬盘读的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> name <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><ul><li>ALL（全表扫）</li></ul><p>Full Table Scan，将遍历全表以找到匹配行</p><h4 id="table字段"><a href="#table字段" class="headerlink" title="table字段"></a>table字段</h4><p>表示数据来自哪张表</p><h4 id="possible-keys字段"><a href="#possible-keys字段" class="headerlink" title="possible_keys字段"></a>possible_keys字段</h4><p>显示可能应用在这张表中的索引，一个或多个查询涉及到的字段若存在索引，则该索引将被列出，但不一定被实际使用</p><h4 id="key字段"><a href="#key字段" class="headerlink" title="key字段"></a>key字段</h4><p>实际使用到的索引，如果为NULL，则没有使用索引查询中若使用了覆盖索引（查询的列刚好是索引），则该索引仅出现在key列表</p><h4 id="key-len字段"><a href="#key-len字段" class="headerlink" title="key_len字段"></a>key_len字段</h4><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度在不损失精确度的情况下，长度越短越好key_len显示的值为索引字段最大的可能长度，并非实际使用长度即key_len是根据定义计算而得，不是通过表内检索出的</p><h4 id="ref字段"><a href="#ref字段" class="headerlink" title="ref字段"></a>ref字段</h4><p>哪些列或常量被用于查找索引列上的值</p><h4 id="rows字段"><a href="#rows字段" class="headerlink" title="rows字段"></a>rows字段</h4><p>根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数</p><h4 id="partitions字段"><a href="#partitions字段" class="headerlink" title="partitions字段"></a>partitions字段</h4><p>匹配的分区</p><h4 id="filtered字段"><a href="#filtered字段" class="headerlink" title="filtered字段"></a>filtered字段</h4><p>返回结果的行占需要读到的行(rows列的值)的百分比</p><h4 id="Extra字段"><a href="#Extra字段" class="headerlink" title="Extra字段"></a>Extra字段</h4><ul><li>Using filesort</li></ul><p>只要使用非索引字段排序</p><ul><li>Using temporary</li></ul><p>使用了临时表保存中间结果，MySQL在对结果排序时使用临时表，常见于排序order by 和分组查询group by</p><ul><li>Using where</li></ul><p>使用了where条件</p><ul><li>impossible where</li></ul><p>where子句的值总是false，不能用来获取任何数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xiaobo&#x27;</span> <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">&#x27;pangzi&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>Select tables optimized away</li></ul><p>SELECT操作已经优化到不能再优化了（MySQL根本没有遍历表或索引就返回数据了）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="built_in">min</span>(id) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><ul><li>no matching row in const table</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">100</span> <span class="keyword">and</span> id <span class="operator">&gt;</span> <span class="number">200</span>;</span><br></pre></td></tr></table></figure><h3 id="索引问题"><a href="#索引问题" class="headerlink" title="索引问题"></a>索引问题</h3><h4 id="哪些情况适合建索引"><a href="#哪些情况适合建索引" class="headerlink" title="哪些情况适合建索引"></a>哪些情况适合建索引</h4><ul><li><p>频繁作为where条件语句查询的字段</p></li><li><p>关联字段需要建立索引</p></li><li><p>分组，排序字段可以建立索引</p></li><li><p>统计字段可以建立索引，例如count()，max()</p></li></ul><h4 id="哪些情况不适合建索引"><a href="#哪些情况不适合建索引" class="headerlink" title="哪些情况不适合建索引"></a>哪些情况不适合建索引</h4><ul><li><p>频繁更新的字段不适合建立索引</p></li><li><p>where条件中用不到的字段不适合建立索引</p></li><li><p>表数据可以确定比较少的不需要建索引</p></li><li><p>数据重复且发布比较均匀的的字段不适合建索引（唯一性太差的字段不适合建立索引），例如性别，真假值</p></li><li><p>参与列计算的列不适合建索引，索引会失效</p></li></ul><h4 id="能用复合索引的要使用复合索引"><a href="#能用复合索引的要使用复合索引" class="headerlink" title="能用复合索引的要使用复合索引"></a>能用复合索引的要使用复合索引</h4><h4 id="null值也是可以走索引的，他被处理成最小值放在b-树的最左侧"><a href="#null值也是可以走索引的，他被处理成最小值放在b-树的最左侧" class="headerlink" title="null值也是可以走索引的，他被处理成最小值放在b+树的最左侧"></a>null值也是可以走索引的，他被处理成最小值放在b+树的最左侧</h4><h4 id="使用短索引"><a href="#使用短索引" class="headerlink" title="使用短索引"></a>使用短索引</h4><p>字符串的列创建索引，如果可能，应该指定一个前缀长度。例如，如果有一个CHAR(255)的 列，如果在前10 个或20 个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作</p><h4 id="排序的索引问题"><a href="#排序的索引问题" class="headerlink" title="排序的索引问题"></a>排序的索引问题</h4><p>mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要，最好给这些列创建复合索引</p><h4 id="MySQL索引失效的情况"><a href="#MySQL索引失效的情况" class="headerlink" title="MySQL索引失效的情况"></a>MySQL索引失效的情况</h4><ul><li><p>如果条件中有or，即使其中有条件带索引也不会使用走索引，除非全部条件都有索引</p></li><li><p>复合索引不满足最左原则就不能使用全部索引</p></li><li><p>like查询以%开头</p></li><li><p>存在列计算</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 索引生效</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">=</span> (<span class="number">23</span><span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全表扫描</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="number">-1</span> <span class="operator">=</span> <span class="number">22</span></span><br></pre></td></tr></table></figure><ul><li><p>如果mysql估计使用全表扫描要比使用索引快，则不使用索引，比如结果的量很大</p></li><li><p>存在类型转化</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 索引不失效</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">=</span> <span class="string">&#x27;22&#x27;</span>  </span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ydl_user <span class="keyword">where</span> login_date <span class="operator">=</span> <span class="string">&#x27;2001-05-28 5:20:00&#x27;</span></span><br><span class="line"><span class="comment">-- 索引失效 本来是字符串，你使用数字和他比较</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> gander <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h2><h3 id="InnoDB锁类型"><a href="#InnoDB锁类型" class="headerlink" title="InnoDB锁类型"></a>InnoDB锁类型</h3><h4 id="s锁"><a href="#s锁" class="headerlink" title="s锁"></a>s锁</h4><p>读锁（共享锁，shared lock）简称S锁。一个事务获取了一个数据行的读锁，其他事务也能获得该行对应的读锁，但不能获得写锁，即一个事务在读取一个数据行时，其他事务也可以读，但不能对该数行增删改的操作</p><p>大白话：可以多个事务读，但只能一个事务写</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/s%E9%94%811.4r4pn3bkdle0.webp" alt="s锁1"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/s%E9%94%812.67nbi7ld38c0.webp" alt="s锁2"></p><h4 id="x锁"><a href="#x锁" class="headerlink" title="x锁"></a>x锁</h4><p>写锁，也叫排他锁，或者叫独占所，简称x锁（exclusive）。一个事务获取了一个数据行的写锁，既可以读该行的记录，也可以修改该行的记录。但其他事务就不能再获取该行的其他任何的锁，包括s锁，直到当前事务将锁释放，保证了其他事务在当前事务释放锁之前不能再修改数据</p><p>大白话：写锁是独占锁，只有一个事务可以持有，当这个事务持有写锁时，被锁的数据就不能被其他事务修改</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/X%E9%94%811.1t170tg3rz5s.webp" alt="X锁1"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/X%E9%94%812.1cm45w5omf5s.webp" alt="X锁2"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/for-update%E7%9A%84x%E9%94%811.4lfih7hl8d80.webp" alt="for-update的x锁1"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/for-update%E7%9A%84x%E9%94%812.5lccfys7oyw0.webp" alt="for-update的x锁2"></p><h4 id="记录锁（Record-Lock）"><a href="#记录锁（Record-Lock）" class="headerlink" title="记录锁（Record Lock）"></a>记录锁（Record Lock）</h4><p>记录锁，只有innodb才支持，行锁是加在索引上的，这是标准的行级锁</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E8%AE%B0%E5%BD%95%E9%94%811-1.6hffd8sx90w0.webp" alt="记录锁1-1"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E8%AE%B0%E5%BD%95%E9%94%811-2.5a86rkited00.webp" alt="记录锁1-2"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E8%AE%B0%E5%BD%95%E9%94%812-1.3vd8zptg4g40.webp" alt="记录锁2-1"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E8%AE%B0%E5%BD%95%E9%94%812-2.45avcvh5igs0.webp" alt="记录锁2-2"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E8%AE%B0%E5%BD%95%E9%94%813-1.3x016hyfahk0.webp" alt="记录锁3-1"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E8%AE%B0%E5%BD%95%E9%94%814-1.cvs5codageg.webp" alt="记录锁4-1"></p><p>记录锁是行锁，行锁是加在索引上的，这是标准的行级锁</p><h4 id="间隙锁（GAP-Lock）"><a href="#间隙锁（GAP-Lock）" class="headerlink" title="间隙锁（GAP Lock）"></a>间隙锁（GAP Lock）</h4><p>间隙锁帮我们解决了mysql在rr级别下的一部分幻读问题。间隙锁锁定的是记录范围，不包含记录本身，也就是不允许在某个范围内插入数据</p><blockquote><p>条件</p></blockquote><p>A事务使用where进行范围检索时未提交事务，此时B事务向A满足检索条件的范围内插入数据</p><p>where条件必须有索引</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E9%97%B4%E9%9A%99%E9%94%811-1.547kf01okds0.webp" alt="间隙锁1-1"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E9%97%B4%E9%9A%99%E9%94%811-2.13w43oejuheo.webp" alt="间隙锁1-2"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E9%97%B4%E9%9A%99%E9%94%812.5xwl9phu8hw0.webp" alt="间隙锁2"></p><h4 id="记录锁和间隙锁的组合（next-key-lock）"><a href="#记录锁和间隙锁的组合（next-key-lock）" class="headerlink" title="记录锁和间隙锁的组合（next-key lock）"></a>记录锁和间隙锁的组合（next-key lock）</h4><p>记录锁与间隙锁的组合，它的封锁范围，既包含索引记录，又包含索引区间</p><p>临键锁是为了避免幻读，如果把事务的隔离级别降级为RC，临键锁则也会失效</p><h4 id="MDL锁"><a href="#MDL锁" class="headerlink" title="MDL锁"></a>MDL锁</h4><p>用于保证表中元数据的信息，在会话A中，表开启了查询事务后，会自动获得一个MDL锁，会话B就不可以执行任何DDL语句，不能执行为表中添加字段的操作，会用MDL锁来保证数据之间的一致性</p><p>元数据就是描述数据的数据，也就是你的表结构，在你开启了事务之后获得了意向锁，其他事务就不能更改你的表结构，MDL锁都是为了防止在事务进行中，执行DDL语句导致数据不一致</p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><blockquote><p>死锁必要条件</p></blockquote><ul><li><p><code>互斥条件</code>，在一段时间内，计算机中的某个资源只能被一个进程占用。此时，如果其他进程请求该资源，则只能等待</p></li><li><p><code>不可剥夺条件</code>，某个进程获得的资源在使用完毕之前，不能被其他进程强行夺走，只能由获得资源的进程主动释放</p></li><li><p><code>请求与保持条件</code>，进程已经获得了至少一个资源，又要请求其他资源，但请求的资源已经被其他进程占有，此时请求的进程就会被阻塞，并且不会释放自己已获得的资源</p></li><li><p><code>循环等待条件</code>，系统中的进程之间相互等待，同时各自占用的资源又会被下一个进程所请求</p></li></ul><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E6%AD%BB%E9%94%81.7gpbf0vij200.webp" alt="死锁"></p><blockquote><p>避免死锁</p></blockquote><ul><li><p>尽量让数据表中的数据检索都通过索引来完成，避免无效索引导致行锁升级为表锁</p></li><li><p>合理设计索引，尽量缩小锁的范围</p></li><li><p>尽量减少查询条件的范围，尽量避免间隙锁或缩小间隙锁的范围</p></li><li><p>尽量控制事务的大小，减少一次事务锁定的资源数量，缩短锁定资源的时间。如果一条SQL语句涉及事务加锁操作，则尽量将其放在整个事务的最后执行</p></li></ul><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><blockquote><p>特殊事务中，考虑使用表级锁</p></blockquote><ul><li><p>事务需要更新大部分或全部数据，表又比较大，如果使用默认的行锁，不仅这个事务执行效率低，而且可能造成其他事务长时间锁等待和锁冲突</p></li><li><p>事务涉及多个表，比较复杂，很可能引起死锁，造成大量事务回滚。这种情况也可以考虑一次性锁定事务涉及的表，从而避免死锁、减少数据库因事务回滚带来的开销</p></li></ul><h4 id="表锁语法"><a href="#表锁语法" class="headerlink" title="表锁语法"></a>表锁语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lock tables teacher write,student read;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">unlock tables;</span><br></pre></td></tr></table></figure><h4 id="表锁注意事项"><a href="#表锁注意事项" class="headerlink" title="表锁注意事项"></a>表锁注意事项</h4><ul><li><p>使用LOCK TALBES虽然可以给InnoDB加表级锁，但必须说明的是，表锁不是由InnoDB存储引擎层管理的，而是由其上一层ＭySQL Server负责的，仅当autocommit=0、innodb_table_lock=1（默认设置）时，InnoDB层才能感知MySQL加的表锁，ＭySQL Server才能感知InnoDB加的行锁，这种情况下，InnoDB才能自动识别涉及表级锁的死锁；否则，InnoDB将无法自动检测并处理这种死锁</p></li><li><p>LOCAK TABLES对InnoDB加锁时要注意，事务结束前，不要用UNLOCAK TABLES释放表锁，因为UNLOCK TABLES会隐含地提交事务；COMMIT或ROLLBACK不能释放用LOCAK TABLES加的表级锁，必须用UNLOCK TABLES释放表锁</p></li><li><p>表锁的力度很大</p></li></ul><h3 id="特殊分类的锁"><a href="#特殊分类的锁" class="headerlink" title="特殊分类的锁"></a>特殊分类的锁</h3><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>乐观锁基于<code>数据版本记录机制</code>实现，一般是给数据库表增加一个<code>version</code>字段</p><p>读取数据时，将此版本号读出，更新时，对此版本号加一。此时将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E4%B9%90%E8%A7%82%E9%94%81.6jfi3adog980.webp" alt="乐观锁"></p><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>悲观锁依靠数据库提供的锁机制实现。MySQL中的共享锁和排它锁都是悲观锁。数据库的增删改操作默认都会加排他锁，而查询不会加任何锁</p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221208005212.4jdrhszoy6w0.webp&quot; alt=&quot;微信图片_20221208005212&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="mysql" scheme="https://codexiaobo.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL高级进阶三</title>
    <link href="https://codexiaobo.github.io/posts/1926493212/"/>
    <id>https://codexiaobo.github.io/posts/1926493212/</id>
    <published>2022-12-06T14:23:54.000Z</published>
    <updated>2022-12-06T14:25:24.395Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%98%A8%E5%A4%A9%E6%A2%A6%E9%87%8C.3dw2byuyxq40.webp" alt="昨天梦里"></p><!--sleep--><span id="more"></span><h1 id="MySQL高级进阶"><a href="#MySQL高级进阶" class="headerlink" title="MySQL高级进阶"></a>MySQL高级进阶</h1><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>这里我们先创建一个有量级的表数据，否则体现不出来索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`  (</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  `user_name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户账号&#x27;</span>,</span><br><span class="line">  `nick_name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户邮箱&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">char</span>(<span class="number">1</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;用户性别（0男 1女 2未知）&#x27;</span>,</span><br><span class="line">  `avatar` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;头像地址&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `login_ip` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后登录IP&#x27;</span>,</span><br><span class="line">  `login_date` datetime <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最后登录时间&#x27;</span>,</span><br><span class="line">   `text` text <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci COMMENT <span class="string">&#x27;测试文本&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`user_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">2</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;用户信息表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure><ul><li>nodejs脚本</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Mock</span></span><br><span class="line"><span class="keyword">var</span> Mock = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>)</span><br><span class="line"><span class="comment">// mysql8.0需要执行下边的sql，否则nodejs不支持</span></span><br><span class="line"><span class="comment">// ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;xiaobo&#x27;;</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="comment">// 定义连接池</span></span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;127.0.0.1&quot;</span>, <span class="comment">// 主机地址</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&quot;test&quot;</span>, <span class="comment">// 数据库名字</span></span><br><span class="line">    <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>, <span class="comment">// 连接数据库的用户名</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;xiaobo&quot;</span>, <span class="comment">// 连接数据库密码</span></span><br><span class="line">    <span class="attr">connectionLimit</span>: <span class="number">30</span>, <span class="comment">// 连接池最大连接数</span></span><br><span class="line">    <span class="attr">multipleStatements</span>: <span class="literal">true</span> <span class="comment">// 允许执行多条sql语句</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">connection</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 使用mock.js模拟数据</span></span><br><span class="line">        <span class="keyword">var</span> user = Mock.mock(&#123;</span><br><span class="line">            <span class="attr">userName</span>: Mock.mock(<span class="string">&#x27;@name(true)&#x27;</span>),</span><br><span class="line">            <span class="attr">nickName</span>: Mock.mock(<span class="string">&#x27;@cname()&#x27;</span>),</span><br><span class="line">            <span class="attr">email</span>: Mock.mock(<span class="string">&#x27;@email()&#x27;</span>),</span><br><span class="line">            <span class="attr">sex</span>: <span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> ? <span class="string">&#x27;男&#x27;</span> : <span class="string">&#x27;女&#x27;</span>,</span><br><span class="line">            <span class="attr">loginIp</span>: Mock.mock(<span class="string">&#x27;@ip()&#x27;</span>),</span><br><span class="line">            <span class="attr">loginDate</span>: Mock.mock(<span class="string">&#x27;@datetime()&#x27;</span>),</span><br><span class="line">            <span class="attr">password</span>: Mock.mock(<span class="string">&#x27;@word(5, 10)&#x27;</span>),</span><br><span class="line">            <span class="attr">avatar</span>: Mock.mock(<span class="string">&#x27;@url()&#x27;</span>),</span><br><span class="line">            <span class="attr">text</span>: Mock.mock(<span class="string">&#x27;@cparagraph(30)&#x27;</span>),</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次存入1000条</span></span><br><span class="line">        <span class="keyword">let</span> insertData = <span class="string">&#x27;(&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> user) &#123;</span><br><span class="line">            insertData += <span class="string">&#x27;\&#x27;&#x27;</span> + user[key] + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;,&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        insertData = insertData.substring(<span class="number">0</span>, insertData.length - <span class="number">1</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        content += insertData + <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    content = content.substring(<span class="number">0</span>, content.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> sql = <span class="string">`insert into user (user_name,</span></span><br><span class="line"><span class="string">        nick_name,email,sex,login_ip,login_date,password,avatar,text) values</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;content&#125;</span>`</span>;</span><br><span class="line">    connection.query(sql);</span><br><span class="line">    connection.release();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环60000万次，总计能插入600万条</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">60000</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line">    </span><br><span class="line">    pool.getConnection(<span class="function"><span class="keyword">function</span> (<span class="params">err, connection</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        insert(connection)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;第&#x27;</span>+i+<span class="string">&#x27;条sql执行成功！&#x27;</span>)</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查询对比</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `<span class="keyword">user</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">1097</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/count.15ilnmo72yv4.webp" alt="count"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/id%E7%B4%A2%E5%BC%95.zwuk2mb7dnk.webp" alt="id索引"></p><h3 id="Innodb的b-树数据结构"><a href="#Innodb的b-树数据结构" class="headerlink" title="Innodb的b+树数据结构"></a>Innodb的b+树数据结构</h3><p>innodb中的数据是以<code>行</code>为单位，存在一个个大小为16k的<code>页</code>中，b+树的作用就是按照一个组织形式，将所有的<code>页</code>组织关联起来</p><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>B表示balance(平衡)，B树是一种<code>多路自平衡的搜索树</code>，它类似普通的平衡二叉树，不同的一点是B树允许每个节点有更多的子节点</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/B%E6%A0%91.2ia0n40pzbk0.webp" alt="B树"></p><h4 id="B树的特点"><a href="#B树的特点" class="headerlink" title="B树的特点"></a>B树的特点</h4><p>所有键值分布在整颗树中</p><p>任何一个关键字出现且只出现在一个结点中</p><p>搜索有可能在非叶子结点结束</p><p>在关键字全集内做一次查找，性能接近二分查找</p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>一种多路搜索树</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/B+%E6%A0%91.4dy460y12xe0.webp" alt="B+树"></p><h4 id="B树-VS-B-树"><a href="#B树-VS-B-树" class="headerlink" title="B树 VS B+树"></a>B树 VS B+树</h4><ul><li>相同点</li></ul><p>都是一种多路搜索树</p><ul><li>不同点</li></ul><p>B+树所有关键字存储在叶子节点</p><p>B+树为所有叶子结点增加了一个双向指针</p><h4 id="选型缘由"><a href="#选型缘由" class="headerlink" title="选型缘由"></a>选型缘由</h4><blockquote><p>为什么选择b树或b+树</p></blockquote><ul><li><p>mysql数据模型更适合用这类数据结构，一条数据中通常包含id和其他列数据，我们可以很轻松的根据id组织一颗B+树</p></li><li><p>innodb使用页保存数据，一页（16k）b+树中的每个节点都是一页数据</p></li></ul><blockquote><p>为什么选择B+树？</p></blockquote><ul><li><p>相同的空间，不存放整行数据就能存更多的id，b+树能使每个节点能检索的范围更大、更精确，极大的减少了I/O操作，保证b+树的层高较低，通常3到4层的层高就能支持百万级别的访问</p></li><li><p>Mysql是一种关系型数据库，<code>区间访问</code>是很常见的一种情况，B+树叶节点增加的双向指针，加强了区间访问性，可使用在范围区间查询的情况</p></li></ul><h3 id="索引发现"><a href="#索引发现" class="headerlink" title="索引发现"></a>索引发现</h3><p>当我们使用非id列作为条件是发现会很慢，所以我们构建主节点按照属性排序，在叶子节点中只保存id而不保存全部数据，查到id后再回表（回到原来的结构中根据id进行查询）查询整条记录，这就是创建的<code>索引</code></p><h3 id="索引的分类和创建"><a href="#索引的分类和创建" class="headerlink" title="索引的分类和创建"></a>索引的分类和创建</h3><h4 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h4><p>主键和数据共存的索引被称之为聚簇索引，同时聚簇索引只有在innodb引擎中才存在，而在myIsam中是不存在的</p><p>聚簇索引默认使用主键，如果表中没有定义主键，InnoDB 会选择一个唯一且非空的列代替。如果没有这样的列，InnoDB会隐式定义一个主键rowid来作为聚簇索引的列</p><h4 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h4><p>其他列+主键建立的索引，可以称为非聚簇索引/辅助索引/二级索引</p><p>MyIsam使用的是非聚簇索引，非聚簇索引的两棵B+树看上去没什么不同，节点的结构完全一致只是存储的内容不同而已，主键索引B+树的节点存储了主键，辅助键索引B+树存储了辅助列。表数据存储在独立的地方，这两颗B+树的叶子节点都使用一个<code>地址指向真正的表数据</code>，对于表数据来说，这两个键没有任何差别。由于索引树是独立的，通过辅助键检索无需访问主键的索引树</p><p>如果涉及到大数据量的排序、全表扫描、count之类的操作的话，还是MyIsam占优势些，因为索引所占空间小，这些操作是需要在内存中完成的</p><blockquote><p>主键为什么建议使用自增id?</p></blockquote><ul><li><p>主键最好不要使用uuid，因为uuid的值太过离散，不适合排序且可能出现新增加记录的uuid，会插入在索引树中间的位置，出现页分裂，导致索引树调整复杂度变大，消耗更多的时间和资源</p></li><li><p>聚簇索引的数据的物理存放顺序与索引顺序是一致的，即：只要索引是相邻的，那么对应的数据一定也是相邻地存放在磁盘上的。如果主键不是自增id，它会不断地调整数据的物理地址、分页，当然也有其他一些措施来减少这些操作，但却无法彻底避免。但如果是自增的id，它只需要一页一页地写，索引结构相对紧凑，磁盘碎片少，效率也高</p></li></ul><h4 id="普通索引（normal）"><a href="#普通索引（normal）" class="headerlink" title="普通索引（normal）"></a>普通索引（normal）</h4><blockquote><p>创建索引</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_user_name <span class="keyword">on</span> <span class="keyword">user</span>(user_name);</span><br></pre></td></tr></table></figure><p>创建索引很费时间</p><blockquote><p>删除索引</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index idx_user_name <span class="keyword">on</span> <span class="keyword">user</span>; </span><br></pre></td></tr></table></figure><blockquote><p>修改表的方式添加索引</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> index idx_email (email);</span><br></pre></td></tr></table></figure><blockquote><p>创建表时同时创建索引</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_name(</span><br><span class="line">    tid <span class="type">int</span>,</span><br><span class="line">    tname <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    gender <span class="type">varchar</span>(<span class="number">1</span>),</span><br><span class="line">    index [索引的名字] (字段) </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="唯一索引（UNIQUE）"><a href="#唯一索引（UNIQUE）" class="headerlink" title="唯一索引（UNIQUE）"></a>唯一索引（UNIQUE）</h4><p>索引列的值不能重复</p><blockquote><p>创建表的同时创建索引</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_name(</span><br><span class="line">    tid <span class="type">int</span>,</span><br><span class="line">    tname <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    gender <span class="type">varchar</span>(<span class="number">1</span>),</span><br><span class="line">    <span class="keyword">unique</span> index unique_index_tname (tname)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>单独创建索引</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_email <span class="keyword">on</span> <span class="keyword">user</span>(email);</span><br></pre></td></tr></table></figure><blockquote><p>修改的方式创建索引</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> 表名 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [索引名字] (字段)</span><br></pre></td></tr></table></figure><p><strong>唯一索引 VS 主键</strong></p><ul><li><p>唯一索引列允许空值，而主键列不允许为空值</p></li><li><p>主键列在创建时，已经默认为非空值 + 唯一索引了</p></li><li><p>主键可以被其他表引用为外键，而唯一索引不能</p></li><li><p>一个表最多只能创建一个主键，但可以创建多个唯一索引</p></li><li><p>主键更适合那些不容易更改的唯一标识，如自动递增列、身份证号等</p></li></ul><p><strong>唯一索引 VS 唯一约束</strong></p><ul><li><p>唯一约束和唯一索引，都可以实现列数据的唯一，列值可以为null</p></li><li><p>创建唯一约束，会自动创建一个同名的唯一索引，该索引不能单独删除，删除约束会自动删除索引。唯一约束是通过唯一索引来实现数据唯一</p></li><li><p>创建一个唯一索引，这个索引就是独立的索引，可以单独删除</p></li><li><p>如果一个列上想有约束和索引，且两者可以单独的删除。可以先建唯一索引，再建同名的唯一约束</p></li></ul><h4 id="多个二级索引的组合"><a href="#多个二级索引的组合" class="headerlink" title="多个二级索引的组合"></a>多个二级索引的组合</h4><p>mysql在执行查询语句的时候一般只会使用一个索引，除非是使用or连接的两个索引列会产生索引合并</p><p><strong>以三个索引，三个字段分别为品牌、价格、销量举例</strong></p><ul><li>检索品牌为小米的手机</li></ul><p>通过品牌索引检索出所有小米的商品id，回表查询，得到结果，会使用一个索引</p><ul><li>检索名称为小米，价格在一千到三千之间的手机</li></ul><p>通过品牌索引检索出所有小米的商品id</p><p>直接回表扫描，根据剩余条件检索结果</p><p>只会使用第一个索引</p><ul><li>我们要检索名称为小米，价格为6800，且销量在50以上的手机</li></ul><p>通过品牌索引检索出所有小米的商品id</p><p>直接回表扫描，根据剩余条件检索结果</p><p>只会使用第一个索引</p><ul><li>检索名称为小米或名称为华为的手机</li></ul><p>通过【品牌索引】检索出所有阿玛尼的商品id，得到结果</p><p>or相当于一个in关键字，会使用一个索引</p><ul><li>检索名称为小米或价格大于8000的手机</li></ul><p>通过品牌索引检索出所有小米的商品id</p><p>通过价格索引检索出价格大于8000的商品id，和上一步的结果进行并集，得到结果</p><p>这个过程叫索引合并，当检索条件有or但是所有的条件都有索引时，索引不失效，可以走两个索引</p><ul><li>检索名称为小米，且价格大于8000，且产地（该列无索引）在大连的手机</li></ul><p>通过品牌索引检索出所有小米的商品id</p><p>直接回表扫描，根据剩余条件检索结果</p><p>只会使用第一个索引</p><ul><li>检索名称为小米或价格大于8000，或产地（该列无索引）在大连的手机</li></ul><p>关联条件是or，无索引，发生全表扫描，索引失效</p><h4 id="复合索引-联合索引"><a href="#复合索引-联合索引" class="headerlink" title="复合索引/联合索引"></a>复合索引/联合索引</h4><p>当查询语句中包含多个查询条件，且查询的顺序基本保持一致时使用</p><ul><li>按照A列、B列、C列进行查询时</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert <span class="keyword">table</span> 表名 <span class="keyword">add</span> 索引名 <span class="keyword">table</span> (a,b,c) </span><br></pre></td></tr></table></figure><p>复合索引可以想象成字典目录，你看假如目录都是四字成语 你查第一个字有多少页，然后前两个字又有多少页，你推理一下</p><table><thead><tr><th>品牌</th><th>价格</th><th>销量</th><th>id</th></tr></thead><tbody><tr><td>xiaomi</td><td>6800</td><td>35</td><td>13,24,76</td></tr><tr><td>xiaomi</td><td>6900</td><td>35</td><td>1,23,74</td></tr><tr><td>xiaomi</td><td>7000</td><td>100</td><td>15,21,26</td></tr><tr><td>xiaomi</td><td>7100</td><td>50</td><td>73,54,46</td></tr><tr><td>huawei</td><td>8000</td><td>100</td><td>243,224,766</td></tr><tr><td>apple</td><td>9000</td><td>110</td><td>1123,212,126</td></tr><tr><td>apple</td><td>9500</td><td>120</td><td>1633,1234,76123</td></tr><tr><td>apple</td><td>10000</td><td>130</td><td>13453,21324,3276</td></tr><tr><td>sanxing</td><td>9000</td><td>150</td><td>13745,22344,2136</td></tr></tbody></table><ul><li>检索名称为小米的手机</li></ul><p>通过品牌索引检索出所有小米的商品id，回表查询，得到结果</p><p>使用第一部分索引</p><ul><li>检索名称为小米，价格在七千到八千之间的手机</li></ul><p>通过品牌索引检索出所有小米的叶子节点</p><p>在满足上一步条件的叶子节点中查询价格在七千到八千之间的手机的列，查询出对应的id，回表查询列数据</p><p>使用复合索引的两个部分</p><ul><li>检索名称为小米或价格大于8000的手机</li></ul><p>优化器发现我们并没有一个价格列的单独的二级索引，此时要查询价格大于8000的手机，必须进行全表扫描</p><p>查询的条件中没有复合索引的第一部分，索引直接失效，全表扫描</p><ul><li>检索名称为小米，且价格大于7000，且产地（该列无索引）在北京的手机</li></ul><p>通过品牌索引检索出所有小米的叶子节点</p><p>在满足上一步条件的叶子节点中查询价格大于7000元的小米的叶子节点</p><p>因为产地列无索引，但是and的关系，我们只需要将上一步得到的结果回表查询，在这个很小的范围内，检索产地是不是北京即可</p><p>使用复合索引的两个部分</p><ul><li>检索名称为小米和apple之间，价格为在七千到九千的手机</li></ul><p>通过品牌索引检索出所有小米和apple的所有叶子节点</p><p>快速定位价格的范围，但是发现一个问题，由于第一步不是等值查询，会导致后边的结果不连续，必须对上一步的结果全部遍历，拿到对应的结果</p><p><strong>最左前缀原则</strong></p><ul><li><p>mysql会一直向右匹配直到遇到范围查询（&gt;、&lt;、between、like）就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 ，如果建立（a,b,c,d）顺序的联合索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整</p></li><li><p>=和in可以乱序，比如a = 1 and b &lt; 2 and c = 3 ，咱们建立的索引就可以是（a,c,b）或者（c,a,b）</p></li></ul><h4 id="全文索引（FULLTEXT）"><a href="#全文索引（FULLTEXT）" class="headerlink" title="全文索引（FULLTEXT）"></a>全文索引（FULLTEXT）</h4><p>只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引</p><blockquote><p>创建表时创建全文索引</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ydlclass_user (    </span><br><span class="line">    ..   </span><br><span class="line">    FULLTEXT KEY fulltext_text(text)  </span><br><span class="line">) </span><br></pre></td></tr></table></figure><blockquote><p>单独创建全文索引</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> fulltext index fulltext_text  <span class="keyword">on</span> ydlclass_user(text);</span><br></pre></td></tr></table></figure><blockquote><p>修改的方式创建全文索引</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> ydlclass_user <span class="keyword">add</span> fulltext index fulltext_text(text);</span><br></pre></td></tr></table></figure><blockquote><p>删除全文索引</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index fulltext index <span class="keyword">on</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><blockquote><p>全文检索的语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">match</span>(text) against(<span class="string">&#x27;人民万岁&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="hash索引"><a href="#hash索引" class="headerlink" title="hash索引"></a>hash索引</h4><ul><li><p>hash是一种key-value形式的数据结构。实现一般是数组+链表的结构，通过hash函数计算出key在数组中的位置，然后如果出现hash冲突就通过链表来解决。系统使用HashMap来构建热点数据缓存，存取效率很好</p></li><li><p>即使是相近的key，hash的取值也完全没有规律，索引hash索引不支持范围查询</p></li><li><p>hash索引存储的是hash值和行指针，所以通过hash索引查询数据需要进行两次查询,首先查询行的位置，然后找到具体的数据</p></li><li><p>hash索引查询数据的前提就是计算hash值，也就是要求key为一个能准确指向一条数据的key，所以对于like等一类的匹配查询是不支持的</p></li><li><p>只要是只需要做等值比较查询，而不包含排序或范围查询的需求，都适合使用哈希索引</p></li></ul><p><strong>将表的数据加载到内存</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> hash_user <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> user_id <span class="operator">&lt;</span> <span class="number">2000000</span>;</span><br></pre></td></tr></table></figure><p><strong>mysql配置文件中可对其进行内存大小的配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmp_table_size = 4096M</span><br><span class="line">max_heap_table_size = 4096M</span><br></pre></td></tr></table></figure><h4 id="空间索引（SPATIAL）"><a href="#空间索引（SPATIAL）" class="headerlink" title="空间索引（SPATIAL）"></a>空间索引（SPATIAL）</h4><p>在地理位置领域使用的一种索引</p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%98%A8%E5%A4%A9%E6%A2%A6%E9%87%8C.3dw2byuyxq40.webp&quot; alt=&quot;昨天梦里&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="mysql" scheme="https://codexiaobo.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL进阶 二</title>
    <link href="https://codexiaobo.github.io/posts/2812722732/"/>
    <id>https://codexiaobo.github.io/posts/2812722732/</id>
    <published>2022-12-02T08:32:22.000Z</published>
    <updated>2022-12-02T08:35:04.367Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20221202143149.35bobhhpdfe0.webp" alt="微信截图_20221202143149"></p><!--sleep--><span id="more"></span><h1 id="MySQL高级进阶"><a href="#MySQL高级进阶" class="headerlink" title="MySQL高级进阶"></a>MySQL高级进阶</h1><h2 id="缓冲池-Buffer-Pool"><a href="#缓冲池-Buffer-Pool" class="headerlink" title="缓冲池 Buffer Pool"></a>缓冲池 Buffer Pool</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>这个全表查询需要从id为1一直到10 需要进行10次I/O，但是id从1到10却在一个页上，所以innodb设计了buffer pool<br>访问当前表空间的第一行数据，缓存当前页，一次I/O</p><p>Innodb引擎会在mysql启动的时候，向操作系统申请一块连续的空间当做buffer pool，空间的大小由变量<code>innodb_buffer_pool_size</code>确定</p><h3 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h3><h4 id="缓冲页"><a href="#缓冲页" class="headerlink" title="缓冲页"></a>缓冲页</h4><p>buffer pool中存放的<code>数据页</code>我们称之为<code>缓冲页</code>，和磁盘上的数据页是一一对应的，都是16KB，缓冲页的数据，是从磁盘上加载到buffer pool当中的一个完整页</p><h4 id="控制块"><a href="#控制块" class="headerlink" title="控制块"></a>控制块</h4><p>是缓冲页<code>描述信息</code>，这一块区域保存的是数据页所属的表空间号，数据页编号，数据页地址，以及一些链表相关的节点信息等，每个控制块大小是缓存页的5%左右，大约是800个字节</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/Buffer-pool-%E7%B3%BB%E7%BB%9F%E7%94%B3%E8%AF%B7%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4.2p4v7qv12au0.webp" alt="Buffer-pool-系统申请内存空间"></p><p>buffer pool的前一部分存储<code>控制块</code>，后一部分存储<code>缓冲页</code>，如果中间有未被利用的空间，叫<code>内存碎片</code></p><h4 id="buffer-pool初始化"><a href="#buffer-pool初始化" class="headerlink" title="buffer pool初始化"></a>buffer pool初始化</h4><p>数据库会在启动的时候，按照配置中的Buffer Pool大小，去向操作系统申请一块内存，作为Buffer Pool的内存区域，然后会按照默认的缓存页的的大小<code>16KB</code>以及对应的<code>800个字节左右</code>的<code>控制块</code>的大小，在Buffer Pool中划分出一个一个的缓存页和一个一个与其对应的描述数据<code>控制块</code>。此时的buffer pool中没有任何内容</p><h3 id="free链"><a href="#free链" class="headerlink" title="free链"></a>free链</h3><p>程序在执行过程中会不断的有新的页被缓存起来，所以要判断哪些缓冲页是<code>闲置状态</code>，此时要<code>控制块来进行标记和管理</code>了。innodb设计初，将所有<code>空闲的缓冲页</code>所对应的<code>控制块</code>作为一个个的节点，形成一个链表，这个链表就是free链，就是空闲链表</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/free%E9%93%BE.6u2mj9dz02g0.webp" alt="free链"></p><p>free链表是一个双向链表，链表上除了控制块以外，还有一个基础节点，存储了free链有多少个描述信息块，也就是有多少个空闲的缓存页，以及指向链表头尾的指针,当我们加载数据的时候，会从free链中找到空闲的缓存页，把数据页的<code>表空间号和数据页</code>号写入<code>控制块</code>,加载数据到缓存页后，会把缓存页对应的控制块从free链表中移除</p><h4 id="判断数据页是否被缓存"><a href="#判断数据页是否被缓存" class="headerlink" title="判断数据页是否被缓存"></a>判断数据页是否被缓存</h4><p>使用<code>表空间号+页号</code>可以确定一个唯一的页，所以我们可以设计一个hash表，使用<code>表空间号+页</code>号当做key，使用<code>控制块地址</code>做value，每次查询的时候只需要通过key进行查找即可，hash的时间复杂度是O(1)，这样就能迅速定位缓存的页</p><h3 id="flush链"><a href="#flush链" class="headerlink" title="flush链"></a>flush链</h3><h4 id="脏页"><a href="#脏页" class="headerlink" title="脏页"></a>脏页</h4><p>sql的执行过程中，无论是增删改查，都是优先在buffer pool中进行的，这样可以极大的保证执行效率。但是我们对缓存页的某些数据进行了修改，就会导致buffer pool中的缓冲页和磁盘的数据页<code>数据不一致</code>，那么此时的缓冲页就称之为<code>脏页</code>，所以脏页的数据是要刷到磁盘上的</p><p>其实就是在高峰期我们找一个临时的地方先存放，然后等到过了高峰期在写入到磁盘上</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/flush%E9%93%BE.3igefz0049e0.webp" alt="flush链"></p><p>flush链表是一个双向链表，链表结点是被<code>修改过的缓存页</code>的控制块</p><h4 id="刷盘时机"><a href="#刷盘时机" class="headerlink" title="刷盘时机"></a>刷盘时机</h4><p>后台会有专门的线程每隔一段时间就把flush链表中的脏页刷入磁盘中，刷新的速率取决与当前系统是否繁忙。在如果系统奔溃，是会产生数据不一致的问题的，没有刷入磁盘的数据就会丢失，mysql通过日志系统解决这个问题</p><h3 id="lru链"><a href="#lru链" class="headerlink" title="lru链"></a>lru链</h3><p>当需要更多的空间缓存<code>新的数据页</code>的时候，我们将最近使用最少的<code>缓冲页淘汰掉</code>，这是LRU算法，对于innodb而言，是通过<code>LRU链表</code>来完成的，结构和free链表、flush链表基本相同，只是负责的功能不同</p><p>当客户端访问一条数据时，会加载对应的数据页到buffer pool，并会将缓冲页对应的控制块放置到<code>LRU链表的首位</code>,一旦buffer pool被占满，则从链表的末端开始淘汰数据</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/LRU%E9%93%BE.p126gszoab4.webp" alt="LRU链"></p><p>对于预读的数据页，会在第一次访问时放入old区域，如果在sql执行的过程中访问相邻数据时，再次访问访问到该数据页，则把他加入如热数据区</p><p>Innodb提供了一个参数<code>innodb_old_blocks_time</code>，默认是1s，所以执行流程为</p><blockquote><p>页被首次访问时会记录访问的时间戳<br>以后访问都和首次访问的时间进行对比，如果时间大于1s，就讲当前页放入yong区<br>一个sql的扫描一个页的时间，哪怕在慢也不会低于1s，所以解决了一个全表扫秒而导致全表成为热点数据的问题</p></blockquote><p><strong>热点数据要求首次访问时间和最后一次访问时间的时间差不能低于1s</strong></p><p>查看innodb当前的状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> engine innodb status</span><br></pre></td></tr></table></figure><h2 id="MySQL临时表"><a href="#MySQL临时表" class="headerlink" title="MySQL临时表"></a>MySQL临时表</h2><h3 id="创建外部临时表"><a href="#创建外部临时表" class="headerlink" title="创建外部临时表"></a>创建外部临时表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> temporary <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure><h3 id="查看执行计划"><a href="#查看执行计划" class="headerlink" title="查看执行计划"></a>查看执行计划</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><h3 id="内部临时表"><a href="#内部临时表" class="headerlink" title="内部临时表"></a>内部临时表</h3><p><code>内部临时表</code>用来存储某些操作的<code>中间结果</code>，这些操作可能包括在<code>优化阶段</code>或者<code>执行阶段</code>，这种内部表对用户来说是不可见的。MySQL内部将使用<code>自动生成的临时表</code>，辅助SQL的执行。我们可以使用执行计划查看，如果一条sql语句的执行计划中列<code>extra</code>结果为<code>Using temporary</code>，那么也就说明这个查询要使用到临时表</p><h3 id="常见创建内部临时表"><a href="#常见创建内部临时表" class="headerlink" title="常见创建内部临时表"></a>常见创建内部临时表</h3><ul><li><p>使用GROUP BY分组，且分组字段没有索引时。</p></li><li><p>使用DISTINCT查询。</p></li><li><p>使用UNION进行结果合并，辅助去重，union all不会使用临时表，因为他不需要去重</p></li><li><p>复杂的sql中很容易产生临时表</p></li></ul><h3 id="内存临时表"><a href="#内存临时表" class="headerlink" title="内存临时表"></a>内存临时表</h3><p>内存临时表使用memery引擎（Memory引擎不支持BOLB和TEXT类型）</p><h3 id="磁盘临时表"><a href="#磁盘临时表" class="headerlink" title="磁盘临时表"></a>磁盘临时表</h3><p>磁盘临时表默认使用innodb引擎</p><h4 id="创建爱你磁盘临时表时机"><a href="#创建爱你磁盘临时表时机" class="headerlink" title="创建爱你磁盘临时表时机"></a>创建爱你磁盘临时表时机</h4><ul><li><p>数据表中包含BLOB/TEXT列</p></li><li><p>在 GROUP BY 或者 DSTINCT 的列中有超过 512字符的字符类型列</p></li><li><p>在SELECT、UNION、UNION ALL查询中，存在最大长度超过512的列</p></li></ul><h2 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h2><p>在 MySQL 中只有使用了Innodb 数据库引擎的数据库或表才支持事务</p><p>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行</p><h3 id="事务的分类"><a href="#事务的分类" class="headerlink" title="事务的分类"></a>事务的分类</h3><h4 id="显式事务"><a href="#显式事务" class="headerlink" title="显式事务"></a>显式事务</h4><ul><li>开启事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>    </span><br><span class="line">或者</span><br><span class="line"><span class="keyword">start</span> transaction</span><br></pre></td></tr></table></figure><ul><li>提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span></span><br></pre></td></tr></table></figure><ul><li>事务回滚</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span></span><br></pre></td></tr></table></figure><h4 id="隐式事务"><a href="#隐式事务" class="headerlink" title="隐式事务"></a>隐式事务</h4><p>默认的事务是隐式事务，由变量<code>autocommit</code>控制。隐式事务的环境下，我们每执行一条sql都会<code>自动开启和关闭</code>事务</p><h3 id="只读事务"><a href="#只读事务" class="headerlink" title="只读事务"></a>只读事务</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read <span class="keyword">only</span></span><br></pre></td></tr></table></figure><h3 id="保存点"><a href="#保存点" class="headerlink" title="保存点"></a>保存点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">set</span> ...;</span><br><span class="line"><span class="keyword">savepoint</span> a;</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">set</span> ....;</span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> a;</span><br></pre></td></tr></table></figure><p>上边update执行，下边updata回滚</p><p><strong>Mysql不支持嵌套事务，开启一个事务的情况下，若再开启一个事务，会隐式的提交上一个事务</strong></p><h3 id="事务四大特征-ACID"><a href="#事务四大特征-ACID" class="headerlink" title="事务四大特征(ACID)"></a>事务四大特征(ACID)</h3><h4 id="原子性-Atomicity"><a href="#原子性-Atomicity" class="headerlink" title="原子性(Atomicity)"></a>原子性(Atomicity)</h4><p>一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。如果事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样</p><h4 id="一致性-Consistency"><a href="#一致性-Consistency" class="headerlink" title="一致性(Consistency)"></a>一致性(Consistency)</h4><p>在事务开始之前和结束以后，数据库的完整性没有被破坏，数据库状态应该与业务规则保持一致，其他的三个特性都在为他服务</p><h4 id="隔离性-Isolation"><a href="#隔离性-Isolation" class="headerlink" title="隔离性(Isolation)"></a>隔离性(Isolation)</h4><p>数据库允许多个并发事务同时对其数据进行读取和修改，隔离性可以防止多个事务在并发修改共享数据时产生数据不一致的现象</p><h4 id="持久性-Durability"><a href="#持久性-Durability" class="headerlink" title="持久性(Durability)"></a>持久性(Durability)</h4><p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失</p><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>-隔离级别的设置与查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看全局和当前事务的隔离级别</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.transaction_isolation, @<span class="variable">@transaction</span>_isolation_isolation;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;transaction_isolation&#x27;</span>;</span><br><span class="line"><span class="comment">--5.7   tx_isolation</span></span><br><span class="line"><span class="comment">--8.0   transaction_isolation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置下一个事务的隔离级别</span></span><br><span class="line"><span class="keyword">SET</span> transaction isolation level read uncommitted;</span><br><span class="line"><span class="keyword">SET</span> transaction isolation level read committed;</span><br><span class="line"><span class="keyword">set</span> transaction isolation level repeatable read;</span><br><span class="line"><span class="keyword">SET</span> transaction isolation level serializable;</span><br><span class="line"><span class="comment">-- 设置当前会话的隔离级别</span></span><br><span class="line"><span class="keyword">SET</span> session transaction isolation level read uncommitted;</span><br><span class="line"><span class="keyword">SET</span> session transaction isolation level read committed;</span><br><span class="line"><span class="keyword">set</span> session transaction isolation level repeatable read;</span><br><span class="line"><span class="keyword">SET</span> session transaction isolation level serializable;</span><br><span class="line"><span class="comment">-- 设置全局事务的隔离级别</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> transaction isolation level read uncommitted;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> transaction isolation level read committed;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> transaction isolation level repeatable read;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> transaction isolation level serializable;</span><br><span class="line"></span><br><span class="line">其中，SESSION 和 <span class="keyword">GLOBAL</span> 关键字用来指定修改的事务隔离级别的范围：</span><br><span class="line">SESSION：表示修改的事务隔离级别将应用于当前 session（当前 cmd 窗口）内的所有事务；</span><br><span class="line"><span class="keyword">GLOBAL</span>：表示修改的事务隔离级别将应用于所有 session（全局）中的所有事务，且当前已经存在的 session 不受影响；</span><br><span class="line">如果省略 SESSION 和 <span class="keyword">GLOBAL</span>，表示修改的事务隔离级别将应用于当前 session 内的下一个还未开始的事务。</span><br></pre></td></tr></table></figure><h4 id="读未提交-Read-uncommitted"><a href="#读未提交-Read-uncommitted" class="headerlink" title="读未提交(Read uncommitted)"></a>读未提交(Read uncommitted)</h4><p>一个事务可以读取其他<code>未提交的事务</code>修改的数据，隔离级别最低</p><p><strong>发生的问题？</strong></p><p>脏读，不可重复度，幻读</p><p><code>脏读</code>：一个事务读到了其他事务未提交的数据，未提交意味着这些数据可能会回滚，读到的数据不一定准确</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/RU%E8%AF%BB%E6%9C%AA%E6%8F%90%E4%BA%A4.2tbpp9pmj0o0.webp" alt="RU读未提交"></p><h4 id="读已提交-Read-committed"><a href="#读已提交-Read-committed" class="headerlink" title="读已提交(Read committed)"></a>读已提交(Read committed)</h4><p>当前事务只能读到别的事物已经提交的数据，一个事务a修改了另一个未提交事务b读取过的数据。那么事务b再次读取，会发现两次读取的数据不一致。也就是说在一个原子性的操作中一个事务两次读取相同的数据，却不一致，一行数据不能重复被读取。主要是<code>update</code>语句，会导致不可重复读</p><p><strong>发生的问题？</strong></p><p>不可重复读和幻读</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/RC%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4.1hfeucbmxt8g.webp" alt="RC读已提交"></p><h4 id="可重复读-Repeatable-read"><a href="#可重复读-Repeatable-read" class="headerlink" title="可重复读(Repeatable read)"></a>可重复读(Repeatable read)</h4><p>同一个事务中发出同一个SELECT语句两次或更多次，那么产生的结果数据集总是相同的，</p><p><strong>发生的问题？</strong></p><p><code>幻读</code>：一个事务按照某些条件进行查询，事务提交前，有另一个事务插入了满足条件的其他数据，再次使用相同条件查询，却发现多了一些数据，就像出现了幻觉一样。幻读主要针对针对delete和insert语句</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/RR%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB.54drqdu3h2w0.webp" alt="RR可重复读"></p><h4 id="串行化-Serializable"><a href="#串行化-Serializable" class="headerlink" title="串行化(Serializable)"></a>串行化(Serializable)</h4><p>事务A和事务B，事务A在操作数据库时，事务B只能排队等待</p><p>很少使用，吞吐量太低，用户体验差</p><p>可以避免<code>幻读</code>，每一次读取的都是数据库中真实存在数据，事务A与事务B串行，而不并发</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E4%B8%B2%E8%A1%8C%E5%8C%961.o8lrd53onjk.webp" alt="串行化1"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/%E4%B8%B2%E8%A1%8C%E5%8C%962.4rkkc6w8foy0.webp" alt="串行化2"></p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20221202143149.35bobhhpdfe0.webp&quot; alt=&quot;微信截图_20221202143149&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="mysql" scheme="https://codexiaobo.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL进阶 一</title>
    <link href="https://codexiaobo.github.io/posts/2619773061/"/>
    <id>https://codexiaobo.github.io/posts/2619773061/</id>
    <published>2022-12-01T13:06:54.000Z</published>
    <updated>2022-12-01T13:08:30.225Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221201204413.3qgwfd5qr3y0.webp" alt="微信图片_20221201204413"></p><!--sleep--><span id="more"></span><h1 id="Mysql高级进阶"><a href="#Mysql高级进阶" class="headerlink" title="Mysql高级进阶"></a>Mysql高级进阶</h1><h2 id="Mysql架构"><a href="#Mysql架构" class="headerlink" title="Mysql架构"></a>Mysql架构</h2><p><code>数据库</code>：按照数据结构来组织、存储和管理数据的仓库，通常由数据库管理系统进行管理</p><p><code>数据库管理软件（RDBMS）</code>：就是我们说的数据库管理系统软件，他强调软件</p><p><code>数据库实例</code>：启动数据库软件，在内存中运行一个独立进程，用来操作数据，这个正在运行的进程就是一个数据库实例，理论上可以在一台电脑上启动多个数据库实例，当然要监听在不同的端口</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/mysql%E6%9E%B6%E6%9E%84%E5%9B%BE.3qr8mchi2ua0.webp" alt="mysql架构图"></p><p>图片来源于网络</p><blockquote><p>MySQL向外提供的交互接口（Connectors）</p></blockquote><p>Connectors组件，是MySQL向外提供的交互组件，如java,.net,php等语言可以通过该组件来操作SQL语句，实现与SQL的交互。通过客户端/服务器通信协议与MySQL建立连接。MySQL 客户端与服务端的通信方式是 “ 半双工 ”。对于每一个 MySQL 的连接，时刻都有一个线程状态来标识这个连接正在做什么</p><blockquote><p>管理服务组件和工具组件(Management Service &amp; Utilities)</p></blockquote><p>提供MySQL的各项服务组件和管理工具，如备份(Backup)，恢复(Recovery)，安全管理(Security)等功能</p><blockquote><p>连接池组件(Connection Pool)</p></blockquote><p>负责监听客户端向MySQL Server端的各种请求，接收请求，转发请求到目标模块。每个成功连接MySQL Server的客户请求都会被创建或分配一个线程，该线程负责客户端与MySQL Server端的通信，接收客户端发送的命令，传递服务端的结果信息等。</p><blockquote><p>SQL接口组件(SQL Interface)</p></blockquote><p>接收用户SQL命令，如DML,DDL和存储过程等，并将最终结果返回给用户</p><blockquote><p>查询分析器组件(Parser)</p></blockquote><p>首先分析SQL命令语法的合法性，并进行抽象语法树解析，如果sql有语法错误，会抛出异常信息。</p><blockquote><p>优化器组件（Optimizer）</p></blockquote><p>对SQL命令按照标准流程进行优化分析，mysql会按照它认为的最优方式进行优化，选用成本最小的执行计划。</p><blockquote><p>缓存主件（Caches &amp; Buffers）</p></blockquote><p>缓存和缓冲组件，这里边的内容我们后边会详细的讲解。</p><blockquote><p>MySQL存储引擎</p></blockquote><p>MySQL属于关系型数据库，而关系型数据库的存储是以表的形式进行的，对于表的创建，数据的存储，检索，更新等都是由MySQL存储引擎完成的。</p><p>MySQL存储引擎在MySQL中扮演着重要角色。MySQL的存储引擎种类比较多，如MyIsam存储引擎，InnoDB存储引擎和Memory存储引擎</p><p>因为mysql本身就是开源的，他允许第三方基于MySQL骨架，开发适合自己业务需求的存储引擎。从MySQL存储引擎种类上来说，可以分为官方存储引擎和第三方存储引擎，比较常用的存储引擎包括InnoDB存储引擎，MyIsam存储引擎和Momery存储引擎。</p><h3 id="Mysql查询流程"><a href="#Mysql查询流程" class="headerlink" title="Mysql查询流程"></a>Mysql查询流程</h3><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/mysql/mysql%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.28veejxrv04k.webp" alt="mysql执行流程"></p><h3 id="MySQL8-0取消了查询缓存"><a href="#MySQL8-0取消了查询缓存" class="headerlink" title="MySQL8.0取消了查询缓存"></a>MySQL8.0取消了查询缓存</h3><p>MySQL会对每条接收到的SELECT类型的查询进行hash计算，然后查找这个查询的缓存结果是否存在。hash计算和查找所带来的开销需要重视</p><p>查询语句的字符大小写、空格或者注释的不同，Query Cache都会认为是不同的查询，因为他们的hash值会不同</p><p>当向某个表写入数据的时候，必须将和这个表相关的所有缓存设置为失效，如果缓存内容很多，则消耗也会很大。</p><h3 id="MySQLbin目录结构"><a href="#MySQLbin目录结构" class="headerlink" title="MySQLbin目录结构"></a>MySQLbin目录结构</h3><blockquote><p>MySQL服务器端工具</p></blockquote><p><code>mysqld</code>：SQL后台保护程序(MySQL服务器进程)。该程序必须运行之后。客户端才能通过连接服务器端程序访问和操作数据库</p><p><code>mysqld_safe</code>：MySQL服务脚本。mysql_safe增加了一些安全特性，如当出现错误时重启服务器，向错误日志文件写入运行时间信息</p><p><code>mysql.server</code>：MySQL服务启动服本。调用mysqld_safe来启动MySQL服务</p><p><code>mysql_multi</code>：服务器启动脚本，可以启动或停止系统上安装的多个服务</p><p><code>myiasmchk</code>：用来描述、检查、优化和维护MyISAM表的实用工具</p><p><code>mysqlbu</code>：MySQL缺陷报告脚本。它可以用来向MySQL邮件系统发送缺陷报告</p><p><code>mysql_install_db</code>：用于默认权限创建MySQ授权表。通常只是在系统上首次安装MySQL时执行一次</p><blockquote><p>MySQL客户端工具</p></blockquote><p><code>mysql</code>：交互式输入SQL语句或从文件以批处理模式执行SQL语句来操作数据库管理系统，就是我们的客户端</p><p><code>mysqldump</code>：将MySQL数据库转储到一个文件，可以用来备份数据库</p><p><code>mysqladmin</code>：用来检索版本、进程、以及服务器的状态信息</p><p><code>mysqlbinlog</code>：用于从二进制日志读取语句。在二进制日志文件中包含执行的语句，可用来帮助系统从崩溃中恢复</p><p><code>mysqlcheck</code>：检查、修复、分析以及优化表的表维护</p><p><code>mysqlhotcopy</code>：当服务器在运行时，快速备份MyISAM或ISAM表的工具</p><p><code>mysql import</code>：使用load data infile将文本文件导入相关表的客户程序</p><p><code>perror</code>：显示系统或MySQL错误代码含义的工具</p><p><code>myisampack</code>：压缩MyISAP表，产生更小的只读表</p><p><code>mysaqlaccess</code>：检查访问主机名、用户名和数据库组合的权限</p><p><code>mysql.sock</code> 不是bin目录中的，是linux系统中的mysql文件，socket 即 Unix 域套接字文件，在类 unix 平台，客户端连接 MySQL 服务端的方式有两种，分别是 TCP/IP 方式与 socket 套接字文件方式。Unix 套接字文件连接的速度比 TCP/IP 快，但是只能连接到同一台计算机上的服务器使用。通过设置 socket 变量可配置套接字文件路径及名称，默认值为 /tmp/mysql.sock，如果mysql.sock文件误删的话，就需要重启mysql服务</p><h3 id="mysql数据备份"><a href="#mysql数据备份" class="headerlink" title="mysql数据备份"></a>mysql数据备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 备份一个表</span><br><span class="line">mysqldump -u root -p 数据库 表  &gt; ~/dump.txt</span><br><span class="line">-- 备份一个数据库</span><br><span class="line">mysqldump -u root -p 数据库  &gt; ~/dump.txt</span><br><span class="line">-- 备份所有数据库</span><br><span class="line">mysqldump -u root -p --all-databases &gt; dump.txt</span><br></pre></td></tr></table></figure><h3 id="mysql数据恢复"><a href="#mysql数据恢复" class="headerlink" title="mysql数据恢复"></a>mysql数据恢复</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p 要还原到的数据库 &lt; ~/dump.txt</span><br></pre></td></tr></table></figure><h3 id="字符集和排序规则"><a href="#字符集和排序规则" class="headerlink" title="字符集和排序规则"></a>字符集和排序规则</h3><p>查看字符编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collation like <span class="string">&#x27;%utf8%&#x27;</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>后缀</th><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>_ai</td><td>accent insensitive</td><td>不区分重音（è，é，ê和ë）</td></tr><tr><td>_as</td><td>accent sensitive</td><td>区分重音</td></tr><tr><td>_ci</td><td>case insensitive</td><td>不区分大小写</td></tr><tr><td>_cs</td><td>case sensitive</td><td>区分大小写</td></tr><tr><td>_bin</td><td>binary</td><td>以二进制的形式进行比较</td></tr></tbody></table><h4 id="utf8和utf8mb4的区别"><a href="#utf8和utf8mb4的区别" class="headerlink" title="utf8和utf8mb4的区别"></a>utf8和utf8mb4的区别</h4><p><code>utf8mb3(utf-8)</code>：使用1~3个字节表示字符，utf8默认就是utf8mb3</p><p><code>utf8mb4</code>：使用1~4个字节表示字符，他是utf8的超集，甚至可以存储很多,emoji表情，mysql8.0已经默认字符集设置为utf8mb4。</p><p><code>character_set_server</code>和<code>collate_server</code>对全局的字符集和排序规则进行设置。这两个设置可以在配置文件中修改</p><h3 id="mysql修改配置"><a href="#mysql修改配置" class="headerlink" title="mysql修改配置"></a>mysql修改配置</h3><h4 id="查看全局配置变量"><a href="#查看全局配置变量" class="headerlink" title="查看全局配置变量"></a>查看全局配置变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show global variables like <span class="string">&#x27;%wait_timeout%&#x27;</span>;</span><br><span class="line">select @@global.wait_timeout;</span><br></pre></td></tr></table></figure><h4 id="修改配置变量"><a href="#修改配置变量" class="headerlink" title="修改配置变量"></a>修改配置变量</h4><ul><li>修改配置文件，然后重新启动</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">wait_timeout=10000</span><br></pre></td></tr></table></figure><ul><li>set方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global wait_timeout=10000;</span><br><span class="line"><span class="built_in">set</span> @@global.wait_timeout=10000;</span><br></pre></td></tr></table></figure><h4 id="设置当前会话"><a href="#设置当前会话" class="headerlink" title="设置当前会话"></a>设置当前会话</h4><ul><li>修改</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> wait_timeout=10000;</span><br><span class="line">mysql&gt; <span class="built_in">set</span> session wait_timeout=10000;</span><br><span class="line">mysql&gt; <span class="built_in">set</span> <span class="built_in">local</span> wait_timeout=10000;</span><br><span class="line">mysql&gt; <span class="built_in">set</span> @@wait_timeout=10000;</span><br><span class="line">mysql&gt; <span class="built_in">set</span> @@session.wait_timeout=10000;</span><br><span class="line">mysql&gt; <span class="built_in">set</span> @@local.wait_timeout=10000;</span><br></pre></td></tr></table></figure><ul><li>查看</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@wait_timeout;</span><br><span class="line">mysql&gt; select @@session.wait_timeout;</span><br><span class="line">mysql&gt; select @@local.wait_timeout;</span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;wait_timeout&#x27;</span>;</span><br><span class="line">mysql&gt; show <span class="built_in">local</span> variables like <span class="string">&#x27;wait_timeout&#x27;</span>;</span><br><span class="line">mysql&gt; show session variables like <span class="string">&#x27;wait_timeout&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="内置数据库"><a href="#内置数据库" class="headerlink" title="内置数据库"></a>内置数据库</h3><p><code>mysql</code>：这个库很重要，他是mysql的核心数据库，负责存储数据库的用户、权限设置、关键字等mysql自己需要使用，控制和管理的信息</p><p><code>information_schema</code>：这个数据库维护了数据库其他表的一些描述性信息，也称为元数据。比如，当前有哪些表，哪些视图，哪些触发器，哪些列等</p><p><code>performation_schema</code>：这个数据库用来存储mysql服务器运行过程中的一些状态信息，是做性能监控的。比如最近执行了什么sql语句，内存使用情况等</p><p><code>sys</code>：结合information_schema和performation_schema的数据，能更方便的了解mysql服务器的性能信息。</p><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><h3 id="innodb数据存储"><a href="#innodb数据存储" class="headerlink" title="innodb数据存储"></a>innodb数据存储</h3><p>对于innodb而言，数据是存储在表空间内的，表空间是一个抽象的概念，他对应着硬盘上的一个或多个文件</p><p>表空间存储数据的单位是<code>页</code>，每一页大概占用16k的空间</p><h3 id="系统表空间"><a href="#系统表空间" class="headerlink" title="系统表空间"></a>系统表空间</h3><ul><li><p>系统表空间包含了很多【公共数据】，比如InnoDB的数据字典，回滚信息、系统事物信息、二次写缓冲等，老版本的mysql表中的数据也会存储在系统表空间</p></li><li><p>系统表空间是一个共享的表空间因为它是被多个表共享的</p></li><li><p>该空间的数据文件通过参数【innodb_data_file_path】控制，默认值是ibdata1:12M:autoextend（文件名为ibdata1、12MB、自动扩展）</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 如果1代表开启，0代表关闭</span><br><span class="line">show variables like<span class="string">&#x27;innodb_file_per_table&#x27;</span></span><br><span class="line">-- 设置对应的变量</span><br><span class="line"><span class="built_in">set</span> global innodb_file_per_table=0;</span><br><span class="line">-- 查看系统表空间的配置</span><br><span class="line">show variables like <span class="string">&quot;innodb_data_file_path&quot;</span>;</span><br><span class="line">-- 配置文件的配置</span><br><span class="line">innodb_data_file_path=data1:512M;data2:512M:autoextend</span><br></pre></td></tr></table></figure><h3 id="独立表空间"><a href="#独立表空间" class="headerlink" title="独立表空间"></a>独立表空间</h3><p>独立表空间是默认开启的，在5.6.6以后，Innodb不在默认将各个表的数据存储在<code>系统表空间</code>当中，而是会为每一个表建立一个独立表空间，innodb存储引擎的独立表空间为<code>.ibd</code>文件</p><p>如果启用了<code>innodb_file_per_table</code>参数，需要注意的是每张表的表空间内存放的只是<code>数据</code>、<code>索引</code>和<code>插入缓冲Bitmap页</code>，其他数据如：回滚信息、系统事物信息、二次写缓冲（Double write buffer）等还是放在原来的系统表空间内,同时即使启用了<code>innodb_file_per_table</code>参数，系统表空间还是会不断的增加其大小的</p><h3 id="其他类型表空间"><a href="#其他类型表空间" class="headerlink" title="其他类型表空间"></a>其他类型表空间</h3><p>MyIsam没有表空间的概念，他会在目录中产生2个文件<code>.MYD（数据文件）</code>、<code>.MYI（索引文件）</code>三个文件,在5.7以前<code>数据文件</code>和<code>表信息文件</code>是分开的，相互独立的。会多一个<code>.frm</code>文件，8.0之后进行了合并</p><h3 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h3><p><code>区（extent）</code>：每一个表空间保存了大量的页，为了更好的管理这些页面，Innodb提出了<code>区</code>的概念，对于16k的页，连续64个页就是一个区，大概1M的空间，每一个表空间都是由若干个连续的区组成的，每256个区被划分为一组</p><p><code>段（Segment）</code>：分为索引段，数据段，回滚段等后边会将，段是为了区分不同的数据类型，相同的段存的数据类型是一致的。一个段包含256个区(256M大小)。</p><blockquote><p>Row Format</p></blockquote><ul><li><p>第一个部分是一个非NULL【变长字段长度列表】。变长列的真实长度就保存在这个部分，他是按照列的顺序【逆序放置】的。当列的长度小于255字节，如（varchar(50)），用1字节表示；若大于255个字节（varchar(600)），用2个字节表示，这其实也就说明了为什么varchar的最大长度是65536</p></li><li><p>第二个部分是NULL标志位，他指示了当前行数据中哪些为null值，用一个bitmap表示。NULL值标志位也是逆序排列，占用空间按照字节数高位补零，如有九个字段可以为空（00000001 01010101）</p></li><li><p>第三部分为记录头信息，固定占用5个字节（40位）</p></li><li><p>第四部分就是实际存储的每个列的数据了，需要特别注意的是，NULL不占该部分任何数据，即NULL除了占有NULL标志位，实际存储不占有任何空间。Innodb存储变长列（VARCHAR, VARBINARY, BLOB, TEXT）的前768字节，剩下的部分存储在溢出页中。固定长度列，超过768字节的视为变长列。内部存储前768字节，20字节指针存储列的溢出页的地址，所以长度为768+20字节</p></li></ul><p><strong>举例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table <span class="built_in">test</span> (</span><br><span class="line">　　t1 varchar(10),</span><br><span class="line">　　t2 varchar(10),</span><br><span class="line">　　t3 char(10),</span><br><span class="line">　　t4 varchar(10)</span><br><span class="line">) engine=innodb row_format=compact;</span><br><span class="line"></span><br><span class="line">insert into row_test values(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>); </span><br><span class="line">insert into row_test values(<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;ee&#x27;</span>,<span class="string">&#x27;ee&#x27;</span>,<span class="string">&#x27;fff&#x27;</span>); </span><br><span class="line">insert into row_test values(<span class="string">&#x27;d&#x27;</span>,NULL,NULL,<span class="string">&#x27;fff&#x27;</span>); </span><br></pre></td></tr></table></figure><ul><li>表空间二进制结构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">                         03 02 01 00 00 00 10 00 </span><br><span class="line">2c 00 00 00 00 2b 68 00  00 00 00 06 05 80 00 00 </span><br><span class="line">00 32 01 10 61 62 62 62  62 20 20 20 20 20 20 20 </span><br><span class="line">20 63 63 63 03 02 01 00  00 00 18 00 2b 00 00 00  </span><br><span class="line">00 02 01 00 00 00 00 0f  62 c9 00 00 01 b2 01 10  </span><br><span class="line">64 65 65 65 65 20 20 20  20 20 20 20 20 66 66 66  </span><br><span class="line">03 01 06 00 00 20 ff 98  00 00 00 00 02 02 00 00 </span><br><span class="line">00 00 0f 67 cc 00 00 01  b6 01 10 64 66 66 66 </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">03 02 01 // 变长字段长度列表，逆序，t4列长度为3，t2列长度为2，t1列长度为1</span><br><span class="line">00 // NULL标志位，第一行没有NULL值</span><br><span class="line">00 00 10 00 2c // 记录头信息，固定5字节长度</span><br><span class="line">00 00 00 00 2b 68 // RowID我们建的表没有主键，因此会有RowID，固定6字节长度</span><br><span class="line">00 00 00 00 06 05 // 事务ID，固定6个字节</span><br><span class="line">80 00 00 00 32 01 10 // 回滚指针，固定7个字节</span><br><span class="line">61 // t1数据<span class="string">&#x27;a&#x27;</span></span><br><span class="line">62 62 // t2<span class="string">&#x27;bb&#x27;</span></span><br><span class="line">62 62 20 20 20 20 20 20 20 20 // t3数据<span class="string">&#x27;bb&#x27;</span>  Ox20十进制是32对应ascii码是空字符</span><br><span class="line">63 63 63 // t4数据<span class="string">&#x27;ccc&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">03 02 01 // 变长字段长度列表，逆序，t4列长度为3，t2列长度为2，t1列长度为1</span><br><span class="line">00 // NULL标志位，第二行没有NULL值</span><br><span class="line">00 00 18 00 2b // 记录头信息，固定5字节长度</span><br><span class="line">00 00 00 00 02 01 // RowID我们建的表没有主键，因此会有RowID，固定6字节长度</span><br><span class="line">00 00 00 00 0f 62 // 事务ID，固定6个字节</span><br><span class="line">c9 00 00 01 b2 01 10 // 回滚指针，固定7个字节</span><br><span class="line">64 // t1数据<span class="string">&#x27;d&#x27;</span></span><br><span class="line">65 65 // t2数据<span class="string">&#x27;ee&#x27;</span></span><br><span class="line">65 65 20 20 20 20 20 20 20 20 // t3数据<span class="string">&#x27;ee&#x27;</span></span><br><span class="line">66 66 66 // t4数据<span class="string">&#x27;fff&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">03 01 // 变长字段长度列表，逆序，t4列长度为3，t1列长度为1</span><br><span class="line">06 // 00000110 NULL标志位，t2和t3列为空</span><br><span class="line">00 00 20 ff 98  // 记录头信息，固定5字节长度</span><br><span class="line">00 00 00 00 02 02 // RowID我们建的表没有主键，因此会有RowID，固定6字节长度</span><br><span class="line">00 00 00 00 0f 67 // 事务ID，固定6个字节</span><br><span class="line">cc 00 00 01 b6 01 10 // 回滚指针，固定7个字节</span><br><span class="line">64 // t1数据<span class="string">&#x27;d&#x27;</span></span><br><span class="line">66 66 66 // t4数据<span class="string">&#x27;fff&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>REDUNDANT</p></blockquote><ul><li><p>第一个部分保存了<code>字段长度偏移列表</code>，这个部分保存了该行数据所有列，包括隐藏列的长度偏移量，这个偏移列表是按照列的顺序<code>逆序排列</code></p></li><li><p>第二个部分为记录头信息<code>record header</code>，Redundant行格式固定占用6个字节（48位）</p></li><li><p>第三个部分就是实际存储的每个列的数据了</p></li></ul><blockquote><p>DYNAMIC</p></blockquote><p>InnoDB Plugin引入了两种新的文件格式（file format，可以理解为新的页格式），对于以前支持的Compact和Redundant格式将其称为Antelope文件格式，新的文件格式称为Barracuda。Barracuda文件格式下拥有两种新的行记录格式Compressed和Dynamic两种</p><p>新的两种格式对于存放BLOB的数据采用了完全的行溢出的方式，在数据页中只存放20个字节的指针，实际的数据都存放在BLOB Page中，而之前的Compact和Redundant两种格式会存放768个前缀字节。mysql8.0默认此格式</p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221201204413.3qgwfd5qr3y0.webp&quot; alt=&quot;微信图片_20221201204413&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="mysql" scheme="https://codexiaobo.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>jvm(二)</title>
    <link href="https://codexiaobo.github.io/posts/2855935176/"/>
    <id>https://codexiaobo.github.io/posts/2855935176/</id>
    <published>2022-11-13T11:58:44.000Z</published>
    <updated>2022-11-13T12:06:38.375Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221110153753.2ld32fgfn680.webp" alt="微信图片_20221110153753"></p><!--sleep--><span id="more"></span><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="JVM四种引用"><a href="#JVM四种引用" class="headerlink" title="JVM四种引用"></a>JVM四种引用</h2><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>对象引用直接new</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><h4 id="强引用对象失效"><a href="#强引用对象失效" class="headerlink" title="强引用对象失效"></a>强引用对象失效</h4><ul><li>生命周期结束(作用域失效)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  Object object = <span class="keyword">new</span> Object() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/当方法执行完毕后，强引用指向的 引用而对象new Object()就会等待被GC回收</p><ul><li>引用被置为null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object = <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>没有任何引用指向new Object() 因此，new Object() 就会等待被GC回收</p><p><strong>除了以上两个情况以外，其他任何时候GC都不会回收强引用对象</strong></p><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>如果内存充足，GC不会随便的回收软引用对象；如果JVM内存不足，则GC就会主动的回收软引用对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        实例化软引用类</span></span><br><span class="line">        SoftReference&lt;Object&gt; softReference = <span class="keyword">new</span> SoftReference&lt;&gt;(<span class="keyword">new</span> Object());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        声明一个List集合，模仿内存溢出</span></span><br><span class="line">        List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread( () -&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//                    这块让他睡一会是为了给这个线程一点时间，让他能刷新数据到主内存中进行线程之间的数据同步</span></span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                如果软引用为空，则回收</span></span><br><span class="line">                <span class="keyword">if</span> (softReference.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;softReference 软引用对象已经被回收了&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;线程1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        模仿内存溢出</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            如果内存没有溢出，则</span></span><br><span class="line">            <span class="keyword">if</span> (softReference.get() != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来自<code>java.lang.ref.SoftReference</code></p><p><code>get()</code> 返回 所引用的对象</p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>只要GC执行，就会将弱引用对象进行回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakReferenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试弱引用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        实例化weakReference 弱引用对象</span></span><br><span class="line">        WeakReference&lt;Object&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">new</span> Object());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        判断是否被回收</span></span><br><span class="line">        System.out.println(weakReference.get() == <span class="keyword">null</span> ? <span class="string">&quot;已被回收&quot;</span> : <span class="string">&quot;没被回收&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        让虚拟机进行一次回收 这个方法概率实践 有可能生效 有可能失效</span></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        System.out.println(weakReference.get() == <span class="keyword">null</span> ? <span class="string">&quot;已被回收&quot;</span> : <span class="string">&quot;没被回收&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>来自<code>java.lang.ref.WeakReference</code></p><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>是否使用虚引用，和引用对象本身没有任何关系，无法通过虚引用来获取对象本身</p><p>来自 <code>java.lang.ref.PhantomReference</code></p><p>虚引用不会单独使用，一般会和 引用队列（<code>java.lang.ref.ReferenceQueue</code>）一起使用</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>当gc回收一个对象，如果gc发现 此对象还有一个虚引用，就会将虚引用放入到 引用队列中，之后（当虚引用出队之后）再去回收该对象。因此，我们可以使用 虚引用+引用对象 实现：在对象被gc之前，进行一些额外的其他操作</p><p>GC –&gt;如果有虚引用–&gt;虚引用入队–&gt;虚引用出队–&gt; 回收对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhantomReferenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//        实例化要引用类</span></span><br><span class="line">        W w = <span class="keyword">new</span> W();</span><br><span class="line"><span class="comment">//        实例化引用队列</span></span><br><span class="line">        ReferenceQueue referenceQueue = <span class="keyword">new</span> ReferenceQueue();</span><br><span class="line"><span class="comment">//        实例化虚引用，需要一个引用队列</span></span><br><span class="line">        PhantomReference&lt;W&gt; phantomReference = <span class="keyword">new</span> PhantomReference&lt;&gt;(w,referenceQueue);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        将虚引用对象设置为空</span></span><br><span class="line">        w = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//        执行垃圾回收</span></span><br><span class="line">        System.gc();</span><br><span class="line"><span class="comment">//        睡一会，缓存</span></span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//        GC-&gt; 虚引用-&gt;入队-&gt;出队-&gt;</span></span><br><span class="line">        System.out.println(referenceQueue.poll());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">W</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>特殊情况</li></ul><p>虚引用对象重写了finalize()，那么JVM会延迟 虚引用的入队时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhantomAndFinalize</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//        实例化要引用类</span></span><br><span class="line">        E e = <span class="keyword">new</span> E();</span><br><span class="line"><span class="comment">//        实例化引用队列</span></span><br><span class="line">        ReferenceQueue referenceQueue = <span class="keyword">new</span> ReferenceQueue();</span><br><span class="line"><span class="comment">//        实例化虚引用，需要一个引用队列</span></span><br><span class="line">        PhantomReference&lt;W&gt; phantomReference = <span class="keyword">new</span> PhantomReference&lt;&gt;(e,referenceQueue);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        将虚引用对象设置为空</span></span><br><span class="line">        e = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//        执行垃圾回收</span></span><br><span class="line">        System.gc();</span><br><span class="line"><span class="comment">//        睡一会，缓存</span></span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//        GC-&gt; 虚引用-&gt;入队-&gt;出队-&gt;</span></span><br><span class="line">        System.out.println(referenceQueue.poll());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">&quot;被回收之前的操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="软引用实现缓存的淘汰策略"><a href="#软引用实现缓存的淘汰策略" class="headerlink" title="软引用实现缓存的淘汰策略"></a>软引用实现缓存的淘汰策略</h2><p>java中可以用引用实现 淘汰策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoftCache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, SoftReference&lt;ObjectTest&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCaches</span><span class="params">(String id,ObjectTest obj)</span></span>&#123;</span><br><span class="line">        map.put( id,<span class="keyword">new</span> SoftReference&lt;ObjectTest&gt;(obj));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ObjectTest <span class="title">getCache</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        SoftReference&lt;ObjectTest&gt; softRef = map.get(id) ;</span><br><span class="line">        <span class="keyword">return</span>  softRef == <span class="keyword">null</span> ?  <span class="keyword">null</span> : softRef.get()  ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectTest</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h2><p>当一个加载器要加载类的时候，自己先不加载，而是逐层向上交由双亲去加载；当双亲中的某一个加载器 加载成功后，再向下返回成功。如果所有的双亲和自己都无法加载，则报异常</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/JVM%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.1p3lqjlcrk0w.webp" alt="JVM双亲委派"></p><h3 id="JVM自带的加载器"><a href="#JVM自带的加载器" class="headerlink" title="JVM自带的加载器"></a>JVM自带的加载器</h3><p>在JVM的内部所包含，C++</p><ul><li>根加载器,Bootstrap</li></ul><p>加载 <code>jre\lib\rt.jar</code> 包含平时编写代码时 大部分jdk api,指定加载某一个jar <code>-Xbootclasspath=a.jar</code></p><ul><li>扩展类加载器，Extension</li></ul><p><code>..\jre\lib\ext\\\*.jar</code>指定加载某一个jar <code>-Djava.ext.dirs= ....</code></p><ul><li>AppClassLoader/SystemClassLoader 系统加载器/应用加载器</li></ul><p>加载classpath，指定加载 <code>-Djava.class.path= 类/jar</code></p><h3 id="用户自定义的加载器"><a href="#用户自定义的加载器" class="headerlink" title="用户自定义的加载器"></a>用户自定义的加载器</h3><p>独立于JVM之外的加载器,Java</p><p>都是抽象类java.lang.ClassLoader的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader = clazz.getClassLoader();</span><br><span class="line"></span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz2 = Class.forName(<span class="string">&quot;com.dream.xiaobo.loader.Loader1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader2 = clazz2.getClassLoader();</span><br><span class="line"></span><br><span class="line">        System.out.println(classLoader2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Loader1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLoader2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader = clazz.getClass().getClassLoader();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;classLoader:&quot;</span> + classLoader);</span><br><span class="line">        System.out.println(<span class="string">&quot;====&quot;</span>);</span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;systemClassLoader:&quot;</span> + systemClassLoader);</span><br><span class="line">        System.out.println(<span class="string">&quot;====&quot;</span>);</span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;parent:&quot;</span> + parent);</span><br><span class="line">        System.out.println(<span class="string">&quot;====&quot;</span>);</span><br><span class="line">        ClassLoader parent2 = parent.getParent();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;parent2:&quot;</span> + parent2);</span><br><span class="line">        System.out.println(<span class="string">&quot;====&quot;</span>);</span><br><span class="line"><span class="comment">//        ClassLoader parent3 = parent2.getParent();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;parent3:&quot; + parent3);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Enumeration&lt;URL&gt; resources = systemClassLoader.getResources(<span class="string">&quot;./com/dream/xiaobo/loader/MyLoader2.class&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resources.hasMoreElements()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;url:&quot;</span> + resources.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果类是rt.jar中的，则该类是被bootstrap（根加载器）加载；如果是classpath中的类（自己编写的类），则该类是被AppClassLoader加载</p><p><code>定义类加载</code>：最终实际加载类的加载器  </p><p><code>初始化类加载类</code>：直接面对加载任务的类</p><h3 id="自定义类加载器详解"><a href="#自定义类加载器详解" class="headerlink" title="自定义类加载器详解"></a>自定义类加载器详解</h3><p>二进制名<code>binary names</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;java.lang.String&quot;</span></span><br><span class="line"><span class="string">&quot;javax.swing.JSpinner$DefaultEditor&quot;</span></span><br><span class="line"><span class="string">&quot;java.security.KeyStore$Builder$FileBuilder$1&quot;</span></span><br><span class="line"><span class="string">&quot;java.net.URLClassLoader$3$1&quot;</span></span><br></pre></td></tr></table></figure><p><code>$</code>代表内部类：</p><p><code>$数字</code>：第几个匿名内部类</p><p>数组的加载器类型和数组元素的加载器类型是相同</p><p>原声类型的数组是没有类加载器的  </p><p>如果加载的结果是null 可能是此类没有加载器(int[]) ， 也可能是 加载类型是“根加载器”</p><p>xxx.class文件可能是在本地存在，也可能是来自于网络 或者在运行时动态产生(jsp)</p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoaderImpl</span>  <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String path ; <span class="comment">//null</span></span><br><span class="line">    <span class="comment">//优先使用的类加载器是：getSystemClassLoader()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoaderImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoaderImpl</span><span class="params">(ClassLoader parent)</span></span>&#123;<span class="comment">//扩展类加载器</span></span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//com.yq.xx.class</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加载findClass&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] b = loadClassData(name);</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//“com/yq/xxx.class” -&gt;  byte[]</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassData(String name)  &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加载loadClassData&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(path != <span class="keyword">null</span>)&#123;<span class="comment">//name: com.yanqun.parents.MyDefineCL</span></span><br><span class="line">            name = path+ name.substring(  name.lastIndexOf(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>  )+<span class="string">&quot;.class&quot;</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//classpath -&gt;APPClassLoader</span></span><br><span class="line">            name =  dotToSplit(<span class="string">&quot;out.production.volatile.&quot;</span>+name)+<span class="string">&quot;.class&quot;</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">null</span> ;</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">null</span> ;</span><br><span class="line">        ByteArrayOutputStream output = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> FileInputStream( <span class="keyword">new</span> File(  name)  );</span><br><span class="line">            <span class="comment">//inputStream -&gt; byte[]</span></span><br><span class="line">            output = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                output.write(buf, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            result = output.toByteArray();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace(); ;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(inputStream != <span class="keyword">null</span> )&#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(output != <span class="keyword">null</span> )&#123;</span><br><span class="line">                    output.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//自定义加载器的对象</span></span><br><span class="line">        MyClassLoaderImpl myClassLoader = <span class="keyword">new</span> MyClassLoaderImpl();<span class="comment">//默认在双亲委派时，会根据正规流程：系统——》扩展-&gt;根</span></span><br><span class="line"></span><br><span class="line">        myClassLoader.path = <span class="string">&quot;d:/&quot;</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//MyClassLoaderImpl myClassLoader = new MyClassLoaderImpl();//直接指定某个 具体的的委派</span></span><br><span class="line">        Class&lt;?&gt; aClass = myClassLoader.loadClass(<span class="string">&quot;com.dream.xiaobo.loader.MyDefineCL&quot;</span>);</span><br><span class="line">        System.out.println(aClass.getClassLoader());</span><br><span class="line"><span class="comment">//        MyDefineCL myDefineCL = (MyDefineCL)( aClass.newInstance()) ;</span></span><br><span class="line"><span class="comment">//        myDefineCL.say();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dotToSplit</span><span class="params">(String clssName)</span></span>&#123;  <span class="keyword">return</span> clssName.replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>) ;  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDefineCL</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>总结</li></ul><p>继承ClassLoader，重写的 findClass()</p><p><code>findClass(String name)&#123;...&#125;</code> ：是全类名的形式  a.b.c.class，并且开头 是： 包名.类名.class</p><p><code>loadClassData(String name)&#123;...&#125;</code> ：name所代表的文件内容-&gt;byte[] ,是文件形式的字符串a/b/c.class，并且开头out.production..</p><p> .class文件从classpath中删除，之后才可能用到 自定义类加载器；否在classpath中的.class会被 APPClassLoader加载</p><p><code>loadClass() -&gt;findClass()-&gt;loadClassData()</code>: 代码执行流程</p><p>类加载器只会把同一个类加载一次，同一个class文件加载后的位置</p><p>先委托APPClassLoader加载，APPClassLoader会在classpath中寻找是否存在，如果存在则直接加载；如果不存在，才有可能交给自定义加载器加载</p><p>在双亲委派体系中，下层的加载器是通过parent引用上层的加载器。即在双亲委派体系中，各个加载器之间不是继承关系</p><h4 id="双亲委派机制优势"><a href="#双亲委派机制优势" class="headerlink" title="双亲委派机制优势"></a>双亲委派机制优势</h4><p>可以防止用户自定义的类和rt.jar中的类重名而造成的混乱</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E4%BC%98%E5%8A%BF.6i5wbm0kv3s.webp" alt="双亲委派优势"></p><h4 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B被加载了，加载器是： &quot;</span>+ <span class="keyword">this</span>.getClass().getClassLoader());<span class="comment">//对象使用之前，必然先把此对象对应的类加载</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span>  <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;A被加载了，加载器是： &quot;</span>+ <span class="keyword">this</span>.getClass().getClassLoader());<span class="comment">//对象使用之前，必然先把此对象对应的类加载</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AppClassLoader.class : TestMyClassLoader2</span></span><br><span class="line"><span class="comment">//自定义加载器: A.class/B.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyClassLoader2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        MyClassLoaderImpl myClassLoader = <span class="keyword">new</span> MyClassLoaderImpl() ;</span><br><span class="line">        <span class="comment">//自定义加载路径</span></span><br><span class="line">        myClassLoader.path = <span class="string">&quot;d:/&quot;</span> ;</span><br><span class="line">        Class&lt;?&gt; aClass = myClassLoader.loadClass(<span class="string">&quot;com.dream.xiaobo.extendss.A&quot;</span>);</span><br><span class="line">        Object aObject = aClass.newInstance();<span class="comment">//newInstance()会调用 该类的构造方法(new 构造方法())</span></span><br><span class="line">        System.out.println(aObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">存在继承关系</span><br><span class="line"></span><br><span class="line">A.class:  classpath</span><br><span class="line">B.class:   classpath</span><br><span class="line">原因</span><br><span class="line">同一个AppClassLoader 会同时加载A.class和B.class</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">A.class:   d:\</span><br><span class="line">B.class:   classpath</span><br><span class="line">原因</span><br><span class="line">A.class：自定义加载器加载</span><br><span class="line">B.class：被AppClassLoader加载</span><br><span class="line">因此，加载A.class和B.class的不是同一个加载器</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">A.class:    classpath</span><br><span class="line">B.class:    d:\</span><br><span class="line">NoClassDefFoundError</span><br><span class="line">原因:A.class: 被AppClassLoader加载  B.class: 自定义加载器加载</span><br><span class="line">因此，加载A.class和B.class的不是同一个加载器</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">A.classd:\</span><br><span class="line">B.class d:\</span><br><span class="line">TestMyClassLoader2 can not access a member of class A with modifiers &quot;public&quot;</span><br><span class="line">A.class/B.class: 自定义加载器加载</span><br><span class="line">原因是 main()方法所在类在 工程中（APPClassLoader），而A和B不在工程中（自定义加载器）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">造成这些异常的核心原因： 命名空间（不是由同一个类加载器所加载）</span><br></pre></td></tr></table></figure><h4 id="非继承关系"><a href="#非继承关系" class="headerlink" title="非继承关系"></a>非继承关系</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Y</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Y</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Y被加载了，加载器是： &quot;</span>+ <span class="keyword">this</span>.getClass().getClassLoader());<span class="comment">//对象使用之前，必然先把此对象对应的类加载</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">X</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Y() ;<span class="comment">//加载Y（系统加载器）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;X被加载了，加载器是： &quot;</span>+ <span class="keyword">this</span>.getClass().getClassLoader());<span class="comment">//对象使用之前，必然先把此对象对应的类加载</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AppClassLoader.class : TestMyClassLoader2</span></span><br><span class="line"><span class="comment">//自定义加载器: A.class/B.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyClassLoader3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        MyClassLoaderImpl myClassLoader = <span class="keyword">new</span> MyClassLoaderImpl() ;</span><br><span class="line">        <span class="comment">//自定义加载路径</span></span><br><span class="line">        myClassLoader.path = <span class="string">&quot;d:/&quot;</span> ;</span><br><span class="line">        <span class="comment">//程序第一次加载时（X），使用的是  自定义加载器</span></span><br><span class="line">        Class&lt;?&gt; aClass = myClassLoader.loadClass(<span class="string">&quot;com.dream.xiaobo.extendss.X&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Object aObject = aClass.newInstance();<span class="comment">//newInstance()会调用 该类的构造方法(new 构造方法())</span></span><br><span class="line">        System.out.println(aObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">没有继承关系</span><br><span class="line"></span><br><span class="line">X.class:  D:自定义加载器</span><br><span class="line">Y.class:  classpath系统加载器</span><br><span class="line"></span><br><span class="line">Y被加载了，加载器是： AppClassLoader</span><br><span class="line">X被加载了，加载器是： MyClassLoaderImpl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">因为下层可以调用上层</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">X.class:  classpath  系统加载器</span><br><span class="line">Y.class:  D:    自定义加载器</span><br><span class="line"></span><br><span class="line">java.lang.NoClassDefFoundError</span><br></pre></td></tr></table></figure><p>如果存在继承关系： 继承的双方（父类、子类）都必须是同一个加载器，否则出错</p><p>如果不存在继承关系： 子类加载器可以访问父类加载器加载的类（自定义加载器，可以访问到 系统加载器加载的Y类）；反之不行（父类加载器 不能访问子类加载器）</p><h4 id="OSGI"><a href="#OSGI" class="headerlink" title="OSGI"></a>OSGI</h4><ul><li><p>网状结构的加载结构</p></li><li><p>屏蔽掉硬件的异构性</p></li></ul><p>可以将项目部署在网络上，可以在A节点上 远程操作B节点。在操作上，可以对硬件无感。也可以在A节点上 对B节点上的项目进行运维、部署，并且立项情况下  在维护的期间，不需要暂时、重启。</p><h3 id="类的卸载"><a href="#类的卸载" class="headerlink" title="类的卸载"></a>类的卸载</h3><ul><li>系统自带</li></ul><p>系统加载器、扩展加载器、根加载器，这些加载器加载的类是不会被卸载</p><ul><li>用户自定义的加载器</li></ul><p>会被GC卸载GC</p><h3 id="JVM监测工具"><a href="#JVM监测工具" class="headerlink" title="JVM监测工具"></a>JVM监测工具</h3><p><code>jps</code>: 查看Java进程 （java命令）</p><p><code>jstat</code>:只能查看当前时刻的内存情况；可以查看到 新生代、老年代中的内存使用情况</p><p><code>jmap</code>：查看堆内存的占用情况；也可以执行dump操作</p><p><code>jconsole</code>:图形的监控界面</p><p>如果通过jconsole中的”执行gc”按钮发现 GC回收的内存太少，就说明当前进程是存在问题的（至少是可以被优化的）</p><p><code>jvisualvm</code>:  监视 - 堆Dump -查找最大对象，从中可以发现 当前进程中是哪个对象 占据了最大的内存，从而对这个对象进行分析。</p><p>通过VM参数实现： 当内存溢出时，自动将溢出时刻的内存dump下来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Xmx100m</span><br><span class="line">-Xms100m</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br></pre></td></tr></table></figure><h3 id="GC调优"><a href="#GC调优" class="headerlink" title="GC调优"></a>GC调优</h3><p>调优实际是是一种取舍，以xx换xx的策略。因此在调优之前，必须明确方向：低延迟？高吞吐量？</p><p>在已知条件相同的前提下，牺牲低延迟 来换取 高吞吐量，或者反之。</p><h4 id="GC的发展"><a href="#GC的发展" class="headerlink" title="GC的发展"></a>GC的发展</h4><p><strong>JVM默认的GC</strong></p><p>CMS GC（在jdk9以后被逐步废弃） –&gt; G1 GC(jdk9) –&gt; Z GC(jdk11)</p><ul><li>Serial GC:</li></ul><p>串行GC，是一种在单核环境下的串行回收器。当GC回收的时刻，其他线程必须等待。一般不会使用。</p><ul><li>Parallel GC：</li></ul><p>在Serial 的基础上，使用了多线程技术，提高吞吐量。</p><ul><li>CMS GC</li></ul><p>CMS使用了多线程技术，使用<code>标记清除算法</code>，可以极大提升效率，在低延迟上有很大的提升，CMS GC繁琐，参数太多</p><ul><li>G1 GC</li></ul><p>jdk9开始使用的默认GC。将堆内存划分为很多大小相等region，并会对这些区域的使用状态进行标记。以便GC在回收时，能够快速的定位出哪些region是空闲的，哪些是有垃圾对象，从而提升GC的效率。G1使用的算法是<code>标记整理算法</code></p><ul><li>Z GC</li></ul><p>jdk11开始提供全新的GC。回收TB级别的垃圾 在毫秒范围。</p><p><strong>根据生命周期划分</strong></p><ul><li>Minor GC</li></ul><p>回收新生代中的对象</p><ul><li>Full GC</li></ul><p>回收整个堆空间（新生代、老年代）</p><h4 id="简单的一个小问题"><a href="#简单的一个小问题" class="headerlink" title="简单的一个小问题"></a>简单的一个小问题</h4><ul><li>如果通过监测工具发现Minor GC和Full GC都在频繁的回收，如何优化？</li></ul><p><code>思路</code>：Minor GC –&gt; 短生命周期的对象太多了 –&gt; 造成逃逸到老年代中的对象越多 –&gt;  新生代多+老年代多 –&gt; Full GC </p><p><code>解决办法</code>：Minor GC 可以尝试调大 新生代的最大空间，再调大 新生代晋升到老年代的阈值，从而降低  短生命周期的对象 从新生代转移到老年代的概率</p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221110153753.2ld32fgfn680.webp&quot; alt=&quot;微信图片_20221110153753&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="jvm" scheme="https://codexiaobo.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM 一</title>
    <link href="https://codexiaobo.github.io/posts/3370054281/"/>
    <id>https://codexiaobo.github.io/posts/3370054281/</id>
    <published>2022-11-10T07:42:09.000Z</published>
    <updated>2022-11-10T07:42:55.915Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221110153740.4cjwd89ht760.webp" alt="微信图片_20221110153740"></p><!--sleep--><span id="more"></span><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><p>java virtua Machine</p><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>jdk中包含了<code>jvm</code>和 <code>屏蔽操作系统差异的组件</code></p><ul><li>jvm</li></ul><p>jvm在各个操作系统上是一致的</p><ul><li>屏蔽操作系统差异组件</li></ul><p>在各个操作系统上各不相同，就像Windows、Mac、Linux上安装Jdk需要下载不同的jdk</p><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p>类的加载–&gt;连接–&gt;初始化–&gt;使用–&gt;卸载</p><h3 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h3><p>查找并加载二进制数据，并且从硬盘上加载到jvm内存中</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>校验二进制数据(.class)是否正确</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>在准备阶段，JVM中只有类，没有对象</p><p>首先static静态变量分配内存，并赋初始化默认值，之后（初始化阶段）再进行修改为赋值</p><ul><li>初始化顺序 </li></ul><p>static –&gt;非static –&gt;构造方法</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>把类中符号引用，转为直接引用</p><p>前期阶段，不知道类的具体内存地址，只能使用“com.xiaobo.dream.Student ”来替代Student类，“com.xiaobo.dream.Student ”就称为符号引用</p><p>解析阶段，JVM就可以将 “com.xiaobo.dream.Student ”映射成实际的内存地址，以会后就用内存地址来代替Student，这种称为直接引用</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>给static变量 赋予正确的值</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>对象的初始化</p></li><li><p>对象的垃圾回收</p></li><li><p>对象的销毁</p></li></ul><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><h4 id="JVM结束生命周期时机"><a href="#JVM结束生命周期时机" class="headerlink" title="JVM结束生命周期时机"></a>JVM结束生命周期时机</h4><ul><li><p>正常结束</p></li><li><p>异常结束/错误 Throwable –&gt; Exception AND error</p></li><li><p>System.exit()</p></li><li><p>操作系统异常</p></li></ul><h2 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h2><p>JMM(Java Memoery Model) 定义变量(所有线程的共享变量， 不能是局部变量)的访问规则</p><h3 id="JMM内存划分"><a href="#JMM内存划分" class="headerlink" title="JMM内存划分"></a>JMM内存划分</h3><h4 id="主内存区"><a href="#主内存区" class="headerlink" title="主内存区"></a>主内存区</h4><p>存放真实变量</p><h4 id="工作内存区"><a href="#工作内存区" class="headerlink" title="工作内存区"></a>工作内存区</h4><p>主内存中变量的副本，供各个线程所使用</p><h3 id="线程访问问题"><a href="#线程访问问题" class="headerlink" title="线程访问问题"></a>线程访问问题</h3><ul><li><p>各个线程只能访问自己私有的工作内存，不能访问其他线程的工作内存，也不能访问主内存</p></li><li><p>不同线程之间，可以通过主内存 间接的访问其他线程的工作内存</p></li></ul><h3 id="不同线程之间交互数据"><a href="#不同线程之间交互数据" class="headerlink" title="不同线程之间交互数据"></a>不同线程之间交互数据</h3><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E4%B8%8D%E5%90%8C%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E4%BA%A4%E4%BA%92%E6%95%B0%E6%8D%AE.6hhzj21bpb40.webp" alt="不同线程之间交互数据"></p><p><code>Lock</code>:将主内存中的变量，表示为一条线程的独占状态</p><p><code>Read</code>：将主内存中的变量，读取到工作内存中</p><p><code>Load</code>：将读取的变量拷贝到变量副本中</p><p><code>Use</code>：把工作内存中的变量副本，传递给线程去使用</p><p><code>Assign</code>:把线程正在使用的变量，传递给工作内存中的变量副本中</p><p><code>Store</code>:将工作内存中变量副本的值，传递到主内存中</p><p><code>Write</code>：将变量副本作为一个主内存中的变量进行存储</p><p><code>Unlock</code>:解决线程的独占状态</p><p><strong>以上动作必须是原子性的</strong></p><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>一个操作是不可中断的。即使是在多个线程一起执行的时候，一个操作一旦开始，就不会被其他线程干扰</p><h3 id="读写半个long-double数据问题"><a href="#读写半个long-double数据问题" class="headerlink" title="读写半个long/double数据问题"></a>读写半个long/double数据问题</h3><p>商用JVM解决了此问题</p><p>自己解决可以通过volatile避免读写半个数据的问题</p><h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><p>JVM的一个轻量级的同步机制</p><h3 id="Volatile作用"><a href="#Volatile作用" class="headerlink" title="Volatile作用"></a>Volatile作用</h3><ul><li><p>防止JVM对非原子性协议进行的误操作（读取半个数据）</p></li><li><p>可以使变量对所有的线程立即可见（某一个线程如果修改了 工作内存中的变量副本，那么加上volatile 之后，该变量就会立刻同步到其他线程的工作内存中）</p></li><li><p>禁止指令的“重排序”优化</p></li></ul><h3 id="原子性-1"><a href="#原子性-1" class="headerlink" title="原子性"></a>原子性</h3><p><code>number = 1</code></p><h3 id="非原子性"><a href="#非原子性" class="headerlink" title="非原子性"></a>非原子性</h3><p><code>i++</code></p><p>首先从主内存中拿到i，然后进行 i + 1，然后 i= i + 1；</p><h3 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h3><p>排序的对象就是原子性操作，目的是为了提高执行效率，优化</p><p>不会影响<code>单线程</code>的执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a  =<span class="number">10</span> ; <span class="comment">//1    int a ; a = 10 ;</span></span><br><span class="line"><span class="keyword">int</span> b ;<span class="comment">//2</span></span><br><span class="line">b = <span class="number">20</span> ;<span class="comment">//3</span></span><br><span class="line"><span class="keyword">int</span> c = a * b ;<span class="comment">//4</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2 3 1 4</span></span><br><span class="line"><span class="keyword">int</span> b ;</span><br><span class="line">b = <span class="number">20</span> ;</span><br><span class="line"><span class="keyword">int</span> a  =<span class="number">10</span> ;</span><br><span class="line"><span class="keyword">int</span> c = a * b ;</span><br></pre></td></tr></table></figure><h3 id="volatile防止重排序问题"><a href="#volatile防止重排序问题" class="headerlink" title="volatile防止重排序问题"></a>volatile防止重排序问题</h3><ul><li><p>在volatile写操作前，插入StoreStore屏障</p></li><li><p>在volatile写操作后，插入StoreLoad屏障</p></li><li><p>在volatile读操作后，插入LoadLoad屏障</p></li><li><p>在volatile读操作后，插入LoadStore屏障</p></li></ul><h3 id="volatile原子性和线程安全性问题"><a href="#volatile原子性和线程安全性问题" class="headerlink" title="volatile原子性和线程安全性问题"></a>volatile原子性和线程安全性问题</h3><p>volatile不保证线程的原子性也不保证线程的安全性</p><p>想保证原子性/线程安全，可以使用原子包java.util.cocurrent.aotmic中的类，该类能够保证原子性的核心，是因为提供了compareAndSet()方法，该方法提供了 cas算法（无锁算法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVolatile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    static volatile int number = 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> AtomicInteger number = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; <span class="number">10000</span>; i1++) &#123;</span><br><span class="line"><span class="comment">//                  number++;</span></span><br><span class="line">                    number.incrementAndGet();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JVM运行时内存"><a href="#JVM运行时内存" class="headerlink" title="JVM运行时内存"></a>JVM运行时内存</h2><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>行号指示器，指向当前线程所执行的字节码指令的地址，大白话：class文件中的行号</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98.6wr4ceccz2k0.webp" alt="JVM运行时内存"></p><ul><li><p>一般情况下，程序计数器是行号；但如果正在执行的方法是native方法，则程序计数器的值undefined</p></li><li><p>程序计数器 是唯一一个不会产生 <code>内存溢出</code> 的区域</p></li><li><p>goto的本质就是改变的 程序计数器的值</p></li></ul><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><p>描述方法执行的内存模型</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88.1zoydjx95728.webp" alt="虚拟机栈"></p><p>方法在执行的同时，会在虚拟机栈中创建一个栈帧，栈帧中包含方法的局部变量表，操作数栈、动态链接、方法出口信息等</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>当方法太多时，就可能发生 栈溢出异常StackOverflowError，或者内存溢出异常OutOfMemoryError</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        main(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;小博&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>原理和结构与虚拟机栈一致，不同的是虚拟机栈中存放的是jdk或我们自己编写的方法，而本地方法栈调用的是操作系统底层的方法</p><h4 id="局部变量表AND操作数栈"><a href="#局部变量表AND操作数栈" class="headerlink" title="局部变量表AND操作数栈"></a>局部变量表AND操作数栈</h4><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8AND%E6%93%8D%E4%BD%9C%E6%95%B0%E6%A0%88.5tfsrlyq2ss0.webp" alt="局部变量表AND操作数栈"></p><h4 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h4><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5.6rb2u6mu81k0.webp" alt="动态链接"></p><p>符号引用会在实际执行时转换为不同的地址，所以转换的行为会在每一次运行时都发生一次</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E5%A0%86.17uzgtabmc2k.webp" alt="堆"></p><ul><li><p>存放对象实例（数组、对象）</p></li><li><p>堆是jvm区域中最大的一块，在jvm启动时就已经创建完毕</p></li><li><p>GC主要管理的区域</p></li><li><p>堆本身是线程共享，但在堆内部可以划分出多个线程私有的缓冲区</p></li><li><p>堆允许物理空间不连续，只要逻辑连续即可</p></li><li><p>堆可以分 新生代、老生代 。大小比例，新生代：老生代= 1:2  </p></li></ul><h4 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h4><ul><li><p>新生代中 包含eden、s0、s1 = 8:1:1  </p></li><li><p>新生代的使用率一般在90%。 在使用时，只能使用 一个eden和一块s区间(s0或s1)，底层采用的是复制算法，为了避免碎片产生</p></li><li><p>新生代存放生命周期比较短的对象，小的对象</p></li><li><p>大部分对象都存在于新生代</p></li><li><p>新生代的回收频率高、效率高</p></li></ul><h4 id="老生代"><a href="#老生代" class="headerlink" title="老生代"></a>老生代</h4><ul><li><p>存放在老生代中的对象周期较长，对象较大，对象的大小，可以通过参数设置 <code>-XX：PretenureSizeThredshold</code>。一般而言，大对象一般是 集合、数组、字符串。生命周期： <code>-XX:MaxTenuringThredshold</code>，使用的回收器 MajorGC\FullGC</p></li><li><p>空间大</p></li><li><p>增长速度慢</p></li><li><p>频率低</p></li></ul><h4 id="新生代老生代年龄问题"><a href="#新生代老生代年龄问题" class="headerlink" title="新生代老生代年龄问题"></a>新生代老生代年龄问题</h4><ul><li>新生代、老生代中年龄：MinorGC回收新生代中的对象。如果Eden区中的对象在一次回收后仍然存活，就会被转移到 s区中；之后，如果MinorGC再次回收，已经在s区中的对象仍然存活，则年龄+1。如果年龄增长一定的数字(默认16)，则对象会被转移到 老生代中</li></ul><blockquote><p>在新生代中的对象，每经过一次MinorGC，有三种可能<br>从eden –&gt;s区<br>已经在s区中，年龄+1<br>转移到老生代中</p></blockquote><h4 id="具体问题具体考虑"><a href="#具体问题具体考虑" class="headerlink" title="具体问题具体考虑"></a>具体问题具体考虑</h4><p>根据项目中 对象大小的数量，设置新生代或老生代的空间容量，从提高GC的性能</p><p>对象太多，会导致内存异常</p><h4 id="虚拟机参数"><a href="#虚拟机参数" class="headerlink" title="虚拟机参数"></a>虚拟机参数</h4><p><code>-Xms128m</code> ：JVM启动时的大小</p><p><code>-Xmn32m</code>：新生代大小</p><p><code>-Xmx128</code>：总大小</p><p>jvm总大小= 新生代 + 老生代</p><p>一般-Xms128m 和 -Xmx128相同</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>存放类的元数据（描述类的信息）、常量池、方法信息（方法数据、方法代码）</p><p>GC：类的元数据（描述类的信息）、常量池（存放编译期间产生的 字面量(“abc”)、符号引用）</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E6%96%B9%E6%B3%95%E5%8C%BA.5aa97c3hd5c0.webp" alt="方法区"></p><h4 id="内存异常OutOfMemoryError"><a href="#内存异常OutOfMemoryError" class="headerlink" title="内存异常OutOfMemoryError"></a>内存异常OutOfMemoryError</h4><p>内存溢出的异常OutOfMemoryError，除了虚拟机中的4个区域以外，还可能是直接内存。在NIO技术中会使用到直接内存</p><h2 id="类的使用方式"><a href="#类的使用方式" class="headerlink" title="类的使用方式"></a>类的使用方式</h2><ul><li>类的初始化</li></ul><p>JVM只会在<code>首次主动使用</code>一个类/接口时，才会初始化它们</p><h3 id="主动使用"><a href="#主动使用" class="headerlink" title="主动使用"></a>主动使用</h3><ul><li>new 构造类的使用 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">new</span> Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行结果:</span><br><span class="line">初始化了</span><br></pre></td></tr></table></figure><ul><li>访问类/接口的 静态成员（属性、方法）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method 初始化了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运行结果:</span><br><span class="line">初始化了</span><br><span class="line">method 初始化了</span><br></pre></td></tr></table></figure><p>main()本身也是一个静态方法，main()的所在类 也会在执行被初始化</p><p>如果成员变量既是static，又是final ，即常量，则不会被初始化</p><p>上边的这一种情况中，如果常量的值 是一个随机值，则会被初始化 (为了安全)</p><ul><li>使用Class.forName(“”)执行反射时使用的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        A.method();</span><br><span class="line">        Class.forName(<span class="string">&quot;com.dream.xiaobo.initiative.Test&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>初始化一个子类时，该子类的父类也会被初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是爸爸&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Son();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>动态语言在执行所涉及的类 也会被初始化（动态代理）</li></ul><h3 id="被动使用"><a href="#被动使用" class="headerlink" title="被动使用"></a>被动使用</h3><p>除了主动以外，其他都是被动使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B[] bs = <span class="keyword">new</span> B[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BBB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不属于主动使用类，因此不会被初始化</p><h2 id="助记符"><a href="#助记符" class="headerlink" title="助记符"></a>助记符</h2><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>编译的是class文件</p><p><code>javap -c class文件名</code></p><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Test.i);</span><br><span class="line">        System.out.println(Test.s);</span><br><span class="line">        System.out.println(Test.l);</span><br><span class="line">        System.out.println(Test.d);</span><br><span class="line">        System.out.println(Test.f);</span><br><span class="line">        System.out.println(Test.b);</span><br><span class="line">        System.out.println(Test.bl);</span><br><span class="line">        System.out.println(Test.c);</span><br><span class="line">        System.out.println(Test.string);</span><br><span class="line">        System.out.println(Test.test);</span><br><span class="line">        System.out.println(Test.array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> l = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> d = <span class="number">10.0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> f = <span class="number">11.1f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> bl = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String string = <span class="string">&quot;xiaobo&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> C test = <span class="keyword">new</span> C();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> C[] array = <span class="keyword">new</span> C[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>反编译结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Users\<span class="number">86158</span>\jvm\<span class="keyword">volatile</span>\out\production\<span class="keyword">volatile</span>\com\dream\xiaobo\compile&gt; javap -c C</span><br><span class="line">警告: 文件 .\C.class 不包含类 C</span><br><span class="line">Compiled from <span class="string">&quot;C.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">dream</span>.<span class="title">xiaobo</span>.<span class="title">compile</span>.<span class="title">C</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> com.dream.xiaobo.compile.C();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">       <span class="number">3</span>: getstatic     #<span class="number">3</span>                  <span class="comment">// Field com/dream/xiaobo/compile/Test.i:I</span></span><br><span class="line">       <span class="number">6</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">       <span class="number">9</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">12</span>: getstatic     #<span class="number">5</span>                  <span class="comment">// Field com/dream/xiaobo/compile/Test.s:S</span></span><br><span class="line">      <span class="number">15</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">      <span class="number">18</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">21</span>: getstatic     #<span class="number">6</span>                  <span class="comment">// Field com/dream/xiaobo/compile/Test.l:J</span></span><br><span class="line">      <span class="number">24</span>: invokevirtual #<span class="number">7</span>                  <span class="comment">// Method java/io/PrintStream.println:(J)V</span></span><br><span class="line">      <span class="number">27</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">30</span>: getstatic     #<span class="number">8</span>                  <span class="comment">// Field com/dream/xiaobo/compile/Test.d:D</span></span><br><span class="line">      <span class="number">33</span>: invokevirtual #<span class="number">9</span>                  <span class="comment">// Method java/io/PrintStream.println:(D)V</span></span><br><span class="line">      <span class="number">36</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">39</span>: getstatic     #<span class="number">10</span>                 <span class="comment">// Field com/dream/xiaobo/compile/Test.f:F</span></span><br><span class="line">      <span class="number">42</span>: invokevirtual #<span class="number">11</span>                 <span class="comment">// Method java/io/PrintStream.println:(F)V</span></span><br><span class="line">      <span class="number">45</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">48</span>: getstatic     #<span class="number">12</span>                 <span class="comment">// Field com/dream/xiaobo/compile/Test.b:B</span></span><br><span class="line">      <span class="number">51</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">      <span class="number">54</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">57</span>: getstatic     #<span class="number">13</span>                 <span class="comment">// Field com/dream/xiaobo/compile/Test.bl:Z</span></span><br><span class="line">      <span class="number">60</span>: invokevirtual #<span class="number">14</span>                 <span class="comment">// Method java/io/PrintStream.println:(Z)V</span></span><br><span class="line">      <span class="number">63</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">66</span>: getstatic     #<span class="number">15</span>                 <span class="comment">// Field com/dream/xiaobo/compile/Test.c:C</span></span><br><span class="line">      <span class="number">69</span>: invokevirtual #<span class="number">16</span>                 <span class="comment">// Method java/io/PrintStream.println:(C)V</span></span><br><span class="line">      <span class="number">72</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">75</span>: getstatic     #<span class="number">17</span>                 <span class="comment">// Field com/dream/xiaobo/compile/Test.string:Ljava/lang/String;</span></span><br><span class="line">      <span class="number">78</span>: invokevirtual #<span class="number">18</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="number">81</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">84</span>: getstatic     #<span class="number">19</span>                 <span class="comment">// Field com/dream/xiaobo/compile/Test.test:Lcom/dream/xiaobo/compile/C;</span></span><br><span class="line">      <span class="number">87</span>: invokevirtual #<span class="number">20</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line">      <span class="number">90</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">93</span>: getstatic     #<span class="number">21</span>                 <span class="comment">// Field com/dream/xiaobo/compile/Test.array:[Lcom/dream/xiaobo/compile/C;</span></span><br><span class="line">      <span class="number">96</span>: invokevirtual #<span class="number">20</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line">      <span class="number">99</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>aload_0</code>: 装载了一个引用类型</p><p><code>Invokespecial</code>:  init,private,super.method():&lt;init&gt;存放的是初始化代码的位置</p><p><code>getstatic</code>：获取静态成员</p><p><code>bipush</code> ：整数范围 -128 &lt;–&gt; 127之内  (8位带符号的整数),放到栈顶</p><p><code>sipush</code>: &gt;127   (16个带符号的整数),放到栈顶</p><p>无论是定义int或short等，只要在 -128 –127以内 都是bipush，否则是sipush</p><p><code>特殊</code>：-1  –&gt;  5不是bipush iconst_m1（-1）  iconst_0   iconst_1 ….  iconst_5</p><p><code>ldc</code>: int  float String 常量 ,放到栈顶</p><p><code>ldc2_w</code> :long  double常量,放到栈顶</p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221110153740.4cjwd89ht760.webp&quot; alt=&quot;微信图片_20221110153740&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="JVM" scheme="https://codexiaobo.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>elk 一</title>
    <link href="https://codexiaobo.github.io/posts/441140627/"/>
    <id>https://codexiaobo.github.io/posts/441140627/</id>
    <published>2022-11-03T16:15:57.000Z</published>
    <updated>2022-11-03T16:16:39.728Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/elasticsearch.3dyx4lvs5no0.webp" alt="elasticsearch"></p><!--sleep--><span id="more"></span><h1 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h1><h2 id="Elastic-Stack"><a href="#Elastic-Stack" class="headerlink" title="Elastic Stack"></a>Elastic Stack</h2><p>ELK是一个免费开源的日志分析架构技术栈总称，官网<a href="https://www.elastic.co/cn">https://www.elastic.co/cn</a></p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul><li><p>Elasticsearch</p></li><li><p>Logstash</p></li><li><p>Kibana</p></li><li><p>Beats</p></li><li><p>Elastic cloud</p></li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li><p>数据搜索</p></li><li><p>分析和收集</p></li><li><p>日志分析</p></li></ul><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>用户输入想要的关键词，返回含有该关键词的所有信息</p><h4 id="互联网搜索"><a href="#互联网搜索" class="headerlink" title="互联网搜索"></a>互联网搜索</h4><p>谷歌、百度、各种新闻首页</p><h4 id="站内搜索-垂直搜索"><a href="#站内搜索-垂直搜索" class="headerlink" title="站内搜索(垂直搜索)"></a>站内搜索(垂直搜索)</h4><p>企业OA查询订单、人员、部门，电商网站内部搜索商品</p><h3 id="数据库做搜索的弊端"><a href="#数据库做搜索的弊端" class="headerlink" title="数据库做搜索的弊端"></a>数据库做搜索的弊端</h3><ul><li><p>存储问题</p></li><li><p>性能问题</p></li><li><p>不能分词</p></li></ul><p><strong>站内搜索（垂直搜索）数据量小，简单搜索，可以使用数据库</strong></p><p><strong>互联网搜索，肯定不会使用数据库搜索。数据量太大。PB级</strong></p><h3 id="全文检索-倒排索引-Lucene"><a href="#全文检索-倒排索引-Lucene" class="headerlink" title="全文检索 倒排索引 Lucene"></a>全文检索 倒排索引 Lucene</h3><p>数据存储时，经行分词建立term索引库  </p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E5%85%A8%E5%B1%80%E6%A3%80%E7%B4%A2AND%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.5yzz5er88ac0.webp" alt="全局检索AND倒排索引"></p><p>倒排索引源于实际应用中需要根据属性的值来查找记录。这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引(inverted index)。带有倒排索引的文件我们称为倒排索引文件，简称倒排文件(inverted file)</p><ul><li>Lucene</li></ul><p>一个jar包，封装了全文检索的引擎、搜索的算法代码。底层会在磁盘建立索引库</p><h3 id="Elasticsearch功能"><a href="#Elasticsearch功能" class="headerlink" title="Elasticsearch功能"></a>Elasticsearch功能</h3><h4 id="分布式的搜索引擎和数据分析引擎"><a href="#分布式的搜索引擎和数据分析引擎" class="headerlink" title="分布式的搜索引擎和数据分析引擎"></a>分布式的搜索引擎和数据分析引擎</h4><ul><li>搜索</li></ul><p>互联网搜索,站内搜索,OA系统查询</p><ul><li>数据分析</li></ul><p>销量前10,最近7天搜索最高的关键字,热点话题分析</p><h4 id="全文检索，结构化检索，数据分析"><a href="#全文检索，结构化检索，数据分析" class="headerlink" title="全文检索，结构化检索，数据分析"></a>全文检索，结构化检索，数据分析</h4><ul><li>全文检索</li></ul><p>搜索一个商品包含某个关键字</p><ul><li>结构化检索</li></ul><p>搜索一个分类的商品</p><ul><li>数据分析</li></ul><p>搜索一个分类下的商品数量</p><h4 id="海量数据进行近实时的处理"><a href="#海量数据进行近实时的处理" class="headerlink" title="海量数据进行近实时的处理"></a>海量数据进行近实时的处理</h4><ul><li>分布式</li></ul><p>ES自动将海量数据分散到多台服务器上去存储和检索,经行并行查询，提高搜索效率。相对的，Lucene是单机应用</p><ul><li>近实时</li></ul><p>数据库上亿条数据查询，搜索一次耗时几个小时，是批处理，而es只需秒级即可查询海量数据，所以叫近实时。秒级</p><h3 id="Elasticserch场景"><a href="#Elasticserch场景" class="headerlink" title="Elasticserch场景"></a>Elasticserch场景</h3><ul><li>百度搜索</li></ul><p>第一次查询，使用es</p><ul><li>OA、ERP系统站内搜索</li></ul><h3 id="Elasticserch特点"><a href="#Elasticserch特点" class="headerlink" title="Elasticserch特点"></a>Elasticserch特点</h3><ul><li><p>可扩展</p></li><li><p>技术整合</p></li><li><p>部署简单</p></li><li><p>接口简单</p></li><li><p>功能强大</p></li></ul><h2 id="Elasticsearch核心概念"><a href="#Elasticsearch核心概念" class="headerlink" title="Elasticsearch核心概念"></a>Elasticsearch核心概念</h2><p><code>Lucene</code> 最先进、功能最强大的搜索库，直接基于lucene开发，非常复杂，api复杂</p><p><code>Elasticsearch</code> 基于lucene，封装了许多lucene底层功能，提供简单易用的restful api接口和许多语言的客户端</p><h3 id="NRT-近实时"><a href="#NRT-近实时" class="headerlink" title="NRT(近实时)"></a>NRT(近实时)</h3><p>写入数据时，过1秒才会被搜索到，因为内部在分词、录入索引。</p><p>es搜索时，搜索和分析数据需要秒级出结果</p><h3 id="Cluster-集群"><a href="#Cluster-集群" class="headerlink" title="Cluster(集群)"></a>Cluster(集群)</h3><p>包含一个或多个启动着es实例的机器群。通常一台机器起一个es实例。同一网络下，集群名一样的多个es实例自动组成集群，自动均衡分片等行为。默认集群名为“elasticsearch”</p><h3 id="Node-节点"><a href="#Node-节点" class="headerlink" title="Node(节点)"></a>Node(节点)</h3><p>每个es实例称为一个节点。节点名自动分配，也可以手动配置</p><h3 id="Index-索引"><a href="#Index-索引" class="headerlink" title="Index(索引)"></a>Index(索引)</h3><p>包含一堆有相似结构的文档数据</p><h3 id="Document-文档"><a href="#Document-文档" class="headerlink" title="Document(文档)"></a>Document(文档)</h3><p>es中的最小数据单元。一个document就像数据库中的一条记录。通常以json格式显示。多个document存储于一个索引（Index）中</p><h3 id="Field-字段"><a href="#Field-字段" class="headerlink" title="Field(字段)"></a>Field(字段)</h3><p>就像数据库中的列，定义每个document应该有的字段</p><h3 id="Type-类型"><a href="#Type-类型" class="headerlink" title="Type(类型)"></a>Type(类型)</h3><p>每个索引里都可以有一个或多个type，type是index中的一个逻辑数据分类，一个type下的document，都有相同的field</p><h3 id="Shard-分片"><a href="#Shard-分片" class="headerlink" title="Shard(分片)"></a>Shard(分片)</h3><p>index数据过大时，将index里面的数据，分为多个shard，分布式的存储在各个服务器上面。可以支持海量数据和高并发，提升性能和吞吐量，充分利用多台机器的cpu</p><h3 id="replica-副本"><a href="#replica-副本" class="headerlink" title="replica(副本)"></a>replica(副本)</h3><p>在分布式环境下，任何一台机器都会随时宕机，如果宕机，index的一个分片没有，导致此index不能搜索。所以，为了保证数据的安全，我们会将每个index的分片经行备份，存储在另外的机器上。保证少数机器宕机es集群仍可以搜索</p><p>能正常提供查询和插入的分片我们叫做主分片，其余的我们就管他们叫做备份的分片</p><p>es6默认新建索引时，5分片，2副本，也就是一主一备，共10个分片。所以，es集群最小规模为两台</p><h3 id="Elasticsearch-对比-关系型数据库"><a href="#Elasticsearch-对比-关系型数据库" class="headerlink" title="Elasticsearch 对比 关系型数据库"></a>Elasticsearch 对比 关系型数据库</h3><table><thead><tr><th>关系型数据库</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>数据库Database</td><td>索引Index</td></tr><tr><td>表Table</td><td>索引Index(type)</td></tr><tr><td>数据行Row</td><td>文档Document</td></tr><tr><td>数据列Column</td><td>字段Field</td></tr><tr><td>约束 Schema</td><td>映射Mapping</td></tr></tbody></table><h2 id="Elasticsearch安装"><a href="#Elasticsearch安装" class="headerlink" title="Elasticsearch安装"></a>Elasticsearch安装</h2><p>这里用到jdk 版本高于1.8.0_73</p><p><a href="https://www.elastic.co/cn/">下载地址</a><br><a href="https://www.elastic.co/cn/">https://www.elastic.co/cn/</a></p><p>我在这里学习的版本是7.3.0</p><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><p><code>bin</code>：脚本目录</p><p><code>config</code>：配置文件目录</p><p><code>data</code>：索引目录，存放索引文件的地方</p><p><code>logs</code>：日志目录</p><p><code>modules</code>：模块目录，包括了es的功能模块</p><p><code>plugins</code> :插件目录，es支持插件机制</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ul><li>elasticsearch.yml中添加</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span>  </span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>]  </span><br><span class="line"><span class="attr">xpack.ml.enabled:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">/.*/</span></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>bin目录中执行脚本文件<code>elasticsearch.bat</code></p><p>访问 <code>http://localhost:9200/</code> 即可查看</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/es%E5%90%AF%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%9F%A5%E7%9C%8B.6txparfgf840.webp" alt="es启动信息查看"></p><p>访问 <code>http://localhost:9200/_cluster/health</code> 查询集群状态</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/es%E9%9B%86%E7%BE%A4%E7%8A%B6%E6%80%81.povzwbrsbkw.webp" alt="es集群状态"></p><h3 id="集群状态介绍"><a href="#集群状态介绍" class="headerlink" title="集群状态介绍"></a>集群状态介绍</h3><p><code>Status</code> 集群状态</p><p><code>Green</code> 所有分片可用</p><p><code>Yellow</code> 所有主分片可用。Red主分片不可用，集群不可用</p><h2 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a>Kibana安装</h2><p>、kibana是es数据的前端展现，数据分析时，可以方便地看到数据。作为开发人员，可以方便访问es</p><p>下载地址同上，一个旗下的产品</p><p>目录结构相似，也可以对其修改配置</p><p><code>i18n.locale: &quot;zh-CN&quot;</code> 支持中文，配置里这个改下国际化就行</p><p>访问地址 <code>http://localhost:5601</code></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/kibana%E6%9F%A5%E7%9C%8B.5qp1ffbe1t00.webp" alt="kibana查看"></p><h2 id="es详细"><a href="#es详细" class="headerlink" title="es详细"></a>es详细</h2><h3 id="文档（document）的数据格式"><a href="#文档（document）的数据格式" class="headerlink" title="文档（document）的数据格式"></a>文档（document）的数据格式</h3><ul><li><p>应用系统的数据结构都是面向对象的，具有复杂的数据结构</p></li><li><p>对象存储到数据库，需要将关联的复杂对象属性插到另一张表，查询时再拼接起来。</p></li><li><p>es面向文档，文档中存储的数据结构，与对象一致。所以一个对象可以直接存成一个文档。</p></li><li><p>es的document用json数据格式来表达</p></li></ul><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String classInfoId;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassInfo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String className;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="es"><a href="#es" class="headerlink" title="es"></a>es</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span>: <span class="string">&quot;zhang&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classInfo&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;className&quot;</span>: <span class="string">&quot;三年二班&quot;</span>,     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><h4 id="快速检查集群的健康状况"><a href="#快速检查集群的健康状况" class="headerlink" title="快速检查集群的健康状况"></a>快速检查集群的健康状况</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/health?v</span><br></pre></td></tr></table></figure><p><code>green</code>：每个索引的primary shard和replica shard都是active状态的</p><p><code>yellow</code>：每个索引的primary shard都是active状态的，但是部分replica shard不是active状态，处于不可用的状态</p><p><code>red</code>：不是所有索引的primary shard都是active状态的，部分索引有数据丢失了</p><h4 id="快速查看集群中有哪些索引"><a href="#快速查看集群中有哪些索引" class="headerlink" title="快速查看集群中有哪些索引"></a>快速查看集群中有哪些索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/indices?v</span><br></pre></td></tr></table></figure><h3 id="document-CRUD操作"><a href="#document-CRUD操作" class="headerlink" title="document CRUD操作"></a>document CRUD操作</h3><h4 id="新建索引"><a href="#新建索引" class="headerlink" title="新建索引"></a>新建索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /index</span><br></pre></td></tr></table></figure><h4 id="新建文档"><a href="#新建文档" class="headerlink" title="新建文档"></a>新建文档</h4><p>语法：<code>PUT /index/type/id</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT /book/_doc/1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;Bootstrap开发&quot;,</span><br><span class="line">&quot;description&quot;: &quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;,</span><br><span class="line">&quot;studymodel&quot;: &quot;201002&quot;,</span><br><span class="line">&quot;price&quot;:38.6,</span><br><span class="line">&quot;timestamp&quot;:&quot;2019-08-25 19:11:35&quot;,</span><br><span class="line">&quot;pic&quot;:&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">&quot;tags&quot;: [ &quot;bootstrap&quot;, &quot;dev&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检索文档"><a href="#检索文档" class="headerlink" title="检索文档"></a>检索文档</h4><p>语法：<code>GET /index/type/id</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /book/_doc/1 </span><br></pre></td></tr></table></figure><h4 id="修改文档-替换"><a href="#修改文档-替换" class="headerlink" title="修改文档 替换"></a>修改文档 替换</h4><p>语法：<code>PUT /book/type/id</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /book/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;Bootstrap开发教程1&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;,</span><br><span class="line">    &quot;studymodel&quot;: &quot;201002&quot;,</span><br><span class="line">    &quot;price&quot;:38.6,</span><br><span class="line">    &quot;timestamp&quot;:&quot;2019-08-25 19:11:35&quot;,</span><br><span class="line">    &quot;pic&quot;:&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">    &quot;tags&quot;: [ &quot;bootstrap&quot;, &quot;开发&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改文档-更新"><a href="#修改文档-更新" class="headerlink" title="修改文档 更新"></a>修改文档 更新</h4><p>语法：<code>POST /&#123;index&#125;/type /&#123;id&#125;/_update</code></p><p>或者<code>POST /&#123;index&#125;/_update/&#123;id&#125;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /book/_update/1/ </span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">   &quot;name&quot;: &quot; Bootstrap开发教程高级&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>语法：<code>DELETE /index/type/id</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /book/_doc/1</span><br></pre></td></tr></table></figure><h2 id="document详细"><a href="#document详细" class="headerlink" title="document详细"></a>document详细</h2><h3 id="字段解析"><a href="#字段解析" class="headerlink" title="字段解析"></a>字段解析</h3><ul><li>_index</li></ul><p>此文档属于哪个索引</p><p>类似数据放在一个索引中。数据库中表的定义规则。各个索引存储和搜索时互不影响</p><ul><li>_type</li></ul><p>类别</p><p>以后es9将彻底删除此字段，所以当前版本在不断弱化type。见到_type都为doc。</p><ul><li>_id</li></ul><p>文档的唯一标识。就像表的id主键。结合索引可以标识和定义一个文档。</p><h3 id="手动生成id"><a href="#手动生成id" class="headerlink" title="手动生成id"></a>手动生成id</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put /index/_doc/id</span><br></pre></td></tr></table></figure><h3 id="自动生成id"><a href="#自动生成id" class="headerlink" title="自动生成id"></a>自动生成id</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /index/_doc</span><br></pre></td></tr></table></figure><p>长度为20个字符，URL安全，base64编码，GUID，分布式生成不冲突</p><h3 id="source-字段"><a href="#source-字段" class="headerlink" title="_source 字段"></a>_source 字段</h3><p>插入数据时的所有字段和值。在get获取数据时，在_source字段中原样返回</p><h3 id="定制返回字段"><a href="#定制返回字段" class="headerlink" title="定制返回字段"></a>定制返回字段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /book/_doc/1?__source_includes=name,price</span><br></pre></td></tr></table></figure><h3 id="文档的替换与删除"><a href="#文档的替换与删除" class="headerlink" title="文档的替换与删除"></a>文档的替换与删除</h3><h4 id="全量替换"><a href="#全量替换" class="headerlink" title="全量替换"></a>全量替换</h4><p>执行两次，返回结果中版本号version在不断上升。此过程为全量替换</p><p>本质：旧文档的内容不会立即删除，只是标记为deleted。适当的时机，集群会将这些文档删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="强制创建"><a href="#强制创建" class="headerlink" title="强制创建"></a>强制创建</h4><p>为防止覆盖原有数据，我们在新增时，设置为强制创建，不会覆盖原有文档<br><code>PUT /index/ _doc/id/_create</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/_doc/1/_create</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><code>DELETE /index/_doc/id</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE  /test_index/_doc/1/</span><br></pre></td></tr></table></figure><p>实质：旧文档的内容不会立即删除，只是标记为deleted。适当的时机，集群会将这些文档删除</p><h3 id="全局替换"><a href="#全局替换" class="headerlink" title="全局替换"></a>全局替换</h3><p>全量替换，需要将文档所有数据提交</p><blockquote><p>重新发一份给es<br>每次修改都将新的数据发给es</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post /index/type/id/</span><br><span class="line">&#123;</span><br><span class="line">   &quot;doc&quot;: &#123;</span><br><span class="line">      &quot;field&quot;：&quot;value&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部替换"><a href="#局部替换" class="headerlink" title="局部替换"></a>局部替换</h3><p>局部替换则只修改变动字段</p><blockquote><p>es内部获取旧文档<br>将传来的文档field更新到旧数据<br>将旧文档标记为delete<br>创建的新文档<br>都是在es内部完成的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post /index/type/id/_update </span><br><span class="line">&#123;</span><br><span class="line">   &quot;doc&quot;: &#123;</span><br><span class="line">      &quot;field&quot;：&quot;value&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点</li></ul><p>减少网络请求次数</p><p>减少网络开销</p><p>减少并发冲突</p><h3 id="脚本更新"><a href="#脚本更新" class="headerlink" title="脚本更新"></a>脚本更新</h3><p>es可以内置脚本执行复杂操作。例如painless脚本</p><p>这里不太使用，举个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/_doc/6</span><br><span class="line">&#123;</span><br><span class="line">  &quot;num&quot;: 0,</span><br><span class="line">  &quot;tags&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/_doc/6/_update</span><br><span class="line">&#123;</span><br><span class="line">   &quot;script&quot; : &quot;ctx._source.num+=1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="es并发问题"><a href="#es并发问题" class="headerlink" title="es并发问题"></a>es并发问题</h3><p>就是假如现在有两个下单的线程，下单不得减库存吗，现在有100件库存，线程1要减库存了，100-1=99，但是线程2也要减库存了100-1=99，正常顺序不是线程1，减完然后线程2在减吗，但是这是线程2先到了，就会出现问题</p><p>插入数据没有问题，例如日志，但是修改数据会有问题，出现数据不准确的问题，发生并发冲突</p><h3 id="悲观锁与乐观锁机制"><a href="#悲观锁与乐观锁机制" class="headerlink" title="悲观锁与乐观锁机制"></a>悲观锁与乐观锁机制</h3><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>就是在特殊情况下对数据上锁，只能有一个线程来操作数据，不同场景有不同的锁机制，行级锁、表级锁、读锁、写锁</p><p>现在还是以刚才的下单说明，两个线程，使用悲观锁了，这时我们把线程1锁住了，这个时候线程2就卡住了，因为得等待线程1对数据做完操作以后，线程2才能读取到数据</p><ul><li>优点</li></ul><p>方便，对程序将不需要额外操作</p><ul><li>缺点</li></ul><p>并发能力弱，相当于单线程了</p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>乐观锁不用锁机制，一般使用版本来进行控制</p><p>这样一开始version=1，当一个线程修改数据时，都带着version=1去修改，这个时候就有一个线程修改了，version就会变成version=2了，所以另一个还带着version=1呢，所以他就会重新获取数据，然后进行修改数据，并且重新带着version=2去修改了</p><ul><li>优点</li></ul><p>并发能力高，不加锁，所以相当于多线程了</p><ul><li>缺点</li></ul><p>麻烦，每次要对比version，高并发下重复次数较多</p><h3 id="es内部基于version乐观锁控制"><a href="#es内部基于version乐观锁控制" class="headerlink" title="es内部基于version乐观锁控制"></a>es内部基于version乐观锁控制</h3><p>es内部的主从同步是异步多线程的，所以会出现混乱</p><p>举个例子，就好比P0要同步到R0，先修改的线程1带着version1，然后线程2带着version2过来了，我们当然希望按着顺序来了，可是没有控制的话就不一定了</p><p>所以es内部使用了version乐观锁控制，es对于文档的增删改都是基于版本号</p><p>如果后修改的线程先到了，副本分片先把数据修改咯，然后version+1，然后本应该先修改的线程到了在判断version，这个时候就会判断到你现在这个version过时了，就会自动丢掉这个请求</p><p>模拟一下就是你先创建，然后删咯，然后在创建 你看下version，肯定会一直在增</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/es%E5%86%85%E9%83%A8%E4%B9%90%E8%A7%82%E9%94%81.6dw42bgdh440.webp" alt="es内部乐观锁"></p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/elasticsearch.3dyx4lvs5no0.webp&quot; alt=&quot;elasticsearch&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="elk" scheme="https://codexiaobo.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://codexiaobo.github.io/posts/4126800539/"/>
    <id>https://codexiaobo.github.io/posts/4126800539/</id>
    <published>2022-10-31T12:33:42.000Z</published>
    <updated>2022-10-31T12:35:01.281Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/docker.4p2gxlnxopi0.webp" alt="docker"></p><!--sleep--><span id="more"></span><h1 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h1><p>Docker 是一个开源的应用容器引擎，基于 Go 语言开发。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口,更重要的是容器性能开销极低</p><h2 id="Docker应用场景"><a href="#Docker应用场景" class="headerlink" title="Docker应用场景"></a>Docker应用场景</h2><ul><li><p>Web 应用的自动化打包和发布</p></li><li><p>自动化测试和持续集成、发布</p></li><li><p>在服务型环境中部署和调整数据库或其他的后台应用</p></li></ul><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/Docker%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.301jhsonlv40.webp" alt="Docker应用场景"></p><h2 id="Docker结构"><a href="#Docker结构" class="headerlink" title="Docker结构"></a>Docker结构</h2><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/Docker%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84.2xqc7w9w5960.webp" alt="Docker组成结构"></p><p><code>Docker 镜像(Images)</code>：Docker 镜像是用于创建 Docker 容器的模板，镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来</p><p><code>Docker 容器(Container)</code>：容器是独立运行的一个或一组应用。镜像相当于类，容器相当于类的实例</p><p><code>Docker 客户端(Client)</code>：Docker 客户端通过命令行或者其他工具使用 Docker API 与 Docker 的守护进程通信</p><p><code>Docker 主机(Host)</code>:    一个物理或者虚拟的机器用于执行 Docker 守护进程和容器</p><p><code>Docker守护进程</code>: Docker服务器端进程，负责支撑Docker 容器的运行以及镜像的管理</p><p><code>Docker仓库</code>：DockerHub (Registry)    Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库<br>Docker Hub提供了庞大的镜像集合供使用。用户也可以将自己本地的镜像推送到Docker仓库供其他人下载</p><h2 id="Docker安装与操作"><a href="#Docker安装与操作" class="headerlink" title="Docker安装与操作"></a>Docker安装与操作</h2><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、yum 包更新到最新 </span></span><br><span class="line">sudo yum update </span><br><span class="line"><span class="comment"># 2、作用：安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2 </span><br><span class="line"><span class="comment"># 3、 设置yum源 </span></span><br><span class="line"><span class="comment"># 使用ustc的（推荐） </span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo </span><br><span class="line"><span class="comment"># 4、 安装docker；出现输入的界面都按 y </span></span><br><span class="line">sudo yum install -y docker-ce</span><br><span class="line"><span class="comment"># 5、 查看docker版本 </span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行如下命令： </span></span><br><span class="line">mkdir /etc/docker </span><br><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><ul><li>daemon.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Docker启动与停止指令"><a href="#Docker启动与停止指令" class="headerlink" title="Docker启动与停止指令"></a>Docker启动与停止指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker服务： </span></span><br><span class="line">systemctl start docker </span><br><span class="line"><span class="comment"># 停止docker服务： </span></span><br><span class="line">systemctl stop docker </span><br><span class="line"><span class="comment"># 重启docker服务： </span></span><br><span class="line">systemctl restart docker </span><br><span class="line"><span class="comment"># 查看docker服务状态： </span></span><br><span class="line">systemctl status docker </span><br><span class="line"><span class="comment"># 设置开机启动docker服务： </span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="Docker操作镜像指令"><a href="#Docker操作镜像指令" class="headerlink" title="Docker操作镜像指令"></a>Docker操作镜像指令</h3><ul><li>查看本地镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看镜像 </span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p><code>REPOSITORY</code>：镜像名称</p><p><code>TAG</code>：镜像标签</p><p><code>IMAGE ID</code>：镜像ID</p><p><code>CREATED</code>：镜像的创建日期</p><p><code>SIZE</code>：镜像大小</p><ul><li>搜索镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从网络中查找需要的镜像 </span></span><br><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure><p><code>NAME</code>：镜像名称</p><p><code>DESCRIPTION</code>：镜像描述</p><p><code>STARS</code>：用户评价，反应一个镜像的受欢迎程度</p><p><code>OFFICIAL</code>：是否官方</p><p><code>AUTOMATED</code>：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p><ul><li>拉取镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像就是从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本</span></span><br><span class="line">docker pull 镜像名称 </span><br><span class="line"><span class="comment"># 如拉取centos 7； </span></span><br><span class="line">docker pull centos:7</span><br></pre></td></tr></table></figure><ul><li>删除镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以按照镜像id删除镜像： </span></span><br><span class="line">docker rmi 镜像id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有镜像</span></span><br><span class="line">docker rmi docker images -q</span><br></pre></td></tr></table></figure><h3 id="Docker操作容器指令"><a href="#Docker操作容器指令" class="headerlink" title="Docker操作容器指令"></a>Docker操作容器指令</h3><ul><li>查看容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看正在运行的容器使用命令：</span><br><span class="line">docker ps</span><br><span class="line">查看所有容器使用命令：</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><ul><li>交互式容器</li></ul><p>启动完成后，直接进入当前容器。使用exit命令退出容器。需要注意的是以此种方式启动容器，如果退出容器，则容器会进入停止状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取一个镜像</span></span><br><span class="line">docker pull centos:7 </span><br><span class="line"><span class="comment"># 创建并启动名称为 mycentos7 的交互式容器 </span></span><br><span class="line">docker run -it --name=xiaobocentos1 centos:7 /bin/bash</span><br></pre></td></tr></table></figure><ul><li>守护式容器</li></ul><p>启动完成后长期运行，不直接进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建并启动守护式容器 </span></span><br><span class="line">docker run -di --name=ydlcentos2 centos:7 </span><br><span class="line"><span class="comment">#登录进入容器命令为：docker exec -it container_name (或者 container_id) /bin/bash（exit退出 时，容器不会停止） </span></span><br><span class="line">docker <span class="built_in">exec</span> -it xiaobocentos2 /bin/bash</span><br></pre></td></tr></table></figure><h4 id="停止并启动容器"><a href="#停止并启动容器" class="headerlink" title="停止并启动容器"></a>停止并启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止正在运行的容器：docker stop 容器名称或者ID </span></span><br><span class="line">docker stop xiaobocentos2 </span><br><span class="line"><span class="comment"># 启动已运行过的容器：docker start 容器名称或者ID </span></span><br><span class="line">docker start xiaobocentos2</span><br></pre></td></tr></table></figure><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><h4 id="宿主机拷贝到容器"><a href="#宿主机拷贝到容器" class="headerlink" title="宿主机拷贝到容器"></a>宿主机拷贝到容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker cp 需要拷贝的文件或目录 容器名称:容器目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个文件</span></span><br><span class="line">touch xiaobo.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制文件到xiaobocentos2的容器的 / 目录下 </span></span><br><span class="line">docker cp xiaobo.txt xiaobocentos2:/root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入xiaobocentos2容器 </span></span><br><span class="line">docker <span class="built_in">exec</span> -it xiaobocentos2 /bin/bash </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器 / 目录下文件 </span></span><br><span class="line">ll</span><br></pre></td></tr></table></figure><h4 id="容器拷贝到宿主机"><a href="#容器拷贝到宿主机" class="headerlink" title="容器拷贝到宿主机"></a>容器拷贝到宿主机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker cp 容器名称:容器目录 需要拷贝的文件或目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入容器后创建文件</span></span><br><span class="line">touch xiaobo.log </span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出容器 </span></span><br><span class="line"><span class="built_in">exit</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Linux宿主机器执行复制；将容器xiaobocentos2的文件复制到宿主机器的/root目录下 </span></span><br><span class="line">docker cp xiaobocentos2:/root/xiaobo.log /root</span><br></pre></td></tr></table></figure><h3 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h3><p>可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而同步容器</p><p>创建容器时添加-v参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建linux宿主机器要挂载的目录 </span></span><br><span class="line">mkdir /root/binlog </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并启动容器xiaobocentos3 ,并挂载linux中的/root/binding 目录到容器的/root/binding 也就是在 linux中的/root/binding 中操作相当于对容器相应目录操作 </span></span><br><span class="line">docker run -di -v /root/binding:/root/binding --name=xiaobocentos3 centos:7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在linux下创建文件 </span></span><br><span class="line">touch /root/binding/xiaobo.log </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器 docker exec -it xiaobocentos3 /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在容器中查看目录中是否有对应文件def.txt </span></span><br><span class="line">ll /root/binding</span><br></pre></td></tr></table></figure><p>如果是多级的目录，可能现权限不足，需要添加参数<code>--privileged=true</code>解决挂载的目录没有权限的问题</p><h4 id="查看容器ip"><a href="#查看容器ip" class="headerlink" title="查看容器ip"></a>查看容器ip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在linux宿主机下查看 xiaobocentos3 的ip </span></span><br><span class="line">docker inspect xiaobocentos3</span><br></pre></td></tr></table></figure><p>容器中有一个局域网，宿主机有一个ip，所以外部访问需要通过宿主机端口代理</p><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除容器 </span></span><br><span class="line">docker rm xiaobocentos3</span><br></pre></td></tr></table></figure><h2 id="部署软件"><a href="#部署软件" class="headerlink" title="部署软件"></a>部署软件</h2><h3 id="Mysql容器部署"><a href="#Mysql容器部署" class="headerlink" title="Mysql容器部署"></a>Mysql容器部署</h3><ul><li>搜索mysql</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><ul><li>拉取mysql镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:8.0</span><br></pre></td></tr></table></figure><ul><li>修改配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir /root/mysql</span><br><span class="line"><span class="built_in">cd</span> /root/mysql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=xiaobo_mysql \</span><br><span class="line">-v /root/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /root/mysql/logs:/logs \</span><br><span class="line">-v /root/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=xiaobo \</span><br><span class="line">mysql:8.0</span><br></pre></td></tr></table></figure><p><code>-p 3307:3306 </code> 将容器的 3306 端口映射到宿主机的 3307 端口</p><p><code>-v /root/mysql/conf:/etc/mysql/conf.d \</code> 将主机当前目录下的my.cnf 挂载到容器</p><p><code>-v /root/mysql/logs:/logs \</code> 将主机当前目录下的 logs 目录挂载到容器的 /logs 日志目录</p><p><code>-v /root/mysql/data:/var/lib/mysql \</code> 将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 数据目录</p><p><code>-e MYSQL_ROOT_PASSWORD=xiaobo \</code> 初始化 root 用户的密码</p><ul><li>进入mysql容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it xiaobo_mysql /bin/bash</span><br></pre></td></tr></table></figure><ul><li>测试连接即可</li></ul><h3 id="Tomcat部署"><a href="#Tomcat部署" class="headerlink" title="Tomcat部署"></a>Tomcat部署</h3><ul><li>搜索tomcat</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure><ul><li>拉取Tomcat镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class="line">mkdir /root/tomcat</span><br><span class="line"><span class="built_in">cd</span> /root/tomcat</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=xiaobo_tomcat \</span><br><span class="line">-p 8081:8080 \</span><br><span class="line">-v /root/tomcat:/usr/<span class="built_in">local</span>/tomcat/webapps \</span><br><span class="line">tomcat </span><br></pre></td></tr></table></figure><h3 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h3><ul><li>搜索</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure><ul><li>拉取Nginx镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><ul><li>修改配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class="line">mkdir /root/nginx</span><br><span class="line"><span class="built_in">cd</span> /root/nginx</span><br><span class="line">mkdir conf</span><br><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line"><span class="comment"># 在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=xiaobo_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /root/nginx/logs:/var/<span class="built_in">log</span>/nginx \</span><br><span class="line">-v /root/nginx/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><h3 id="redis部署"><a href="#redis部署" class="headerlink" title="redis部署"></a>redis部署</h3><ul><li>搜索</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure><ul><li>拉取Redis镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0</span><br></pre></td></tr></table></figure><ul><li>端口映射</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=xiaobo_redis -p 6380:6379 redis:5.0</span><br></pre></td></tr></table></figure><ul><li>客户端连接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h 192.168.117.200 -p 6380</span><br></pre></td></tr></table></figure><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><p>ompose项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。它是一个定义和运行多容器的docker应用工具。使用compose，通过YMAL文件配置你自己的服务，然后通过一个命令，你能使用配置文件创建和运行所有服务</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.24.0/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置文件可执行权限 </span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本信息 </span></span><br><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二进制包方式安装的，删除二进制文件即可 </span></span><br><span class="line">rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>常用命令官网查看即可</p><h3 id="compose模板"><a href="#compose模板" class="headerlink" title="compose模板"></a>compose模板</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span> </span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line"><span class="attr">web:</span></span><br><span class="line"><span class="attr">images:</span> <span class="string">nginx</span> </span><br><span class="line"><span class="attr">ports:</span> <span class="string">-&quot;8080:80&quot;</span> </span><br><span class="line"><span class="attr">volumes:</span> <span class="bullet">-</span> <span class="string">/usr/local/abc:/usr/local/cba</span> </span><br><span class="line"><span class="comment">#volumes: </span></span><br><span class="line"><span class="comment">#networks:</span></span><br></pre></td></tr></table></figure><ul><li>services</li></ul><p>服务，在它下面可以定义应用需要的一些服务，每个服务都有自己的名字、使用的镜像、挂载的数据卷、所属的网络、依赖哪些其他服务等等</p><ul><li>volumes</li></ul><p>数据卷，在它下面可以定义的数据卷（名字等等），然后挂载到不同的服务下去使用</p><ul><li>networks</li></ul><p>应用的网络，在它下面可以定义应用的名字、使用的网络类型等等</p><h3 id="compose应用"><a href="#compose应用" class="headerlink" title="compose应用"></a>compose应用</h3><ul><li>创建模板</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/mycompose </span><br><span class="line"><span class="comment">#进入文件夹 </span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mycompose </span><br><span class="line"><span class="comment">#创建 docker-compose.yml文件；内容如下 </span></span><br><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure><ul><li>docker-compose.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;redis1&quot;</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">mysql1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">centos/mysql-57-centos7</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;mysql1&quot;</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">web1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:8080&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;web1&quot;</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">dev:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">  <span class="attr">pro:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h2 id="仓库的迁移和备份"><a href="#仓库的迁移和备份" class="headerlink" title="仓库的迁移和备份"></a>仓库的迁移和备份</h2><h3 id="迁移备份"><a href="#迁移备份" class="headerlink" title="迁移备份"></a>迁移备份</h3><ul><li>容器转镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存nginx容器为镜像 </span></span><br><span class="line">docker commit 容器名称 镜像名称</span><br></pre></td></tr></table></figure><ul><li>镜像备份</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save –o tar文件名 镜像名</span><br></pre></td></tr></table></figure><ul><li>镜像恢复和迁移</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止mynginx容器 </span></span><br><span class="line">docker stop xiaobocentos1 </span><br><span class="line"><span class="comment"># 删除mynginx容器 </span></span><br><span class="line">docker rm xiaobocentos1 </span><br><span class="line"><span class="comment"># 删除mynginx镜像 </span></span><br><span class="line">docker rmi xiaobocentos1 </span><br><span class="line"><span class="comment"># 加载恢复mynginx镜像 </span></span><br><span class="line">docker load -i xiaobocentos1.tar </span><br><span class="line"><span class="comment"># 在镜像恢复之后，基于该镜像再次创建启动容器 </span></span><br><span class="line">docker run -di --name=xiaobocentos1 xiaobocentos1</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>简单明了，创建镜像的</p><ul><li>创建jdk1.8镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、创建目录 </span></span><br><span class="line">mkdir –p /usr/<span class="built_in">local</span>/dockerjdk8 </span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/dockerjdk8 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、下载jdk-8u231-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、在/usr/local/dockerjdk8目录下创建Dockerfile文件，文件内容如下： </span></span><br><span class="line">vi Dockerfile </span><br></pre></td></tr></table></figure><ul><li>Dockerfile</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7 </span><br><span class="line">MAINTAINER ITLILS </span><br><span class="line">WORKDIR /usr </span><br><span class="line">RUN mkdir /usr/local/java </span><br><span class="line">ADD jdk-8u231-linux-x64.tar.gz /usr/local/java/ </span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk1.8.0_231 </span><br><span class="line">ENV JRE_HOME $JAVA_HOME/jre </span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH </span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH </span><br><span class="line"></span><br><span class="line"># 4、执行命令构建镜像；不要忘了后面的那个 . </span><br><span class="line">docker build -t=&#x27;jdk1.8&#x27; . </span><br><span class="line"></span><br><span class="line"># 5、查看镜像是否建立完成 </span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><ul><li>创建刚刚的容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建并启动容器 </span></span><br><span class="line">docker run -it --name=testjdk jdk1.8 /bin/bash </span><br><span class="line"><span class="comment"># 在容器中测试jdk是否已经安装 </span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h3 id="搭建私有仓库"><a href="#搭建私有仓库" class="headerlink" title="搭建私有仓库"></a>搭建私有仓库</h3><ul><li>创建目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、拉取私有仓库镜像 </span></span><br><span class="line">docker pull registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、启动私有仓库容器 </span></span><br><span class="line">docker run -id --name=registry -p 5000:5000 registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、打开浏览器 输入地址http://私有仓库服务器ip:5000/v2/_catalog，看到&#123;&quot;repositories&quot;:[]&#125; 表示私有仓库 搭建成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、修改daemon.json   </span></span><br><span class="line">vim /etc/docker/daemon.json   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip </span></span><br><span class="line">&#123;<span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;私有仓库服务器ip:5000&quot;</span>]&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、重启docker 服务 </span></span><br><span class="line">systemctl restart docker</span><br><span class="line">docker start registry</span><br></pre></td></tr></table></figure><ul><li>镜像上传到私有服务器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、标记镜像为私有仓库的镜像     </span></span><br><span class="line">docker tag redis:5.0 192.168.117.200:5000/redis:5.0</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2、上传标记的镜像     </span></span><br><span class="line">docker push 192.168.117.200:5000/redis:5.0</span><br></pre></td></tr></table></figure><h4 id="其它服务器拉取私有仓库镜像"><a href="#其它服务器拉取私有仓库镜像" class="headerlink" title="其它服务器拉取私有仓库镜像"></a>其它服务器拉取私有仓库镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开配置文件 </span></span><br><span class="line">vi /usr/lib/systemd/system/docker.service </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在打开的上述文件中按照下面的图，添加如下的内容；注意修改下面内容中的ip地址 </span></span><br><span class="line">--add-registry=ip地址:5000 --insecure-registry=ip地址:5000 \ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改完后需要重新加载docker配置文件并重启docker </span></span><br><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>重启之后直接拉取即可</p><h3 id="容器和虚拟机对比"><a href="#容器和虚拟机对比" class="headerlink" title="容器和虚拟机对比"></a>容器和虚拟机对比</h3><h4 id="相同"><a href="#相同" class="headerlink" title="相同"></a>相同</h4><p>具有相似的资源隔离和分配优势</p><h4 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h4><p>容器虚拟化的是操作系统，虚拟机虚化的是硬件</p><p>虚拟机可以运行不同的操作系统，容器只能运行相同的操作系统</p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/docker.4p2gxlnxopi0.webp&quot; alt=&quot;docker&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="https://codexiaobo.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud alibaba 一</title>
    <link href="https://codexiaobo.github.io/posts/668782996/"/>
    <id>https://codexiaobo.github.io/posts/668782996/</id>
    <published>2022-10-30T11:20:44.000Z</published>
    <updated>2022-10-30T11:22:29.636Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221030191700.2tmq4f2y4f8.webp" alt="微信图片_20221030191700"></p><!--sleep--><span id="more"></span><h1 id="spring-cloud-Alibaba"><a href="#spring-cloud-Alibaba" class="headerlink" title="spring cloud Alibaba"></a>spring cloud Alibaba</h1><p>Spring Cloud阿里为分布式应用开发提供一站式解决方案。它包含开发分布式应用程序所需的所有组件，使您可以轻松地使用Spring Cloud开发应用程序。</p><p>使用Spring Cloud阿里，您只需要添加一些注释和少量配置，就可以将Spring Cloud应用连接到阿里的分布式解决方案上，并使用阿里中间件构建一个分布式应用系统</p><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><p>Nacos(NAming COnfiguration Service)：服务注册和配置中心</p><p><strong>Nacos = Eureka + Config + Bus</strong></p><h3 id="Nacos概念"><a href="#Nacos概念" class="headerlink" title="Nacos概念"></a>Nacos概念</h3><ul><li>地域 （Region）</li></ul><p>物理的数据中心，资源创建成功后不能更换。</p><ul><li>可用区（Available Zone）</li></ul><p>同一地域内，电力和网络互相独立的物理区域。同一可用区内，实例的网络延迟较低。</p><ul><li>接入点（Endpoint）</li></ul><p>地域的某个服务的入口域名。</p><ul><li>命名空间（Namespace）</li></ul><p>用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</p><ul><li>配置 (Configuration)</li></ul><p>在系统开发过程中，开发者通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成。配置变更是调整系统运行时的行为的有效手段。</p><ul><li>配置管理 (Configuration Management)</li></ul><p>系统配置的编辑、存储、分发、变更管理、历史版本管理、变更审计等所有与配置相关的活动。</p><ul><li>配置项 (Configuration Item)</li></ul><p>一个具体的可配置的参数与其值域，通常以 param-key=param-value 的形式存在。例如我们常配置系统的日志输出级别（logLevel=INFO|WARN|ERROR） 就是一个配置项。</p><ul><li>配置集 (Configuration Set)</li></ul><p>一组相关或者不相关的配置项的集合称为配置集。在系统中，一个配置文件通常就是一个配置集，包含了系统各个方面的配置。例如，一个配置集可能包含了数据源、线程池、日志级别等配置项。</p><ul><li>配置集 ID（Data ID）</li></ul><p>Nacos 中的某个配置集的 ID。配置集 ID 是组织划分配置的维度之一。Data ID 通常用于组织划分系统的配置集。一个系统或者应用可以包含多个配置集，每个配置集都可以被一个有意义的名称标识。Data ID 通常采用类 Java 包（如 com.taobao.tc.refund.log.level）的命名规则保证全局唯一性。此命名规则非强制。</p><ul><li>配置分组（Group）</li></ul><p>Nacos 中的一组配置集，是组织配置的维度之一。通过一个有意义的字符串（如 Buy 或 Trade ）对配置集进行分组，从而区分 Data ID 相同的配置集。当您在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用 DEFAULT_GROUP 。配置分组的常见场景：不同的应用或组件使用了相同的配置类型，如 database_url 配置和 MQ_topic 配置。</p><ul><li>配置快照 (Configuration Snapshot)</li></ul><p>Nacos 的客户端 SDK 会在本地生成配置的快照。当客户端无法连接到 Nacos Server 时，可以使用配置快照显示系统的整体容灾能力。配置快照类似于 Git 中的本地 commit，也类似于缓存，会在适当的时机更新，但是并没有缓存过期（expiration）的概念。</p><ul><li>服务（Service）</li></ul><p>通过预定义接口网络访问的提供给客户端的软件功能。</p><ul><li>服务名（Service Name）</li></ul><p>服务提供的标识，通过该标识可以唯一确定其指代的服务。</p><ul><li>服务注册中心（Service Registry）</li></ul><p>存储服务实例和服务负载均衡策略的数据库。</p><ul><li>服务发现（Service Discovery）</li></ul><p>在计算机网络上，（通常使用服务名）对服务下的实例的地址和元数据进行探测，并以预先定义的接口提供给客户端进行查询。</p><ul><li>元信息（Metadata）</li></ul><p>Nacos数据（如配置和服务）描述信息，如服务版本、权重、容灾策略、负载均衡策略、鉴权配置、各种自定义标签 (label)，从作用范围来看，分为服务级别的元信息、集群的元信息及实例的元信息。</p><ul><li>应用（Application）</li></ul><p>用于标识服务提供方的服务的属性。</p><ul><li>服务分组（Service Group）</li></ul><p>不同的服务可以归类到同一分组。</p><ul><li>虚拟集群（Virtual Cluster）</li></ul><p>同一个服务下的所有服务实例组成一个默认集群, 集群可以被进一步按需求划分，划分的单位可以是虚拟集群。</p><ul><li>实例（Instance）</li></ul><p>提供一个或多个服务的具有可访问网络地址（IP:Port）的进程。</p><ul><li>权重（Weight）</li></ul><p>实例级别的配置。权重为浮点数。权重越大，分配给该实例的流量越大。</p><ul><li>健康检查（Health Check）</li></ul><p>以指定方式检查服务下挂载的实例 (Instance) 的健康度，从而确认该实例 (Instance) 是否能提供服务。根据检查结果，实例 (Instance) 会被判断为健康或不健康。对服务发起解析请求时，不健康的实例 (Instance) 不会返回给客户端。</p><ul><li>健康保护阈值（Protect Threshold）</li></ul><p>为了防止因过多实例 (Instance) 不健康导致流量全部流向健康实例 (Instance) ，继而造成流量压力把健康 健康实例 (Instance) 压垮并形成雪崩效应，应将健康保护阈值定义为一个 0 到 1 之间的浮点数。当域名健康实例 (Instance) 占总服务实例 (Instance) 的比例小于该值时，无论实例 (Instance) 是否健康，都会将这个实例 (Instance) 返回给客户端。这样做虽然损失了一部分流量，但是保证了集群的剩余健康实例 (Instance) 能正常工作。</p><h3 id="Nacos功能"><a href="#Nacos功能" class="headerlink" title="Nacos功能"></a>Nacos功能</h3><ul><li><p>服务限流降级</p></li><li><p>服务注册与发现</p></li><li><p>消息驱动能力</p></li><li><p>分布式事务</p></li><li><p>阿里云对象存储</p></li><li><p>分布式任务调度</p></li><li><p>阿里云短信服务</p></li></ul><h3 id="Nacos组件"><a href="#Nacos组件" class="headerlink" title="Nacos组件"></a>Nacos组件</h3><ul><li>Sentinel</li></ul><p>把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><ul><li>Nacos</li></ul><p>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><ul><li>RocketMQ</li></ul><p>一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p><ul><li>Dubbo</li></ul><p>Apache Dubbo™ 是一款高性能 Java RPC 框架。</p><ul><li>Seata</li></ul><p>阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p><ul><li>Alibaba Cloud OSS</li></ul><p>阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><ul><li>Alibaba Cloud SchedulerX</li></ul><p>阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p><ul><li>Alibaba Cloud SMS</li></ul><p>覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道</p><p><strong>以上信息来源于官网</strong></p><h3 id="注册中心对比"><a href="#注册中心对比" class="headerlink" title="注册中心对比"></a>注册中心对比</h3><table><thead><tr><th>服务注册与服务框架</th><th>CAP模型</th><th>控制台管理</th><th>社区活跃度</th></tr></thead><tbody><tr><td>Eureka</td><td>AP高可用</td><td>支持</td><td>低(2.x版本闭源)</td></tr><tr><td>Zookeeper</td><td>CP一致</td><td>支持</td><td>中</td></tr><tr><td>Consul</td><td>CP</td><td>支持</td><td>高</td></tr><tr><td>Nacos</td><td>AP+CP</td><td>支持</td><td>高</td></tr></tbody></table><p>acos切换 AP 和 CP模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT <span class="string">&#x27;$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="nacos下载以及使用"><a href="#nacos下载以及使用" class="headerlink" title="nacos下载以及使用"></a>nacos下载以及使用</h3><p><a href="https://github.com/alibaba/nacos/releases">下载地址</a></p><p><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>下载之后进入bin目录运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>运行成功即可访问<code>http://localhost:8848/nacos/index.html</code></p><p>默认账号密码都是nacos</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.1fat289ymg9s.webp" alt="Nacos"></p><h3 id="注册中心搭建"><a href="#注册中心搭建" class="headerlink" title="注册中心搭建"></a>注册中心搭建</h3><h4 id="provider模块"><a href="#provider模块" class="headerlink" title="provider模块"></a>provider模块</h4><ul><li>父模块pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-alibaba<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>spring-cloud-alibaba<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    控制版本绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud Alibaba nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nacos provider   port:&quot;</span>+port+<span class="string">&quot;|id:&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相同方式再创建一个provider</p><h4 id="consumer模块"><a href="#consumer模块" class="headerlink" title="consumer模块"></a>consumer模块</h4><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud Alibaba nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        替代了netflix的ribbon--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span> <span class="comment"># 端口号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-consumer</span> <span class="comment"># 服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">ribbon:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment"># 关闭ribbon负载均衡</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><ul><li>config</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//LoadBalancer 负载均衡</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>opfeign</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;nacos-provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/goods/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsFeign goodsFeign;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * balancer形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/add/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String result = restTemplate.getForObject(<span class="string">&quot;http://nacos-provider/goods/findById/&quot;</span>+id, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Feign形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/add2/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add2</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goodsFeign.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置中心搭建"><a href="#配置中心搭建" class="headerlink" title="配置中心搭建"></a>配置中心搭建</h3><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud Alibaba nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span> <span class="comment"># 生产环境</span></span><br><span class="line"><span class="comment">#    active: test # 测试环境</span></span><br><span class="line"><span class="comment">#    active: dev # 开发环境</span></span><br></pre></td></tr></table></figure><ul><li>bootstrap.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7777</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">BJ_GROUP</span> <span class="comment"># 分组</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">14c5a736-9f4c-42b9-aed1-22dcf5386d61</span> <span class="comment"># 命名空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#$&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/config&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span>  <span class="comment">//刷新功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/name&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.2kf0lkvtk9o0.webp" alt="nacos配置中心"></p><h3 id="集群和持久化配置"><a href="#集群和持久化配置" class="headerlink" title="集群和持久化配置"></a>集群和持久化配置</h3><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p>nacos是存到临时的文件夹目录中的，所以需要持久化，持久化到DB中</p><ul><li>修改application.properteis配置文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://192.168.117.200:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="meta">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password.0</span>=<span class="string">xiaobo</span></span><br></pre></td></tr></table></figure><h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><p><strong>需要环境</strong></p><blockquote><p>64 bit OS Linux/Unix/Mac 推荐Linux系统<br>64 bit JDK 1.8+<br>Maven 3.2.x+<br>mysql 8.0<br>3个或3个以上Nacos节点才能构成集群</p></blockquote><ul><li>解压</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nacos-server-2.0.4.tar.gz</span><br></pre></td></tr></table></figure><ul><li>修改cluster.conf文件,添加服务器地址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#example</span><br><span class="line">192.168.117.200:6666</span><br><span class="line">192.168.117.200:7777</span><br><span class="line">192.168.117.200:8888</span><br></pre></td></tr></table></figure><ul><li><p>然后复制3出来设置不同端口模拟多台服务器</p></li><li><p>修改启动参数<br><code>vim startup.sh</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT=<span class="string">&quot;$&#123;JAVA_OPT&#125; -server -Xms128m -Xmx128m -Xmn64m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;BASE_DIR&#125;/logs/java_heapdump.hprof&quot;</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;$&#123;JAVA_OPT&#125; -XX:-UseLargePages&quot;</span></span><br></pre></td></tr></table></figure><p>修改成这个样子，但是如果你虚拟机分配的内存够用也不用修改，我的分配的不够，电脑配置有点拉</p><ul><li>bin目录启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh</span><br></pre></td></tr></table></figure><h3 id="Nginx做负载均衡"><a href="#Nginx做负载均衡" class="headerlink" title="Nginx做负载均衡"></a>Nginx做负载均衡</h3><p>修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#gzip  on;</span><br><span class="line">    upstream cluster&#123;</span><br><span class="line">        server 192.168.117.200:6666;</span><br><span class="line">        server 192.168.117.200:7777;</span><br><span class="line">        server 192.168.117.200:8888;</span><br><span class="line">    &#125;        </span><br><span class="line">location / &#123;</span><br><span class="line">            #root   html;</span><br><span class="line">            #index  index.html index.htm;</span><br><span class="line">            proxy_pass http://cluster;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code> server &#123; listen       5555;</code>端口号也改下</p><p>启动nginx即可完成</p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221030191700.2tmq4f2y4f8.webp&quot; alt=&quot;微信图片_20221030191700&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="spring cloud" scheme="https://codexiaobo.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud 三</title>
    <link href="https://codexiaobo.github.io/posts/2002239265/"/>
    <id>https://codexiaobo.github.io/posts/2002239265/</id>
    <published>2022-10-26T05:24:44.000Z</published>
    <updated>2022-10-26T05:29:18.290Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221026132251.30eqhfzf2do0.webp" alt="微信图片_20221026132251"></p><!--sleep--><span id="more"></span><h1 id="spring-cloud"><a href="#spring-cloud" class="headerlink" title="spring cloud"></a>spring cloud</h1><h2 id="分布式配置中心"><a href="#分布式配置中心" class="headerlink" title="分布式配置中心"></a>分布式配置中心</h2><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><p>当需要服务器特别特别多的时候，我们不能每次都配置yml，然后再重新启动，因为太多了，这是我们可以集中管理配置文件，根据不同环境不同配置，动态化的配置更新，当配置信息改变时，不需要重启即可更新配置信息到服务</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/config%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E6%B5%81%E7%A8%8B.1rb2b93ptj5s.webp" alt="config配置中心流程"></p><h3 id="config使用"><a href="#config使用" class="headerlink" title="config使用"></a>config使用</h3><h4 id="配置config-server服务模块"><a href="#配置config-server服务模块" class="headerlink" title="配置config-server服务模块"></a>配置config-server服务模块</h4><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务名</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># spring cloud config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="comment"># git 的 远程仓库地址</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/codexiaobo/config-server.git</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment"># 分支配置</span></span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>http://localhost:9527/master/provider-dev.yml</code>即可查看到远程的配置文件</p><h4 id="其他模块读取配置文件"><a href="#其他模块读取配置文件" class="headerlink" title="其他模块读取配置文件"></a>其他模块读取配置文件</h4><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--config client --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置config-server地址</span></span><br><span class="line"><span class="comment"># 配置获得配置文件的名称等信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 配置config-server地址</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:9527</span></span><br><span class="line">      <span class="comment"># 配置获得配置文件的名称等信息</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">provider</span> <span class="comment"># 文件名</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment"># profile指定</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment"># 分支</span></span><br></pre></td></tr></table></figure><p>但是这样只是静态的读取，因为当远程仓库修改时，我们不能将几千个机器上的服务重启啊，这样运维人员就傻了，效率太低，所以我们要让他们动态的读取到远程仓库的配置文件</p><h4 id="Config刷新读取远程配置文件"><a href="#Config刷新读取远程配置文件" class="headerlink" title="Config刷新读取远程配置文件"></a>Config刷新读取远程配置文件</h4><p>客户端引入</p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>controller使用 <code>@RefreshScope</code></p><p><code>bootstrap.yml</code> 添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>cmd 中发送请求 刷新 <code>curl -X POST http://localhost:8080/actuator/refresh</code></p><p>这里我们只是配置了一个config-server，如果挂了，就发生了单点故障了，所以我们不能写死，要从注册中心中拿到config-server</p><h4 id="Config-集成"><a href="#Config-集成" class="headerlink" title="Config 集成"></a>Config 集成</h4><p>将config-server注册到注册中心</p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从注册中心中读到config-server</p><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置config-server地址</span></span><br><span class="line"><span class="comment"># 配置获得配置文件的名称等信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 配置config-server地址</span></span><br><span class="line">      <span class="comment">#uri: http://localhost:9527</span></span><br><span class="line">      <span class="comment"># 配置获得配置文件的名称等信息</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment"># 文件名</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment"># profile指定，  config-dev.yml</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment"># 分支</span></span><br><span class="line"><span class="comment">#     在注册中心中拿到config-server </span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">CONFIG-SERVER</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="SpringCloud-Bus消息总线"><a href="#SpringCloud-Bus消息总线" class="headerlink" title="SpringCloud Bus消息总线"></a>SpringCloud Bus消息总线</h2><p>远程的配置文件更新了，运维只需要发一个请求，所有用到这个配置文件的几百个应用更新了</p><p>消息总线可以为微服务做监控，也可以实现应用程序之间相通信</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>就是发送一个请求，然后运用rabbitmq的订阅发布模式通知多份配置文件更新</p><h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><ul><li>config-server和config-client</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>bootstrap.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置config-server地址</span></span><br><span class="line"><span class="comment"># 配置获得配置文件的名称等信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 配置config-server地址</span></span><br><span class="line"><span class="comment">#      uri: http://localhost:9527</span></span><br><span class="line">      <span class="comment"># 配置获得配置文件的名称等信息</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">provider</span> <span class="comment"># 文件名</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment"># profile指定，  config-dev.yml</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment"># 分支</span></span><br><span class="line"><span class="comment">#      在注册中心中拿到config-server</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">CONFIG-SERVER</span></span><br><span class="line">  <span class="comment">#配置rabbitmq信息</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xiaobo</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xiaobo</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露bus的刷新端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>config-server模块application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务名</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="comment">#配置rabbitmq信息</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xiaobo</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xiaobo</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># spring cloud config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="comment"># git 的 远程仓库地址</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/codexiaobo/config-server.git</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment"># 分支配置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露bus的刷新端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br></pre></td></tr></table></figure><p><code>curl -X POST http://localhost:9527/actuator/bus-refresh</code> 模拟发送请求修改</p><h2 id="SpringCloud-Stream消息驱动"><a href="#SpringCloud-Stream消息驱动" class="headerlink" title="SpringCloud Stream消息驱动"></a>SpringCloud Stream消息驱动</h2><p>Spring Cloud Stream 是一个构建消息驱动微服务应用的框架</p><p>Stream对消息中间件的进一步封装，可以做到代码层面对中间件的无感知，甚至于动态的切换中间件，就类似JDBC，使得微服务开发的高度解耦</p><p>Spring Cloud Stream目前支持两种消息中间件RabbitMQ和Kafka</p><h3 id="stream-组件"><a href="#stream-组件" class="headerlink" title="stream 组件"></a>stream 组件</h3><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/stream%E7%BB%84%E4%BB%B6.17e8v7h5dz9c.webp" alt="stream组件"></p><p><code>binding</code> :通过配置把应用和spring cloud stream 的 binder 绑定在一起</p><p><code>output</code> :发送消息 Channel，内置 Source接口</p><p><code>input</code> :接收消息 Channel，内置 Sink接口</p><h3 id="模拟-1"><a href="#模拟-1" class="headerlink" title="模拟"></a>模拟</h3><h4 id="stream-provider模块"><a href="#stream-provider模块" class="headerlink" title="stream-provider模块"></a>stream-provider模块</h4><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- stream --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">xbclass_binder:</span> <span class="comment"># 自定义的绑定器名称</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 绑定器类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment"># 指定mq的环境</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">xiaobo</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">xiaobo</span></span><br><span class="line">                <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment"># channel名称</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">xbclass_binder</span> <span class="comment">#指定使用哪一个binder</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">xblclass_exchange</span> <span class="comment"># 消息目的地</span></span><br></pre></td></tr></table></figure><ul><li>MessageProvider</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 声明这个类是stream的发送者</span></span><br><span class="line"><span class="meta">@EnableBinding(Source.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息至rabbitmq</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        发送消息</span></span><br><span class="line">        <span class="keyword">boolean</span> send = output.send(MessageBuilder.withPayload(msg).build());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (send) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发送消息成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发送消息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ProviderController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/stream&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageProvider messageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/send&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        messageProvider.send(<span class="string">&quot;我发送一条消息&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>StreamProviderApp</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamProviderApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamProviderApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="stream-consumer模块"><a href="#stream-consumer模块" class="headerlink" title="stream-consumer模块"></a>stream-consumer模块</h4><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">xbclass_binder:</span> <span class="comment"># 自定义的绑定器名称</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 绑定器类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment"># 指定mq的环境</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">xiaobo</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">xiaobo</span></span><br><span class="line">                <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">input:</span> <span class="comment"># channel名称</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">xbclass_binder</span> <span class="comment">#指定使用哪一个binder</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">xblclass_exchange</span> <span class="comment"># 消息目的地</span></span><br></pre></td></tr></table></figure><ul><li>StreamConsumer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaobo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/26 - 11:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenerConsumer</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(message);</span><br><span class="line">        System.out.println(message.getPayload());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>App</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamConsumerApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamConsumerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringCloud-Sleuth分布式请求链路追踪"><a href="#SpringCloud-Sleuth分布式请求链路追踪" class="headerlink" title="SpringCloud Sleuth分布式请求链路追踪"></a>SpringCloud Sleuth分布式请求链路追踪</h2><p>一个工具,在整个分布式系统中能跟踪一个用户请求的过程，捕获这些跟踪数据，构建微服务的整个调用链的视图</p><h3 id="下载zipkin-jar"><a href="#下载zipkin-jar" class="headerlink" title="下载zipkin.jar"></a>下载zipkin.jar</h3><p><a href="https://repo1.maven.org/maven2/io/zipkin/zipkin-server/">点击下载</a></p><p><a href="https://repo1.maven.org/maven2/io/zipkin/zipkin-server/">https://repo1.maven.org/maven2/io/zipkin/zipkin-server/</a></p><ul><li>运行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ***.jar</span><br></pre></td></tr></table></figure><ul><li>服务提供方和消费方分别引入 sleuth 和 zipkin 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sleuth-zipkin --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置服务提供方和服务消费方</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  zipkin:</span><br><span class="line">    base-url: http:<span class="comment">//localhost:9411/  # 设置zipkin的服务端路径</span></span><br><span class="line">  sleuth:</span><br><span class="line">    sampler:</span><br><span class="line">      probability: <span class="number">1</span> # 采集率 默认 <span class="number">0.1</span> 百分之十。</span><br></pre></td></tr></table></figure><ul><li>访问</li></ul><p><a href="http://localhost:9411/">http://localhost:9411/</a></p><p><strong>正确的开始，微小的长进，然后持续，嘿，我是小博，带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221026132251.30eqhfzf2do0.webp&quot; alt=&quot;微信图片_20221026132251&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="spring cloud" scheme="https://codexiaobo.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 二</title>
    <link href="https://codexiaobo.github.io/posts/142858353/"/>
    <id>https://codexiaobo.github.io/posts/142858353/</id>
    <published>2022-10-25T13:28:41.000Z</published>
    <updated>2022-10-25T13:29:19.933Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E9%95%BF%E5%A4%9C%E6%97%A0%E8%8D%92.2enjwoeetkis.webp" alt="长夜无荒"></p><!--sleep--><span id="more"></span><h1 id="RabbitMQ高级特性"><a href="#RabbitMQ高级特性" class="headerlink" title="RabbitMQ高级特性"></a>RabbitMQ高级特性</h1><h2 id="消息可靠性传输过程"><a href="#消息可靠性传输过程" class="headerlink" title="消息可靠性传输过程"></a>消息可靠性传输过程</h2><p>使用 RabbitMQ 的时候，作为消息发送方希望杜绝任何消息丢失或者投递失败</p><h3 id="Confirm-确认模式"><a href="#Confirm-确认模式" class="headerlink" title="Confirm 确认模式"></a>Confirm 确认模式</h3><p>消息从 producer 到 exchange 则会返回一个 confirmCallback </p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>rabbitmq.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">rabbitmq.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="meta">rabbitmq.username</span>=<span class="string">xiaobo</span></span><br><span class="line"><span class="meta">rabbitmq.password</span>=<span class="string">xiaobo</span></span><br><span class="line"><span class="meta">rabbitmq.virtual-host</span>=<span class="string">/</span></span><br></pre></td></tr></table></figure><ul><li>spring-rabbitmq-producer.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">&quot;http://www.springframework.org/schema/rabbit&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                 http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                 http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                 https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                 http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="string"><span class="tag">                 http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:rabbitmq.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义rabbitmq connectionFactory  1. 设置  publisher-confirms=&quot;true&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">host</span>=<span class="string">&quot;$&#123;rabbitmq.host&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">&quot;$&#123;rabbitmq.port&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">&quot;$&#123;rabbitmq.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">&quot;$&#123;rabbitmq.password&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">&quot;$&#123;rabbitmq.virtual-host&#125;&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                               <span class="attr">publisher-confirms</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义管理交换机、队列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义rabbitTemplate对象操作可以在代码中方便发送消息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">&quot;rabbitTemplate&quot;</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. 消息可靠性投递（生产端）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;test_queue_confirm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test_queue_confirm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">name</span>=<span class="string">&quot;test_exchange_confirm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">&quot;test_queue_confirm&quot;</span> <span class="attr">key</span>=<span class="string">&quot;confirm&quot;</span>&gt;</span>               <span class="tag">&lt;/<span class="name">rabbit:binding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关键<code>publisher-confirms=&quot;true&quot;</code> 这个得开启</p><ul><li>producer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:spring-rabbitmq-producer.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确认模式：</span></span><br><span class="line"><span class="comment">     * 步骤：</span></span><br><span class="line"><span class="comment">     * 1. 确认模式开启：ConnectionFactory中开启publisher-confirms=&quot;true&quot;</span></span><br><span class="line"><span class="comment">     * 2. 在rabbitTemplate定义ConfirmCallBack回调函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfirm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 定义回调 **</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> RabbitTemplate.ConfirmCallback() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> correlationData 相关配置信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> ack   exchange交换机 是否成功收到了消息。true 成功，false代表失败</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cause 失败原因</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;confirm方法被执行了....&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">                    <span class="comment">//接收成功</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;接收成功消息&quot;</span> + cause);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//接收失败</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;接收失败消息&quot;</span> + cause);</span><br><span class="line">                    <span class="comment">//做一些处理，让消息再次发送。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 发送消息 接受成功</span></span><br><span class="line">          rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_confirm&quot;</span>, <span class="string">&quot;confirm&quot;</span>, <span class="string">&quot;message confirm....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 发送消息 接受失败</span></span><br><span class="line"><span class="comment">//        rabbitTemplate.convertAndSend(&quot;test_exchange_confirm1&quot;, &quot;confirm&quot;, &quot;message confirm....&quot;);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Return-退回模式"><a href="#Return-退回模式" class="headerlink" title="Return 退回模式"></a>Return 退回模式</h3><p>当消息从exchange路由到queue失败后，如果设置了rabbitTemplate.setMandatory(true)参数，则会将消息退回给producer 返回一个returnCallback</p><p>关键<code>publisher-returns=&quot;true&quot;</code> 开启</p><ul><li>producer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 步骤：</span></span><br><span class="line"><span class="comment">     * 1. 开启回退模式:publisher-returns=&quot;true&quot;</span></span><br><span class="line"><span class="comment">     * 2. 设置ReturnCallBack</span></span><br><span class="line"><span class="comment">     * 3. 设置Exchange处理消息的模式：</span></span><br><span class="line"><span class="comment">     *  1. 如果消息没有路由到Queue，则丢弃消息（默认）</span></span><br><span class="line"><span class="comment">     *  2. 如果消息没有路由到Queue，返回给消息发送方ReturnCallBack</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReturn</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置交换机处理失败消息的模式</span></span><br><span class="line">        rabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.设置ReturnCallBack</span></span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="keyword">new</span> RabbitTemplate.ReturnCallback() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> message   消息对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> replyCode 错误码</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> replyText 错误信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> exchange  交换机</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> routingKey 路由键</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange, String routingKey)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;return 执行了....&quot;</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(message);</span><br><span class="line">                System.out.println(replyCode);</span><br><span class="line">                System.out.println(replyText);</span><br><span class="line">                System.out.println(exchange);</span><br><span class="line">                System.out.println(routingKey);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 发送消息</span></span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_confirm&quot;</span>, <span class="string">&quot;confirm&quot;</span>, <span class="string">&quot;message confirm....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="消费者处理"><a href="#消费者处理" class="headerlink" title="消费者处理"></a>消费者处理</h4><p><strong>消费端确认方式（3种）</strong></p><ul><li>自动确认：acknowledge=”none”</li></ul><p>自动确认当消息一旦被Consumer接收到，则自动确认收到，并将相应 message 从 RabbitMQ 的消息缓存中移除</p><ul><li>手动确认：acknowledge=”manual”</li></ul><p>手动确认方式，则需要在业务处理成功后，调用channel.basicAck()，手动签收，如果出现异常，则调用channel.basicNack()方法，让其自动重新发送消息</p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>rabbitmq.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">rabbitmq.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="meta">rabbitmq.username</span>=<span class="string">xiaobo</span></span><br><span class="line"><span class="meta">rabbitmq.password</span>=<span class="string">xiaobo</span></span><br><span class="line"><span class="meta">rabbitmq.virtual-host</span>=<span class="string">/</span></span><br></pre></td></tr></table></figure><ul><li>spring-rabbitmq-consumer.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">&quot;http://www.springframework.org/schema/rabbit&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">             http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">             http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">             https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">             http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="string"><span class="tag">             http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:rabbitmq.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义rabbitmq connectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">host</span>=<span class="string">&quot;$&#123;rabbitmq.host&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">&quot;$&#123;rabbitmq.port&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">&quot;$&#123;rabbitmq.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">&quot;$&#123;rabbitmq.password&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">&quot;$&#123;rabbitmq.virtual-host&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dream.xiaobo.listener&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义监听器容器  添加  acknowledge=&quot;manual&quot; 手动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">acknowledge</span>=<span class="string">&quot;manual&quot;</span> <span class="attr">prefetch</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;ackListener&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;test_queue_confirm&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;dlxListener&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;test_queue_dlx&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>acknowledge=&quot;manual&quot; </code> 手动</p><p><code>prefetch=&quot;1&quot;</code> 一批请求接受多少</p><ul><li>AckListener</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AckListener</span> <span class="keyword">implements</span> <span class="title">ChannelAwareMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> deliveryTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.接收转换消息</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 处理业务逻辑</span></span><br><span class="line">            System.out.println(<span class="string">&quot;处理业务逻辑...&quot;</span>);</span><br><span class="line"><span class="comment">//            int i = 1/0;//出现错误</span></span><br><span class="line">            <span class="comment">//3. 手动</span></span><br><span class="line">            channel.basicAck(deliveryTag,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//e.printStackTrace();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.拒绝</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            第三个参数：requeue：重回队列。如果设置为true，则消息重新回到queue，broker会重新发送该消息给消费端</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicNack(deliveryTag,<span class="keyword">true</span>,<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 了解</span></span><br><span class="line">            <span class="comment">//channel.basicReject(deliveryTag,true);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ul><li>consumer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>根据异常情况确认：acknowledge=”auto”，（不常用）</li></ul><h2 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h2><p>存活时间/过期时间,当消息到达存活时间后，还没有被消费，会被自动清除</p><p>RabbitMQ可以对消息设置过期时间，也可以对整个队列设置过期时间</p><h3 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h3><p>控制台可以直接设置</p><h4 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h4><p><strong>整体队列设置过期时间</strong></p><ul><li>xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ttl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">&quot;test_queue_ttl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test_queue_ttl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置queue的参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--x-message-ttl指队列的过期时间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-message-ttl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:topic-exchange</span> <span class="attr">name</span>=<span class="string">&quot;test_exchange_ttl&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;com.#&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;test_queue_ttl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:binding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>producer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ttl信息发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ttlTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_ttl&quot;</span>,<span class="string">&quot;com.dream&quot;</span>,<span class="string">&quot;rabbitmq ttl&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>设置单独消息过期时间</strong></p><ul><li>producer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单个消息的过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ttlTest2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        MessagePostProcessor messagePostProcessor = <span class="keyword">new</span> MessagePostProcessor() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                设置消息过期时间</span></span><br><span class="line">                message.getMessageProperties().setExpiration(<span class="string">&quot;5000&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        MessagePostProcessor messagePostProcessor2 = <span class="keyword">new</span> MessagePostProcessor() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line"></span><br><span class="line">                message.getMessageProperties().setExpiration(<span class="string">&quot;10000&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息单独过期</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_ttl&quot;</span>, <span class="string">&quot;com.dream&quot;</span>, <span class="string">&quot;rabbitmq ttl....&quot;</span>,messagePostProcessor);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_ttl&quot;</span>, <span class="string">&quot;com.dream&quot;</span>, <span class="string">&quot;rabbitmq ttl....&quot;</span>,messagePostProcessor2);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_ttl&quot;</span>, <span class="string">&quot;com.dream&quot;</span>, <span class="string">&quot;rabbitmq ttl....&quot;</span>,messagePostProcessor);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_ttl&quot;</span>, <span class="string">&quot;com.dream&quot;</span>, <span class="string">&quot;rabbitmq ttl....&quot;</span>,messagePostProcessor2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>设置了消息的过期时间，也设置了队列的过期时间，它以时间短的为准</p></li><li><p>队列过期后，会将队列所有消息全部移除</p></li><li><p>消息过期后，只有消息在队列顶端，才会判断其是否过期</p></li></ul><h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97.3fzs7il4nge0.webp" alt="死信队列"></p><ul><li><p>队列消息长度到达限制</p></li><li><p>消费者拒接消费消息，basicNack/basicReject,并且不把消息重新放入原目标队列,requeue=false</p></li><li><p>原队列存在消息过期设置，消息到达超时时间未被消费</p></li></ul><h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><ul><li>xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">&quot;test_queue_dlx&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test_queue_dlx&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--3. 正常队列绑定死信交换机--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--3.1 x-dead-letter-exchange：死信交换机名称--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-dead-letter-exchange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;exchange_dlx&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--3.2 x-dead-letter-routing-key：发送给死信交换机的routingkey--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-dead-letter-routing-key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dlx.hehe&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--4.1 设置队列的过期时间 ttl--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-message-ttl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--4.2 设置队列的长度限制 max-length --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-max-length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:topic-exchange</span> <span class="attr">name</span>=<span class="string">&quot;test_exchange_dlx&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;test.dlx.#&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;test_queue_dlx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:binding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    死信队列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">&quot;queue_dlx&quot;</span> <span class="attr">id</span>=<span class="string">&quot;queue_dlx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:topic-exchange</span> <span class="attr">name</span>=<span class="string">&quot;exchange_dlx&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;dlx.#&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;queue_dlx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:binding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>producer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信消息测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ddlTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        时间过期，死信消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_dlx&quot;</span>,</span><br><span class="line">                <span class="string">&quot;test.dlx.haha&quot;</span>,<span class="string">&quot;我等着过期，然后去死信队列&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        超出队列长度，死信消息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_dlx&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;test.dlx.haha&quot;</span>,<span class="string">&quot;我超出队列长度，然后去死信队列&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        被拒收，死信消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_dlx&quot;</span>,</span><br><span class="line">                <span class="string">&quot;test.dlx.haha&quot;</span>,<span class="string">&quot;我等着被拒收，然后去死信队列&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>消费者</strong></p><ul><li>xml</li></ul><p>添加<code>&lt;rabbit:listener ref=&quot;dlxListener&quot; queue-names=&quot;test_queue_dlx&quot;/&gt;</code></p><ul><li>DlxListener</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DlxListener</span> <span class="keyword">implements</span> <span class="title">ChannelAwareMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> deliveryTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.接收转换消息</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 处理业务逻辑</span></span><br><span class="line">            System.out.println(<span class="string">&quot;处理业务逻辑...&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">3</span>/<span class="number">0</span>;<span class="comment">//出现错误</span></span><br><span class="line">            <span class="comment">//3. 手动签收</span></span><br><span class="line">            channel.basicAck(deliveryTag,<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//e.printStackTrace();</span></span><br><span class="line">            System.out.println(<span class="string">&quot;拒绝接受&quot;</span>);</span><br><span class="line">            <span class="comment">//4.拒绝签收</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            第三个参数：requeue：重回队列。如果设置为true，则消息重新回到queue，broker会重新发送该消息给消费端</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicNack(deliveryTag,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 了解</span></span><br><span class="line">            <span class="comment">//channel.basicReject(deliveryTag,true);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h2><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97.2mnr98rm0km0.webp" alt="延迟队列"></p><p>延迟队列 = TTL + 死信队列</p><p>进入队列后，延迟一段时间在进行消费</p><h2 id="消息可靠性保障（面试）"><a href="#消息可靠性保障（面试）" class="headerlink" title="消息可靠性保障（面试）"></a>消息可靠性保障（面试）</h2><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E6%B6%88%E6%81%AF%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%BF%9D%E9%9A%9C.2veqrjvygmm0.webp" alt="消息可靠性保障"></p><ul><li><p>消息的生产者将业务数据存到数据库中</p></li><li><p>发送消息给 队列Q1</p></li><li><p>消息的生产者等待一定的时间后，在发送一个延迟消息给队列 Q3</p></li><li><p>消息的消费方监听 Q1 队列消息，成功接收后</p></li><li><p>消息的消费方会 发送 一条确认消息给 队列Q2</p></li><li><p>回调检查服务监听 队列Q2 发送的确认消息</p></li><li><p>回调检查服务接收到确认消息后，将消息写入到 消息的数据库表中</p></li><li><p>回调检查服务同时也会监听 队列Q3延迟消息， 如果接收到消息会和数据库比对消息的唯一标识</p></li><li><p>如果发现没有接收到确认消息，那么回调检查服务就会远程调用 消息生产者，重新发送消息</p></li><li><p>重新执行 2-7 步骤，保证消息的可靠性传输</p></li><li><p>如果发送消息和延迟消息都出现异常，定时检查服务会监控 消息库中的消息数据，如果发现不一致的消息然后远程调用消息的生产者重新发送消息。</p></li></ul><p><strong>以上介绍引用ydl文章，自我做个记录</strong></p><h2 id="消息幂等性处理（面试）"><a href="#消息幂等性处理（面试）" class="headerlink" title="消息幂等性处理（面试）"></a>消息幂等性处理（面试）</h2><p>幂等性指一次和多次请求某一个资源，对于资源本身应该具有同样的结果。也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同，消费多条相同的消息，得到与消费该消息一次相同的结果</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E6%B6%88%E6%81%AF%E5%B9%82%E7%AD%89%E6%80%A7%E5%A4%84%E7%90%86.2ro55kkzehs0.webp" alt="消息幂等性处理"></p><p>乐观锁机制 保证消息的幂等操作</p><p><strong>以上介绍引用ydl文章，自我做个记录</strong></p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E9%95%BF%E5%A4%9C%E6%97%A0%E8%8D%92.2enjwoeetkis.webp&quot; alt=&quot;长夜无荒&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="MQ" scheme="https://codexiaobo.github.io/tags/MQ/"/>
    
    <category term="RabbitMQ" scheme="https://codexiaobo.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ(二)</title>
    <link href="https://codexiaobo.github.io/posts/3042191954/"/>
    <id>https://codexiaobo.github.io/posts/3042191954/</id>
    <published>2022-10-21T13:14:25.000Z</published>
    <updated>2022-10-21T13:15:21.428Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E7%BA%B8%E9%A3%9E%E6%9C%BA.5xdoonsugms0.webp" alt="纸飞机"></p><!--sleep--><span id="more"></span><h1 id="Rocket-MQ"><a href="#Rocket-MQ" class="headerlink" title="Rocket MQ"></a>Rocket MQ</h1><h2 id="Rocket-MQ进阶"><a href="#Rocket-MQ进阶" class="headerlink" title="Rocket MQ进阶"></a>Rocket MQ进阶</h2><h3 id="顺序消费"><a href="#顺序消费" class="headerlink" title="顺序消费"></a>顺序消费</h3><h4 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h4><p>消息有序指的是可以按照消息的发送顺序来消费(FIFO)。RocketMQ可以严格的保证消息有序，可以分为分区有序或者全局有序。</p><p>顺序消费的原理解析，在默认的情况下消息发送会采取Round Robin轮询方式把消息发送到不同的queue(分区队列)；而消费消息的时候从多个queue上拉取消息，这种情况发送和消费是不能保证顺序。但是如果控制发送的顺序消息只依次发送到同一个queue中，消费的时候只从这个queue上依次拉取，则就保证了顺序。当发送和消费参与的queue只有一个，则是全局有序；如果多个queue参与，则为分区有序，即相对每个queue，消息都是有序的</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/MQ%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9.2djruhs2ljvo.webp" alt="MQ的顺序消费"></p><h4 id="模拟一个订单业务"><a href="#模拟一个订单业务" class="headerlink" title="模拟一个订单业务"></a>模拟一个订单业务</h4><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStep</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>producer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketMQProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, MQBrokerException, RemotingException, InterruptedException, UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        谁来发？ 实例化一个默认的生产者</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        发给谁？ 发给命名服务器</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line"><span class="comment">//        怎么发？ 生产者跑起来</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成模拟订单数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//        发什么？ 模拟一个消息</span></span><br><span class="line">        List&lt;OrderStep&gt; orderList = <span class="keyword">new</span> ArrayList&lt;OrderStep&gt;();</span><br><span class="line"></span><br><span class="line">            OrderStep orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">            orderDemo.setOrderId(<span class="number">1L</span>);</span><br><span class="line">            orderDemo.setDesc(<span class="string">&quot;创建&quot;</span>);</span><br><span class="line">            orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">            orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">            orderDemo.setOrderId(<span class="number">2L</span>);</span><br><span class="line">            orderDemo.setDesc(<span class="string">&quot;创建&quot;</span>);</span><br><span class="line">            orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">            orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">            orderDemo.setOrderId(<span class="number">1L</span>);</span><br><span class="line">            orderDemo.setDesc(<span class="string">&quot;付款&quot;</span>);</span><br><span class="line">            orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">            orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">            orderDemo.setOrderId(<span class="number">3L</span>);</span><br><span class="line">            orderDemo.setDesc(<span class="string">&quot;创建&quot;</span>);</span><br><span class="line">            orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">            orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">            orderDemo.setOrderId(<span class="number">2L</span>);</span><br><span class="line">            orderDemo.setDesc(<span class="string">&quot;付款&quot;</span>);</span><br><span class="line">            orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">            orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">            orderDemo.setOrderId(<span class="number">3L</span>);</span><br><span class="line">            orderDemo.setDesc(<span class="string">&quot;付款&quot;</span>);</span><br><span class="line">            orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">            orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">            orderDemo.setOrderId(<span class="number">2L</span>);</span><br><span class="line">            orderDemo.setDesc(<span class="string">&quot;完成&quot;</span>);</span><br><span class="line">            orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">            orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">            orderDemo.setOrderId(<span class="number">1L</span>);</span><br><span class="line">            orderDemo.setDesc(<span class="string">&quot;推送&quot;</span>);</span><br><span class="line">            orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">            orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">            orderDemo.setOrderId(<span class="number">3L</span>);</span><br><span class="line">            orderDemo.setDesc(<span class="string">&quot;完成&quot;</span>);</span><br><span class="line">            orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line">            orderDemo = <span class="keyword">new</span> OrderStep();</span><br><span class="line">            orderDemo.setOrderId(<span class="number">1L</span>);</span><br><span class="line">            orderDemo.setDesc(<span class="string">&quot;完成&quot;</span>);</span><br><span class="line">            orderList.add(orderDemo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> OrderStep orderStep : orderList) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        形参：topic: 主题 tags: 标签 byte[]: 传输的数据，传输时都是字节数组</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">&quot;topic7&quot;</span>,<span class="string">&quot;tags1&quot;</span>,orderList.toString().getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"><span class="comment">//        发送</span></span><br><span class="line">            SendResult sendResult = producer.send(message, <span class="keyword">new</span> MessageQueueSelector() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> MessageQueue <span class="title">select</span><span class="params">(List&lt;MessageQueue&gt; list, Message message, Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//                拿到队列中信息的Id</span></span><br><span class="line">                    <span class="keyword">int</span> orderId = orderStep.getOrderId().intValue();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//                拿到整个队列长度</span></span><br><span class="line">                    <span class="keyword">int</span> size = list.size();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//                进行一个简单算法运算 取余</span></span><br><span class="line">                    <span class="keyword">int</span> i = orderId % size;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//                拿到顺序的id</span></span><br><span class="line">                    MessageQueue messageQueue = list.get(i);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> messageQueue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;结果为：&quot;</span> + sendResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        关闭资源</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>consumer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketMQConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        谁来接收 实例化一个默认的Consumer 监听器监听的方式</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line"><span class="comment">//        每隔几秒发一次请求的方式</span></span><br><span class="line"><span class="comment">//        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        接受哪里的消息</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        监听哪个消息队列</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;topic7&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        一个线程只监听一个queue</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerOrderly() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeOrderlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//                这里写业务</span></span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">                    System.out.println(msg);</span><br><span class="line">                    <span class="keyword">byte</span>[] body = msg.getBody();</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//              ConsumeOrderlyStatus 一个枚举类</span></span><br><span class="line">                <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        启动</span></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        不要关闭资源连接,因为在监听</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务信息"><a href="#事务信息" class="headerlink" title="事务信息"></a>事务信息</h3><p>正常事务过程(红色)</p><p>事务补偿过程（蓝色）</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/RocketMQ%E4%BA%8B%E5%8A%A1%E6%B5%81%E7%A8%8B.3y6khokf4d40.webp" alt="RocketMQ事务流程"></p><h4 id="事务信息状态"><a href="#事务信息状态" class="headerlink" title="事务信息状态"></a>事务信息状态</h4><ul><li>提交状态</li></ul><p>允许进入队列，此消息与非事务消息无区别</p><ul><li>回滚状态</li></ul><p>不允许进入队列，此消息等同于未发送过</p><ul><li>中间状态</li></ul><p>完成了half消息的发送，未对MQ进行二次状态确认</p><ul><li>注意</li></ul><p>事务消息仅与生产者有关，与消费者无关</p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><ul><li>producer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketMQProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, MQBrokerException, RemotingException, InterruptedException, UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        谁来发？ 实例化一个事务生产者</span></span><br><span class="line">        TransactionMQProducer producer = <span class="keyword">new</span> TransactionMQProducer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        发给谁？ 发给命名服务器</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        事务监听</span></span><br><span class="line">        producer.setTransactionListener(<span class="keyword">new</span> TransactionListener() &#123;</span><br><span class="line"><span class="comment">//            正常事务情况下</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;正常事务执行&quot;</span>);</span><br><span class="line"><span class="comment">//                成功情况</span></span><br><span class="line"><span class="comment">//                return LocalTransactionState.COMMIT_MESSAGE;</span></span><br><span class="line"><span class="comment">//                失败回滚情况</span></span><br><span class="line"><span class="comment">//                return LocalTransactionState.ROLLBACK_MESSAGE;</span></span><br><span class="line"><span class="comment">//                未知，等待情况</span></span><br><span class="line">                <span class="keyword">return</span> LocalTransactionState.UNKNOW;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            事务补偿情况下</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">checkLocalTransaction</span><span class="params">(MessageExt msg)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;补偿事务执行&quot;</span>);</span><br><span class="line"><span class="comment">//                成功情况</span></span><br><span class="line">                <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line"><span class="comment">//                失败回滚情况</span></span><br><span class="line"><span class="comment">//                return LocalTransactionState.ROLLBACK_MESSAGE;</span></span><br><span class="line"><span class="comment">//                未知，等待情况</span></span><br><span class="line"><span class="comment">//                return LocalTransactionState.UNKNOW;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        怎么发？ 生产者跑起来</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        String msg = <span class="string">&quot;Hello RocketMQ&quot;</span>;</span><br><span class="line"><span class="comment">//        形参：topic: 主题 tags: 标签 byte[]: 传输的数据，传输时都是字节数组</span></span><br><span class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">&quot;topic9&quot;</span>,<span class="string">&quot;tags1&quot;</span>,msg.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        TransactionSendResult sendResult = producer.sendMessageInTransaction(message, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        发送</span></span><br><span class="line">        System.out.println(<span class="string">&quot;结果为：&quot;</span> + sendResult);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        关闭资源</span></span><br><span class="line"><span class="comment">//        producer.shutdown();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>consumer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketMQConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        谁来接收 实例化一个默认的Consumer 监听器监听的方式</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line"><span class="comment">//        每隔几秒发一次请求的方式</span></span><br><span class="line"><span class="comment">//        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        接受哪里的消息</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        监听哪个消息队列</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;topic9&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        一个线程只监听一个queue</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerOrderly() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeOrderlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//                这里写业务</span></span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">                    System.out.println(msg);</span><br><span class="line">                    <span class="keyword">byte</span>[] body = msg.getBody();</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//              ConsumeOrderlyStatus 一个枚举类</span></span><br><span class="line">                <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        启动</span></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        不要关闭资源连接,因为在监听</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RocketMQ集群"><a href="#RocketMQ集群" class="headerlink" title="RocketMQ集群"></a>RocketMQ集群</h2><p>多个broker提供服务</p><h3 id="集群流程"><a href="#集群流程" class="headerlink" title="集群流程"></a>集群流程</h3><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/MQ%E9%9B%86%E7%BE%A4.40yetkblld40.webp" alt="MQ集群"></p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ul><li><p>NameServer启动，开启监听，等待broker、producer与consumer连接</p></li><li><p>broker启动，根据配置信息，连接所有的NameServer，并保持长连接，如果broker中有现存数据， NameServer将保存topic与broker关系</p></li><li><p>producer发信息，连接某个NameServer，并建立长连接</p></li><li><p>producer发消息，若果topic存在，由NameServer直接分配，如果topic不存在，由NameServer创建topic与broker关系，并分配</p></li><li><p>producer在broker的topic选择一个消息队列</p></li><li><p>producer与broker建立长连接，用于发送消息</p></li><li><p>producer发送消息</p></li><li><p>consumer与producer相同</p></li></ul><h3 id="master和slave的同步方式"><a href="#master和slave的同步方式" class="headerlink" title="master和slave的同步方式"></a>master和slave的同步方式</h3><ul><li>同步方式同步</li></ul><p>较异步方式性能略低，消息无延迟</p><ul><li>异步方式同步</li></ul><p>较同步方式性能略高，数据略有延迟</p><h3 id="两主两从搭建"><a href="#两主两从搭建" class="headerlink" title="两主两从搭建"></a>两主两从搭建</h3><h4 id="主从特点"><a href="#主从特点" class="headerlink" title="主从特点"></a>主从特点</h4><p>保证一台机器宕机能正常运行</p><p>北京机房放着master1和slave2 深圳机房放着master2和slave1</p><h4 id="搭建配置"><a href="#搭建配置" class="headerlink" title="搭建配置"></a>搭建配置</h4><p>模拟一下，这里起了两台虚拟机地址不同，模仿两台服务器</p><ul><li>配置服务器环境</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># nameserver</span><br><span class="line">192.168.117.200 rocketmq-nameserver1</span><br><span class="line">192.168.117.201 rocketmq-nameserver2</span><br><span class="line"># broker</span><br><span class="line">192.168.117.200 rocketmq-master1</span><br><span class="line">192.168.117.200 rocketmq-slave2</span><br><span class="line">192.168.117.201 rocketmq-master2</span><br><span class="line">192.168.117.201 rocketmq-slave1</span><br></pre></td></tr></table></figure><p>这里地址名字自己对应</p><p>重启网卡 <code>systemctl restart network</code></p><ul><li>关闭防火墙</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="comment"># 查看防火墙的状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="comment"># 禁止firewall开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><ul><li>配置环境变量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set rocketmq</span></span><br><span class="line">ROCKETMQ_HOME=/rocketmq</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$ROCKETMQ_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> ROCKETMQ_HOME PATH</span><br></pre></td></tr></table></figure><p>这里路径自己对应</p><p>更新环境变量 <code>source /etc/profile</code> </p><ul><li>创建集群服务器的数据存储目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#master 数据存储目录</span></span><br><span class="line">mkdir /rocketmq/store</span><br><span class="line">mkdir /rocketmq/store/commitlog</span><br><span class="line">mkdir /rocketmq/store/consumequeue</span><br><span class="line">mkdir /rocketmq/store/index</span><br><span class="line"></span><br><span class="line"><span class="comment">#slave 数据存储目录</span></span><br><span class="line">mkdir /rocketmq/store-slave</span><br><span class="line">mkdir /rocketmq/store-slave/commitlog</span><br><span class="line">mkdir /rocketmq/store-slave/consumequeue</span><br><span class="line">mkdir /rocketmq/store-slave/index</span><br></pre></td></tr></table></figure><ul><li>修改第一台服务器配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /rocketmq/conf/2m-2s-sync</span><br><span class="line"></span><br><span class="line">vim broker-a.properties</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">rocketmq-cluster</span></span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">broker-a</span></span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span></span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line"><span class="attr">defaultTopicQueueNums</span>=<span class="string">4</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10911</span></span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line"><span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line"><span class="attr">fileReservedTime</span>=<span class="string">120</span></span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line"><span class="attr">mapedFileSizeCommitLog</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line"><span class="attr">mapedFileSizeConsumeQueue</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment">#destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line"><span class="attr">diskMaxUsedSpaceRatio</span>=<span class="string">88</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/rocketmq/store</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/rocketmq/store/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/rocketmq/store/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/rocketmq/store/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/rocketmq/store/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/rocketmq/store/abort</span></span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line"><span class="attr">maxMessageSize</span>=<span class="string">65536</span></span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">SYNC_MASTER</span></span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line"><span class="attr">flushDiskType</span>=<span class="string">SYNC_FLUSH</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim broker-b-s.properties</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">rocketmq-cluster</span></span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">broker-b</span></span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span></span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line"><span class="attr">defaultTopicQueueNums</span>=<span class="string">4</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">11011</span></span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line"><span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line"><span class="attr">fileReservedTime</span>=<span class="string">120</span></span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line"><span class="attr">mapedFileSizeCommitLog</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line"><span class="attr">mapedFileSizeConsumeQueue</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment">#destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line"><span class="attr">diskMaxUsedSpaceRatio</span>=<span class="string">88</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/rocketmq/store-slave</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/rocketmq/store-slave/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/rocketmq/store-slave/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/rocketmq/store-slave/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/rocketmq/store-slave/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/rocketmq/store-slave/abort</span></span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line"><span class="attr">maxMessageSize</span>=<span class="string">65536</span></span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">SLAVE</span></span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line"><span class="attr">flushDiskType</span>=<span class="string">ASYNC_FLUSH</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure><ul><li>修改第二台服务器配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /rocketmq/conf/2m-2s-sync</span><br><span class="line"></span><br><span class="line">vim broker-b.properties</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">rocketmq-cluster</span></span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">broker-b</span></span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span></span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line"><span class="attr">defaultTopicQueueNums</span>=<span class="string">4</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10911</span></span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line"><span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line"><span class="attr">fileReservedTime</span>=<span class="string">120</span></span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line"><span class="attr">mapedFileSizeCommitLog</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line"><span class="attr">mapedFileSizeConsumeQueue</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment">#destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line"><span class="attr">diskMaxUsedSpaceRatio</span>=<span class="string">88</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/rocketmq/store</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/rocketmq/store/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/rocketmq/store/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/rocketmq/store/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/rocketmq/store/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/rocketmq/store/abort</span></span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line"><span class="attr">maxMessageSize</span>=<span class="string">65536</span></span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">SYNC_MASTER</span></span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line"><span class="attr">flushDiskType</span>=<span class="string">SYNC_FLUSH</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim broker-a-s.properties</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#所属集群名字</span></span><br><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">rocketmq-cluster</span></span><br><span class="line"><span class="comment">#broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">broker-a</span></span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span></span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line"><span class="attr">defaultTopicQueueNums</span>=<span class="string">4</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">11011</span></span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line"><span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时</span></span><br><span class="line"><span class="attr">fileReservedTime</span>=<span class="string">120</span></span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G</span></span><br><span class="line"><span class="attr">mapedFileSizeCommitLog</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line"><span class="attr">mapedFileSizeConsumeQueue</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment">#destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment">#redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line"><span class="attr">diskMaxUsedSpaceRatio</span>=<span class="string">88</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/rocketmq/store-slave</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/rocketmq/store-slave/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/rocketmq/store-slave/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/rocketmq/store-slave/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/rocketmq/store-slave/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/rocketmq/store-slave/abort</span></span><br><span class="line"><span class="comment">#限制的消息大小</span></span><br><span class="line"><span class="attr">maxMessageSize</span>=<span class="string">65536</span></span><br><span class="line"><span class="comment">#flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment">#flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment">#flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment">#flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE</span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">SLAVE</span></span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘</span></span><br><span class="line"><span class="attr">flushDiskType</span>=<span class="string">ASYNC_FLUSH</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"><span class="comment">#发消息线程池数量</span></span><br><span class="line"><span class="comment">#sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment">#拉消息线程池数量</span></span><br><span class="line"><span class="comment">#pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure><ul><li>修改启动内存<br>因为默认8g，虚拟机没有分配那么大的内存，所以要进行修改</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /rocketmq/bin/runbroker.sh</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开发环境配置 JVM Configuration</span></span><br><span class="line">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn128m&quot;</span></span><br></pre></td></tr></table></figure><p>两台服务器都要修改</p><ul><li>启动服务器</li></ul><p>第一台服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nohup sh mqnamesrv &amp;</span><br><span class="line"></span><br><span class="line">nohup sh mqbroker -c ../conf/2m-2s-sync/broker-a.properties &amp;</span><br><span class="line"></span><br><span class="line">nohup sh mqbroker -c ../conf/2m-2s-sync/broker-b-s.properties &amp;</span><br></pre></td></tr></table></figure><p>第二台服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nohup sh mqnamesrv &amp;</span><br><span class="line"></span><br><span class="line">nohup sh mqbroker -c ../conf/2m-2s-sync/broker-a-s.properties &amp;</span><br><span class="line"></span><br><span class="line">nohup sh mqbroker -c ../conf/2m-2s-sync/broker-b.properties &amp; </span><br></pre></td></tr></table></figure><p><code>jps</code> 查看启动了哪些</p><ul><li>模拟数据进行测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export NAMESRV_ADDR=rocketmq-nameserver1:<span class="number">9876</span> 添加环境变量</span><br><span class="line"></span><br><span class="line">sh tools.sh org.apache.rocketmq.example.quickstart.Producer 测试生成生产者</span><br><span class="line"></span><br><span class="line">sh tools.sh org.apache.rocketmq.example.quickstart.Consumer 测试生成消费者</span><br></pre></td></tr></table></figure><ul><li>运行rocketmq控制台jar即可进行查看</li></ul><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/RocketMQ%E4%BB%AA%E8%A1%A8%E6%9D%BF%E9%9B%86%E7%BE%A4.1mpckq901tb4.webp" alt="RocketMQ仪表板集群"></p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E7%BA%B8%E9%A3%9E%E6%9C%BA.5xdoonsugms0.webp&quot; alt=&quot;纸飞机&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="MQ" scheme="https://codexiaobo.github.io/tags/MQ/"/>
    
    <category term="RocketMQ" scheme="https://codexiaobo.github.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ(一)</title>
    <link href="https://codexiaobo.github.io/posts/442872112/"/>
    <id>https://codexiaobo.github.io/posts/442872112/</id>
    <published>2022-10-18T12:21:37.000Z</published>
    <updated>2022-10-18T12:22:47.984Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%AD%A3%E9%81%93%E7%94%9F%E7%89%A9.41ljtrct14u0.webp" alt="正道生物"></p><!--sleep--><span id="more"></span><h1 id="Rocket-MQ"><a href="#Rocket-MQ" class="headerlink" title="Rocket MQ"></a>Rocket MQ</h1><h2 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h2><p>MQ全称为Message Queue, 消息队列（MQ）是一种用来保存消息数据的队列,是应用程序对应用程序的通信方法</p><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><p>服务器间的业务请求</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>数据结构的一种，特征为 <code>先进先出</code></p><h3 id="MQ作用"><a href="#MQ作用" class="headerlink" title="MQ作用"></a>MQ作用</h3><h4 id="传统项目"><a href="#传统项目" class="headerlink" title="传统项目"></a>传统项目</h4><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E4%BC%A0%E7%BB%9F%E7%9A%84%E9%A1%B9%E7%9B%AE.4p2ynmjcgeg0.webp" alt="传统的项目"></p><h4 id="MQ项目"><a href="#MQ项目" class="headerlink" title="MQ项目"></a>MQ项目</h4><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/MQ%E7%9A%84%E9%A1%B9%E7%9B%AE.hp2tqrsrjt4.webp" alt="MQ的项目"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>应用解耦（异步消息发送）</li></ul><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/MQ%E8%A7%A3%E8%80%A6.2qw6gi0tijo0.webp" alt="MQ解耦"></p><p>提高系统容错性和可维护性</p><ul><li>异步提速</li></ul><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/MQ%E5%BC%82%E6%AD%A5%E6%8F%90%E9%80%9F.51z4e3kqqac0.webp" alt="MQ异步提速"></p><p>提升用户体验和系统吞吐量</p><ul><li>削峰填谷</li></ul><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/MQ%E5%89%8A%E5%B3%B0%E5%A1%AB%E8%B0%B7.26cbjuk6tna8.webp" alt="MQ削峰填谷"></p><p>提高系统稳定性</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p>系统可用性降低</p></li><li><p>系统复杂度提高</p></li><li><p>一致性问题</p></li></ul><h3 id="MQ产品"><a href="#MQ产品" class="headerlink" title="MQ产品"></a>MQ产品</h3><ul><li>ActiveMQ</li></ul><p>java语言实现，万级数据吞吐量，处理速度ms级，主从架构，成熟度高</p><ul><li>RocketMQ</li></ul><p>java语言实现，十万级数据吞吐量，处理速度ms级，分布式架构，功能强大，扩展性强</p><ul><li>RabbitMQ</li></ul><p>erlang语言实现，万级数据吞吐量，处理速度us级，主从架构</p><ul><li>Kafka</li></ul><p>scala语言实现，十万级数据吞吐量，处理速度ms级，分布式架构，功能较少，应用于大数据较多</p><h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><p>RocketMQ是阿里开源的一款中间件产品</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/RocketMQ%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.1095n6i2wz4w.webp" alt="RocketMQ工作流程"></p><ul><li>生产者</li></ul><p>producer 消息发送发</p><ul><li>消费者</li></ul><p>consumer 消息接受方</p><ul><li>消息服务器</li></ul><p>broker 接受消息，提供消息，消息持久化，高可用</p><ul><li>命名服务器</li></ul><p>NameServer 寻找路径，映射注册的服务器</p><ul><li>注册</li></ul><p>Register 将服务器都注册到命名服务器</p><ul><li>消息</li></ul><p>Message 发送的消息</p><ul><li>主题</li></ul><p>Topic 消息中包含的主题</p><ul><li>标签</li></ul><p>消息中包含的标签，类似副主题</p><ul><li>心跳</li></ul><p>注册到命名服务器中服务器一段时间向</p><ul><li>监听器</li></ul><p>Listener 用于监听推送消息</p><ul><li>拉取消费、推动消费</li></ul><p>生产者推送消息 消费者拉取消息 </p><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>首先服务器都注册到命名服务器，并且设置一个心跳机制来判断是否宕机，生产者首先发送消息到命名服务器，命名服务器通过Broker IPS进行判断映射，这样生产者就可以拿到Broker信息并向Broker服务器发送请求，消费者接受请求，向命名服务器发送请求，也是一样的过程，这里但是有个问题，怎么判断消息队列中有没有信息，这时有两种方式，一种是每过一段时间向队列中拉取消息，还有一种方式建立一个长链接监听器来进行监听推送消息。</p><h3 id="Rocket安装（windows版）"><a href="#Rocket安装（windows版）" class="headerlink" title="Rocket安装（windows版）"></a>Rocket安装（windows版）</h3><ul><li>配置环境变量</li></ul><p>ROCKETMQ_HOME</p><p>MQ解压路径\MQ文件夹名</p><ul><li>配置conf</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">autoCreateTopicEnable=true </span><br><span class="line">autoCreateSubscriptionGroup=true</span><br></pre></td></tr></table></figure><ul><li>启动NAMESERVER</li></ul><p><code>start mqnamesrv.cmd</code></p><ul><li>启动BROKER</li></ul><p><code>start mqbroker.cmd -n 127.0.0.1:9876</code></p><ul><li>注意：闪退回命令行</li></ul><p>删除C:\Users\”当前系统用户名”\store下的所有文件</p><ul><li>配置环境变量</li></ul><p>NAMESRV_ADDR</p><p>localhost:9876</p><ul><li>测试生产者发送消息,bin目录下</li></ul><p><code>tools.cmd  org.apache.rocketmq.example.quickstart.Producer</code></p><ul><li>测试消费者接收消息, bin目录下</li></ul><p><code>tools.cmd org.apache.rocketmq.example.quickstart.Consumer</code></p><ul><li>控制台</li></ul><p>下载地址</p><p><code>https://github.com/apache/rocketmq-externals</code></p><ul><li>打包</li></ul><p>我的有个报错，需要手动导入一个包，放到maven库里</p><p><code>D:\Maven\IDEA jar\com\github\eirslett\yarn\1.22.10\yarn-v1.22.10</code></p><p>运行jar包即可查看控制台</p><p><code>java -jar jar包名</code></p><h3 id="Rocket安装（Linux版）"><a href="#Rocket安装（Linux版）" class="headerlink" title="Rocket安装（Linux版）"></a>Rocket安装（Linux版）</h3><h3 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h3><h4 id="单生产者单消费者（OneToOne）"><a href="#单生产者单消费者（OneToOne）" class="headerlink" title="单生产者单消费者（OneToOne）"></a>单生产者单消费者（OneToOne）</h4><p>基于发送和基于接受</p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Producer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketMQProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, MQBrokerException, RemotingException, InterruptedException, UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        谁来发？ 实例化一个默认的生产者</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        发给谁？ 发给命名服务器</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line"><span class="comment">//        怎么发？ 生产者跑起来</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        发什么？ 模拟一个消息</span></span><br><span class="line">        String msg = <span class="string">&quot;Hello RocketMQ&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        形参：topic: 主题 tags: 标签 byte[]: 传输的数据，传输时都是字节数组</span></span><br><span class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">&quot;topic1&quot;</span>,<span class="string">&quot;tags1&quot;</span>,msg.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        发送</span></span><br><span class="line">        SendResult sendResult = producer.send(message);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;结果为：&quot;</span> + sendResult);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        关闭资源</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>consumer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketMQConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line"><span class="comment">//        谁来接收 实例化一个默认的Consumer 监听器监听的方式</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line"><span class="comment">//        每隔几秒发一次请求的方式</span></span><br><span class="line"><span class="comment">//        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        接受哪里的消息</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        监听哪个消息队列</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;topic1&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        注册监听器</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                这里写业务</span></span><br><span class="line">                <span class="keyword">for</span> (MessageExt messageExt : list) &#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] body = messageExt.getBody();</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//              ConsumeConcurrentlyStatus 一个枚举类</span></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        启动</span></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        不要关闭资源连接,因为在监听</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单生产者多消费者（OneToMany）"><a href="#单生产者多消费者（OneToMany）" class="headerlink" title="单生产者多消费者（OneToMany）"></a>单生产者多消费者（OneToMany）</h4><p>负载均衡模式（默认）和广播模式</p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>producer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketMQProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, MQBrokerException, RemotingException, InterruptedException, UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        谁来发？ 实例化一个默认的生产者</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        发给谁？ 发给命名服务器</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        怎么发？ 生产者跑起来</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        发什么？ 模拟一个消息</span></span><br><span class="line">            String msg = <span class="string">&quot;Hello RocketMQ&quot;</span> + i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        形参：topic: 主题 tags: 标签 byte[]: 传输的数据，传输时都是字节数组</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">&quot;topic3&quot;</span>,<span class="string">&quot;tags1&quot;</span>,msg.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        同步发送</span></span><br><span class="line">            SendResult sendResult = producer.send(message);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;结果为：&quot;</span> + sendResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        关闭资源</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>consumer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketMQConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        谁来接收 实例化一个默认的Consumer 监听器监听的方式</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;group2&quot;</span>);</span><br><span class="line"><span class="comment">//        每隔几秒发一次请求的方式</span></span><br><span class="line"><span class="comment">//        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        接受哪里的消息</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        监听哪个消息队列</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;topic3&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        发送模式 BROADCASTING 广播模式</span></span><br><span class="line"><span class="comment">//        consumer.setMessageModel(MessageModel.BROADCASTING);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        发送模式 CLUSTERING 负载均衡模式</span></span><br><span class="line"><span class="comment">//        consumer.setMessageModel(MessageModel.CLUSTERING);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        注册监听器</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                这里写业务</span></span><br><span class="line">                <span class="keyword">for</span> (MessageExt messageExt : list) &#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] body = messageExt.getBody();</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">                    System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//              ConsumeConcurrentlyStatus 一个枚举类</span></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        启动</span></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        不要关闭资源连接,因为在监听</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>广播模式</code>: 每个消费者都消费同样的消息</p><p><code>负载均衡模式</code>: 消费者共同消费</p><h4 id="多生产者多消费者（ManyToMany）"><a href="#多生产者多消费者（ManyToMany）" class="headerlink" title="多生产者多消费者（ManyToMany）"></a>多生产者多消费者（ManyToMany）</h4><p>多生产者产生的消息可以被同一个消费者消费，也可以被多个消费者消费</p><h3 id="消息类别"><a href="#消息类别" class="headerlink" title="消息类别"></a>消息类别</h3><h4 id="同步信息"><a href="#同步信息" class="headerlink" title="同步信息"></a>同步信息</h4><p>即时性较强，重要的消息，且必须有回执的消息，例如短信，通知（转账成功）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        同步发送</span></span><br><span class="line">SendResult sendResult = producer.send(message);</span><br></pre></td></tr></table></figure><h4 id="异步信息"><a href="#异步信息" class="headerlink" title="异步信息"></a>异步信息</h4><p>即时性较弱，但需要有回执的消息，例如订单中的某些信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        异步发送</span></span><br><span class="line">            producer.send(message, <span class="keyword">new</span> SendCallback() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult sendResult)</span> </span>&#123;</span><br><span class="line">                    System.out.println(sendResult);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                    System.out.println(throwable);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><h4 id="单向信息"><a href="#单向信息" class="headerlink" title="单向信息"></a>单向信息</h4><p>不需要有回执的消息，例如日志类消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//            单向发送消息</span></span><br><span class="line">            producer.sendOneway(message);</span><br></pre></td></tr></table></figure><h4 id="延时信息"><a href="#延时信息" class="headerlink" title="延时信息"></a>延时信息</h4><p>消息发送时并不直接发送到消息服务器，而是根据设定的等待时间到达，起到延时到达的缓冲作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//            延时发送</span></span><br><span class="line">            message.setDelayTimeLevel(<span class="number">3</span>);</span><br><span class="line">            SendResult sendResult = producer.send(message);</span><br></pre></td></tr></table></figure><p>级别对应的时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String messageDelayLevel = <span class="string">&quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="批量信息"><a href="#批量信息" class="headerlink" title="批量信息"></a>批量信息</h4><p>批量发送消息能显著提高传递小消息的性能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//            批量发送</span></span><br><span class="line">            List&lt;Message&gt; messageList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            Message message1 = <span class="keyword">new</span> Message(<span class="string">&quot;topic4&quot;</span>,<span class="string">&quot;tags1&quot;</span>,msg.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            Message message2 = <span class="keyword">new</span> Message(<span class="string">&quot;topic4&quot;</span>, <span class="string">&quot;tags2&quot;</span>, msg.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            Message message3 = <span class="keyword">new</span> Message(<span class="string">&quot;topic4&quot;</span>, <span class="string">&quot;tags3&quot;</span>, msg.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            messageList.add(message1);</span><br><span class="line">            messageList.add(message2);</span><br><span class="line">            messageList.add(message3);</span><br><span class="line"></span><br><span class="line">            SendResult sendResult = producer.send(messageList);</span><br></pre></td></tr></table></figure><p>批量消息有相同的topic</p><p>相同的waitStoreMsgOK</p><p>不能是延时消息</p><p>消息内容总长度不超过4M</p><p>消息内容总长度：</p><ul><li><p>topic（字符串字节数）</p></li><li><p>body （字节数组长度）</p></li><li><p>消息追加的属性（key与value对应字符串字节数）</p></li><li><p>日志 固定20字节</p></li></ul><h3 id="信息过滤"><a href="#信息过滤" class="headerlink" title="信息过滤"></a>信息过滤</h3><h4 id="分类过滤"><a href="#分类过滤" class="headerlink" title="分类过滤"></a>分类过滤</h4><p>按照tag过滤信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        监听哪个消息队列 制定topic，还可以指定接收的tag,*代表任意tag</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;topic5&quot;</span>,<span class="string">&quot;tags1 || tags2&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="SQL过滤（语法过滤-属性过滤-SQL过滤）"><a href="#SQL过滤（语法过滤-属性过滤-SQL过滤）" class="headerlink" title="SQL过滤（语法过滤/属性过滤/SQL过滤）"></a>SQL过滤（语法过滤/属性过滤/SQL过滤）</h4><p>首先修改配置文件broker.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enablePropertyFilter=true</span><br></pre></td></tr></table></figure><p>cmd中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mqadmin.cmd updateBrokerConfig -blocalhost:10911 -kenablePropertyFilter -vtrue</span><br></pre></td></tr></table></figure><p>重新启动broker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message.putUserProperty(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><ul><li>数值比较</li></ul><p>‘&gt;’ &gt;= &lt; &lt;= BETWEEN =</p><ul><li>字符比较</li></ul><p>= &lt;&gt; IN</p><ul><li><p>IS NULL 或者 IS NOT NULL</p></li><li><p>逻辑符号</p></li></ul><p>AND OR NOT</p><p><strong>常量类型</strong></p><ul><li>数值</li></ul><p>123 3.1415；</p><ul><li>字符</li></ul><p>‘abc’，必须用单引号包裹起来；</p><ul><li><p>NULL 特殊的常量</p></li><li><p>布尔值</p></li></ul><p>TRUE 或 FALSE</p><h2 id="Spring-Boot整合RocketMQ"><a href="#Spring-Boot整合RocketMQ" class="headerlink" title="Spring Boot整合RocketMQ"></a>Spring Boot整合RocketMQ</h2><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rocketmq:</span></span><br><span class="line">  <span class="attr">name-server:</span> <span class="string">localhost:9876</span></span><br><span class="line">  <span class="attr">producer:</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">producer-group1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>producer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    rocketmq模板</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RocketMQTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/producer&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">producersMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        实例化User对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        转换发送信息</span></span><br><span class="line">        template.convertAndSend(<span class="string">&quot;topic10&quot;</span>,user);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>consumer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//@RocketMQMessageListener(topic = &quot;topic10&quot;,consumerGroup = &quot;producer-group1&quot;,</span></span><br><span class="line"><span class="comment">//        selectorType = SelectorType.TAG,selectorExpression = &quot;tag = 1 || tag = 2&quot;)</span></span><br><span class="line"><span class="comment">//topic 主题 consumerGroup 分组 selectorType 过滤类型 selectorExpression 过滤语法 messageModel 方法模式</span></span><br><span class="line"><span class="meta">@RocketMQMessageListener(topic = &quot;10&quot;,consumerGroup = &quot;producer-group1&quot;,</span></span><br><span class="line"><span class="meta">        selectorType = SelectorType.SQL92,selectorExpression = &quot;tag &gt; 92&quot;,</span></span><br><span class="line"><span class="meta">        messageModel = MessageModel.BROADCASTING)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerListener</span> <span class="keyword">implements</span> <span class="title">RocketMQListener</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>topic</code> 主题 </p><p><code>consumerGroup</code> 分组 </p><p><code>selectorType</code> 过滤类型 </p><p><code>selectorExpression</code> 过滤语法 </p><p><code>messageModel</code> 方法模式</p><h3 id="信息发送形式"><a href="#信息发送形式" class="headerlink" title="信息发送形式"></a>信息发送形式</h3><ul><li>异步发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        异步发送</span></span><br><span class="line">        template.asyncSend(<span class="string">&quot;topic10&quot;</span>, user, <span class="keyword">new</span> SendCallback() &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            成功</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult sendResult)</span> </span>&#123;</span><br><span class="line">                System.out.println(sendResult);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            失败</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                System.out.println(throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>单向发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        单向发送</span></span><br><span class="line">        template.sendOneWay(<span class="string">&quot;topic10&quot;</span>,user);</span><br></pre></td></tr></table></figure><ul><li>延时发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        延时发送</span></span><br><span class="line">        template.syncSend(<span class="string">&quot;topic10&quot;</span>, MessageBuilder.withPayload(user).build(),<span class="number">1000</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>批量发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        批量发送</span></span><br><span class="line">        List&lt;User&gt; messageList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;wangyibo&quot;</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;wangyangnan&quot;</span>);</span><br><span class="line">        messageList.add(user1);</span><br><span class="line">        messageList.add(user2);</span><br><span class="line">        messageList.add(user3);</span><br><span class="line"></span><br><span class="line">        template.syncSend(<span class="string">&quot;topic10&quot;</span>,messageList,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><strong>正确的开始，微小的长进，然后持续，嘿，我是小博，带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%AD%A3%E9%81%93%E7%94%9F%E7%89%A9.41ljtrct14u0.webp&quot; alt=&quot;正道生物&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="MQ" scheme="https://codexiaobo.github.io/tags/MQ/"/>
    
    <category term="RocketMQ" scheme="https://codexiaobo.github.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud 二</title>
    <link href="https://codexiaobo.github.io/posts/889923884/"/>
    <id>https://codexiaobo.github.io/posts/889923884/</id>
    <published>2022-10-10T02:15:45.000Z</published>
    <updated>2022-10-10T02:17:06.492Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%B5%B7%E6%82%A6%E5%B1%B1.5dp0ub8vcrg.webp" alt="海悦山"></p><!--sleep--><span id="more"></span><h1 id="spring-cloud"><a href="#spring-cloud" class="headerlink" title="spring cloud"></a>spring cloud</h1><h2 id="Ribbon负载均衡服务"><a href="#Ribbon负载均衡服务" class="headerlink" title="Ribbon负载均衡服务"></a>Ribbon负载均衡服务</h2><p>Ribbon是Netflixf发布的开源项目，主要功能是提供负载均衡算法和服务调用</p><h3 id="服务器端负载均衡"><a href="#服务器端负载均衡" class="headerlink" title="服务器端负载均衡"></a>服务器端负载均衡</h3><p>典型的技术：Nginx</p><p>Nginx是服务器负载均衡，客户端所有请求都会交给NGINX，然后又NGINX实现转发请求。即负载均衡是有服务端实现的</p><p>负载均衡算法在服务端，服务端维护服务列表</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.6x0kmub6dc00.webp" alt="服务器端负载均衡"></p><h3 id="客户端负载均衡"><a href="#客户端负载均衡" class="headerlink" title="客户端负载均衡"></a>客户端负载均衡</h3><p>典型技术：Ribbon</p><p>Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术</p><p>负载均衡算法在客户端，客户端维护服务列表</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.4w2u0bj5rtk0.webp" alt="客户端负载均衡"></p><h3 id="ribbon-负载均衡策略"><a href="#ribbon-负载均衡策略" class="headerlink" title="ribbon 负载均衡策略"></a>ribbon 负载均衡策略</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--Ribbon的依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>声明restTemplate时使用@LoadBalanced将其标识为可ip端口可用服务名替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    discoveryClient可以根据服务名从注册中心中拿到ip和端口号</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">addOrder</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;EUREKA-PROVIDER&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        ServiceInstance instance = instances.get(0);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        String host = instance.getHost();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        int port = instance.getPort();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        String url = &quot;http://&quot;+ host +&quot;:&quot;+ port +&quot;/goods/findById/&quot; + id;</span></span><br><span class="line"></span><br><span class="line">        String url = <span class="string">&quot;http://eureka-provider/goods/findById/&quot;</span> + id;</span><br><span class="line"></span><br><span class="line">        Goods goods = restTemplate.getForObject(url, Goods.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-consumer</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://eureka-server1:8761/eureka,http://eureka-server2:8762/eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka-provider:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.dream.xiaobo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">EUREKA-PROVIDER:</span> <span class="comment">#远程服务名</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#策略</span></span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//@RibbonClient(name = &quot;eureka-provider&quot;,configuration = MyRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注解声明方式</li></ul><p><code>@RibbonClient(name = &quot;eureka-provider&quot;,configuration = MyRule.class)</code> 声明你哪个服务要使用哪个策略</p><ul><li>配置文件方式</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">EUREKA-PROVIDER:</span> <span class="comment">#远程服务名</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#策略</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>内置负载均衡规则类</th><th>描述</th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略</td></tr><tr><td>ZoneAvoidanceRule</td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，而后再对Zone内的多个服务做轮询</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个权重值会影响服务器的选择</td></tr></tbody></table><h2 id="OpenFeign服务接口调用"><a href="#OpenFeign服务接口调用" class="headerlink" title="OpenFeign服务接口调用"></a>OpenFeign服务接口调用</h2><p>Feign是一个声明式WebService客户端。使用Feign能让编写Web Service客户端更加简单，它的使用方法是定义一个服务接口然后在上面添加注解</p><p>前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>GoodsFeign</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;eureka-provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>orderController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsFeign goodsFeign;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">addOrder</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        Goods goods = goodsFeign.findById(id);</span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableFeignClients</code>开启feign</p><p>Feign 底层依赖于 Ribbon 实现负载均衡和远程调用</p><h3 id="超时时间"><a href="#超时时间" class="headerlink" title="超时时间"></a>超时时间</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置Ribbon的超时时间</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span> <span class="comment"># 连接超时时间 默认1s</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">3000</span> <span class="comment"># 逻辑处理的超时时间 默认1s</span></span><br></pre></td></tr></table></figure><h3 id="日志设置"><a href="#日志设置" class="headerlink" title="日志设置"></a>日志设置</h3><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置当前的日志级别 debug，feign只支持记录debug级别的日志</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.dream.xiaobo:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><ul><li>config</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignLogConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.<span class="function">Level <span class="title">level</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>NONE</code> 不记录</p><p><code>BASIC</code> 记录基本的请求行，响应状态码数据</p><p><code>HEADERS</code> 记录基本的请求行，响应状态码数据，记录响应头信息</p><p><code>FULL</code> 记录完成的请求 响应数据</p><ul><li>goodsFeign</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;eureka-provider&quot;,configuration = FeignLogConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@FeignClient(name = &quot;eureka-provider&quot;,configuration = FeignLogConfig.class)</code> 声明哪个服务使用哪个配置</p><h2 id="Hystrix断路器-（豪猪）"><a href="#Hystrix断路器-（豪猪）" class="headerlink" title="Hystrix断路器 （豪猪）"></a>Hystrix断路器 （豪猪）</h2><p>Hystix 是 Netflix 开源的一个延迟和容错库，用于隔离访问远程服务、第三方库，防止出现级联失败（雪崩）</p><p>能让服务的调用方，够快的知道被调方挂了！不至于说让用户在等待</p><p>雪崩：一个服务失败，导致整条链路的服务都失败的情形</p><h3 id="Hystrix功能"><a href="#Hystrix功能" class="headerlink" title="Hystrix功能"></a>Hystrix功能</h3><h4 id="隔离"><a href="#隔离" class="headerlink" title="隔离"></a>隔离</h4><p><strong>线程池隔离</strong></p><p>依赖的服务通过线程池的形式异步调用，不会造成主进程的阻塞</p><p>假设没有Hystrix，a访问b，c，d时，c挂了，访问b100次，在访问c100次，在访问d100次才知道c挂了，使用hystrix,更细分线程池，这个时候访问b30次，在访问c40次，d30次这个时候就知道c挂了</p><p><strong>信号量隔离</strong></p><p>依赖的服务通过信号量的形式同步调用</p><h4 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h4><p><strong>服务提供方降级</strong></p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hystrix --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            //设置Hystrix的超时时间，默认1s</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Goods goods = goodsService.findById(id);</span><br><span class="line"></span><br><span class="line">        goods.setTitle(goods.getTitle()+ <span class="string">&quot;|port:&quot;</span> + port);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      异常</span></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">          Integer a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        超时</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            Thread.sleep(5000);</span></span><br><span class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 定义降级方法   返回特殊对象</span></span><br><span class="line"><span class="comment">     *  1方法的返回值要和原方法一致</span></span><br><span class="line"><span class="comment">     *  2方法参数和原方法一样</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">fallback</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods(-<span class="number">1</span>,<span class="string">&quot;provider降级成功&quot;</span>,<span class="keyword">new</span> BigDecimal(<span class="number">100</span>),-<span class="number">100L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@HystrixCommand</code> 注解配置降级方法</p><p><code>fallbackMethod</code> 降级方法</p><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">// 开启Hystrix功能</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span> <span class="comment">// 开启Hystrix仪表盘监控功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>服务调用方降级</strong></p><ul><li>GoodsFeign</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;eureka-provider&quot;,configuration = FeignLogConfig.class,fallback = GoodsFeignImpl.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>GoodFeignImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsFeignImpl</span> <span class="keyword">implements</span> <span class="title">GoodsFeign</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods(id, <span class="string">&quot;调用方降级&quot;</span>, <span class="keyword">new</span> BigDecimal(-<span class="number">100</span>), -<span class="number">100L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>application</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启feign对hystrix的支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h4><p><img src="https://s2.loli.net/2022/10/08/dLkmDpwKQVAWIqO.png" alt="Hystrix熔断机制.png"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">circuitBreaker.sleepWindowInMilliseconds：监控时间</span></span><br><span class="line"><span class="string">circuitBreaker.requestVolumeThreshold：失败次数</span></span><br><span class="line"><span class="string">circuitBreaker.errorThresholdPercentage：失败率</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            //设置Hystrix的超时时间，默认1s</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;),</span></span><br><span class="line"><span class="meta">            //监控时间 默认5000 毫秒</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name=&quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;5000&quot;),</span></span><br><span class="line"><span class="meta">            //失败次数。默认20次</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name=&quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">            //失败率 默认50%</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name=&quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;50&quot;)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br></pre></td></tr></table></figure><h4 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h4><p>一般不用，使用nginx或者网关限流</p><h3 id="熔断监控-运维"><a href="#熔断监控-运维" class="headerlink" title="熔断监控-运维"></a>熔断监控-运维</h3><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-monitor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hystrix-monitor</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8769</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="attr">combine-host-port:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 配置需要监控的服务名称列表</span></span><br><span class="line">  <span class="attr">app-config:</span> <span class="string">EUREKA-PROVIDER,EUREKA-CONSUMER</span></span><br><span class="line">  <span class="attr">cluster-name-expression:</span> <span class="string">&quot;&#x27;default&#x27;&quot;</span></span><br><span class="line">  <span class="attr">aggregator:</span></span><br><span class="line">    <span class="attr">cluster-config:</span> <span class="string">default</span></span><br><span class="line">  <span class="comment">#instanceUrlSuffix: /actuator/hystrix.stream</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">proxy-stream-allow-list:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableTurbine</span> <span class="comment">//开启Turbine 很聚合监控功能</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span> <span class="comment">//开启Hystrix仪表盘监控功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixMonitorApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixMonitorApp.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 hystrix-provider 和 hystrix-consumer 模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置 hystrix-provider 和 hystrix-consumer 模块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/actuator/hystrix.stream&quot;</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主启动类分别添加Hystrix注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">// 开启Hystrix功能</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span> <span class="comment">// 开启Hystrix仪表盘监控功能</span></span><br></pre></td></tr></table></figure><p>浏览器访问<a href="http://localhost:8769/hystrix/">http://localhost:8769/hystrix/</a> 进入Hystrix Dashboard界面</p><p>界面中输入监控的Url地址 <a href="http://localhost:8769/turbine.stream">http://localhost:8769/turbine.stream</a><br><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/springcloud%E7%9B%91%E6%8E%A7%E8%BF%90%E7%BB%B4.6xizht44tps0.webp" alt="springcloud监控运维"></p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/springcloud%E7%9B%91%E6%8E%A7%E8%BF%90%E7%BB%B4%E5%9B%BE.7icove8ga5s0.webp" alt="springcloud监控运维图"></p><h2 id="路由网关"><a href="#路由网关" class="headerlink" title="路由网关"></a>路由网关</h2><h3 id="Gateway网关"><a href="#Gateway网关" class="headerlink" title="Gateway网关"></a>Gateway网关</h3><p>路由+过滤</p><h4 id="为什么使用网关"><a href="#为什么使用网关" class="headerlink" title="为什么使用网关"></a>为什么使用网关</h4><ul><li><p>客户端需要记录不同微服务地址</p></li><li><p>每个后台微服务都需要认证</p></li><li><p>http 发请求，涉及到跨域</p></li><li><p>后台新增微服务，不能动态知道地址</p></li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api-gateway-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入gateway 网关--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml进行一些配置即可使用，配置在本章节下面</p><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>Gateway 支持过滤器功能，对请求或响应进行拦截，完成一些通用操作。</p><p>Gateway 提供两种过滤器方式：“pre”和“post”</p><p><code>pre 过滤器</code> 在转发之前执行，就是访问各服务之前，可以做参数校验、权限校验、流量监控、日志输出、协议转换等</p><p><code>post 过滤器</code> 在响应之前执行，就是微服务返回数据到达网关之前，可以做响应内容、响应头的修改，日志的输出，流量监控等</p><h4 id="内置局部过滤器"><a href="#内置局部过滤器" class="headerlink" title="内置局部过滤器"></a>内置局部过滤器</h4><table><thead><tr><th>过滤器工厂</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>为原始请求添加Header</td><td>Header的名称及值</td></tr><tr><td>AddRequestParameter</td><td>为原始请求添加请求参数</td><td>参数名称及值</td></tr><tr><td>AddResponseHeader</td><td>为原始响应添加Header</td><td>Header的名称及值</td></tr><tr><td>DedupeResponseHeader</td><td>剔除响应头中重复的值</td><td>需要去重的Header名称及去重策略</td></tr><tr><td>Hystrix</td><td>为路由引入Hystrix的断路器保护</td><td>HystrixCommand的名称</td></tr><tr><td>FallbackHeaders</td><td>为fallbackUri的请求头中添加具体的异常信息</td><td>Header的名称</td></tr><tr><td>PrefixPath</td><td>为原始请求路径添加前缀</td><td>前缀路径</td></tr><tr><td>PreserveHostHeader</td><td>为请求添加一个preserveHostHeader=true的属性，路由过滤器会检查该属性以决定是否要发送原始的Host</td><td>无</td></tr><tr><td>RequestRateLimiter</td><td>用于对请求限流，限流算法为令牌桶</td><td>keyResolver、rateLimiter、statusCode、denyEmptyKey、emptyKeyStatus</td></tr><tr><td>RedirectTo</td><td>将原始请求重定向到指定的URL</td><td>http状态码及重定向的url</td></tr><tr><td>RemoveHopByHopHeadersFilter</td><td>为原始请求删除IETF组织规定的一系列Header</td><td>默认就会启用，可以通过配置指定仅删除哪些Header</td></tr><tr><td>RemoveRequestHeader</td><td>为原始请求删除某个Header</td><td>Header名称</td></tr><tr><td>RemoveResponseHeader</td><td>为原始响应删除某个Header</td><td>Header名称</td></tr><tr><td>RewritePath</td><td>重写原始的请求路径</td><td>原始路径正则表达式以及重写后路径的正则表达式</td></tr><tr><td>RewriteResponseHeader</td><td>重写原始响应中的某个Header</td><td>Header名称，值的正则表达式，重写后的值</td></tr><tr><td>SaveSession</td><td>在转发请求之前，强制执行WebSession::save操作</td><td>无</td></tr><tr><td>secureHeaders</td><td>为原始响应添加一系列起安全作用的响应头</td><td>无，支持修改这些安全响应头的值</td></tr><tr><td>SetPath</td><td>修改原始的请求路径</td><td>修改后的路径</td></tr><tr><td>SetResponseHeader</td><td>修改原始响应中某个Header的值</td><td>Header名称，修改后的值</td></tr><tr><td>SetStatus</td><td>修改原始响应的状态码</td><td>HTTP 状态码，可以是数字，也可以是字符串</td></tr><tr><td>HTTP 状态码，可以是数字，也可以是字符串</td><td>用于截断原始请求的路径</td><td>使用数字表示要截断的路径的数量</td></tr><tr><td>Retry</td><td>针对不同的响应进行重试</td><td>retries、statuses、methods、series</td></tr><tr><td>RequestSize</td><td>设置允许接收最大请求包的大小。如果请求包大小超过设置的值，则返回 413 Payload Too Large</td><td>请求包大小，单位为字节，默认值为5M</td></tr><tr><td>ModifyRequestBody</td><td>在转发请求之前修改原始请求体内容</td><td>修改后的请求体内容</td></tr><tr><td>ModifyResponseBody</td><td>修改原始响应体的内容</td><td>修改后的响应体内容</td></tr><tr><td>Default</td><td>为所有路由添加过滤器</td><td>过滤器工厂名称及值</td></tr></tbody></table><h4 id="内置全局过滤器"><a href="#内置全局过滤器" class="headerlink" title="内置全局过滤器"></a>内置全局过滤器</h4><p>route同级</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default-filters:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">AddResponseHeader=yld,itlils</span></span><br></pre></td></tr></table></figure><h4 id="自定义局部过滤器"><a href="#自定义局部过滤器" class="headerlink" title="自定义局部过滤器"></a>自定义局部过滤器</h4><h4 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h4><ul><li><p>定义类实现 GlobalFilter 和 Ordered接口</p></li><li><p>复写方法</p></li><li><p>完成逻辑处理</p></li></ul><p><strong>拦截IP地址</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        拿到请求和响应</span></span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        ServerHttpResponse response = exchange.getResponse();</span><br><span class="line"></span><br><span class="line">        InetSocketAddress remoteAddress = request.getRemoteAddress();</span><br><span class="line"><span class="comment">//        拿到ip地址</span></span><br><span class="line">        String hostAddress = remoteAddress.getAddress().getHostAddress();</span><br><span class="line">        System.out.println(hostAddress);</span><br><span class="line"><span class="comment">//        拿到主机名</span></span><br><span class="line">        String hostName = remoteAddress.getHostName();</span><br><span class="line">        System.out.println(hostName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        校验</span></span><br><span class="line">        <span class="keyword">if</span> (hostAddress.equals(<span class="string">&quot;192.168.31.179&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">//            返回状态码</span></span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line"><span class="comment">//            执行完成</span></span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Mono&lt;Void&gt; filter = chain.filter(exchange);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器执行先后，值越小，越先执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拦截URL</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        拿到请求和响应</span></span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        ServerHttpResponse response = exchange.getResponse();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取url</span></span><br><span class="line">        URI uri = request.getURI();</span><br><span class="line">        String path = uri.getPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        检验</span></span><br><span class="line">        <span class="keyword">if</span> (path.contains(<span class="string">&quot;goods/findById&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;危险操作&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        返回放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所有配置"><a href="#所有配置" class="headerlink" title="所有配置"></a>所有配置</h3><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务名</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway-server</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment"># 网关配置</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 路由配置：转发规则</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#集合。</span></span><br><span class="line">        <span class="comment"># id: 唯一标识。默认是一个UUID</span></span><br><span class="line">        <span class="comment"># uri: 转发路径</span></span><br><span class="line">        <span class="comment"># predicates: 条件,用于请求网关路径的匹配规则</span></span><br><span class="line">        <span class="comment"># filters：配置局部过滤器的</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">eureka-provider</span></span><br><span class="line">          <span class="comment"># 静态路由</span></span><br><span class="line"><span class="comment">#          uri: http://localhost:8080/</span></span><br><span class="line">          <span class="comment"># 动态路由</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://EUREKA-PROVIDER</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/goods/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddResponseHeader=java,</span> <span class="string">class</span></span><br><span class="line"><span class="comment">#            - AddRequestParameter=username,zhangsan</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">eureka-consumer</span></span><br><span class="line">          <span class="comment"># uri: http://localhost:9000</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://EUREKA-CONSUMER</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=dream,xiaobo</span></span><br><span class="line">          <span class="comment"># 微服务名称配置</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 设置为true 请求路径前可以添加微服务名称</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span> <span class="comment"># 允许为小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span></span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayApp.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正确的开始，微小的长进，然后持续，嘿，我是小博，带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%B5%B7%E6%82%A6%E5%B1%B1.5dp0ub8vcrg.webp&quot; alt=&quot;海悦山&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="spring cloud" scheme="https://codexiaobo.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud 一</title>
    <link href="https://codexiaobo.github.io/posts/243992453/"/>
    <id>https://codexiaobo.github.io/posts/243992453/</id>
    <published>2022-10-08T09:11:25.000Z</published>
    <updated>2022-10-08T09:12:34.853Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E4%B8%8A%E5%B2%B8.6zu383lcob00.webp" alt="上岸"></p><!--sleep--><span id="more"></span><h1 id="spring-cloud"><a href="#spring-cloud" class="headerlink" title="spring cloud"></a>spring cloud</h1><p>springcloud是一个生态，它是分布式微服务架构下的一站式解决方案。它基于springboot提供了一套微服务解决方案，包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件</p><p>springcloud将各家公司开发比较成熟，经得起实际考验的服务框架组合起来，通过Springboot的风格进行再封装，屏蔽掉了复杂的配置和实现原理，最终给开发者留下了一套简单易懂，易部署和维护的分布式系统开发工具包</p><p>Spring Cloud 版本命名方式采用了伦敦地铁站的名称</p><h2 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h2><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84.6gklvfl4hbk0.webp" alt="单体架构"><br>全部功能集中在一个项目内（All in one）</p><h3 id="垂直架构"><a href="#垂直架构" class="headerlink" title="垂直架构"></a>垂直架构</h3><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E5%9E%82%E7%9B%B4%E6%9E%B6%E6%9E%84.4bdk55jxbxo0.webp" alt="垂直架构"><br>按照业务进行切割，形成小的单体项目</p><h3 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h3><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84.bm6y4z1dffk.webp" alt="分布式架构"><br>将服务拆分，每一个service代表一个单独的功能模块</p><h3 id="SOA架构"><a href="#SOA架构" class="headerlink" title="SOA架构"></a>SOA架构</h3><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/SOA%E6%9E%B6%E6%9E%84.6o0tnatwiu00.webp" alt="SOA架构"><br>把业务逻辑抽象成可复用的服务，通过服务的编排实现业务的快速再生，目的：把原<br>先固有的业务功能转变为通用的业务服务，实现业务逻辑的快速复用</p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.5xkocw3oj9s0.webp" alt="微服务架构"><br>将系统服务层完全独立出来，抽取为一个一个的微服务</p><h2 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h2><h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><p>Eureka 是 Netflix 公司开源的一个服务注册与发现的组件 。</p><p>Eureka 包含两个组件：Eureka Server (注册中心) 和 Eureka Client (服务提供者、服务消费者)。</p><h3 id="Eureka-server"><a href="#Eureka-server" class="headerlink" title="Eureka-server"></a>Eureka-server</h3><ul><li>父工程pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR12<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>eureka-server</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="comment"># eureka 配置</span></span><br><span class="line"><span class="comment"># eureka 一共有4部分 配置</span></span><br><span class="line"><span class="comment"># 1. dashboard:eureka的web控制台配置</span></span><br><span class="line"><span class="comment"># 2. server:eureka的服务端配置</span></span><br><span class="line"><span class="comment"># 3. client:eureka的客户端配置</span></span><br><span class="line"><span class="comment"># 4. instance:eureka的实例配置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># 主机名</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka</span> <span class="comment"># eureka服务端地址，将来客户端使用该地址和eureka进行通信</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 是否将自己的路径 注册到eureka上。eureka server 不需要的，eureka provider client 需要</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 是否需要从eureka中抓取路径。eureka server 不需要的，eureka consumer client 需要</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否开启图形化页面监控</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/</span> <span class="comment"># 图形化监控路径</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 关闭自我保护机制</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">3000</span> <span class="comment"># 检查服务的时间间隔</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">eurekaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(eurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Eureka-client"><a href="#Eureka-client" class="headerlink" title="Eureka-client"></a>Eureka-client</h3><h4 id="eureka-provider"><a href="#eureka-provider" class="headerlink" title="eureka-provider"></a>eureka-provider</h4><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span> <span class="comment"># 服务端口号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 将当前实例的ip注册到eureka server 中。默认是false 注册主机名</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 设置当前实例的ip</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;eureka.instance.ip-address&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span> <span class="comment"># 设置web控制台显示的 实例id</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">3</span> <span class="comment"># 每隔3 秒发一次心跳包</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">9</span> <span class="comment"># 如果9秒没有发心跳包，服务器呀，你把我干掉吧~</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://eureka-server1:8761/eureka,http://eureka-server2:8762/eureka # eureka服务端地址，将来客户端使用该地址和eureka进行通信</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-provider</span> <span class="comment"># 设置当前应用的名称。将来会在eureka中Application显示。将来需要使用该名称来获取路径</span></span><br></pre></td></tr></table></figure><h4 id="eureka-consumer"><a href="#eureka-consumer" class="headerlink" title="eureka-consumer"></a>eureka-consumer</h4><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-consumer</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://eureka-server1:8761/eureka,http://eureka-server2:8762/eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka-provider:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.dream.xiaobo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">EUREKA-PROVIDER:</span> <span class="comment">#远程服务名</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#策略</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Ribbon的超时时间</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span> <span class="comment"># 连接超时时间 默认1s</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">10000</span> <span class="comment"># 逻辑处理的超时时间 默认1s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置当前的日志级别 debug，feign只支持记录debug级别的日志</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.dream.xiaobo:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启feign对hystrix支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//开启Eureka客户端</span></span><br><span class="line"><span class="comment">//@RibbonClient(name = &quot;eureka-provider&quot;,configuration = MyRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h4><ul><li>eureka-server1</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka-server1</span> <span class="comment"># 主机名</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka-server2:8762/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment"># 是否将自己的路径 注册到eureka上。eureka server 不需要的，eureka provider client 需要</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># 是否需要从eureka中抓取路径。eureka server 不需要的，eureka consumer client 需要</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server-ha</span></span><br></pre></td></tr></table></figure><ul><li>eureka-server2</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8762</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka-server2</span> <span class="comment"># 主机名</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka-server1:8761/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment"># 是否将自己的路径 注册到eureka上。eureka server 不需要的，eureka provider client 需要</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># 是否需要从eureka中抓取路径。eureka server 不需要的，eureka consumer client 需要</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server-ha</span></span><br></pre></td></tr></table></figure><h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><p>zookeeper是一个分布式协调工具，可以实现注册中心功能。dubbo,大数据组件hadoop,hive,kafka。</p><h4 id="Zookeeper服务启动"><a href="#Zookeeper服务启动" class="headerlink" title="Zookeeper服务启动"></a>Zookeeper服务启动</h4><ul><li><p>官网下载Zookeeper</p></li><li><p>修改配置文件，改成zoo.cfg</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial </span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between </span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just </span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=D:/Apache/apache-zookeeper-3.8.0-bin/data</span><br><span class="line">dataLogDir=D:/Apache/apache-zookeeper-3.8.0-bin/logs</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br><span class="line">#admin.serverPort=2181</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns=60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the </span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval=1</span><br><span class="line"></span><br><span class="line">## Metrics Providers</span><br><span class="line">#</span><br><span class="line"># https://prometheus.io Metrics Exporter</span><br><span class="line">#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider</span><br><span class="line">#metricsProvider.httpHost=0.0.0.0</span><br><span class="line">#metricsProvider.httpPort=7000</span><br><span class="line">#metricsProvider.exportJvmInfo=true</span><br></pre></td></tr></table></figure><ul><li><p>进入bin目录下cmd启动<code>zkServer.cmd</code></p></li><li><p>服务启动成功</p></li></ul><h4 id="Zookeeper使用"><a href="#Zookeeper使用" class="headerlink" title="Zookeeper使用"></a>Zookeeper使用</h4><p><strong>Zookeeper-provider</strong></p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springcloud 整合 zookeeper 组件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--zk发现--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zookeeper-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span> <span class="comment"># zk地址</span></span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goodsService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookProviderApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZookProviderApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Zookeeper-consumer</strong></p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springcloud 整合 zookeeper 组件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--zk发现--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8005</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zookeeper-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span> <span class="comment"># zk地址</span></span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    discoveryClient可以根据服务名从注册中心中拿到ip和端口号</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">addOrder</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;zookeeper-provider&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ServiceInstance instance = instances.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        String host = instance.getHost();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> port = instance.getPort();</span><br><span class="line"></span><br><span class="line">        String url = <span class="string">&quot;http://&quot;</span>+ host +<span class="string">&quot;:&quot;</span>+ port +<span class="string">&quot;/goods/findById/&quot;</span> + id;</span><br><span class="line"></span><br><span class="line">        Goods goods = restTemplate.getForObject(url, Goods.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>RestTemplateConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookConsumerApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZookConsumerApp.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h3><p>Consul 是由 HashiCorp 基于 GoLanguage 语言开发的，支持多数据中心，分布式高可用的服务发布和注册服务软件</p><h4 id="Consul服务启动"><a href="#Consul服务启动" class="headerlink" title="Consul服务启动"></a>Consul服务启动</h4><ul><li><p>官网下载</p></li><li><p>目录下输入<code>consul.exe agent -dev</code>启动</p></li></ul><h4 id="Consul使用"><a href="#Consul使用" class="headerlink" title="Consul使用"></a>Consul使用</h4><p><strong>consul-provider</strong></p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsulProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>consul-consumer</strong></p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8007</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><ul><li>app</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsulConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三个注册中心的异同"><a href="#三个注册中心的异同" class="headerlink" title="三个注册中心的异同"></a>三个注册中心的异同</h2><table><thead><tr><th>组件</th><th>语言</th><th>cap</th><th>健康检查</th><th>暴露接口</th><th>cloud集成</th></tr></thead><tbody><tr><td>eureka</td><td>java</td><td>ap</td><td>支持</td><td>http</td><td>已经集成</td></tr><tr><td>zookeeper</td><td>java</td><td>cp</td><td>支持</td><td>tcp</td><td>已经集成</td></tr><tr><td>consul</td><td>go</td><td>cp</td><td>支持</td><td>http</td><td>已经集成</td></tr></tbody></table><h3 id="cap"><a href="#cap" class="headerlink" title="cap"></a>cap</h3><p><code>c</code>: consustency 强一致性</p><p><code>a</code>: avalibility 可用性</p><p><code>p</code>: partition tolerance 分区容忍性</p><p><strong>正确的开始，微小的长进，然后持续，嘿，我是小博，带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E4%B8%8A%E5%B2%B8.6zu383lcob00.webp&quot; alt=&quot;上岸&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="spring cloud" scheme="https://codexiaobo.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="https://codexiaobo.github.io/posts/2759310851/"/>
    <id>https://codexiaobo.github.io/posts/2759310851/</id>
    <published>2022-09-16T12:11:06.000Z</published>
    <updated>2022-09-16T12:24:56.443Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/20210607/nginx.2u2huxexuf60.webp" alt="nginx"></p><!--sleep--><span id="more"></span><h1 id="niginx"><a href="#niginx" class="headerlink" title="niginx"></a>niginx</h1><p>Nginx (“engine x”) 是一款开源的，支持高性能、高并发的 Web 服务和代理服务软件，因为稳定性、丰富的模块库、灵活的配置和低系统资源的消耗而闻名</p><h2 id="nginx-提供的服务"><a href="#nginx-提供的服务" class="headerlink" title="nginx 提供的服务"></a>nginx 提供的服务</h2><ul><li><p>web 服务</p></li><li><p>负载均衡 （反向代理）</p></li><li><p>web cache（web 缓存）</p></li></ul><h2 id="nginx-优点"><a href="#nginx-优点" class="headerlink" title="nginx 优点"></a>nginx 优点</h2><ul><li><p>比其他服务器响应更快</p></li><li><p>高扩展，nginx的设计极具扩展性，他是由多个功能不同且耦合性极低的模块组成。</p></li><li><p>单机支持并发极高，理论上支持10万的并发连接，nginx支持的并发连接和内存相关</p></li><li><p>低内存消耗，10000个非活跃的http keep-alive链接在nginx中仅仅消耗2.5M的内存。</p></li><li><p>支持热部署，如不用停止服务就能重新加载配置文件。</p></li></ul><h2 id="nginx-应用场景"><a href="#nginx-应用场景" class="headerlink" title="nginx 应用场景"></a>nginx 应用场景</h2><ul><li><p>静态服务器。存放我们的静态资源。</p></li><li><p>反向代理，负载均衡。日pv2000W以下，都可以直接用nginx做代理。</p></li><li><p>缓存服务</p></li></ul><h2 id="Linux安装nginx"><a href="#Linux安装nginx" class="headerlink" title="Linux安装nginx"></a>Linux安装nginx</h2><h3 id="虚拟机安装Linux"><a href="#虚拟机安装Linux" class="headerlink" title="虚拟机安装Linux"></a>虚拟机安装Linux</h3><p>首先下载一个liunx镜像，然后使用虚拟机配置就可以了，系统安装完之后配置虚拟机的liunx网卡配置，使其可以进行上网，首先修改其配置文件，指令为<code>cd /etc/sysconfig/network-scripts/</code>然后修改其文件 指令 <code>vi ifcfg-ens33</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TC0YPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=<span class="keyword">static</span></span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=d713ec89-fbca-42ff-8d10-3768d86f12a1</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.117</span><span class="number">.200</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.117</span><span class="number">.2</span></span><br><span class="line">DNS1=<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br><span class="line">DNS2=<span class="number">114.114</span><span class="number">.115</span><span class="number">.115</span></span><br></pre></td></tr></table></figure><p>这里面修改的有BOOTPROTO=static 设置为<code>static</code>静态，<code>ONBOOT=yes</code>设置为<code>yes</code>然后后面是新增的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.117</span><span class="number">.200</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.117</span><span class="number">.2</span></span><br><span class="line">DNS1=<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br><span class="line">DNS2=<span class="number">114.114</span><span class="number">.115</span><span class="number">.115</span></span><br></pre></td></tr></table></figure><p>然后重启网卡 指令为：<code>systemctl restart network</code></p><p><code>ip addr</code> 查看网卡信息</p><p><code>ping www.baidu.com</code> 测试是否可以上网，检验是否连通</p><h3 id="linux安装nginx"><a href="#linux安装nginx" class="headerlink" title="linux安装nginx"></a>linux安装nginx</h3><p>安装wget工具 <code>yum install wget -y</code></p><p>安装vim工具 <code>yum install vim -y</code></p><p>安装netstat工具 <code>yum install net-tools -y</code></p><p>然后解压 <code>tar -zxvf nginx-1.22.0.tar.gz </code></p><p>然后对其进行配置 <code>./configure --prefix=/data/nginx --user=nginx --group=nginx  --with-http_ssl</code></p><p>创建存放nginx的目录 <code>mkdir /data/nginx -p</code></p><p>sbin/目录特殊进行设置 <code>useradd nginx -M -s /sbin/nologin</code></p><p>编译安装 <code>make &amp;&amp; make install</code></p><p>进入其sbin目录 <code>cd sbin/</code></p><p>运行<code>nginx ./nginx</code></p><p>查看其运行状态 <code>netstat -nplt</code>    或者   <code>ps -aux | grep nginx</code></p><p>查看端口号（额外命令） <code>netstat -ano | findstr 端口号</code>     或者    <code>netstat -anp | grep 端口号</code></p><p>暂时关闭所有防火墙 <code>systemctl stop firewalld</code></p><p>永久关闭防火墙 <code>systemctl disable firewalld</code></p><p>重启防火墙 <code>systemctl enable firewalld</code></p><p>查看防火墙状态 <code>systemctl status firewalld</code></p><p>此时就可以访问了 我这里面访问的地址是 <code>192.162.117.200</code> 这个是你linux的网卡地址</p><p><code>curl 地址 linux中地址访问</code></p><h4 id="nginx基本命令"><a href="#nginx基本命令" class="headerlink" title="nginx基本命令"></a>nginx基本命令</h4><p><code>./mginx</code> 启动</p><p><code>nginx -s stop</code> 立马关闭</p><p><code>nginx -s quit</code> 优雅关闭，处理完没处理好的请求后关闭</p><p><code>nginx -s reload</code> 重新加载配置文件</p><p><code>nginx -s reopening the log files</code> 用来打开日志文件，这样nginx会把新日志信息写入这个新的文件中</p><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>首先这里先介绍一下目录结构 </p><p><code>conf</code> nginx的主要配置在这里配置着</p><p><code>html</code> 项目存放在这里</p><p><code>logs</code> 日志存放目录</p><p><code>sbin</code> nginx启动项</p><p><code>......_temp</code> nginx运行时的一些临时文件</p><h3 id="基本配置文件"><a href="#基本配置文件" class="headerlink" title="基本配置文件"></a>基本配置文件</h3><ul><li>nginx.conf</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置划分"><a href="#配置划分" class="headerlink" title="配置划分"></a>配置划分</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main&#123; #（全局设置）</span><br><span class="line">    http&#123; #服务器配置</span><br><span class="line">        upstream&#123;&#125; #（负载均衡服务器设置）</span><br><span class="line">        server&#123; #（主机设置：主要用于指定主机和端口）</span><br><span class="line">            location&#123;&#125; #（URL匹配的设置）</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/nginx/nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.2xa6vww1r1q0.webp" alt="nginx配置文件结构"></p><h2 id="前后端实战演示"><a href="#前后端实战演示" class="headerlink" title="前后端实战演示"></a>前后端实战演示</h2><h3 id="前端搭建"><a href="#前端搭建" class="headerlink" title="前端搭建"></a>前端搭建</h3><p>前端使用vue_cli快速搭建</p><p>前端这里去掉#,在router里进行设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>前端只是简单的使用axios发送一个请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../assets/logo.png&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  The Serever Port Number is &#123;&#123; host &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">host</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> ip_addr = <span class="built_in">document</span>.location.hostname;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.get(<span class="string">&quot;http://&quot;</span> + ip_addr + <span class="string">&quot;/api/host&quot;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.host = res.data;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="后端搭建"><a href="#后端搭建" class="headerlink" title="后端搭建"></a>后端搭建</h3><p>快速搭建springboot项目，写一个Controller返回其端口号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dream.xiaobo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.context.WebServerInitializedEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NginxController</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">WebServerInitializedEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(WebServerInitializedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取到端口号</span></span><br><span class="line">        <span class="keyword">this</span>.port = event.getWebServer().getPort();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取本机的IP地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;host&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHost</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InetAddress address;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            address = InetAddress.getLocalHost();</span><br><span class="line">            <span class="keyword">return</span>  address.getHostAddress() + <span class="string">&quot;:&quot;</span> + port;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error：Network card information is not available！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="nginx做静态服务器"><a href="#nginx做静态服务器" class="headerlink" title="nginx做静态服务器"></a>nginx做静态服务器</h3><ul><li>nginx.conf</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="string">worker_processes</span> <span class="number">1</span><span class="string">;</span></span><br><span class="line"><span class="string">error_log</span>  <span class="string">/data/nginx/logs/error.log</span>  <span class="string">crit;</span></span><br><span class="line"><span class="string">pid</span>        <span class="string">/data/nginx/logs/nginx.pid;</span></span><br><span class="line"><span class="string">worker_rlimit_nofile</span> <span class="number">65535</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要是nginx和用户交互网络连接优化的配置内容</span></span><br><span class="line"><span class="string">events</span> &#123;</span><br><span class="line">    <span class="string">worker_connections</span>  <span class="number">1024</span><span class="string">;</span></span><br><span class="line"><span class="comment">#     worker_connections  65536;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">http</span> &#123;</span><br><span class="line">    <span class="string">include</span>       <span class="string">mime.types;</span></span><br><span class="line">    <span class="string">default_type</span>  <span class="string">application/octet-stream;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset  gb2312;</span></span><br><span class="line">    <span class="string">sendfile</span>        <span class="string">on;</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="string">keepalive_timeout</span>  <span class="number">65</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"><span class="comment">#   开启图片gzip压缩</span></span><br><span class="line">    <span class="string">gzip</span> <span class="string">on;</span></span><br><span class="line">    <span class="string">gzip_min_length</span> <span class="string">1k;</span></span><br><span class="line">    <span class="string">gzip_buffers</span>    <span class="number">4</span> <span class="string">16k;</span></span><br><span class="line">    <span class="string">gzip_http_version</span> <span class="number">1.1</span><span class="string">;</span></span><br><span class="line">    <span class="string">gzip_comp_level</span> <span class="number">5</span><span class="string">;</span></span><br><span class="line">    <span class="string">gzip_types</span> <span class="string">image/png;</span></span><br><span class="line">    <span class="string">gzip_vary</span> <span class="string">on;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">server</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">www.xbconding.com;</span></span><br><span class="line">        <span class="string">index</span> <span class="string">index.html</span> <span class="string">index.htm</span> <span class="string">index.php;</span></span><br><span class="line">        <span class="string">root</span> <span class="string">/data/www;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#       寻找路径 try_files依次寻找</span></span><br><span class="line">        <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">            <span class="string">root</span> <span class="string">/data/www/ui;</span></span><br><span class="line">            <span class="string">try_files</span> <span class="string">$uri</span> <span class="string">$uri/</span> <span class="string">$uri/index.html</span> <span class="string">$uri.html</span> <span class="string">/index.html;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#       @other 寻找下一个是@other的location</span></span><br><span class="line">        <span class="string">location</span> <span class="string">^~</span> <span class="string">/backend</span> &#123;</span><br><span class="line">        <span class="string">root</span> <span class="string">/data/www;</span></span><br><span class="line">        <span class="string">try_files</span> <span class="string">/a/b.html</span> <span class="string">$uri</span> <span class="string">$uri/index.html</span> <span class="string">$uri.html</span> <span class="string">@other;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#       proxy_pass 代理的服务器</span></span><br><span class="line">        <span class="string">location</span> <span class="string">@other</span> &#123;</span><br><span class="line">            <span class="string">proxy_pass</span> <span class="string">http://127.0.0.1:8888;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#       index 显示</span></span><br><span class="line">        <span class="string">location</span> <span class="string">^~</span> <span class="string">/image</span> &#123;</span><br><span class="line">            <span class="string">root</span> <span class="string">/data/www;</span></span><br><span class="line">            <span class="string">index</span> <span class="number">1.</span><span class="string">jpg;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#       跨域代理   rewrite重写uri</span></span><br><span class="line">        <span class="string">location</span> <span class="string">^~</span> <span class="string">/api/</span> &#123;</span><br><span class="line">            <span class="string">rewrite</span> <span class="string">^/api(.*)$</span> <span class="string">$1</span> <span class="string">break;</span></span><br><span class="line">            <span class="string">proxy_pass</span> <span class="string">http://127.0.0.1:8080;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="string">error_page</span>  <span class="number">404</span>              <span class="string">/404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="string">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  <span class="string">/50x.html;</span></span><br><span class="line">        <span class="string">location</span> <span class="string">=</span> <span class="string">/50x.html</span> &#123;</span><br><span class="line">            <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>listen 80;</code> 监听端口，默认80，小于1024的要以root启动</p><p><code> server_name</code> 用于设置虚拟主机服务名称</p><p><code>root /data/www</code> 定义服务器的默认网站根目录位置。</p><p><code>index</code> 定义路径下默认访问的文件名，一般和root一起出现</p><p><code>error_page</code> 重定向页面</p><h4 id="location-配置项"><a href="#location-配置项" class="headerlink" title="location 配置项"></a>location 配置项</h4><p>location通常用来匹配uri</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">location</span> [<span class="string">=|~|~*|^~</span>] <span class="string">/uri/</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>=</code> 表示匹配uri时必须做到完全匹配</p><p><code>~</code> 表示匹配URI时是字母大小写敏感的，可以使用正则表达式</p><p><code>~*</code> 表示匹配URI时是忽略字母大小敏感的，可以使用正则表达式</p><p><code>^~</code> 表示匹配uri时只需满足前缀匹配即可</p><p><code>/</code> 匹配所有的uri</p><p><code>@</code> 指定一个命名的location，一般用于内部重定义请求</p><p>匹配优先顺序</p><p><code>=</code> &gt; <code>^~</code> &gt; <code>~*</code> &gt; <code>/</code> 尽量将 = 放在前面</p><h3 id="反向代理解决跨域"><a href="#反向代理解决跨域" class="headerlink" title="反向代理解决跨域"></a>反向代理解决跨域</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">location</span> <span class="string">^~</span> <span class="string">/api/</span> &#123;</span><br><span class="line">    <span class="string">rewrite</span> <span class="string">^/api(.*)$</span> <span class="string">$1</span> <span class="string">break;</span></span><br><span class="line">    <span class="string">proxy_pass</span> <span class="string">http://127.0.0.1:8080;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">location</span> <span class="string">^~</span> <span class="string">/api/</span> &#123;</span><br><span class="line">    <span class="string">proxy_pass</span> <span class="string">http://127.0.0.1:8080/;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都可以解决，就是做个代理</p><p><code>rewrite break</code>：url重写后,直接使用当前资源,不再执行location里余下的语句,完成本次请求,地址栏url不变</p><p><code>rewrite last</code>：url重写后,马上发起一个新的请求,再次进入server块,重试location匹配,超过10次匹配不到报500错误,地址栏url不变</p><p><code>rewrite redirect</code>：返回302临时重定向,地址栏显示重定向后的url</p><ul><li>添加响应首部</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span><span class="string">;</span></span><br><span class="line"><span class="string">add_header</span> <span class="string">&#x27;Access-Control-Allow_Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span><span class="string">;</span></span><br><span class="line"><span class="string">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range&#x27;</span><span class="string">;</span></span><br><span class="line"><span class="string">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET,POST,OPTIONS,PUT,DELETE,PATCH&#x27;</span><span class="string">;</span></span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#     服务器做负载均衡</span></span><br><span class="line">    <span class="string">upstream</span> <span class="string">dreamServer</span> &#123;</span><br><span class="line">        <span class="string">ip_hash;</span></span><br><span class="line">        <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080;</span></span><br><span class="line">        <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8082;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#       跨域代理   rewrite重写uri</span></span><br><span class="line">        <span class="string">location</span> <span class="string">^~</span> <span class="string">/api/</span> &#123;</span><br><span class="line">            <span class="string">rewrite</span> <span class="string">^/api(.*)$</span> <span class="string">$1</span> <span class="string">break;</span></span><br><span class="line">            <span class="string">proxy_pass</span> <span class="string">http://dreamServer;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="负载均衡五中算法"><a href="#负载均衡五中算法" class="headerlink" title="负载均衡五中算法"></a>负载均衡五中算法</h4><ul><li>round robin 轮询 （默认）</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">upstream</span> <span class="string">dreamServer</span> &#123;</span><br><span class="line">        <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080;</span></span><br><span class="line">        <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8082;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>按时间顺序依次将请求分配到各个后台服务器中，挂掉的服务器自动从列表中剔除</p><ul><li>weight 轮询权重</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">upstream</span> <span class="string">dreamServer</span> &#123;</span><br><span class="line">        <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span> <span class="string">weight=20;</span></span><br><span class="line">        <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8082</span> <span class="string">weight=10;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>weight的值越大分配到的访问概率越高，主要用于后端每台服务器性能不均衡的情况下，或在主从的情况下设置不同的权值，达到合理有效的地利用主机资源</p><ul><li>ip_hash</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">upstream</span> <span class="string">dreamServer</span> &#123;</span><br><span class="line">        <span class="string">ip_hash;</span></span><br><span class="line">        <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080;</span></span><br><span class="line">        <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8082;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>每个请求按访问IP的哈希结果分配，使来自同一个IP的访客固定访问一台后端服务器，并且可以有效解决动态网页存在的session共享问题</p><ul><li>url_hash</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">upstream</span> <span class="string">dreamServer</span> &#123;</span><br><span class="line">        <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080;</span></span><br><span class="line">        <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8082;</span></span><br><span class="line">        <span class="string">hash</span> <span class="string">$request_uri;</span>  </span><br><span class="line">        <span class="string">hash_method</span> <span class="string">crc32;</span>    <span class="string">//使用hash算法</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>按访问的URL的哈希结果来分配请求，使每个URL定向到同一台后端服务器，可以进一步提高后端服务器缓存的效率。Nginx本身不支持url_hash，需要安装Nginx的hash软件包</p><ul><li>fair算法</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">upstream</span> <span class="string">dreamServer</span> &#123;</span><br><span class="line">        <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080;</span></span><br><span class="line">        <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8082;</span></span><br><span class="line">        <span class="string">fair;</span>  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以根据页面大小和加载时间长短智能地进行负载均衡，根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身不支持fair，要安装upstream_fair模块才能使用</p><h4 id="代理反向代理"><a href="#代理反向代理" class="headerlink" title="代理反向代理"></a>代理反向代理</h4><ul><li>代理<br><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/nginx/%E4%BB%A3%E7%90%86.4zg53174ul80.webp" alt="代理"></li></ul><p>代理是你知道目标服务器，你想要访问目标服务器，但是这个时候你是访问不到的，所以这个时候你要先访问代理服务器，通过代理服务器才可以访问到目标服务器</p><ul><li>反向代理<br><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/nginx/%E5%8F%8D%E4%BB%A3%E7%90%86.4hxocd9ygie0.webp" alt="反代理"></li></ul><p>反向代理是你想要访问目标服务器，但是你不知道目标服务器，所以这个时候需要一个反向代理服务器，因为我们知道反向代理服务器，所以我们要通过反向代理服务器才可以访问到目标服务器</p><h3 id="nginx监控"><a href="#nginx监控" class="headerlink" title="nginx监控"></a>nginx监控</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设定查看Nginx状态的地址</span></span><br><span class="line">        <span class="string">location</span> <span class="string">=</span> <span class="string">/status</span> &#123;</span><br><span class="line">          <span class="string">stub_status</span> <span class="string">on;</span>   <span class="comment">#表示开启stubStatus的工作状态统计功能。</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><p>访问地址<br>curl http://地址/status</p></li><li><p>状态码</p></li></ul><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>Active connections</td><td>当前所有处于打开状态的连接数</td></tr><tr><td>accepts</td><td>总共处理了多少个连接</td></tr><tr><td>handled</td><td>成功创建多少握手</td></tr><tr><td>requests</td><td>总共处理了多少个请求</td></tr><tr><td>Reading</td><td>表示正处于接收请求状态的连接数</td></tr><tr><td>Writing</td><td>表示请求已经接收完成，且正处于处理请求或发送响应的过程中的连接数</td></tr><tr><td>Waiting</td><td>开启keep-alive的情况下，这个值等于active - (reading + writing)，意思就是Nginx已处理完正在等候下一次请求指令的驻留连接</td></tr></tbody></table><h3 id="nginx控制访问"><a href="#nginx控制访问" class="headerlink" title="nginx控制访问"></a>nginx控制访问</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">location</span> <span class="string">/status</span> &#123;</span><br><span class="line">  <span class="string">stub_status</span> <span class="string">on;</span></span><br><span class="line">  <span class="string">access_log</span> <span class="string">off;</span></span><br><span class="line">  <span class="string">allow</span> <span class="string">*.*.*.*;</span></span><br><span class="line">  <span class="string">allow</span> <span class="string">*.*.*.*/0;</span></span><br><span class="line">  <span class="string">deny</span> <span class="string">all;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>允许或禁止某个ip或ip段访问，依次满足任何一个规则就停止往下匹配</p><h3 id="nginx目录资源"><a href="#nginx目录资源" class="headerlink" title="nginx目录资源"></a>nginx目录资源</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">location</span> <span class="string">^~</span> <span class="string">/file</span> &#123;</span><br><span class="line">    <span class="string">root</span>   <span class="string">/data/www;</span></span><br><span class="line">    <span class="string">autoindex</span> <span class="string">on;</span></span><br><span class="line">    <span class="string">autoindex_exact_size</span> <span class="string">off;</span></span><br><span class="line">    <span class="string">autoindex_localtime</span> <span class="string">on;</span></span><br><span class="line">    <span class="string">charset</span> <span class="string">utf-8</span>,<span class="string">gbk;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>autoindex on</code>;运行列出目录内容。</p><p><code>autoindex_exact_size off;</code> 默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB。</p><p><code>autoindex_localtime on;</code> 默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间。</p><p><code>charset utf-8,gbk;</code> 编码</p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/20210607/nginx.2u2huxexuf60.webp&quot; alt=&quot;nginx&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="nginx" scheme="https://codexiaobo.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>spring data jpa</title>
    <link href="https://codexiaobo.github.io/posts/1272942207/"/>
    <id>https://codexiaobo.github.io/posts/1272942207/</id>
    <published>2022-09-13T09:54:36.000Z</published>
    <updated>2022-09-13T09:55:24.822Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220911160204.6w8wklq6e5w0.webp" alt="微信截图_20220911160204"></p><!--sleep--><span id="more"></span><h1 id="spring-data-jpa"><a href="#spring-data-jpa" class="headerlink" title="spring data jpa"></a>spring data jpa</h1><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>ORM（Object-Relational Mapping） 表示对象关系映射,就是建立实体类和数据库表之间的关系,从而达到操作实体类就相当于操作数据库表的目的</p><h3 id="使用ORM的好处"><a href="#使用ORM的好处" class="headerlink" title="使用ORM的好处"></a>使用ORM的好处</h3><p>使用ORM则会大大减少重复性代码。对象关系映射，主要实现程序对象到关系数据库数据的映射</p><h3 id="常见的ORM对象"><a href="#常见的ORM对象" class="headerlink" title="常见的ORM对象"></a>常见的ORM对象</h3><ul><li><p>Mybatis（ibatis）</p></li><li><p>Hibernate </p></li><li><p>Jpa</p></li></ul><h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h2><p>全称是Java Persistence API,Java 持久化API,SUN公司推出的一套基于ORM的规范,内部是由一系列的接口和抽象类</p><p>JPA通过JDK 5.0注解描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中</p><p>最大限度的使用面向对象的模型设计应用,而不需要自行处理这些特性在关系数据库的持久化</p><h3 id="JPA与hibernate的关系"><a href="#JPA与hibernate的关系" class="headerlink" title="JPA与hibernate的关系"></a>JPA与hibernate的关系</h3><p>JPA规范本质上就是一种ORM规范，不是ORM框架,因为JPA并未提供ORM实现，它只是制订了一些规范，提供了一些编程的API接口，具体实现则由服务厂商来提供实现</p><p>JPA和Hibernate的关系就像JDBC和JDBC驱动的关系,使用JPA规范进行数据库操作，底层需要hibernate作为其实现类完成数据持久化工作</p><h2 id="JPA入门使用"><a href="#JPA入门使用" class="headerlink" title="JPA入门使用"></a>JPA入门使用</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>实体类（User）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Data</code> lombok的SetGet</p><p><code>@Entity</code> 实体类</p><p><code>@Table(name = &quot;t_user&quot;)</code> 映射哪个表</p><p><code>@Id</code> 声明这个属性的这个字段是主键</p><p><code>@Column(name = &quot;id&quot;)</code> 这个属性映射那个字段</p><p><code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code> 设置策略，策略如下</p><h4 id="GenerationType"><a href="#GenerationType" class="headerlink" title="GenerationType"></a>GenerationType</h4><p><code>GenerationType.IDENTITY</code>：底层数据库必须支持自动增长（类似于mysql的自增）</p><p><code>GenerationType.SEQUENCE</code>：底层数据库必须支持序列，（Oracle）</p><p><code>GenerationType.TABLE</code>：jpa提供的一种机制，通过一张数据表的形式帮助完成主键自增</p><p><code>GenerationType.AUTO</code>：程序自动选择合适的主键生成策略</p><ul><li>配置（yml）</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/jpa?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xiaobo</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br></pre></td></tr></table></figure><p><code>ddl-auto</code>: 自动表定义,实现自动在数据库中为我们创建一个表，表的结构会根据我们定义的实体类决定</p><p><code>create</code> 启动时删数据库中的表，然后创建，退出时不删除数据表</p><p><code>create-drop</code> 启动时删数据库中的表，然后创建，退出时删除数据表 如果表不存在报错</p><p><code>update</code> 如果启动时表格式不一致则更新表，原有数据保留</p><p><code>validate</code> 项目启动表结构进行校验 如果不一致则报错</p><h3 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h3><p>实现JpaRepository接口</p><ul><li>UserRepository</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>测试（crud）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">3</span>);</span><br><span class="line">        user.setUserName(<span class="string">&quot;wangyibo&quot;</span>);</span><br><span class="line">        user.setPassWord(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userRepository.save(user);</span><br><span class="line"></span><br><span class="line">        userQuery();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">userQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; all = userRepository.findAll();</span><br><span class="line"></span><br><span class="line">        System.out.println(all);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.deleteById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        userQuery();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userPageable</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.findAll(PageRequest.of(<span class="number">0</span>,<span class="number">3</span>)).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="方法命名规则"><a href="#方法命名规则" class="headerlink" title="方法命名规则"></a>方法命名规则</h2><p>方法命名规则查询就是根据方法的名字，就能创建查询，按照Spring Data JPA 定义的规则写方法名</p><p>查询方法以findBy开头，涉及条件查询时，条件的属性用条件关键字连接，条件属性首字母需大写。框架在进行方法名解析时，会先把方法名多余的前缀截取掉，然后对剩下部分进行解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名进行查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAllByUserName</span><span class="params">(String userName)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名和密码进行查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAllByUserNameAndPassWord</span><span class="params">(String username, String password)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名进行模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAllByUserNameLike</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名进行查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllByUsername</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.findAllByUserName(<span class="string">&quot;wangyibo&quot;</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名和密码进行查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllByUsernameAndPassword</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userRepository.findAllByUserNameAndPassWord(<span class="string">&quot;wangyibo&quot;</span>,<span class="string">&quot;xiaobo&quot;</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名进行模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllByUsernameLike</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.findAllByUserNameLike(<span class="string">&quot;x%&quot;</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="JPQL的方式"><a href="#JPQL的方式" class="headerlink" title="JPQL的方式"></a>JPQL的方式</h2><p>只需在方法上面标注<code>@Query</code>该注解，同时提供一个JPQL查询语句即可</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul><li><p>大多数情况下将 * 替换为别名</p></li><li><p>表名改为类名</p></li><li><p>字段名改为属性名</p></li><li><p>搭配注解@Query进行使用</p></li></ul><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><ul><li>userRepositry</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query(&quot;SELECT u FROM User u&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAllUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义根据用户名查询并传入参数，参数用占位符?+1234...替代</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT u FROM User u WHERE u.userName=?1&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAllUserByUserName</span><span class="params">(String userName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义指定字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT u.id FROM User u&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Integer&gt; <span class="title">findAllId</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllUser</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.findAllUser().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllUserByUserName</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.findAllUserByUserName(<span class="string">&quot;wangyibo&quot;</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllId</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.findAllId().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="原生方式"><a href="#原生方式" class="headerlink" title="原生方式"></a>原生方式</h2><p><strong>nativeQuery = true</strong></p><ul><li>userRepositry</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里用的是原生格式，不是用的JPQL，字段写的都是表的不是类的，并用 nativeQuery = true 开启原生SQL形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> passWord</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;UPDATE t_user u SET u.username=?1,u.password=?2 WHERE u.id=?3&quot;,nativeQuery = true)</span></span><br><span class="line">    <span class="function">Integer <span class="title">updateUserById</span><span class="params">(String userName,String passWord,Integer id)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.updateUserById(<span class="string">&quot;wangyibo&quot;</span>,<span class="string">&quot;wangyibo&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><ul><li>Account</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String  password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;detail_id&quot;)</span></span><br><span class="line">    <span class="meta">@OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)</span> <span class="comment">//设置关联操作为ALL</span></span><br><span class="line">    <span class="keyword">private</span> AccountDetail accountDetail;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@JoinColumn(name = &quot;detail_id&quot;)</code> 映射外键</p><p><code>@OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)</code>  声明是一对一关系，设置关联操作为ALL，以及懒加载</p><p><strong>关联方式</strong></p><p><code>ALL</code>：所有操作都进行关联操作</p><p><code>PERSIST</code>：插入操作时才进行关联操作</p><p><code>REMOVE</code>：删除操作时才进行关联操作</p><p><code>MERGE</code>：修改操作时才进行关联操作</p><p>常用的是ALL</p><ul><li>AccountDetail</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_account_detail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDetail</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><span class="comment">//还是设置一个自增主键</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;address&quot;)</span></span><br><span class="line">    String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;email&quot;)</span></span><br><span class="line">    String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;phone&quot;)</span></span><br><span class="line">    String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;real_name&quot;)</span></span><br><span class="line">    String realName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Account account=<span class="keyword">new</span> Account();</span><br><span class="line">        account.setUserName(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        account.setPassword(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        AccountDetail accountDetail=<span class="keyword">new</span> AccountDetail();</span><br><span class="line">        accountDetail.setPhone(<span class="string">&quot;15841018742&quot;</span>);</span><br><span class="line">        accountDetail.setRealName(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">        accountDetail.setAddress(<span class="string">&quot;china&quot;</span>);</span><br><span class="line">        accountDetail.setEmail(<span class="string">&quot;codexiaobo@163.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        account.setAccountDetail(accountDetail);</span><br><span class="line"></span><br><span class="line">        accountRepository.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertArticle</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Author author = <span class="keyword">new</span> Author();</span><br><span class="line">        author.setName(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        Author save = authorRepository.save(author);</span><br><span class="line"></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">&quot;文章1&quot;</span>);</span><br><span class="line">        article.setContent(<span class="string">&quot;文章1内容&quot;</span>);</span><br><span class="line">        article.setAuthor(save);</span><br><span class="line"></span><br><span class="line">        articleRepository.save(article);</span><br><span class="line"></span><br><span class="line">        Article article2 = <span class="keyword">new</span> Article();</span><br><span class="line">        article2.setTitle(<span class="string">&quot;文章2&quot;</span>);</span><br><span class="line">        article2.setContent(<span class="string">&quot;文章2内容&quot;</span>);</span><br><span class="line">        article2.setAuthor(save);</span><br><span class="line">        articleRepository.save(article2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">articleDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        articleRepository.deleteById(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><h3 id="OneToMany"><a href="#OneToMany" class="headerlink" title="@OneToMany"></a>@OneToMany</h3><p>建立一对多的关系映射</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p><code>targetEntityClass</code>：指定多的多方的类的字节码</p><p><code>mappedBy</code>：指定从表实体类中引用主表对象的名称。</p><p><code>cascade</code>：指定要使用的级联操作</p><p><code>fetch</code>：指定是否采用延迟加载</p><p><code>orphanRemoval</code>：是否使用孤儿删除</p><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>使用<code>@OneToMany</code>和<code>@ManyToOne</code>来标识一对多的双向关联。一端使用<code>@OneToMany</code>,多端使用<code>@ManyToOne</code></p><p>一对多的双向关系由多端来维护。就是说多端为关系维护端，负责关系的增删改查。一端则为关系被维护端，不能维护关系。</p><p>一端使用<code>@OneToMany</code>注释的<code>mappedBy=&quot;author&quot;</code>属性表明Author是关系被维护端。</p><p>多端使用<code>@ManyToOne</code>和<code>@JoinColumn</code>来注释属性,<code>@ManyToOne</code>表明是多端，<code>@JoinColumn</code>设置在表中的关联字段(外键)</p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><ul><li>author</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_author&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;author&quot;,cascade=CascadeType.ALL,fetch=FetchType.EAGER)</span></span><br><span class="line">    <span class="comment">//级联保存、更新、删除、刷新;延迟加载。当删除用户，会级联删除该用户的所有文章</span></span><br><span class="line">    <span class="comment">//拥有mappedBy注解的实体类为关系被维护端</span></span><br><span class="line">    <span class="comment">//mappedBy=&quot;author&quot;中的author是Article中的author属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Article&gt; articleList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>article</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_article&quot;)</span></span><br><span class="line"><span class="meta">@ToString(exclude = &#123;&quot;author&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span> <span class="comment">// 自增长策略</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, length = 50,name = &quot;title&quot;)</span> <span class="comment">// 映射为字段，值不能为空</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lob</span>  <span class="comment">// 大对象，映射 MySQL 的 Long Text 类型</span></span><br><span class="line">    <span class="meta">@Basic(fetch = FetchType.LAZY)</span> <span class="comment">// 懒加载</span></span><br><span class="line">    <span class="meta">@Column(nullable = false,name = &quot;content&quot;)</span> <span class="comment">// 映射为字段，值不能为空</span></span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//文章全文内容</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(cascade=&#123;CascadeType.MERGE,CascadeType.REFRESH&#125;,optional=false)</span><span class="comment">//可选属性optional=false,表示author不能为空。删除文章，不影响用户</span></span><br><span class="line">    <span class="meta">@JoinColumn(name=&quot;author_id&quot;)</span><span class="comment">//设置在article表中的关联字段(外键)</span></span><br><span class="line">    <span class="keyword">private</span> Author author;<span class="comment">//所属作者</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertArticle</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Author author = <span class="keyword">new</span> Author();</span><br><span class="line">        author.setName(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        Author save = authorRepository.save(author);</span><br><span class="line"></span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(<span class="string">&quot;文章1&quot;</span>);</span><br><span class="line">        article.setContent(<span class="string">&quot;文章1内容&quot;</span>);</span><br><span class="line">        article.setAuthor(save);</span><br><span class="line"></span><br><span class="line">        articleRepository.save(article);</span><br><span class="line"></span><br><span class="line">        Article article2 = <span class="keyword">new</span> Article();</span><br><span class="line">        article2.setTitle(<span class="string">&quot;文章2&quot;</span>);</span><br><span class="line">        article2.setContent(<span class="string">&quot;文章2内容&quot;</span>);</span><br><span class="line">        article2.setAuthor(save);</span><br><span class="line">        articleRepository.save(article2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">articleDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        articleRepository.deleteById(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryArticle</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Optional&lt;Author&gt; byId = authorRepository.findById(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (byId.isPresent()) &#123;</span><br><span class="line"></span><br><span class="line">            Author author = byId.get();</span><br><span class="line"></span><br><span class="line">            List&lt;Article&gt; articleList = author.getArticleList();</span><br><span class="line"></span><br><span class="line">            System.out.println(articleList);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p>多对多关系中一般不设置级联保存、级联删除、级联更新等操作</p><p>可以随意指定一方为关系维护端</p><p>多对多关系的绑定由关系维护端来完成,关系被维护端不能绑定关系</p><p>多对多关系的解除由关系维护端来完成,关系被维护端不能解除关系</p><p>如果维护端和被维护端已经绑定了关系，不能直接删除被维护端，需要维护端解除关系后，才能删除，但是可以直接删除维护端，删除时会先自动解除二者关系，然后再删除被维护端</p><h3 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h3><ul><li>UserMore</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_usermore&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">// 用户账号，用户登录时的唯一标识</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">// 登录时密码</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable(name = &quot;t_user_authority&quot;,joinColumns = @JoinColumn(name = &quot;user_id&quot;),</span></span><br><span class="line"><span class="meta">            inverseJoinColumns = @JoinColumn(name = &quot;authority_id&quot;))</span></span><br><span class="line">    <span class="comment">//1、关系维护端，负责多对多关系的绑定和解除</span></span><br><span class="line">    <span class="comment">//2、@JoinTable注解的name属性指定关联表的名字，joinColumns指定外键的名字，关联到关系维护端(User)</span></span><br><span class="line">    <span class="comment">//3、inverseJoinColumns指定外键的名字，要关联的关系被维护端(Authority)</span></span><br><span class="line">    <span class="comment">//4、其实可以不使用@JoinTable注解，默认生成的关联表名称为主表表名+下划线+从表表名，</span></span><br><span class="line">    <span class="comment">//即表名为user_authority</span></span><br><span class="line">    <span class="comment">//关联到主表的外键名：主表名+下划线+主表中的主键列名,即user_id</span></span><br><span class="line">    <span class="comment">//关联到从表的外键名：主表中用于关联的属性名+下划线+从表的主键列名,即authority_id</span></span><br><span class="line">    <span class="comment">//主表就是关系维护端对应的表，从表就是关系被维护端对应的表</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Authority&gt; authorityList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Authority</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_authority&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Authority</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//权限名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany(mappedBy = &quot;authorityList&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;UserMore&gt; userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAuthority</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Authority authority = <span class="keyword">new</span> Authority();</span><br><span class="line"></span><br><span class="line">        authority.setName(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        authorityRepository.save(authority);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUserMore</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        UserMore userMore = <span class="keyword">new</span> UserMore();</span><br><span class="line"></span><br><span class="line">        userMore.setUsername(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line">        userMore.setPassword(<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Authority&gt; authorityList = authorityRepository.findAll();</span><br><span class="line"></span><br><span class="line">        userMore.setAuthorityList(authorityList);</span><br><span class="line"></span><br><span class="line">        userMoreRepository.save(userMore);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserMore</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userMoreRepository.deleteById(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>正确的开始，微小的长进，然后持续，嘿，我是小博，带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220911160204.6w8wklq6e5w0.webp&quot; alt=&quot;微信截图_20220911160204&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="spring" scheme="https://codexiaobo.github.io/tags/spring/"/>
    
    <category term="spring data jpa" scheme="https://codexiaobo.github.io/tags/spring-data-jpa/"/>
    
  </entry>
  
  <entry>
    <title>spring boot</title>
    <link href="https://codexiaobo.github.io/posts/2213480131/"/>
    <id>https://codexiaobo.github.io/posts/2213480131/</id>
    <published>2022-09-11T08:21:53.000Z</published>
    <updated>2022-09-11T08:23:28.859Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220911161251.7h1tlbcre080.webp" alt="微信截图_20220911161251"></p><!--sleep--><span id="more"></span><h1 id="spring-boot复习"><a href="#spring-boot复习" class="headerlink" title="spring boot复习"></a>spring boot复习</h1><p>SpringBoot提供了一种快速使用Spring的方式，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率</p><p><a href="https://spring.io/">https://spring.io/</a> 最标准的文档</p><h2 id="spring-boot-功能"><a href="#spring-boot-功能" class="headerlink" title="spring boot 功能"></a>spring boot 功能</h2><p>spring Boot 并不是对 Spring 功能上的增强，而是提供了一种快速使用 Spring 的方式</p><h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h3><p>应用程序启动时的一个过程</p><h3 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h3><p>将具备某种功能的坐标打包到一起，并提供一些默认的功能，解决依赖太多 版本冲突</p><h3 id="辅助功能"><a href="#辅助功能" class="headerlink" title="辅助功能"></a>辅助功能</h3><p>提供了一些大型项目中常见的非功能性特性，如嵌入式服务器（tomcat）、安全、指标，健康检测、外部配置等</p><h2 id="Hello-Spring-Boot"><a href="#Hello-Spring-Boot" class="headerlink" title="Hello Spring Boot"></a>Hello Spring Boot</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--springboot工程需要继承的父工程--&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.8.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--web开发的起步依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>三种配置文件后缀名<code>properties</code> <code>yml</code> <code>yaml</code></p><ul><li>properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br></pre></td></tr></table></figure><ul><li>yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><p>AML是一种直观的能够被电脑识别的的数据数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><p>大小写敏感</p></li><li><p>数据值前边必须有空格，作为分隔符</p></li><li><p>使用缩进表示层级关系</p></li><li><p>缩进时不允许使用Tab键，只允许使用空格</p></li><li><p>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</p></li><li><p>‘#’ 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p></li></ul><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><h4 id="对象-map"><a href="#对象-map" class="headerlink" title="对象(map)"></a>对象(map)</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">employee2:</span> &#123;<span class="string">name:xiaobo</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">address:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">changtu</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tieling</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">jinjia</span></span><br></pre></td></tr></table></figure><h4 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">msg1:</span> <span class="string">&#x27;hello \n spring boot&#x27;</span> <span class="comment"># 单引忽略转义字符</span></span><br><span class="line"></span><br><span class="line"><span class="attr">msg2:</span> <span class="string">&quot;hello \n spring boot&quot;</span> <span class="comment"># 双引识别转义字符</span></span><br></pre></td></tr></table></figure><h4 id="参数引用"><a href="#参数引用" class="headerlink" title="参数引用"></a>参数引用</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">msg1:</span> <span class="string">&#x27;hello \n spring boot&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">msg2:</span> <span class="string">&quot;hello \n spring boot&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">employee:</span></span><br><span class="line">  <span class="attr">msg1:</span> <span class="string">$&#123;msg1&#125;</span></span><br><span class="line">  <span class="attr">msg2:</span> <span class="string">$&#123;msg2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>数据获取有三种方式</p><h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br></pre></td></tr></table></figure><p>在属性上使用@Value取yml文件里定义的属性值</p><h4 id="Evironment"><a href="#Evironment" class="headerlink" title="Evironment"></a>Evironment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">environment.getProperty(<span class="string">&quot;name1&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;employee&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="profile-运维"><a href="#profile-运维" class="headerlink" title="profile-运维"></a>profile-运维</h2><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.profiles.active=dev</span> <span class="comment">#激活所用的环境</span></span><br></pre></td></tr></table></figure><ul><li>application-dev.properties/yml </li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>开发环境</p><ul><li>application-test.properties/yml </li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure><p>测试环境</p><ul><li>application-pro.properties/yml </li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br></pre></td></tr></table></figure><p>生产环境</p><h3 id="激活方式"><a href="#激活方式" class="headerlink" title="激活方式"></a>激活方式</h3><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><p>再配置文件中配置：spring.profiles.active=dev</p><h4 id="虚拟机参数"><a href="#虚拟机参数" class="headerlink" title="虚拟机参数"></a>虚拟机参数</h4><p>在VM options 指定：-Dspring.profiles.active=pro</p><h4 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h4><p>–spring.profiles.active=dev</p><p>相当于上线时，运行jar包：java -jar xxx.jar –spring.profiles.active=dev</p><h3 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h3><p>file:./config/：当前项目下的/config目录下</p><p>file:./ ：当前项目的根目录</p><p>classpath:/config/：classpath的/config目录</p><p>classpath:/ ：classpath的根目录</p><h2 id="Spring-Boot-整合"><a href="#Spring-Boot-整合" class="headerlink" title="Spring Boot 整合"></a>Spring Boot 整合</h2><h3 id="spring-boot整合Junit"><a href="#spring-boot整合Junit" class="headerlink" title="spring boot整合Junit"></a>spring boot整合Junit</h3><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = Application.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; all = userMapper.findAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-boot整合Mybatis"><a href="#spring-boot整合Mybatis" class="headerlink" title="spring boot整合Mybatis"></a>spring boot整合Mybatis</h3><ul><li>pom.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;scope&gt;runtime&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>user</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xiaobo</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_springboot?characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br></pre></td></tr></table></figure><ul><li>userMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM t_user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xml方式"><a href="#xml方式" class="headerlink" title="xml方式"></a>xml方式</h4><ul><li>userMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>userMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dream.xiaobo.mapper.UserMapper2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.dream.xiaobo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM `t_user`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="SpringBoot整合redis"><a href="#SpringBoot整合redis" class="headerlink" title="SpringBoot整合redis"></a>SpringBoot整合redis</h3><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedisSet</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaobo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">&quot;age&quot;</span>).set(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedisGet</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="springboot的自动配置"><a href="#springboot的自动配置" class="headerlink" title="springboot的自动配置"></a>springboot的自动配置</h2><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><ul><li><p>按照一定的条件进行判断，满足条件给容器注册bean</p></li><li><p>通过实现Condition接口可以完成有条件的加载相应的Bean</p></li></ul><blockquote><p>@Coditional</p></blockquote><p>Conditional要配和Condition的实现类（ClassCondition）进行使用</p><ul><li>User</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>UserConfiguration</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(ClassCondition.class)</span></span><br><span class="line">    <span class="meta">@ConditionOnClass(&#123;&quot;redis.clients.jedis.Jedis&quot;,&quot;com.mysql.cj.jdbc.Driver&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(value = &quot;name&quot;,havingValue = &quot;xiaobo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ConditionOnClass为自定义注解</p><ul><li>ClassCondition</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过返回一个Boolean，确定是否生成一个Bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conditionContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotatedTypeMetadata</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//业务逻辑处理、返回true或者false决定某个bean对象是否生成</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个简单的需求模拟，如果有mysql则生成Bean对象，反之不生成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="comment">//            return true;</span></span><br><span class="line"><span class="comment">//        &#125; catch (ClassNotFoundException e) &#123;</span></span><br><span class="line"><span class="comment">//            return false;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        如果有Jedis,mysql,</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Map&lt;String, Object&gt; maps = annotatedTypeMetadata.getAnnotationAttributes(<span class="string">&quot;com.dream.xiaobo.annotation.ConditionOnClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(maps);</span><br><span class="line"></span><br><span class="line">            String[] values = (String[]) maps.get(<span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String value : values) &#123;</span><br><span class="line"></span><br><span class="line">                Class.forName(value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CoditionOnClass</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(ClassCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionOnClass &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里spring都默认提供了，上面只是介绍一下简单的原理</p></blockquote><p><code>ConditionalOnProperty</code>:判断配置文件中是否有对应属性和值才初始化Bean</p><p><code>ConditionalOnClass</code>:判断环境中是否有对应字节码文件才初始化Bean</p><p><code>ConditionalOnMissingBean</code>:判断环境中没有对应Bean才初始化Bean</p><blockquote><p>这里我们来思考一个问题，就是为什么我们依赖就直接可以拿到对应的对象呢？</p></blockquote><p>springboot中的autoconfig包下把常用的对象的配置类都封装好了，只要工程中，引入了相关起步依赖，这些对象在我们本项目的容器中就有了</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/springboot%E7%9A%84Auto%E5%8C%85%E7%BB%93%E6%9E%84.13muwaw9wuu8.webp" alt="springboot的Auto包结构"></p><h3 id="Enable注解原理"><a href="#Enable注解原理" class="headerlink" title="Enable注解原理"></a>Enable注解原理</h3><p>SpringBoot不能直接获取在其他工程中定义的Bean，所以我们想获取到就要进行处理，</p><p>Enable注解底层原理是使用@Import注解实现Bean的动态加载</p><ul><li>@SpringBootApplication</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure><p><code>@SpringBootConfiguration</code>: 自动配置相关</p><p><code>@EnableAutoConfiguration</code>: 特殊的@import</p><p><code>@ComponentScan</code>: 扫描本包及子包</p><blockquote><p>三种处理方案</p></blockquote><ul><li>@ComponentScan</li></ul><p>@ComponentScan 扫描范围：当前引导类所在包及其子包</p><p>这里我们可以对其指定</p><ul><li>对Import注解进行封装</li></ul><p>自定义一个注解，使用@Import加载类，所以我们只需要声明这个注解即可使用</p><ul><li>@Import</li></ul><p>加载类。这些类都会被Spring创建，并放入IOC容器</p><blockquote><p>四种@Import形式</p></blockquote><ul><li><p>导入Bean。注意bean名字是全限定名</p></li><li><p>导入配置类</p></li><li><p>导入 ImportSelector 实现类。一般用于加载配置文件中的类</p></li><li><p>导入 ImportBeanDefinitionRegistrar 实现类。</p></li></ul><p><strong>模块一</strong></p><p>在pom中引入模块二</p><ul><li>EnableApplication</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//扫包</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.aliww.config&quot;)</span></span><br><span class="line"><span class="comment">//对Import注解进行封装的自定义注解</span></span><br><span class="line"><span class="comment">//@EnableUser</span></span><br><span class="line"><span class="comment">//导入Bean。注意bean名字是全限定名。</span></span><br><span class="line"><span class="comment">//@Import(User.class)</span></span><br><span class="line"><span class="comment">//导入配置类</span></span><br><span class="line"><span class="comment">//@Import(UserConfiguration.class)</span></span><br><span class="line"><span class="comment">//导入 ImportSelector 实现类。一般用于加载配置文件中的类</span></span><br><span class="line"><span class="comment">//@Import(MyImportSelector.class )</span></span><br><span class="line"><span class="comment">//导入 ImportBeanDefinitionRegistrar 实现类。</span></span><br><span class="line"><span class="meta">@Import(MyImportBeanDefinitionRegistrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(EnableApplication.class, args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object user = context.getBean(&quot;user&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(user);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        User bean = context.getBean(User.class);</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String, User&gt; userMap = context.getBeansOfType(User.class);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Role&gt; roleMap = context.getBeansOfType(Role.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(userMap);</span><br><span class="line">        System.out.println(roleMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableAutoConfiguration</code>中使用的是第三种方式：@Import(AutoConfigurationImportSelector.class)</p><ul><li>MyImportSelector</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;com.aliww.entity.User&quot;</span>, <span class="string">&quot;com.aliww.entity.Role&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MyImportBeanDefinitionRegistrar</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata annotationMetadata, BeanDefinitionRegistry beanDefinitionRegistry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        AbstractBeanDefinition user = BeanDefinitionBuilder.rootBeanDefinition(User.class).getBeanDefinition();</span><br><span class="line">        AbstractBeanDefinition role = BeanDefinitionBuilder.rootBeanDefinition(Role.class).getBeanDefinition();</span><br><span class="line"></span><br><span class="line">        beanDefinitionRegistry.registerBeanDefinition(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        beanDefinitionRegistry.registerBeanDefinition(<span class="string">&quot;role&quot;</span>,role);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li></li></ul><p><strong>模块二</strong></p><ul><li>User</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Userconfiguration</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>EnableUser</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(UserConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableUser &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h2><p>就是我们怎么使用的第三方写好依赖，这里我们来模拟一下</p><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/%E6%A8%A1%E4%BB%BFMybatis%E8%87%AA%E5%AE%9A%E4%B9%89starter.1gqzr4splmao.webp" alt="模仿Mybatis自定义starter"></p><h3 id="模块一"><a href="#模块一" class="headerlink" title="模块一"></a>模块一</h3><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    业务依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 引入模块二 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redis-spring-boot-autoconfiguration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模块二"><a href="#模块二" class="headerlink" title="模块二"></a>模块二</h3><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>RedisBoot</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSpringBoot</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">&quot;152.136.22.223&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer port = <span class="number">6379</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHost</span><span class="params">(String host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(Integer port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>RedisSpringBootConfiguration</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisSpringBoot.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSpringBootConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jedis <span class="title">jedis</span><span class="params">(RedisSpringBoot redisSpringBoot)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jedis(redisSpringBoot.getHost(),redisSpringBoot.getPort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>META-INF/spring.factories</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">com.dream.xiaobo.config.RedisSpringBootConfiguration</span></span><br></pre></td></tr></table></figure><h3 id="模块三"><a href="#模块三" class="headerlink" title="模块三"></a>模块三</h3><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(EnableApplication.class, args);</span><br><span class="line">        Jedis jedis = (Jedis) context.getBean(<span class="string">&quot;jedis&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(jedis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>Java中的事件监听机制</p><p><code>事件：Event</code> 继承 java.util.EventObject 类的对象</p><p><code>事件源：Source</code> 任意对象Object</p><p><code>监听器：Listener</code> 实现 java.util.EventListener 接口 的对象</p><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p>SpringBoot 在项目启动时，会对几个监听器进行回调,可以实现这些监听器接口，在项目启动时完成一些操作</p><p><strong>ApplicationRunner</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationRunner run() 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当项目启动后执行，使用@Component放入容器即可使用</p><p><strong>CommandLineRunner</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CommandLineRunner run() 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当项目启动后执行，使用@Component放入容器即可使用</p><p><strong>ApplicationContextInitializer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationContextInitializer initialize() 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在resource文件夹下添加META-INF/spring.factories</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span> = <span class="string">com.dream.xiaobo.listener.MyApplicationContextInitializer</span></span><br></pre></td></tr></table></figure><p><strong>SpringApplicationRunListener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;starting...项目启动中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;environmentPrepared...环境对象开始准备&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;contextPrepared...上下文对象开始准备&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;contextLoaded...上下文对象开始加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;started...上下文对象加载完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;running...项目启动完成，开始运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;failed...项目启动失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在resource文件夹下添加META-INF/spring.factories</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.SpringApplicationRunListener</span> = <span class="string">com.dream.xiaobo.listener.MySpringApplicationRunListener</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot启动流程"><a href="#SpringBoot启动流程" class="headerlink" title="SpringBoot启动流程"></a>SpringBoot启动流程</h2><ul><li>SpringApplication源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@link</span> SpringApplication&#125; instance. The application context will load</span></span><br><span class="line"><span class="comment"> * beans from the specified primary sources (see &#123;<span class="doctag">@link</span> SpringApplication class-level&#125;</span></span><br><span class="line"><span class="comment"> * documentation for details. The instance can be customized before calling</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #run(String...)&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resourceLoader the resource loader to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> primarySources the primary bean sources</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #run(Class, String[])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setSources(Set)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line"><span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先SpringApplication应用开始启动，启动的时候new 一个SpringApplication()实例应用，开始进行初始化</p><ul><li>配置Source</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br></pre></td></tr></table></figure><ul><li>配置是否为Web环境</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br></pre></td></tr></table></figure><ul><li>创建初始化构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br></pre></td></tr></table></figure><ul><li>创建应用监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br></pre></td></tr></table></figure><ul><li>配置应用主方法所在类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br></pre></td></tr></table></figure><p>初始化完成之后将进行run</p><ul><li>run()源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Run the Spring application, creating and refreshing a new</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ApplicationContext&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the application arguments (usually passed from a Java main method)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a running &#123;<span class="doctag">@link</span> ApplicationContext&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line">context = createApplicationContext();</span><br><span class="line">exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class="line"><span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">refreshContext(context);</span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">stopWatch.stop();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">listeners.started(context);</span><br><span class="line">callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">listeners.running(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开启计时器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br></pre></td></tr></table></figure><p>打开计时器并启动起来  </p><ul><li>声明异常报告器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><ul><li>声明上下文</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><ul><li>Headless模式配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configureHeadlessProperty();</span><br></pre></td></tr></table></figure><ul><li>开启监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br></pre></td></tr></table></figure><ul><li>配置环境参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br></pre></td></tr></table></figure><ul><li>配置启动彩蛋</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Banner printedBanner = printBanner(environment);</span><br></pre></td></tr></table></figure><ul><li>创建上下文</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context = createApplicationContext();</span><br></pre></td></tr></table></figure><ul><li>异常报告器进行处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class="line"><span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br></pre></td></tr></table></figure><ul><li>准备上下文</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br></pre></td></tr></table></figure><ul><li>执行上下文</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refreshContext(context);</span><br></pre></td></tr></table></figure><ul><li>结束计时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">stopWatch.stop();</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/springboot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.3tp6px19fw40.webp" alt="springboot启动流程"></p><h2 id="SpringBoot监控-actuator"><a href="#SpringBoot监控-actuator" class="headerlink" title="SpringBoot监控-actuator"></a>SpringBoot监控-actuator</h2><p>运维人员可进行其监控</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>http://localhost:8080/actuator</code></p><p>可对其进行一些配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启健康检查详细信息</span></span><br><span class="line"><span class="meta">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br><span class="line"><span class="comment">#开启所有endpoint</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><h3 id="图形化界面监听"><a href="#图形化界面监听" class="headerlink" title="图形化界面监听"></a>图形化界面监听</h3><p>设置一个server模块，用于监听client，这里我们把启动的都当做一个client来看</p><p><strong>server模块</strong></p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableAdminServer</code> 使用第三方依赖</p><ul><li>application.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9000</span></span><br></pre></td></tr></table></figure><p><strong>client模块</strong></p><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行admin.server地址</span></span><br><span class="line"><span class="meta">spring.boot.admin.client.url</span>=<span class="string">http://localhost:9000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot项目部署"><a href="#SpringBoot项目部署" class="headerlink" title="SpringBoot项目部署"></a>SpringBoot项目部署</h2><p>就是将项目打包之后发布，springboot提供两种打包方式，一种是jar，一种是war，正常情况下都是使用jar形式</p><h3 id="jar形式"><a href="#jar形式" class="headerlink" title="jar形式"></a>jar形式</h3><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后直接用Maven的package即可打成jar包形式</p><h3 id="war形式"><a href="#war形式" class="headerlink" title="war形式"></a>war形式</h3><p>pom依赖中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootWarApplication</span> <span class="keyword">extends</span> <span class="title">SpringbootWarApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootWarApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(SpringbootWarApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承 SpringbootWarApplication重写configure方法</p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220911161251.7h1tlbcre080.webp&quot; alt=&quot;微信截图_20220911161251&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="springboot" scheme="https://codexiaobo.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>vue_ssm_project_test</title>
    <link href="https://codexiaobo.github.io/posts/3820866932/"/>
    <id>https://codexiaobo.github.io/posts/3820866932/</id>
    <published>2022-09-08T08:06:53.000Z</published>
    <updated>2022-09-08T08:08:05.688Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%AE%B6%E9%87%8C%E8%B9%B2.49uf3wjsg140.webp" alt="家里蹲"></p><!--sleep--><span id="more"></span><h1 id="小项目练习"><a href="#小项目练习" class="headerlink" title="小项目练习"></a>小项目练习</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>SSM + Vue 前后端分离的一个知识点整合，简单的对登录业务进行梳理</p><h3 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h3><p>Windows 10/Jdk 11/Tomcat 9.0/Maven 3.6/Mysql 8.0/Redis 7.0</p><h3 id="所用技术"><a href="#所用技术" class="headerlink" title="所用技术"></a>所用技术</h3><p>Spring/Spring Mvc/Mybatis/Vue/Element Plus/Axios</p><h3 id="主要模块"><a href="#主要模块" class="headerlink" title="主要模块"></a>主要模块</h3><p>登录的处理以及信息的CRUD</p><h3 id="项目意义"><a href="#项目意义" class="headerlink" title="项目意义"></a>项目意义</h3><p>个人所学知识点整合</p><h2 id="介绍一下项目搭建过程"><a href="#介绍一下项目搭建过程" class="headerlink" title="介绍一下项目搭建过程"></a>介绍一下项目搭建过程</h2><h3 id="前端搭建"><a href="#前端搭建" class="headerlink" title="前端搭建"></a>前端搭建</h3><ul><li>Vue Cli</li></ul><p>vue的一个脚手架 一键搭建前端项目框架</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;axios&quot;</span>: <span class="string">&quot;^0.27.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;core-js&quot;</span>: <span class="string">&quot;^3.8.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;element-plus&quot;</span>: <span class="string">&quot;^2.2.12&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue&quot;</span>: <span class="string">&quot;^3.2.13&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue-router&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vuex&quot;</span>: <span class="string">&quot;^4.0.2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>vue-router</li></ul><p>vue的路由 实现路由跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入用来创建路由和确定路由模式的两个方法</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">&#x27;@/util/storage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    createRouter,</span><br><span class="line">    createWebHistory</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义路由信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/login/LoginShow.vue&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/login/LoginShow.vue&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/main/IndexShow.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/system/user/userShow.vue&#x27;</span>),</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例并传递 `routes` 配置</span></span><br><span class="line"><span class="comment">// 我们在这里使用 html5 的路由模式，url中不带有#，部署项目的时候需要注意。</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    <span class="attr">history</span>: createWebHistory(),</span><br><span class="line">    routes,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 全局的路由守卫 会在每次路由跳转的时候执行 to：你要去哪个路由 from：你从哪个路由来</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(to)</span></span><br><span class="line">    <span class="comment">//1、如果去的是登陆页面，就放行</span></span><br><span class="line">    <span class="keyword">if</span> (to.name === <span class="string">&#x27;login&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!store.getters.isLogin) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!storage.getSessionObject(<span class="string">&quot;loginUser&quot;</span>)) &#123;</span><br><span class="line">            router.push(&#123; <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span> &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            store.dispatch(<span class="string">&quot;RECOVERY_USER&quot;</span>);</span><br><span class="line">            store.dispatch(<span class="string">&quot;GET_INFO&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3、没有登陆就跳转到登陆页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 讲路由实例导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><ul><li>vuex</li></ul><p>vuex存储前端数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; login, logout,getInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">&#x27;@/util/storage.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">nickname</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">token</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">roles</span>: [],</span><br><span class="line">        <span class="attr">permissions</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">isLogin</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> state.username !== <span class="string">&#x27;&#x27;</span> &amp;&amp; state.token !== <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">permissions</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.permissions;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">roles</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.roles;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">SAVE_USERNAME</span>(<span class="params">state, username</span>)</span> &#123;</span><br><span class="line">            state.username = username</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">SAVE_NICKNAME</span>(<span class="params">state, nickname</span>)</span> &#123;</span><br><span class="line">            state.nickname = nickname;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">SAVE_TOKEN</span>(<span class="params">state, token</span>)</span> &#123;</span><br><span class="line">            state.token = token;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">SAVE_ROLES</span>(<span class="params">state, roles</span>)</span> &#123;</span><br><span class="line">            state.roles = roles;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">SAVE_PERMISSIONS</span>(<span class="params">state, permissions</span>)</span> &#123;</span><br><span class="line">            state.permissions = permissions;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">LOGIN</span>(<span class="params">&#123; commit &#125;, user</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">                login(user).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    commit(<span class="string">&quot;SAVE_USERNAME&quot;</span>, res.data.ydlUser.userName);</span><br><span class="line">                    commit(<span class="string">&quot;SAVE_NICKNAME&quot;</span>, res.data.ydlUser.nickName);</span><br><span class="line">                    commit(<span class="string">&quot;SAVE_TOKEN&quot;</span>, res.data.token);</span><br><span class="line">                    storage.saveSessionObject(<span class="string">&quot;loginUser&quot;</span>, res.data);</span><br><span class="line">                    resolve(res);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">LOGOUT</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">                logout(user).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    commit(<span class="string">&quot;SAVE_USERNAME&quot;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                    commit(<span class="string">&quot;SAVE_NICKNAME&quot;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                    commit(<span class="string">&quot;SAVE_TOKEN&quot;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                    storage.remove(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">                    resolve(res);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">RECOVERY_USER</span>(<span class="params">&#123; commit &#125;</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> loginUser = storage.getSessionObject(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(loginUser)&#123;</span><br><span class="line">                commit(<span class="string">&quot;SAVE_USERNAME&quot;</span>, loginUser.ydlUser.userName);</span><br><span class="line">                commit(<span class="string">&quot;SAVE_NICKNAME&quot;</span>, loginUser.ydlUser.nickName);</span><br><span class="line">                commit(<span class="string">&quot;SAVE_TOKEN&quot;</span>, loginUser.token);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">GET_INFO</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                getInfo().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    commit(<span class="string">&quot;SAVE_ROLES&quot;</span>, res.data.roles);</span><br><span class="line">                    commit(<span class="string">&quot;SAVE_PERMISSIONS&quot;</span>, res.data.perms);</span><br><span class="line">                    resolve();</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> user</span><br></pre></td></tr></table></figure><ul><li>axios</li></ul><p>axios发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/api&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//登出请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/logout&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取用户信息列表请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">listUser</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/ydlUser&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取权限请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/ydlUser/getInfo&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id发送请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getById</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/ydlUser/&#x27;</span> + id,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除用户信息的请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteUser</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/ydlUser/&#x27;</span> + id,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加用户的请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/ydlUser&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新用户的请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/ydlUser&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/SSM+vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB_%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.7fulgt1a6xc0.webp" alt="SSM+vue前后端分离_前端项目结构"></p><h3 id="后端搭建"><a href="#后端搭建" class="headerlink" title="后端搭建"></a>后端搭建</h3><ul><li>使用Maven脚手架搭建</li></ul><p>搭建后端框架结构</p><ul><li>配置pom.xml</li></ul><p>项目所需依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dream.xiaobo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-pro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>system-admin<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ruoyi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javax.servlet.version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">javax.servlet.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.18.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-data-commons.version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">spring-data-commons.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aspectjweaver.version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">aspectjweaver.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.13.1<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">validation-api.version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">validation-api.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hibernate-validator</span>&gt;</span>6.0.9.Final<span class="tag">&lt;/<span class="name">hibernate-validator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logback-classic.version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">logback-classic.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql-connector-java.version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">mysql-connector-java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">redis.version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">redis.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-lang3.version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">commons-lang3.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--依赖管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--servlet-api--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;javax.servlet.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--spring-webmvc--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-data-commons.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aspectjweaver.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--jackson--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--数据校验--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;validation-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate-validator&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--logback日志--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback-classic.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 数据源--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据区驱动--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-java.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 整合spring和mybatis --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- redis连接驱动 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;redis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--            User-Agent，获得浏览器版本以及操作系统等信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>eu.bitwalker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>UserAgentUtils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-lang3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;repositories&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;repository&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;id&gt;public&lt;/id&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;name&gt;aliyun nexus&lt;/name&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;releases&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;enabled&gt;true&lt;/enabled&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/releases&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/repository&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/repositories&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置web.xml</li></ul><p>web项目所需的设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--容器初始化时，负责启动spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:application.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册DispatcherServlet，这是springmvc的核心，就是个servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:application.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载时先启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>xssFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.dream.xiaobo.filter.XssFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>xssFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置jdbc.properties数据库连接信息文件</li></ul><p>连接数据库所需的设置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">xiaobo</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/db_ssm-pro?characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">driverName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><ul><li>配置application.xml</li></ul><p>配置spring/spring mvc/mybatis所需的设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mybatis</span>=<span class="string">&quot;http://mybatis.org/schema/mybatis-spring&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">&quot;http://www.springframework.org/schema/task&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/task</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/task/spring-task.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://mybatis.org/schema/mybatis-spring</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://mybatis.org/schema/mybatis-spring.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dream.xiaobo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    开启注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 处理映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 处理器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器,本项目可以不使用视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/page/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customObjectMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.configuration.CustomObjectMapper&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--全局异常处理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean class=&quot;com.ydlclass.handler.GlobalExceptionResolver&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 自定义Jackson的objectMapper --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;customObjectMapper&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 自定义Jackson的objectMapper --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    拦截器配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                mvc:mapping：拦截的路径</span></span><br><span class="line"><span class="comment">                /**：是指所有文件夹及其子孙文件夹</span></span><br><span class="line"><span class="comment">                /*：是指所有文件夹，但不包含子孙文件夹</span></span><br><span class="line"><span class="comment">                /：Web项目的根目录</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mvc:exclude-mapping：不拦截的路径,不拦截登录路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--class属性就是我们自定义的拦截器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loginInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.interceptor.LoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;repeatSubmitInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dream.xiaobo.interceptor.RepeatSubmitInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理静态资源，前后分离项目不需要处理静态资源--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描mapper文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  让springmvc自带的注解生效  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis:scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dream.xiaobo.dao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整个整合就是在围绕sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/**/*.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configuration&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.session.Configuration&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.apache.ibatis.logging.stdout.StdOutImpl&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logPrefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ssm-pro_&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注入事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明式事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- the transactional semantics... --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- all methods starting with &#x27;get&#x27; are read-only --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;select*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- other methods use the default transaction settings (see below) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;insert*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- redis连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jedisPool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;redis.clients.jedis.JedisPool&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0.0.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6379&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxTotal&quot;</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    开启异步任务注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">executor</span>=<span class="string">&quot;ydl-logger&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">&quot;ydl-logger&quot;</span> <span class="attr">pool-size</span>=<span class="string">&quot;10-20&quot;</span> <span class="attr">keep-alive</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">rejection-policy</span>=<span class="string">&quot;ABORT&quot;</span> <span class="attr">queue-capacity</span>=<span class="string">&quot;500&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置logback.xml</li></ul><p>配置日志框架所需的设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志存放路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;D://logs&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;20&#125; - [%method,%line] - %msg%n&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 系统日志输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;file_info&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/sys-info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环政策：基于时间创建日志文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志文件名格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/sys-info.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志最大的历史 60天 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 过滤的级别 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;file_error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/sys-error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环政策：基于时间创建日志文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志文件名格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/sys-error.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志最大的历史 60天 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 过滤的级别 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 系统模块日志级别控制  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.dream.xiaobo&quot;</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring日志级别控制  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;file_info&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;file_error&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建CustomObjectMapper类来配置jackson的序列化和反序列化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomObjectMapper</span> <span class="keyword">extends</span> <span class="title">ObjectMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomObjectMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">//去掉默认的时间戳格式</span></span><br><span class="line">        configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//设置为东八区</span></span><br><span class="line">        setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;GMT+8&quot;</span>));</span><br><span class="line">        <span class="comment">//设置日期转换yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">        setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置输入:禁止把POJO中值为null的字段映射到json字符串中</span></span><br><span class="line">        configure(SerializationFeature.WRITE_NULL_MAP_VALUES, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 空值不序列化</span></span><br><span class="line">        setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        <span class="comment">// 反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line">        <span class="comment">// 序列化枚举是以toString()来输出，默认false，即默认以name()来输出</span></span><br><span class="line">        configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h4><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/SSM+vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB_%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.3i8brwspmho0.webp" alt="SSM+vue前后端分离_后端项目结构"></p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>简单的设计了六个表、并不复杂、主要学习登录的逻辑以及整合的过程</p><ul><li>table_user(用户表)</li></ul><p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/table_user.45c5fp0wnuw0.webp" alt="table_user"></p><ul><li><p>table_role(角色表)<br><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/table_role.4g1u1ilx8dm0.webp" alt="table_role"></p></li><li><p>table_user_role(用户角色关联表)<br><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/table_user_role.5it9l7tj9lg0.webp" alt="table_user_role"></p></li><li><p>table_menu(菜单表)<br><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/table_menu.u797nh2zl6o.webp" alt="table_menu"></p></li><li><p>table_role_menu(角色菜单关联表)<br><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/table_role_menu.4fki69rr33m0.webp" alt="table_role_menu"></p></li><li><p>table_log(日志表)<br><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/java/table_log.40tahtx6t2i0.webp" alt="table_log"></p></li></ul><h2 id="介绍一下项目处理问题的过程"><a href="#介绍一下项目处理问题的过程" class="headerlink" title="介绍一下项目处理问题的过程"></a>介绍一下项目处理问题的过程</h2><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>有两种解决方案，一种在后端解决，一种在前端解决</p><h4 id="后端解决方案"><a href="#后端解决方案" class="headerlink" title="后端解决方案"></a>后端解决方案</h4><p>这种方案是前端发送请求直接到达后端服务器，所以这个时候需要在后端进行处理，我们后端需要使用一个注解来进行处理<br><code>@CrossOrigin</code></p><p>配置文件进行全局处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/*&quot;</span> <span class="attr">allowed-methods</span>=<span class="string">&quot;*&quot;</span> <span class="attr">allowed-origins</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="前端解决方案"><a href="#前端解决方案" class="headerlink" title="前端解决方案"></a>前端解决方案</h4><p>这种方案是前端发送请求到前端服务器，前端服务器作为一个代理，然后在通过前端服务器发送请求到后端服务器，因为服务器之间不存在跨域问题</p><p>修改<code>vue.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&quot;http://localhost:8088&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置<code>axios.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">    <span class="comment">// axios中请求配置有baseURL选项，表示请求URL公共部分</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:80/&#x27;</span>,</span><br><span class="line">    <span class="comment">// 超时</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="comment">// 设置Content-Type，规定了前后端的交互使用json</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="登录的过程（只介绍主要逻辑）"><a href="#登录的过程（只介绍主要逻辑）" class="headerlink" title="登录的过程（只介绍主要逻辑）"></a>登录的过程（只介绍主要逻辑）</h2><h3 id="前端处理"><a href="#前端处理" class="headerlink" title="前端处理"></a>前端处理</h3><ul><li>loginShow.vue</li></ul><p>写出登录页面，data()进行数据双向绑定以及数据简单校验</p><p>method: 处理一些事件点击方法，方法进行相应的逻辑处理</p><p>doLogin() 前端的登录逻辑，校验user中的validate是否存在，如果存在在store中取出结果集，在对其结果集中status状态码进行校验，如果为200，则证明访问成功，成功的时候需要进行对应的权限认证相关获取，然后进行对应的路由跳转，否则访问失败</p><blockquote><p>这里介绍一下store</p></blockquote><ul><li>state</li></ul><p>这个就相当于Java中的定义变量</p><ul><li>mutations</li></ul><p>这个相当于Java中的set方法</p><ul><li>getters</li></ul><p>这个相当于Java中的get方法</p><ul><li>actions</li></ul><p>对外提供方法，并进行逻辑处理</p><ul><li>全局路由守护</li></ul><p>全局的路由守卫 会在每次路由跳转的时候执行 to：你要去哪个路由 from：你从哪个路由来</p><p>我们在这进行校验，如果去的是登陆页面，就放行，在此进行校验，校验用户名和token是否为空，如果不为空则继续进行校验，校验是否拿存储对象，进行相应的处理</p><h3 id="后端处理"><a href="#后端处理" class="headerlink" title="后端处理"></a>后端处理</h3><h4 id="登录处理"><a href="#登录处理" class="headerlink" title="登录处理"></a>登录处理</h4><p>后端首先进行controller处理，用@Validated，BindingResult进行校验处理，然后进行登录业务逻辑的续写</p><p>登录的service首先根据用户名进行查询拿到对象，将其对象进行校验，进行相应的自定义异常处理，在对其密码的正确性进行校验，也进行自定义异常的处理，生成Token，根据UUID进行生成，在进行request和User-Agent的获取，根据request拿到IP，通过IP拿到该用户的各个信息，在通过拿到的信息进行JSON序列化，拿到IP地址的省市区，通过创建者模式创建登录的用户信息，根据用户名生成一个key前缀token:username:查询token:userName:下的所有的key，然后再清除之前的Key保证最新的Token，并且唯一并且存储到Redis中，并返回对象</p><h4 id="登出处理"><a href="#登出处理" class="headerlink" title="登出处理"></a>登出处理</h4><p>获取到Request和头部信息中的AUTHORIZATION，根据token: * :获取到的token进行查询，如果查询到了在清空Redis中的数据</p><h4 id="登录拦截器"><a href="#登录拦截器" class="headerlink" title="登录拦截器"></a>登录拦截器</h4><p>根据AUTHORIZATION拿到信息校验是否存在，如果存在，在Redis中查看是否存在Token信息，如果存在给Redis中的Token信息续命，重新设置Token过期时间，然后放行，反之全部进行拦截</p><h3 id="RBAC管理"><a href="#RBAC管理" class="headerlink" title="RBAC管理"></a>RBAC管理</h3><h4 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h4><p>RBAC（Role-Based Access Control：基于角色的访问控制）就是，用户有哪些角色，该角色有哪些权限</p><h4 id="RBAC组成"><a href="#RBAC组成" class="headerlink" title="RBAC组成"></a>RBAC组成</h4><ul><li>用户</li></ul><p>每个用户都有唯一的UID识别，并被授予不同的角色</p><ul><li>角色</li></ul><p>不同角色具有不同的权限</p><ul><li>权限</li></ul><p>访问权限</p><p>RBAC通过定义角色的权限，并对用户授予某个角色从而来控制用户的权限，实现了用户和权限的逻辑分离</p><h4 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h4><p>关键SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    u.user_id user_id,</span><br><span class="line">    username,</span><br><span class="line">    nick_name,</span><br><span class="line">    r.role_id,</span><br><span class="line">    r.role_name,</span><br><span class="line">    r.role_tag,</span><br><span class="line">    m.menu_id,</span><br><span class="line">    m.menu_name,</span><br><span class="line">    m.perms</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">    table_user u</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `table_user_role` ur <span class="keyword">ON</span> u.user_id <span class="operator">=</span> ur.user_id</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table_role r <span class="keyword">ON</span> ur.role_id <span class="operator">=</span> r.role_id</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table_role_menu rm <span class="keyword">ON</span> r.role_id <span class="operator">=</span> rm.role_id</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table_menu m <span class="keyword">ON</span> rm.menu_id <span class="operator">=</span> m.menu_id</span><br><span class="line">    <span class="keyword">where</span> u.del_flag <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> r.del_flag <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> u.user_id <span class="operator">=</span> #&#123;userId&#125;</span><br></pre></td></tr></table></figure><blockquote><p>后端鉴权</p></blockquote><p>拿到登录的用户信息，根据id进行查询用户对应的权限，进行截取，拿到prems: [system:user:add,system:user:update]格式的信息，roleTags:[admin,hr,user]格式信息，然后以perm：token:prems，roles：token：prems格式以此存入到Redis中进行保存，然后自定义两个注解即可，然后通过AOP即可使用注解完成切入</p><h3 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h3><p>自定义一个日志注解，然后可以自定义哪个接口需要进行监听即可对其进行日志的输出，然后通过AOP进行处理，拿到相关的信息依次存入到数据库即可，但有一个要注意的点是日志不是主要的业务逻辑，所以大量的日志输出不太优化，会影响主业务，所以我们在此要进行异步处理，要开启spring的异步处理，需要在application.xml进行相应的配置，然后就是用到线程来处理，开启一个线程池，让主业务是一个线程，为日志开启另一个线程，来解决这个问题</p><h3 id="表单重复提交"><a href="#表单重复提交" class="headerlink" title="表单重复提交"></a>表单重复提交</h3><p>主要的表单是不允许重复提交的，所以要进行处理，这里自定义一个注解，然后设置一个拦截器拦截</p><h3 id="xss攻击"><a href="#xss攻击" class="headerlink" title="xss攻击"></a>xss攻击</h3><p>就是在表单里直接输入标签来进行脚本攻击，vue的本身做了防御机制，很多框架都做了这个防御机制</p><p>解决xss攻击的核心方法就是处理掉那些可能产生问题的标签，或者通过转义，或者将半角的尖括号转化为全角，在或者直接干掉一些特殊标签</p><p><strong>声明</strong></p><p>此项目只有登录业务和用户信息的CRUD</p><p>源码自取，公众号回复ssm_vue_project_test</p><p>自己学习整理，如有侵权，通知即删</p><p><strong>正确的开始 微小的长进 然后持续 嘿 我是小博 带你一起看我目之所及的世界……</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E5%AE%B6%E9%87%8C%E8%B9%B2.49uf3wjsg140.webp&quot; alt=&quot;家里蹲&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://codexiaobo.github.io/tags/java/"/>
    
    <category term="ssm" scheme="https://codexiaobo.github.io/tags/ssm/"/>
    
    <category term="vue" scheme="https://codexiaobo.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>redis 进阶二</title>
    <link href="https://codexiaobo.github.io/posts/4249312075/"/>
    <id>https://codexiaobo.github.io/posts/4249312075/</id>
    <published>2022-08-12T14:09:14.000Z</published>
    <updated>2022-08-12T14:17:00.845Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%88%B7%E5%A4%96.6yzrgcveg240.webp" alt="户外"></p><!--sleep--><span id="more"></span><h1 id="Redis进阶"><a href="#Redis进阶" class="headerlink" title="Redis进阶"></a><strong>Redis进阶</strong></h1><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p>redis中master宕机了，我们就要从其它slave中选取一个出来当master，这个时候就有Sentinel了，Sentinel中的哨兵开始执行职责了</p><h3 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h3><p>哨兵(sentinel) 是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有slave连接到新的master。</p><h4 id="哨兵的作用"><a href="#哨兵的作用" class="headerlink" title="哨兵的作用"></a>哨兵的作用</h4><ul><li>监控</li></ul><p>监控master和slave，不断的检查master和slave是否正常运行，master存活检测、master与slave运行情况检测</p><ul><li>通知（提醒）</li></ul><p>当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知</p><ul><li>自动故障转移</li></ul><p>断开master与slave连接，选取一个slave作为master，将其他slave连接新的master，并告知客户端新的服务器地址</p><ul><li>注意</li></ul><p>哨兵也是一台redis服务器，只是不提供数据相关服务，通常哨兵的数量配置为单数</p><h4 id="哨兵配置"><a href="#哨兵配置" class="headerlink" title="哨兵配置"></a>哨兵配置</h4><ul><li>设置哨兵监听的主服务器信息， sentinel_number表示参与投票的哨兵数量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor master_name  master_host master_port  sentinel_number</span><br></pre></td></tr></table></figure><ul><li>设置判定服务器宕机时长，该设置控制是否进行主从切换</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel down-after-milliseconds master_name million_seconds</span><br></pre></td></tr></table></figure><ul><li>设置故障切换的最大超时时长</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel failover-timeout master_name million_seconds</span><br></pre></td></tr></table></figure><ul><li>设置主从切换后，同时进行数据同步的slave数量，数值越大，要求网络资源越高，数值越小，同步时间越长</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel parallel-syncs master_name sync_slave_number</span><br></pre></td></tr></table></figure><p><strong>「sentinel.conf」</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">port 26379</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &quot;/var/run/redis-sentinel26379.pid&quot;</span><br><span class="line">logfile &quot;/export/server/sentinel-26379/log/log.log&quot;</span><br><span class="line">dir &quot;/export/server/sentinel- 26379/data&quot;</span><br><span class="line">sentinel monitor mymaster 0.0.0.0 6379 2</span><br><span class="line">sentinel resolve-hostnames no</span><br><span class="line">sentinel announce-hostnames no</span><br></pre></td></tr></table></figure><p><strong>「配置命令」</strong></p><ul><li>主服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/redis-server redis.conf</span><br></pre></td></tr></table></figure><ul><li>sentinel监听</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/redis-server redis.conf slaveof 主ip 主端口</span><br></pre></td></tr></table></figure><h3 id="java原生连接sentinel"><a href="#java原生连接sentinel" class="headerlink" title="java原生连接sentinel"></a>java原生连接sentinel</h3><ul><li>pom.xml</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.dream.xiaobo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;redis_operation&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.testng&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;testng&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;6.14.3&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.0&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                    &lt;!--    &lt;verbal&gt;true&lt;/verbal&gt;--&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public class RedisSentinelTest &#123;</span><br><span class="line"></span><br><span class="line">    private JedisSentinelPool jedisSentinelPool;</span><br><span class="line"></span><br><span class="line">    @BeforeTest</span><br><span class="line">    public void beforeTest()&#123;</span><br><span class="line"></span><br><span class="line">        //        配置对象</span><br><span class="line">        JedisPoolConfig config = new JedisPoolConfig();</span><br><span class="line"></span><br><span class="line">//        最大空闲连接</span><br><span class="line">        config.setMaxIdle(10);</span><br><span class="line">//        最小空闲连接</span><br><span class="line">        config.setMinIdle(5);</span><br><span class="line"></span><br><span class="line">//        连接时最大等待时间</span><br><span class="line">        config.setMaxWaitMillis(3000);</span><br><span class="line"></span><br><span class="line">//        最大连接数</span><br><span class="line">        config.setMaxTotal(100);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; sentinel = new HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        sentinel.add(&quot;152.136.22.223:26379&quot;);</span><br><span class="line">        sentinel.add(&quot;152.136.22.223:26380&quot;);</span><br><span class="line">        sentinel.add(&quot;152.136.22.223:26381&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        jedisSentinelPool = new JedisSentinelPool(&quot;mymaster&quot;,sentinel,config);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void keysTest()&#123;</span><br><span class="line">        Jedis jedis = jedisSentinelPool.getResource();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(&quot;*&quot;);</span><br><span class="line"></span><br><span class="line">        for (String key : keys) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @AfterTest</span><br><span class="line">    public void afterTest()&#123;</span><br><span class="line">        jedisSentinelPool.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring连接sentinel"><a href="#spring连接sentinel" class="headerlink" title="spring连接sentinel"></a>spring连接sentinel</h3><ul><li>application.yml</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    sentinel:</span><br><span class="line">      nodes: 0.0.0.0:26379,0.0.0.0::26380,0.0.0.0::26381</span><br><span class="line">      master: mymaster</span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">class RedisBootOperationApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(&quot;name&quot;,&quot;xiaobo&quot;);</span><br><span class="line"></span><br><span class="line">        Object name = redisTemplate.opsForValue().get(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        redisTemplate.boundValueOps(&quot;age&quot;).set(22);</span><br><span class="line"></span><br><span class="line">        Object age = redisTemplate.boundValueOps(&quot;age&quot;).get();</span><br><span class="line"></span><br><span class="line">        System.out.println(age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis集群-Cluster"><a href="#Redis集群-Cluster" class="headerlink" title="Redis集群 Cluster"></a>Redis集群 Cluster</h2><p>集群就是使用网络将若干台计算机联通起来，并提供统一的管理方式，使其对外呈现单机的服务效果</p><h3 id="集群的作用"><a href="#集群的作用" class="headerlink" title="集群的作用"></a>集群的作用</h3><ul><li>分散单台服务器的访问压力，实现负载均衡</li><li>分散单台服务器的存储压力，实现可扩展性</li><li>降低单台服务器宕机带来的业务灾难</li></ul><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><ul><li>配置服务器（3主3从）</li><li>建立通信（Meet）</li><li>分槽（Slot）</li><li>搭建主从（master-slave）</li></ul><p><strong>「最少3主」</strong></p><h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><ul><li>创建6台redis服务</li><li>修改配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">port 7001</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis_7001.pid</span><br><span class="line">logfile &quot;/export/server/redis-7001/log/redis.log&quot;</span><br><span class="line">dir /export/server/redis-7001/data/</span><br><span class="line">appendonly yes</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-7001.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><ul><li>使6台机器集群</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create 0.0.0.0:7001 0.0.0.0:7002 0.0.0.0:7003 0.0.0.0:7004 0.0.0.0:7005 0.0.0.0:7006 --cluster-replicas 1</span><br></pre></td></tr></table></figure><ul><li>每台机器分槽</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/redis-cli --cluster fix 0.0.0.0:端口号</span><br></pre></td></tr></table></figure><p>输入 yes</p><ul><li>连接cluster</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/redis-cli -c -h 0.0.0.0 -p 端口号</span><br></pre></td></tr></table></figure><h4 id="cluster集群配置"><a href="#cluster集群配置" class="headerlink" title="cluster集群配置"></a>cluster集群配置</h4><ul><li>是否启用cluster，加入cluster节点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster-enabled yes|no</span><br></pre></td></tr></table></figure><ul><li>cluster配置文件名，该文件属于自动生成，仅用于快速查找文件并查询文件内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster-config-file filename</span><br></pre></td></tr></table></figure><ul><li>节点服务响应超时时间，用于判定该节点是否下线或切换为从节点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster-node-timeout milliseconds</span><br></pre></td></tr></table></figure><ul><li>master连接的slave最小数量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster-migration-barrier min_slave_number</span><br></pre></td></tr></table></figure><h4 id="Cluster节点操作命令"><a href="#Cluster节点操作命令" class="headerlink" title="Cluster节点操作命令"></a>Cluster节点操作命令</h4><ul><li>查看集群节点信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster nodes</span><br></pre></td></tr></table></figure><ul><li>更改slave指向新的master</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster replicate master-id</span><br></pre></td></tr></table></figure><ul><li>发现一个新节点，新增master</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster meet ip:port</span><br></pre></td></tr></table></figure><ul><li>忽略一个没有solt的节点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster forget server_id</span><br></pre></td></tr></table></figure><ul><li>手动故障转移</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster failover</span><br></pre></td></tr></table></figure><h4 id="集群操作命令"><a href="#集群操作命令" class="headerlink" title="集群操作命令"></a>集群操作命令</h4><ul><li>创建集群</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli –-cluster create masterhost1:masterport1 masterhost2:masterport2  masterhost3:masterport3 [masterhostn:masterportn …] slavehost1:slaveport1  slavehost2:slaveport2 slavehost3:slaveport3 -–cluster-replicas n</span><br></pre></td></tr></table></figure><ul><li>添加master到当前集群中，连接时可以指定任意现有节点地址与端口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster add-node new-master-host:new-master-port now-host:now-port</span><br></pre></td></tr></table></figure><ul><li>添加slave</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster add-node new-slave-host:new-slave-port master-host:master-port --cluster-slave --cluster-master-id masterid</span><br></pre></td></tr></table></figure><ul><li>删除节点，如果删除的节点是master，必须保障其中没有槽slot</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster del-node del-slave-host:del-slave-port del-slave-id</span><br></pre></td></tr></table></figure><ul><li>重新分槽，分槽是从具有槽的master中划分一部分给其他master，过程中不创建新的槽</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster reshard new-master-host:new-master:port --cluster-from src-  master-id1, src-master-id2, src-master-idn --cluster-to target-master-id --  cluster-slots slots</span><br></pre></td></tr></table></figure><ul><li>重新分配槽，从具有槽的master中分配指定数量的槽到另一个master中，常用于清空指定master中的槽</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster reshard src-master-host:src-master-port --cluster-from src-  master-id --cluster-to target-master-id --cluster-slots slots --cluster-yes</span><br></pre></td></tr></table></figure><h3 id="java原生连接Cluster"><a href="#java原生连接Cluster" class="headerlink" title="java原生连接Cluster"></a>java原生连接Cluster</h3><ul><li>test</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public class RedisClusterTest &#123;</span><br><span class="line"></span><br><span class="line">    private JedisCluster jedisCluster;</span><br><span class="line"></span><br><span class="line">    @BeforeTest</span><br><span class="line">    public void beforeTest()&#123;</span><br><span class="line"></span><br><span class="line">        JedisPoolConfig config = new JedisPoolConfig();</span><br><span class="line"></span><br><span class="line">//        最大空闲连接</span><br><span class="line">        config.setMaxIdle(10);</span><br><span class="line">//        最小空闲连接</span><br><span class="line">        config.setMinIdle(5);</span><br><span class="line"></span><br><span class="line">//        连接时最大等待时间</span><br><span class="line">        config.setMaxWaitMillis(3000);</span><br><span class="line"></span><br><span class="line">//        最大连接数</span><br><span class="line">        config.setMaxTotal(100);</span><br><span class="line"></span><br><span class="line">        Set&lt;HostAndPort&gt; nodes = new HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        nodes.add(new HostAndPort(&quot;152.136.22.223&quot;,7001));</span><br><span class="line">        nodes.add(new HostAndPort(&quot;152.136.22.223&quot;,7002));</span><br><span class="line">        nodes.add(new HostAndPort(&quot;152.136.22.223&quot;,7003));</span><br><span class="line">        nodes.add(new HostAndPort(&quot;152.136.22.223&quot;,7004));</span><br><span class="line">        nodes.add(new HostAndPort(&quot;152.136.22.223&quot;,7005));</span><br><span class="line">        nodes.add(new HostAndPort(&quot;152.136.22.223&quot;,7006));</span><br><span class="line"></span><br><span class="line">        jedisCluster = new JedisCluster(nodes,config);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line"></span><br><span class="line">        jedisCluster.set(&quot;name&quot;,&quot;xiaobo&quot;);</span><br><span class="line"></span><br><span class="line">        String a = jedisCluster.get(&quot;a&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @AfterTest</span><br><span class="line">    public void afterTest()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            jedisCluster.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="springboot连接Cluster"><a href="#springboot连接Cluster" class="headerlink" title="springboot连接Cluster"></a>springboot连接Cluster</h3><ul><li>application.yml</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    pool:</span><br><span class="line">      max-idle: 100</span><br><span class="line">      min-idle: 1</span><br><span class="line">      max-active: 1000</span><br><span class="line">      max-wait: -1</span><br><span class="line">    cluster:</span><br><span class="line">      nodes:</span><br><span class="line">        - 0.0.0.0:7001</span><br><span class="line">        - 0.0.0.0:7002</span><br><span class="line">        - 0.0.0.0:7003</span><br><span class="line">        - 0.0.0.0:7004</span><br><span class="line">        - 0.0.0.0:7005</span><br><span class="line">        - 0.0.0.0:7006</span><br><span class="line">    database: 0</span><br><span class="line">    timeout: 15000</span><br><span class="line">    connect-timeout: 5000</span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">class RedisBootOperationApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(&quot;name&quot;,&quot;xiaobo&quot;);</span><br><span class="line"></span><br><span class="line">        Object name = redisTemplate.opsForValue().get(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        redisTemplate.boundValueOps(&quot;age&quot;).set(22);</span><br><span class="line"></span><br><span class="line">        Object age = redisTemplate.boundValueOps(&quot;age&quot;).get();</span><br><span class="line"></span><br><span class="line">        System.out.println(age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>「你知道的越多 你不知道的越多 嘿 我是小博 带你一起看我目之所及的世界……」</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/codexiaobo/image@main/%E6%A0%87%E9%A2%98%E5%9B%BE%E7%89%87/%E6%88%B7%E5%A4%96.6yzrgcveg240.webp&quot; alt=&quot;户外&quot;&gt;&lt;/p&gt;
&lt;!--sleep--&gt;</summary>
    
    
    
    
    <category term="redis" scheme="https://codexiaobo.github.io/tags/redis/"/>
    
  </entry>
  
</feed>
